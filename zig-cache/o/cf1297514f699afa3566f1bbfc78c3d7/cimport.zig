pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
const struct_unnamed_1 = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const max_align_t = struct_unnamed_1;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
const struct_unnamed_2 = extern struct {
    __val: [2]c_int,
};
pub const __fsid_t = struct_unnamed_2;
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*c_void;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = c_void;
pub const GLbyte = i8;
pub const GLshort = c_short;
pub const GLint = c_int;
pub const GLubyte = u8;
pub const GLushort = c_ushort;
pub const GLuint = c_uint;
pub const GLsizei = c_int;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glEnableClientState(cap: GLenum) void;
pub extern fn glDisableClientState(cap: GLenum) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPopAttrib() void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPopClientAttrib() void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glGetError() GLenum;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(near_val: GLclampd, far_val: GLclampd) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glPushMatrix() void;
pub extern fn glPopMatrix() void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glEndList() void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, type: GLenum, lists: ?*const GLvoid) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glNormalPointer(type: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glColorPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glIndexPointer(type: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glTexCoordPointer(size: GLint, type: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c]?*GLvoid) void;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: ?*const GLvoid) void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: [*c]const GLushort) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ?*GLvoid) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: ?*GLvoid) void;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, type: GLenum, buffer: [*c]GLfloat) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glInitNames() void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glPopName() void;
pub extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: ?*const GLvoid) void;
pub extern fn glTexImage3D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, table: ?*const GLvoid) void;
pub extern fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type: GLenum, data: ?*const GLvoid) void;
pub extern fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glGetColorTable(target: GLenum, format: GLenum, type: GLenum, table: ?*GLvoid) void;
pub extern fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glBlendEquation(mode: GLenum) void;
pub extern fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetHistogram(target: GLenum) void;
pub extern fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, values: ?*GLvoid) void;
pub extern fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetMinmax(target: GLenum) void;
pub extern fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: ?*GLvoid) void;
pub extern fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type: GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) void;
pub extern fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) void;
pub extern fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glGetConvolutionFilter(target: GLenum, format: GLenum, type: GLenum, image: ?*GLvoid) void;
pub extern fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, row: ?*const GLvoid, column: ?*const GLvoid) void;
pub extern fn glGetSeparableFilter(target: GLenum, format: GLenum, type: GLenum, row: ?*GLvoid, column: ?*GLvoid, span: ?*GLvoid) void;
pub extern fn glActiveTexture(texture: GLenum) void;
pub extern fn glClientActiveTexture(texture: GLenum) void;
pub extern fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: ?*GLvoid) void;
pub extern fn glMultiTexCoord1d(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1f(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1i(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1s(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glLoadTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glSampleCoverage(value: GLclampf, invert: GLboolean) void;
pub const PFNGLACTIVETEXTUREPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, ?*GLvoid) callconv(.C) void;
pub extern fn glActiveTextureARB(texture: GLenum) void;
pub extern fn glClientActiveTextureARB(texture: GLenum) void;
pub extern fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1iARB(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1sARB(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4svARB(target: GLenum, v: [*c]const GLshort) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const KHRONOS_FALSE = @enumToInt(enum_unnamed_3.KHRONOS_FALSE);
pub const KHRONOS_TRUE = @enumToInt(enum_unnamed_3.KHRONOS_TRUE);
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = @enumToInt(enum_unnamed_3.KHRONOS_BOOLEAN_ENUM_FORCE_SIZE);
const enum_unnamed_3 = extern enum(c_int) {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647,
    _,
};
pub const khronos_boolean_enum_t = enum_unnamed_3;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFOGCOORDFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDDPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLWINDOWPOS2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?fn (GLenum) callconv(.C) void;
pub const GLsizeiptr = khronos_ssize_t;
pub const GLintptr = khronos_intptr_t;
pub const PFNGLGENQUERIESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISQUERYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINQUERYPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBUFFERDATAPROC = ?fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLMAPBUFFERPROC = ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub const PFNGLUNMAPBUFFERPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const GLchar = u8;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLATTACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLDELETEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMFVPROC = ?fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLISPROGRAMPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLINKPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const GLhalf = khronos_uint16_t;
pub const PFNGLCOLORMASKIPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDIPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLCLAMPCOLORPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?fn () callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLUNIFORM1UIPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLGETSTRINGIPROC = ?fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLISRENDERBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDRENDERBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDFRAMEBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLMAPBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETUNIFORMINDICESPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLuint64 = khronos_uint64_t;
pub const GLint64 = khronos_int64_t;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLISSYNCPROC = ?fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLDELETESYNCPROC = ?fn (GLsync) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VPROC = ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETSYNCIVPROC = ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGER64I_VPROC = ?fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGENSAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSAMPLERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDSAMPLERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?fn () callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?fn (GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const GLDEBUGPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?fn (GLenum, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?fn (GLDEBUGPROC, ?*const c_void) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLPUSHDEBUGGROUPPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?fn () callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?fn (?*const c_void, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEPROC = ?fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDTEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLCLIPCONTROLPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATETEXTURESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEQUERIESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNMAPDVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNMINMAXPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?fn () callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const GLuint64EXT = khronos_uint64_t;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const struct__cl_context = opaque {};
pub const struct__cl_event = opaque {};
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCLAMPCOLORARBPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const GLDEBUGPROCARB = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?fn (GLDEBUGPROCARB, ?*const c_void) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLDRAWBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLBINDPROGRAMARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLISPROGRAMARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const GLhalfARB = khronos_uint16_t;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISQUERYARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINQUERYARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETNTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPDVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNMINMAXARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?fn () callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?fn (GLfloat) callconv(.C) void;
pub const GLhandleARB = c_uint;
pub const GLcharARB = u8;
pub const PFNGLDELETEOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLGETHANDLEARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLDETACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?fn () callconv(.C) GLhandleARB;
pub const PFNGLATTACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINFOLOGARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLISNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?fn (GLint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?fn (GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?fn (GLint) callconv(.C) void;
pub const GLsizeiptrARB = khronos_ssize_t;
pub const GLintptrARB = khronos_intptr_t;
pub const PFNGLBINDBUFFERARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISBUFFERARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBUFFERDATAARBPROC = ?fn (GLenum, GLsizeiptrARB, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const c_void) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*c_void) callconv(.C) void;
pub const PFNGLMAPBUFFERARBPROC = ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub const PFNGLUNMAPBUFFERARBPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLWINDOWPOS2DARBPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?fn () callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?fn (GLenum, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BOESPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const GLfixed = khronos_int32_t;
pub const PFNGLALPHAFUNCXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCLEARCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLFOGXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRUSTUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFIXEDVOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLLOADMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLORTHOXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLROTATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCALEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTRANSLATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLACCUMXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLBITMAPXOESPROC = ?fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBLENDCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARACCUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMAPXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLGETPIXELMAPXVPROC = ?fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLINDEXXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLINDEXXVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMAP1XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAP2XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID1XOESPROC = ?fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID2XOESPROC = ?fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPIXELMAPXPROC = ?fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPIXELSTOREXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELZOOMXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRECTXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRECTXVOESPROC = ?fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub const PFNGLCLEARDEPTHFOESPROC = ?fn (GLclampf) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLORTHOFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?fn (GLuint) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?fn (GLDEBUGPROCAMD, ?*c_void) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const GLint64EXT = khronos_int64_t;
pub const PFNGLUNIFORM1I64NVPROC = ?fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENNAMESAMDPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISNAMEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?fn (GLuint, GLuint, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSETFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLISFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFINISHFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLTESTOBJECTAPPLEPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLPASSTEXCOORDATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) ?*c_void;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?fn (GLsizei, ?*const c_void, GLenum) callconv(.C) GLuint;
pub const PFNGLISOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?fn (GLuint, GLuint, GLsizei, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const GLeglImageOES = ?*c_void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLBLENDCOLOREXTPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) callconv(.C) void;
pub const PFNGLTANGENT3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTANGENT3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTANGENT3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTANGENT3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLBINORMAL3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const GLeglClientBufferEXT = ?*c_void;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLISRENDERBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLUNIFORM1UIEXTPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?fn (GLuint, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?fn (GLsizei, GLuint) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDTEXTUREEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTEXTUREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLGETPOINTERVEXTPROC = ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLSETINVARIANTEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?fn (GLuint, GLenum, GLuint, ?*const c_void) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPARAMETEREXTPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?fn () callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?fn () callconv(.C) void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*c_void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?fn (GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?fn () callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLCREATEPROGRESSFENCENVXPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLBLENDPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCREATESTATESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSTATENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSTATECAPTURENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETSTAGEINDEXNVPROC = ?fn (GLenum) callconv(.C) GLushort;
pub const PFNGLDRAWCOMMANDSNVPROC = ?fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?fn (GLuint, GLuint, [*c]?*const c_void, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const GLVULKANPROCNV = ?fn () callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const c_void) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*c_void) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETFENCEIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSETFENCENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const GLhalfNV = c_ushort;
pub const PFNGLVERTEX2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?fn (GLenum, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?fn (GLuint, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?fn () callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLDELETEPATHSNVPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLISPATHNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPATHCOMMANDSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?fn (GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?fn (GLuint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHRANGENVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFNVPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLGETPATHLENGTHNVPROC = ?fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLPOINTALONGPATHNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPATHCOLORGENNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHTEXGENNVPROC = ?fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHFOGGENNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?fn () callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLQUERYRESOURCENVPROC = ?fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?fn () callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const GLvdpauSurfaceNV = GLintptr;
pub const PFNGLVDPAUINITNVPROC = ?fn (?*const c_void, ?*const c_void) callconv(.C) void;
pub const PFNGLVDPAUFININVPROC = ?fn () callconv(.C) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUISSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?fn () callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLINDEXFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?fn (GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDPROGRAMNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLISPROGRAMNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLOADPROGRAMNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLHINTPGIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLPOLLASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFLUSHRASTERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLLIGHTENVISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?fn () callconv(.C) GLint;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?fn ([*c]GLint) callconv(.C) GLint;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?fn () callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?fn (GLenum, GLsizei, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern fn glBlendEquationSeparateATI(modeRGB: GLenum, modeA: GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEATIPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const GLFWglproc = ?fn () callconv(.C) void;
pub const GLFWvkproc = ?fn () callconv(.C) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWerrorfun = ?fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int,
    height: c_int,
    redBits: c_int,
    greenBits: c_int,
    blueBits: c_int,
    refreshRate: c_int,
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort,
    green: [*c]c_ushort,
    blue: [*c]c_ushort,
    size: c_uint,
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int,
    height: c_int,
    pixels: [*c]u8,
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8,
    axes: [6]f32,
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*c_void) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*c_void;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*c_void) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*c_void;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*c_void) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*c_void;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub extern fn cairo_version() c_int;
pub extern fn cairo_version_string() [*c]const u8;
pub const cairo_bool_t = c_int;
pub const struct__cairo = opaque {};
pub const cairo_t = struct__cairo;
pub const struct__cairo_surface = opaque {};
pub const cairo_surface_t = struct__cairo_surface;
pub const struct__cairo_device = opaque {};
pub const cairo_device_t = struct__cairo_device;
pub const struct__cairo_matrix = extern struct {
    xx: f64,
    yx: f64,
    xy: f64,
    yy: f64,
    x0: f64,
    y0: f64,
};
pub const cairo_matrix_t = struct__cairo_matrix;
pub const struct__cairo_pattern = opaque {};
pub const cairo_pattern_t = struct__cairo_pattern;
pub const cairo_destroy_func_t = ?fn (?*c_void) callconv(.C) void;
pub const struct__cairo_user_data_key = extern struct {
    unused: c_int,
};
pub const cairo_user_data_key_t = struct__cairo_user_data_key;
pub const CAIRO_STATUS_SUCCESS = @enumToInt(enum__cairo_status.CAIRO_STATUS_SUCCESS);
pub const CAIRO_STATUS_NO_MEMORY = @enumToInt(enum__cairo_status.CAIRO_STATUS_NO_MEMORY);
pub const CAIRO_STATUS_INVALID_RESTORE = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_RESTORE);
pub const CAIRO_STATUS_INVALID_POP_GROUP = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_POP_GROUP);
pub const CAIRO_STATUS_NO_CURRENT_POINT = @enumToInt(enum__cairo_status.CAIRO_STATUS_NO_CURRENT_POINT);
pub const CAIRO_STATUS_INVALID_MATRIX = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_MATRIX);
pub const CAIRO_STATUS_INVALID_STATUS = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_STATUS);
pub const CAIRO_STATUS_NULL_POINTER = @enumToInt(enum__cairo_status.CAIRO_STATUS_NULL_POINTER);
pub const CAIRO_STATUS_INVALID_STRING = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_STRING);
pub const CAIRO_STATUS_INVALID_PATH_DATA = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_PATH_DATA);
pub const CAIRO_STATUS_READ_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_READ_ERROR);
pub const CAIRO_STATUS_WRITE_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_WRITE_ERROR);
pub const CAIRO_STATUS_SURFACE_FINISHED = @enumToInt(enum__cairo_status.CAIRO_STATUS_SURFACE_FINISHED);
pub const CAIRO_STATUS_SURFACE_TYPE_MISMATCH = @enumToInt(enum__cairo_status.CAIRO_STATUS_SURFACE_TYPE_MISMATCH);
pub const CAIRO_STATUS_PATTERN_TYPE_MISMATCH = @enumToInt(enum__cairo_status.CAIRO_STATUS_PATTERN_TYPE_MISMATCH);
pub const CAIRO_STATUS_INVALID_CONTENT = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_CONTENT);
pub const CAIRO_STATUS_INVALID_FORMAT = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_FORMAT);
pub const CAIRO_STATUS_INVALID_VISUAL = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_VISUAL);
pub const CAIRO_STATUS_FILE_NOT_FOUND = @enumToInt(enum__cairo_status.CAIRO_STATUS_FILE_NOT_FOUND);
pub const CAIRO_STATUS_INVALID_DASH = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_DASH);
pub const CAIRO_STATUS_INVALID_DSC_COMMENT = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_DSC_COMMENT);
pub const CAIRO_STATUS_INVALID_INDEX = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_INDEX);
pub const CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = @enumToInt(enum__cairo_status.CAIRO_STATUS_CLIP_NOT_REPRESENTABLE);
pub const CAIRO_STATUS_TEMP_FILE_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_TEMP_FILE_ERROR);
pub const CAIRO_STATUS_INVALID_STRIDE = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_STRIDE);
pub const CAIRO_STATUS_FONT_TYPE_MISMATCH = @enumToInt(enum__cairo_status.CAIRO_STATUS_FONT_TYPE_MISMATCH);
pub const CAIRO_STATUS_USER_FONT_IMMUTABLE = @enumToInt(enum__cairo_status.CAIRO_STATUS_USER_FONT_IMMUTABLE);
pub const CAIRO_STATUS_USER_FONT_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_USER_FONT_ERROR);
pub const CAIRO_STATUS_NEGATIVE_COUNT = @enumToInt(enum__cairo_status.CAIRO_STATUS_NEGATIVE_COUNT);
pub const CAIRO_STATUS_INVALID_CLUSTERS = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_CLUSTERS);
pub const CAIRO_STATUS_INVALID_SLANT = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_SLANT);
pub const CAIRO_STATUS_INVALID_WEIGHT = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_WEIGHT);
pub const CAIRO_STATUS_INVALID_SIZE = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_SIZE);
pub const CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = @enumToInt(enum__cairo_status.CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED);
pub const CAIRO_STATUS_DEVICE_TYPE_MISMATCH = @enumToInt(enum__cairo_status.CAIRO_STATUS_DEVICE_TYPE_MISMATCH);
pub const CAIRO_STATUS_DEVICE_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_DEVICE_ERROR);
pub const CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = @enumToInt(enum__cairo_status.CAIRO_STATUS_INVALID_MESH_CONSTRUCTION);
pub const CAIRO_STATUS_DEVICE_FINISHED = @enumToInt(enum__cairo_status.CAIRO_STATUS_DEVICE_FINISHED);
pub const CAIRO_STATUS_JBIG2_GLOBAL_MISSING = @enumToInt(enum__cairo_status.CAIRO_STATUS_JBIG2_GLOBAL_MISSING);
pub const CAIRO_STATUS_PNG_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_PNG_ERROR);
pub const CAIRO_STATUS_FREETYPE_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_FREETYPE_ERROR);
pub const CAIRO_STATUS_WIN32_GDI_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_WIN32_GDI_ERROR);
pub const CAIRO_STATUS_TAG_ERROR = @enumToInt(enum__cairo_status.CAIRO_STATUS_TAG_ERROR);
pub const CAIRO_STATUS_LAST_STATUS = @enumToInt(enum__cairo_status.CAIRO_STATUS_LAST_STATUS);
pub const enum__cairo_status = extern enum(c_int) {
    CAIRO_STATUS_SUCCESS = 0,
    CAIRO_STATUS_NO_MEMORY = 1,
    CAIRO_STATUS_INVALID_RESTORE = 2,
    CAIRO_STATUS_INVALID_POP_GROUP = 3,
    CAIRO_STATUS_NO_CURRENT_POINT = 4,
    CAIRO_STATUS_INVALID_MATRIX = 5,
    CAIRO_STATUS_INVALID_STATUS = 6,
    CAIRO_STATUS_NULL_POINTER = 7,
    CAIRO_STATUS_INVALID_STRING = 8,
    CAIRO_STATUS_INVALID_PATH_DATA = 9,
    CAIRO_STATUS_READ_ERROR = 10,
    CAIRO_STATUS_WRITE_ERROR = 11,
    CAIRO_STATUS_SURFACE_FINISHED = 12,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14,
    CAIRO_STATUS_INVALID_CONTENT = 15,
    CAIRO_STATUS_INVALID_FORMAT = 16,
    CAIRO_STATUS_INVALID_VISUAL = 17,
    CAIRO_STATUS_FILE_NOT_FOUND = 18,
    CAIRO_STATUS_INVALID_DASH = 19,
    CAIRO_STATUS_INVALID_DSC_COMMENT = 20,
    CAIRO_STATUS_INVALID_INDEX = 21,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22,
    CAIRO_STATUS_TEMP_FILE_ERROR = 23,
    CAIRO_STATUS_INVALID_STRIDE = 24,
    CAIRO_STATUS_FONT_TYPE_MISMATCH = 25,
    CAIRO_STATUS_USER_FONT_IMMUTABLE = 26,
    CAIRO_STATUS_USER_FONT_ERROR = 27,
    CAIRO_STATUS_NEGATIVE_COUNT = 28,
    CAIRO_STATUS_INVALID_CLUSTERS = 29,
    CAIRO_STATUS_INVALID_SLANT = 30,
    CAIRO_STATUS_INVALID_WEIGHT = 31,
    CAIRO_STATUS_INVALID_SIZE = 32,
    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33,
    CAIRO_STATUS_DEVICE_TYPE_MISMATCH = 34,
    CAIRO_STATUS_DEVICE_ERROR = 35,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = 36,
    CAIRO_STATUS_DEVICE_FINISHED = 37,
    CAIRO_STATUS_JBIG2_GLOBAL_MISSING = 38,
    CAIRO_STATUS_PNG_ERROR = 39,
    CAIRO_STATUS_FREETYPE_ERROR = 40,
    CAIRO_STATUS_WIN32_GDI_ERROR = 41,
    CAIRO_STATUS_TAG_ERROR = 42,
    CAIRO_STATUS_LAST_STATUS = 43,
    _,
};
pub const cairo_status_t = enum__cairo_status;
pub const CAIRO_CONTENT_COLOR = @enumToInt(enum__cairo_content.CAIRO_CONTENT_COLOR);
pub const CAIRO_CONTENT_ALPHA = @enumToInt(enum__cairo_content.CAIRO_CONTENT_ALPHA);
pub const CAIRO_CONTENT_COLOR_ALPHA = @enumToInt(enum__cairo_content.CAIRO_CONTENT_COLOR_ALPHA);
pub const enum__cairo_content = extern enum(c_int) {
    CAIRO_CONTENT_COLOR = 4096,
    CAIRO_CONTENT_ALPHA = 8192,
    CAIRO_CONTENT_COLOR_ALPHA = 12288,
    _,
};
pub const cairo_content_t = enum__cairo_content;
pub const CAIRO_FORMAT_INVALID = @enumToInt(enum__cairo_format.CAIRO_FORMAT_INVALID);
pub const CAIRO_FORMAT_ARGB32 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_ARGB32);
pub const CAIRO_FORMAT_RGB24 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_RGB24);
pub const CAIRO_FORMAT_A8 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_A8);
pub const CAIRO_FORMAT_A1 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_A1);
pub const CAIRO_FORMAT_RGB16_565 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_RGB16_565);
pub const CAIRO_FORMAT_RGB30 = @enumToInt(enum__cairo_format.CAIRO_FORMAT_RGB30);
pub const enum__cairo_format = extern enum(c_int) {
    CAIRO_FORMAT_INVALID = -1,
    CAIRO_FORMAT_ARGB32 = 0,
    CAIRO_FORMAT_RGB24 = 1,
    CAIRO_FORMAT_A8 = 2,
    CAIRO_FORMAT_A1 = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30 = 5,
    _,
};
pub const cairo_format_t = enum__cairo_format;
pub const cairo_write_func_t = ?fn (?*c_void, [*c]const u8, c_uint) callconv(.C) cairo_status_t;
pub const cairo_read_func_t = ?fn (?*c_void, [*c]u8, c_uint) callconv(.C) cairo_status_t;
pub const struct__cairo_rectangle_int = extern struct {
    x: c_int,
    y: c_int,
    width: c_int,
    height: c_int,
};
pub const cairo_rectangle_int_t = struct__cairo_rectangle_int;
pub extern fn cairo_create(target: ?*cairo_surface_t) ?*cairo_t;
pub extern fn cairo_reference(cr: ?*cairo_t) ?*cairo_t;
pub extern fn cairo_destroy(cr: ?*cairo_t) void;
pub extern fn cairo_get_reference_count(cr: ?*cairo_t) c_uint;
pub extern fn cairo_get_user_data(cr: ?*cairo_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_set_user_data(cr: ?*cairo_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_save(cr: ?*cairo_t) void;
pub extern fn cairo_restore(cr: ?*cairo_t) void;
pub extern fn cairo_push_group(cr: ?*cairo_t) void;
pub extern fn cairo_push_group_with_content(cr: ?*cairo_t, content: cairo_content_t) void;
pub extern fn cairo_pop_group(cr: ?*cairo_t) ?*cairo_pattern_t;
pub extern fn cairo_pop_group_to_source(cr: ?*cairo_t) void;
pub const CAIRO_OPERATOR_CLEAR = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_CLEAR);
pub const CAIRO_OPERATOR_SOURCE = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_SOURCE);
pub const CAIRO_OPERATOR_OVER = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_OVER);
pub const CAIRO_OPERATOR_IN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_IN);
pub const CAIRO_OPERATOR_OUT = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_OUT);
pub const CAIRO_OPERATOR_ATOP = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_ATOP);
pub const CAIRO_OPERATOR_DEST = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DEST);
pub const CAIRO_OPERATOR_DEST_OVER = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DEST_OVER);
pub const CAIRO_OPERATOR_DEST_IN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DEST_IN);
pub const CAIRO_OPERATOR_DEST_OUT = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DEST_OUT);
pub const CAIRO_OPERATOR_DEST_ATOP = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DEST_ATOP);
pub const CAIRO_OPERATOR_XOR = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_XOR);
pub const CAIRO_OPERATOR_ADD = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_ADD);
pub const CAIRO_OPERATOR_SATURATE = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_SATURATE);
pub const CAIRO_OPERATOR_MULTIPLY = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_MULTIPLY);
pub const CAIRO_OPERATOR_SCREEN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_SCREEN);
pub const CAIRO_OPERATOR_OVERLAY = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_OVERLAY);
pub const CAIRO_OPERATOR_DARKEN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DARKEN);
pub const CAIRO_OPERATOR_LIGHTEN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_LIGHTEN);
pub const CAIRO_OPERATOR_COLOR_DODGE = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_COLOR_DODGE);
pub const CAIRO_OPERATOR_COLOR_BURN = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_COLOR_BURN);
pub const CAIRO_OPERATOR_HARD_LIGHT = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_HARD_LIGHT);
pub const CAIRO_OPERATOR_SOFT_LIGHT = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_SOFT_LIGHT);
pub const CAIRO_OPERATOR_DIFFERENCE = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_DIFFERENCE);
pub const CAIRO_OPERATOR_EXCLUSION = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_EXCLUSION);
pub const CAIRO_OPERATOR_HSL_HUE = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_HSL_HUE);
pub const CAIRO_OPERATOR_HSL_SATURATION = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_HSL_SATURATION);
pub const CAIRO_OPERATOR_HSL_COLOR = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_HSL_COLOR);
pub const CAIRO_OPERATOR_HSL_LUMINOSITY = @enumToInt(enum__cairo_operator.CAIRO_OPERATOR_HSL_LUMINOSITY);
pub const enum__cairo_operator = extern enum(c_int) {
    CAIRO_OPERATOR_CLEAR,
    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,
    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,
    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE,
    CAIRO_OPERATOR_MULTIPLY,
    CAIRO_OPERATOR_SCREEN,
    CAIRO_OPERATOR_OVERLAY,
    CAIRO_OPERATOR_DARKEN,
    CAIRO_OPERATOR_LIGHTEN,
    CAIRO_OPERATOR_COLOR_DODGE,
    CAIRO_OPERATOR_COLOR_BURN,
    CAIRO_OPERATOR_HARD_LIGHT,
    CAIRO_OPERATOR_SOFT_LIGHT,
    CAIRO_OPERATOR_DIFFERENCE,
    CAIRO_OPERATOR_EXCLUSION,
    CAIRO_OPERATOR_HSL_HUE,
    CAIRO_OPERATOR_HSL_SATURATION,
    CAIRO_OPERATOR_HSL_COLOR,
    CAIRO_OPERATOR_HSL_LUMINOSITY,
    _,
};
pub const cairo_operator_t = enum__cairo_operator;
pub extern fn cairo_set_operator(cr: ?*cairo_t, op: cairo_operator_t) void;
pub extern fn cairo_set_source(cr: ?*cairo_t, source: ?*cairo_pattern_t) void;
pub extern fn cairo_set_source_rgb(cr: ?*cairo_t, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_set_source_rgba(cr: ?*cairo_t, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_set_source_surface(cr: ?*cairo_t, surface: ?*cairo_surface_t, x: f64, y: f64) void;
pub extern fn cairo_set_tolerance(cr: ?*cairo_t, tolerance: f64) void;
pub const CAIRO_ANTIALIAS_DEFAULT = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_DEFAULT);
pub const CAIRO_ANTIALIAS_NONE = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_NONE);
pub const CAIRO_ANTIALIAS_GRAY = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_GRAY);
pub const CAIRO_ANTIALIAS_SUBPIXEL = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_SUBPIXEL);
pub const CAIRO_ANTIALIAS_FAST = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_FAST);
pub const CAIRO_ANTIALIAS_GOOD = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_GOOD);
pub const CAIRO_ANTIALIAS_BEST = @enumToInt(enum__cairo_antialias.CAIRO_ANTIALIAS_BEST);
pub const enum__cairo_antialias = extern enum(c_int) {
    CAIRO_ANTIALIAS_DEFAULT,
    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL,
    CAIRO_ANTIALIAS_FAST,
    CAIRO_ANTIALIAS_GOOD,
    CAIRO_ANTIALIAS_BEST,
    _,
};
pub const cairo_antialias_t = enum__cairo_antialias;
pub extern fn cairo_set_antialias(cr: ?*cairo_t, antialias: cairo_antialias_t) void;
pub const CAIRO_FILL_RULE_WINDING = @enumToInt(enum__cairo_fill_rule.CAIRO_FILL_RULE_WINDING);
pub const CAIRO_FILL_RULE_EVEN_ODD = @enumToInt(enum__cairo_fill_rule.CAIRO_FILL_RULE_EVEN_ODD);
pub const enum__cairo_fill_rule = extern enum(c_int) {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD,
    _,
};
pub const cairo_fill_rule_t = enum__cairo_fill_rule;
pub extern fn cairo_set_fill_rule(cr: ?*cairo_t, fill_rule: cairo_fill_rule_t) void;
pub extern fn cairo_set_line_width(cr: ?*cairo_t, width: f64) void;
pub const CAIRO_LINE_CAP_BUTT = @enumToInt(enum__cairo_line_cap.CAIRO_LINE_CAP_BUTT);
pub const CAIRO_LINE_CAP_ROUND = @enumToInt(enum__cairo_line_cap.CAIRO_LINE_CAP_ROUND);
pub const CAIRO_LINE_CAP_SQUARE = @enumToInt(enum__cairo_line_cap.CAIRO_LINE_CAP_SQUARE);
pub const enum__cairo_line_cap = extern enum(c_int) {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE,
    _,
};
pub const cairo_line_cap_t = enum__cairo_line_cap;
pub extern fn cairo_set_line_cap(cr: ?*cairo_t, line_cap: cairo_line_cap_t) void;
pub const CAIRO_LINE_JOIN_MITER = @enumToInt(enum__cairo_line_join.CAIRO_LINE_JOIN_MITER);
pub const CAIRO_LINE_JOIN_ROUND = @enumToInt(enum__cairo_line_join.CAIRO_LINE_JOIN_ROUND);
pub const CAIRO_LINE_JOIN_BEVEL = @enumToInt(enum__cairo_line_join.CAIRO_LINE_JOIN_BEVEL);
pub const enum__cairo_line_join = extern enum(c_int) {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL,
    _,
};
pub const cairo_line_join_t = enum__cairo_line_join;
pub extern fn cairo_set_line_join(cr: ?*cairo_t, line_join: cairo_line_join_t) void;
pub extern fn cairo_set_dash(cr: ?*cairo_t, dashes: [*c]const f64, num_dashes: c_int, offset: f64) void;
pub extern fn cairo_set_miter_limit(cr: ?*cairo_t, limit: f64) void;
pub extern fn cairo_translate(cr: ?*cairo_t, tx: f64, ty: f64) void;
pub extern fn cairo_scale(cr: ?*cairo_t, sx: f64, sy: f64) void;
pub extern fn cairo_rotate(cr: ?*cairo_t, angle: f64) void;
pub extern fn cairo_transform(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_set_matrix(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_identity_matrix(cr: ?*cairo_t) void;
pub extern fn cairo_user_to_device(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_user_to_device_distance(cr: ?*cairo_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_device_to_user(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_device_to_user_distance(cr: ?*cairo_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_new_path(cr: ?*cairo_t) void;
pub extern fn cairo_move_to(cr: ?*cairo_t, x: f64, y: f64) void;
pub extern fn cairo_new_sub_path(cr: ?*cairo_t) void;
pub extern fn cairo_line_to(cr: ?*cairo_t, x: f64, y: f64) void;
pub extern fn cairo_curve_to(cr: ?*cairo_t, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) void;
pub extern fn cairo_arc(cr: ?*cairo_t, xc: f64, yc: f64, radius: f64, angle1: f64, angle2: f64) void;
pub extern fn cairo_arc_negative(cr: ?*cairo_t, xc: f64, yc: f64, radius: f64, angle1: f64, angle2: f64) void;
pub extern fn cairo_rel_move_to(cr: ?*cairo_t, dx: f64, dy: f64) void;
pub extern fn cairo_rel_line_to(cr: ?*cairo_t, dx: f64, dy: f64) void;
pub extern fn cairo_rel_curve_to(cr: ?*cairo_t, dx1: f64, dy1: f64, dx2: f64, dy2: f64, dx3: f64, dy3: f64) void;
pub extern fn cairo_rectangle(cr: ?*cairo_t, x: f64, y: f64, width: f64, height: f64) void;
pub extern fn cairo_close_path(cr: ?*cairo_t) void;
pub extern fn cairo_path_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_paint(cr: ?*cairo_t) void;
pub extern fn cairo_paint_with_alpha(cr: ?*cairo_t, alpha: f64) void;
pub extern fn cairo_mask(cr: ?*cairo_t, pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mask_surface(cr: ?*cairo_t, surface: ?*cairo_surface_t, surface_x: f64, surface_y: f64) void;
pub extern fn cairo_stroke(cr: ?*cairo_t) void;
pub extern fn cairo_stroke_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_fill(cr: ?*cairo_t) void;
pub extern fn cairo_fill_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_copy_page(cr: ?*cairo_t) void;
pub extern fn cairo_show_page(cr: ?*cairo_t) void;
pub extern fn cairo_in_stroke(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_in_fill(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_in_clip(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_stroke_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_fill_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_reset_clip(cr: ?*cairo_t) void;
pub extern fn cairo_clip(cr: ?*cairo_t) void;
pub extern fn cairo_clip_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_clip_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub const struct__cairo_rectangle = extern struct {
    x: f64,
    y: f64,
    width: f64,
    height: f64,
};
pub const cairo_rectangle_t = struct__cairo_rectangle;
pub const struct__cairo_rectangle_list = extern struct {
    status: cairo_status_t,
    rectangles: [*c]cairo_rectangle_t,
    num_rectangles: c_int,
};
pub const cairo_rectangle_list_t = struct__cairo_rectangle_list;
pub extern fn cairo_copy_clip_rectangle_list(cr: ?*cairo_t) [*c]cairo_rectangle_list_t;
pub extern fn cairo_rectangle_list_destroy(rectangle_list: [*c]cairo_rectangle_list_t) void;
pub extern fn cairo_tag_begin(cr: ?*cairo_t, tag_name: [*c]const u8, attributes: [*c]const u8) void;
pub extern fn cairo_tag_end(cr: ?*cairo_t, tag_name: [*c]const u8) void;
pub const struct__cairo_scaled_font = opaque {};
pub const cairo_scaled_font_t = struct__cairo_scaled_font;
pub const struct__cairo_font_face = opaque {};
pub const cairo_font_face_t = struct__cairo_font_face;
const struct_unnamed_4 = extern struct {
    index: c_ulong,
    x: f64,
    y: f64,
};
pub const cairo_glyph_t = struct_unnamed_4;
pub extern fn cairo_glyph_allocate(num_glyphs: c_int) [*c]cairo_glyph_t;
pub extern fn cairo_glyph_free(glyphs: [*c]cairo_glyph_t) void;
const struct_unnamed_5 = extern struct {
    num_bytes: c_int,
    num_glyphs: c_int,
};
pub const cairo_text_cluster_t = struct_unnamed_5;
pub extern fn cairo_text_cluster_allocate(num_clusters: c_int) [*c]cairo_text_cluster_t;
pub extern fn cairo_text_cluster_free(clusters: [*c]cairo_text_cluster_t) void;
pub const CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = @enumToInt(enum__cairo_text_cluster_flags.CAIRO_TEXT_CLUSTER_FLAG_BACKWARD);
pub const enum__cairo_text_cluster_flags = extern enum(c_int) {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 1,
    _,
};
pub const cairo_text_cluster_flags_t = enum__cairo_text_cluster_flags;
const struct_unnamed_6 = extern struct {
    x_bearing: f64,
    y_bearing: f64,
    width: f64,
    height: f64,
    x_advance: f64,
    y_advance: f64,
};
pub const cairo_text_extents_t = struct_unnamed_6;
const struct_unnamed_7 = extern struct {
    ascent: f64,
    descent: f64,
    height: f64,
    max_x_advance: f64,
    max_y_advance: f64,
};
pub const cairo_font_extents_t = struct_unnamed_7;
pub const CAIRO_FONT_SLANT_NORMAL = @enumToInt(enum__cairo_font_slant.CAIRO_FONT_SLANT_NORMAL);
pub const CAIRO_FONT_SLANT_ITALIC = @enumToInt(enum__cairo_font_slant.CAIRO_FONT_SLANT_ITALIC);
pub const CAIRO_FONT_SLANT_OBLIQUE = @enumToInt(enum__cairo_font_slant.CAIRO_FONT_SLANT_OBLIQUE);
pub const enum__cairo_font_slant = extern enum(c_int) {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE,
    _,
};
pub const cairo_font_slant_t = enum__cairo_font_slant;
pub const CAIRO_FONT_WEIGHT_NORMAL = @enumToInt(enum__cairo_font_weight.CAIRO_FONT_WEIGHT_NORMAL);
pub const CAIRO_FONT_WEIGHT_BOLD = @enumToInt(enum__cairo_font_weight.CAIRO_FONT_WEIGHT_BOLD);
pub const enum__cairo_font_weight = extern enum(c_int) {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD,
    _,
};
pub const cairo_font_weight_t = enum__cairo_font_weight;
pub const CAIRO_SUBPIXEL_ORDER_DEFAULT = @enumToInt(enum__cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_DEFAULT);
pub const CAIRO_SUBPIXEL_ORDER_RGB = @enumToInt(enum__cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_RGB);
pub const CAIRO_SUBPIXEL_ORDER_BGR = @enumToInt(enum__cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_BGR);
pub const CAIRO_SUBPIXEL_ORDER_VRGB = @enumToInt(enum__cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_VRGB);
pub const CAIRO_SUBPIXEL_ORDER_VBGR = @enumToInt(enum__cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_VBGR);
pub const enum__cairo_subpixel_order = extern enum(c_int) {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR,
    _,
};
pub const cairo_subpixel_order_t = enum__cairo_subpixel_order;
pub const CAIRO_HINT_STYLE_DEFAULT = @enumToInt(enum__cairo_hint_style.CAIRO_HINT_STYLE_DEFAULT);
pub const CAIRO_HINT_STYLE_NONE = @enumToInt(enum__cairo_hint_style.CAIRO_HINT_STYLE_NONE);
pub const CAIRO_HINT_STYLE_SLIGHT = @enumToInt(enum__cairo_hint_style.CAIRO_HINT_STYLE_SLIGHT);
pub const CAIRO_HINT_STYLE_MEDIUM = @enumToInt(enum__cairo_hint_style.CAIRO_HINT_STYLE_MEDIUM);
pub const CAIRO_HINT_STYLE_FULL = @enumToInt(enum__cairo_hint_style.CAIRO_HINT_STYLE_FULL);
pub const enum__cairo_hint_style = extern enum(c_int) {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL,
    _,
};
pub const cairo_hint_style_t = enum__cairo_hint_style;
pub const CAIRO_HINT_METRICS_DEFAULT = @enumToInt(enum__cairo_hint_metrics.CAIRO_HINT_METRICS_DEFAULT);
pub const CAIRO_HINT_METRICS_OFF = @enumToInt(enum__cairo_hint_metrics.CAIRO_HINT_METRICS_OFF);
pub const CAIRO_HINT_METRICS_ON = @enumToInt(enum__cairo_hint_metrics.CAIRO_HINT_METRICS_ON);
pub const enum__cairo_hint_metrics = extern enum(c_int) {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON,
    _,
};
pub const cairo_hint_metrics_t = enum__cairo_hint_metrics;
pub const struct__cairo_font_options = opaque {};
pub const cairo_font_options_t = struct__cairo_font_options;
pub extern fn cairo_font_options_create() ?*cairo_font_options_t;
pub extern fn cairo_font_options_copy(original: ?*const cairo_font_options_t) ?*cairo_font_options_t;
pub extern fn cairo_font_options_destroy(options: ?*cairo_font_options_t) void;
pub extern fn cairo_font_options_status(options: ?*cairo_font_options_t) cairo_status_t;
pub extern fn cairo_font_options_merge(options: ?*cairo_font_options_t, other: ?*const cairo_font_options_t) void;
pub extern fn cairo_font_options_equal(options: ?*const cairo_font_options_t, other: ?*const cairo_font_options_t) cairo_bool_t;
pub extern fn cairo_font_options_hash(options: ?*const cairo_font_options_t) c_ulong;
pub extern fn cairo_font_options_set_antialias(options: ?*cairo_font_options_t, antialias: cairo_antialias_t) void;
pub extern fn cairo_font_options_get_antialias(options: ?*const cairo_font_options_t) cairo_antialias_t;
pub extern fn cairo_font_options_set_subpixel_order(options: ?*cairo_font_options_t, subpixel_order: cairo_subpixel_order_t) void;
pub extern fn cairo_font_options_get_subpixel_order(options: ?*const cairo_font_options_t) cairo_subpixel_order_t;
pub extern fn cairo_font_options_set_hint_style(options: ?*cairo_font_options_t, hint_style: cairo_hint_style_t) void;
pub extern fn cairo_font_options_get_hint_style(options: ?*const cairo_font_options_t) cairo_hint_style_t;
pub extern fn cairo_font_options_set_hint_metrics(options: ?*cairo_font_options_t, hint_metrics: cairo_hint_metrics_t) void;
pub extern fn cairo_font_options_get_hint_metrics(options: ?*const cairo_font_options_t) cairo_hint_metrics_t;
pub extern fn cairo_font_options_get_variations(options: ?*cairo_font_options_t) [*c]const u8;
pub extern fn cairo_font_options_set_variations(options: ?*cairo_font_options_t, variations: [*c]const u8) void;
pub extern fn cairo_select_font_face(cr: ?*cairo_t, family: [*c]const u8, slant: cairo_font_slant_t, weight: cairo_font_weight_t) void;
pub extern fn cairo_set_font_size(cr: ?*cairo_t, size: f64) void;
pub extern fn cairo_set_font_matrix(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_get_font_matrix(cr: ?*cairo_t, matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_set_font_options(cr: ?*cairo_t, options: ?*const cairo_font_options_t) void;
pub extern fn cairo_get_font_options(cr: ?*cairo_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_set_font_face(cr: ?*cairo_t, font_face: ?*cairo_font_face_t) void;
pub extern fn cairo_get_font_face(cr: ?*cairo_t) ?*cairo_font_face_t;
pub extern fn cairo_set_scaled_font(cr: ?*cairo_t, scaled_font: ?*const cairo_scaled_font_t) void;
pub extern fn cairo_get_scaled_font(cr: ?*cairo_t) ?*cairo_scaled_font_t;
pub extern fn cairo_show_text(cr: ?*cairo_t, utf8: [*c]const u8) void;
pub extern fn cairo_show_glyphs(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int) void;
pub extern fn cairo_show_text_glyphs(cr: ?*cairo_t, utf8: [*c]const u8, utf8_len: c_int, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, clusters: [*c]const cairo_text_cluster_t, num_clusters: c_int, cluster_flags: cairo_text_cluster_flags_t) void;
pub extern fn cairo_text_path(cr: ?*cairo_t, utf8: [*c]const u8) void;
pub extern fn cairo_glyph_path(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int) void;
pub extern fn cairo_text_extents(cr: ?*cairo_t, utf8: [*c]const u8, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_glyph_extents(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_font_extents(cr: ?*cairo_t, extents: [*c]cairo_font_extents_t) void;
pub extern fn cairo_font_face_reference(font_face: ?*cairo_font_face_t) ?*cairo_font_face_t;
pub extern fn cairo_font_face_destroy(font_face: ?*cairo_font_face_t) void;
pub extern fn cairo_font_face_get_reference_count(font_face: ?*cairo_font_face_t) c_uint;
pub extern fn cairo_font_face_status(font_face: ?*cairo_font_face_t) cairo_status_t;
pub const CAIRO_FONT_TYPE_TOY = @enumToInt(enum__cairo_font_type.CAIRO_FONT_TYPE_TOY);
pub const CAIRO_FONT_TYPE_FT = @enumToInt(enum__cairo_font_type.CAIRO_FONT_TYPE_FT);
pub const CAIRO_FONT_TYPE_WIN32 = @enumToInt(enum__cairo_font_type.CAIRO_FONT_TYPE_WIN32);
pub const CAIRO_FONT_TYPE_QUARTZ = @enumToInt(enum__cairo_font_type.CAIRO_FONT_TYPE_QUARTZ);
pub const CAIRO_FONT_TYPE_USER = @enumToInt(enum__cairo_font_type.CAIRO_FONT_TYPE_USER);
pub const enum__cairo_font_type = extern enum(c_int) {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER,
    _,
};
pub const cairo_font_type_t = enum__cairo_font_type;
pub extern fn cairo_font_face_get_type(font_face: ?*cairo_font_face_t) cairo_font_type_t;
pub extern fn cairo_font_face_get_user_data(font_face: ?*cairo_font_face_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_font_face_set_user_data(font_face: ?*cairo_font_face_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_scaled_font_create(font_face: ?*cairo_font_face_t, font_matrix: [*c]const cairo_matrix_t, ctm: [*c]const cairo_matrix_t, options: ?*const cairo_font_options_t) ?*cairo_scaled_font_t;
pub extern fn cairo_scaled_font_reference(scaled_font: ?*cairo_scaled_font_t) ?*cairo_scaled_font_t;
pub extern fn cairo_scaled_font_destroy(scaled_font: ?*cairo_scaled_font_t) void;
pub extern fn cairo_scaled_font_get_reference_count(scaled_font: ?*cairo_scaled_font_t) c_uint;
pub extern fn cairo_scaled_font_status(scaled_font: ?*cairo_scaled_font_t) cairo_status_t;
pub extern fn cairo_scaled_font_get_type(scaled_font: ?*cairo_scaled_font_t) cairo_font_type_t;
pub extern fn cairo_scaled_font_get_user_data(scaled_font: ?*cairo_scaled_font_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_scaled_font_set_user_data(scaled_font: ?*cairo_scaled_font_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_scaled_font_extents(scaled_font: ?*cairo_scaled_font_t, extents: [*c]cairo_font_extents_t) void;
pub extern fn cairo_scaled_font_text_extents(scaled_font: ?*cairo_scaled_font_t, utf8: [*c]const u8, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_scaled_font_glyph_extents(scaled_font: ?*cairo_scaled_font_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_scaled_font_text_to_glyphs(scaled_font: ?*cairo_scaled_font_t, x: f64, y: f64, utf8: [*c]const u8, utf8_len: c_int, glyphs: [*c][*c]cairo_glyph_t, num_glyphs: [*c]c_int, clusters: [*c][*c]cairo_text_cluster_t, num_clusters: [*c]c_int, cluster_flags: [*c]cairo_text_cluster_flags_t) cairo_status_t;
pub extern fn cairo_scaled_font_get_font_face(scaled_font: ?*cairo_scaled_font_t) ?*cairo_font_face_t;
pub extern fn cairo_scaled_font_get_font_matrix(scaled_font: ?*cairo_scaled_font_t, font_matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_ctm(scaled_font: ?*cairo_scaled_font_t, ctm: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_scale_matrix(scaled_font: ?*cairo_scaled_font_t, scale_matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_font_options(scaled_font: ?*cairo_scaled_font_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_toy_font_face_create(family: [*c]const u8, slant: cairo_font_slant_t, weight: cairo_font_weight_t) ?*cairo_font_face_t;
pub extern fn cairo_toy_font_face_get_family(font_face: ?*cairo_font_face_t) [*c]const u8;
pub extern fn cairo_toy_font_face_get_slant(font_face: ?*cairo_font_face_t) cairo_font_slant_t;
pub extern fn cairo_toy_font_face_get_weight(font_face: ?*cairo_font_face_t) cairo_font_weight_t;
pub extern fn cairo_user_font_face_create() ?*cairo_font_face_t;
pub const cairo_user_scaled_font_init_func_t = ?fn (?*cairo_scaled_font_t, ?*cairo_t, [*c]cairo_font_extents_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_render_glyph_func_t = ?fn (?*cairo_scaled_font_t, c_ulong, ?*cairo_t, [*c]cairo_text_extents_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_text_to_glyphs_func_t = ?fn (?*cairo_scaled_font_t, [*c]const u8, c_int, [*c][*c]cairo_glyph_t, [*c]c_int, [*c][*c]cairo_text_cluster_t, [*c]c_int, [*c]cairo_text_cluster_flags_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_unicode_to_glyph_func_t = ?fn (?*cairo_scaled_font_t, c_ulong, [*c]c_ulong) callconv(.C) cairo_status_t;
pub extern fn cairo_user_font_face_set_init_func(font_face: ?*cairo_font_face_t, init_func: cairo_user_scaled_font_init_func_t) void;
pub extern fn cairo_user_font_face_set_render_glyph_func(font_face: ?*cairo_font_face_t, render_glyph_func: cairo_user_scaled_font_render_glyph_func_t) void;
pub extern fn cairo_user_font_face_set_text_to_glyphs_func(font_face: ?*cairo_font_face_t, text_to_glyphs_func: cairo_user_scaled_font_text_to_glyphs_func_t) void;
pub extern fn cairo_user_font_face_set_unicode_to_glyph_func(font_face: ?*cairo_font_face_t, unicode_to_glyph_func: cairo_user_scaled_font_unicode_to_glyph_func_t) void;
pub extern fn cairo_user_font_face_get_init_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_init_func_t;
pub extern fn cairo_user_font_face_get_render_glyph_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_render_glyph_func_t;
pub extern fn cairo_user_font_face_get_text_to_glyphs_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_text_to_glyphs_func_t;
pub extern fn cairo_user_font_face_get_unicode_to_glyph_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_unicode_to_glyph_func_t;
pub extern fn cairo_get_operator(cr: ?*cairo_t) cairo_operator_t;
pub extern fn cairo_get_source(cr: ?*cairo_t) ?*cairo_pattern_t;
pub extern fn cairo_get_tolerance(cr: ?*cairo_t) f64;
pub extern fn cairo_get_antialias(cr: ?*cairo_t) cairo_antialias_t;
pub extern fn cairo_has_current_point(cr: ?*cairo_t) cairo_bool_t;
pub extern fn cairo_get_current_point(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_get_fill_rule(cr: ?*cairo_t) cairo_fill_rule_t;
pub extern fn cairo_get_line_width(cr: ?*cairo_t) f64;
pub extern fn cairo_get_line_cap(cr: ?*cairo_t) cairo_line_cap_t;
pub extern fn cairo_get_line_join(cr: ?*cairo_t) cairo_line_join_t;
pub extern fn cairo_get_miter_limit(cr: ?*cairo_t) f64;
pub extern fn cairo_get_dash_count(cr: ?*cairo_t) c_int;
pub extern fn cairo_get_dash(cr: ?*cairo_t, dashes: [*c]f64, offset: [*c]f64) void;
pub extern fn cairo_get_matrix(cr: ?*cairo_t, matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_get_target(cr: ?*cairo_t) ?*cairo_surface_t;
pub extern fn cairo_get_group_target(cr: ?*cairo_t) ?*cairo_surface_t;
pub const CAIRO_PATH_MOVE_TO = @enumToInt(enum__cairo_path_data_type.CAIRO_PATH_MOVE_TO);
pub const CAIRO_PATH_LINE_TO = @enumToInt(enum__cairo_path_data_type.CAIRO_PATH_LINE_TO);
pub const CAIRO_PATH_CURVE_TO = @enumToInt(enum__cairo_path_data_type.CAIRO_PATH_CURVE_TO);
pub const CAIRO_PATH_CLOSE_PATH = @enumToInt(enum__cairo_path_data_type.CAIRO_PATH_CLOSE_PATH);
pub const enum__cairo_path_data_type = extern enum(c_int) {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH,
    _,
};
pub const cairo_path_data_type_t = enum__cairo_path_data_type;
const struct_unnamed_8 = extern struct {
    type: cairo_path_data_type_t,
    length: c_int,
};
const struct_unnamed_9 = extern struct {
    x: f64,
    y: f64,
};
pub const union__cairo_path_data_t = extern union {
    header: struct_unnamed_8,
    point: struct_unnamed_9,
};
pub const cairo_path_data_t = union__cairo_path_data_t;
pub const struct_cairo_path = extern struct {
    status: cairo_status_t,
    data: [*c]cairo_path_data_t,
    num_data: c_int,
};
pub const cairo_path_t = struct_cairo_path;
pub extern fn cairo_copy_path(cr: ?*cairo_t) [*c]cairo_path_t;
pub extern fn cairo_copy_path_flat(cr: ?*cairo_t) [*c]cairo_path_t;
pub extern fn cairo_append_path(cr: ?*cairo_t, path: [*c]const cairo_path_t) void;
pub extern fn cairo_path_destroy(path: [*c]cairo_path_t) void;
pub extern fn cairo_status(cr: ?*cairo_t) cairo_status_t;
pub extern fn cairo_status_to_string(status: cairo_status_t) [*c]const u8;
pub extern fn cairo_device_reference(device: ?*cairo_device_t) ?*cairo_device_t;
pub const CAIRO_DEVICE_TYPE_DRM = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_DRM);
pub const CAIRO_DEVICE_TYPE_GL = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_GL);
pub const CAIRO_DEVICE_TYPE_SCRIPT = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_SCRIPT);
pub const CAIRO_DEVICE_TYPE_XCB = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_XCB);
pub const CAIRO_DEVICE_TYPE_XLIB = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_XLIB);
pub const CAIRO_DEVICE_TYPE_XML = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_XML);
pub const CAIRO_DEVICE_TYPE_COGL = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_COGL);
pub const CAIRO_DEVICE_TYPE_WIN32 = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_WIN32);
pub const CAIRO_DEVICE_TYPE_INVALID = @enumToInt(enum__cairo_device_type.CAIRO_DEVICE_TYPE_INVALID);
pub const enum__cairo_device_type = extern enum(c_int) {
    CAIRO_DEVICE_TYPE_DRM = 0,
    CAIRO_DEVICE_TYPE_GL = 1,
    CAIRO_DEVICE_TYPE_SCRIPT = 2,
    CAIRO_DEVICE_TYPE_XCB = 3,
    CAIRO_DEVICE_TYPE_XLIB = 4,
    CAIRO_DEVICE_TYPE_XML = 5,
    CAIRO_DEVICE_TYPE_COGL = 6,
    CAIRO_DEVICE_TYPE_WIN32 = 7,
    CAIRO_DEVICE_TYPE_INVALID = -1,
    _,
};
pub const cairo_device_type_t = enum__cairo_device_type;
pub extern fn cairo_device_get_type(device: ?*cairo_device_t) cairo_device_type_t;
pub extern fn cairo_device_status(device: ?*cairo_device_t) cairo_status_t;
pub extern fn cairo_device_acquire(device: ?*cairo_device_t) cairo_status_t;
pub extern fn cairo_device_release(device: ?*cairo_device_t) void;
pub extern fn cairo_device_flush(device: ?*cairo_device_t) void;
pub extern fn cairo_device_finish(device: ?*cairo_device_t) void;
pub extern fn cairo_device_destroy(device: ?*cairo_device_t) void;
pub extern fn cairo_device_get_reference_count(device: ?*cairo_device_t) c_uint;
pub extern fn cairo_device_get_user_data(device: ?*cairo_device_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_device_set_user_data(device: ?*cairo_device_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_surface_create_similar(other: ?*cairo_surface_t, content: cairo_content_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_surface_create_similar_image(other: ?*cairo_surface_t, format: cairo_format_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_surface_map_to_image(surface: ?*cairo_surface_t, extents: [*c]const cairo_rectangle_int_t) ?*cairo_surface_t;
pub extern fn cairo_surface_unmap_image(surface: ?*cairo_surface_t, image: ?*cairo_surface_t) void;
pub extern fn cairo_surface_create_for_rectangle(target: ?*cairo_surface_t, x: f64, y: f64, width: f64, height: f64) ?*cairo_surface_t;
pub const CAIRO_SURFACE_OBSERVER_NORMAL = @enumToInt(enum_unnamed_10.CAIRO_SURFACE_OBSERVER_NORMAL);
pub const CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = @enumToInt(enum_unnamed_10.CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS);
const enum_unnamed_10 = extern enum(c_int) {
    CAIRO_SURFACE_OBSERVER_NORMAL = 0,
    CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 1,
    _,
};
pub const cairo_surface_observer_mode_t = enum_unnamed_10;
pub extern fn cairo_surface_create_observer(target: ?*cairo_surface_t, mode: cairo_surface_observer_mode_t) ?*cairo_surface_t;
pub const cairo_surface_observer_callback_t = ?fn (?*cairo_surface_t, ?*cairo_surface_t, ?*c_void) callconv(.C) void;
pub extern fn cairo_surface_observer_add_paint_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_mask_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_fill_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_stroke_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_glyphs_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_flush_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_add_finish_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_print(surface: ?*cairo_surface_t, write_func: cairo_write_func_t, closure: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_observer_elapsed(surface: ?*cairo_surface_t) f64;
pub extern fn cairo_device_observer_print(device: ?*cairo_device_t, write_func: cairo_write_func_t, closure: ?*c_void) cairo_status_t;
pub extern fn cairo_device_observer_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_paint_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_mask_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_fill_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_stroke_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_glyphs_elapsed(device: ?*cairo_device_t) f64;
pub extern fn cairo_surface_reference(surface: ?*cairo_surface_t) ?*cairo_surface_t;
pub extern fn cairo_surface_finish(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_destroy(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_get_device(surface: ?*cairo_surface_t) ?*cairo_device_t;
pub extern fn cairo_surface_get_reference_count(surface: ?*cairo_surface_t) c_uint;
pub extern fn cairo_surface_status(surface: ?*cairo_surface_t) cairo_status_t;
pub const CAIRO_SURFACE_TYPE_IMAGE = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_IMAGE);
pub const CAIRO_SURFACE_TYPE_PDF = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_PDF);
pub const CAIRO_SURFACE_TYPE_PS = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_PS);
pub const CAIRO_SURFACE_TYPE_XLIB = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_XLIB);
pub const CAIRO_SURFACE_TYPE_XCB = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_XCB);
pub const CAIRO_SURFACE_TYPE_GLITZ = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_GLITZ);
pub const CAIRO_SURFACE_TYPE_QUARTZ = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_QUARTZ);
pub const CAIRO_SURFACE_TYPE_WIN32 = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_WIN32);
pub const CAIRO_SURFACE_TYPE_BEOS = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_BEOS);
pub const CAIRO_SURFACE_TYPE_DIRECTFB = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_DIRECTFB);
pub const CAIRO_SURFACE_TYPE_SVG = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_SVG);
pub const CAIRO_SURFACE_TYPE_OS2 = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_OS2);
pub const CAIRO_SURFACE_TYPE_WIN32_PRINTING = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_WIN32_PRINTING);
pub const CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_QUARTZ_IMAGE);
pub const CAIRO_SURFACE_TYPE_SCRIPT = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_SCRIPT);
pub const CAIRO_SURFACE_TYPE_QT = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_QT);
pub const CAIRO_SURFACE_TYPE_RECORDING = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_RECORDING);
pub const CAIRO_SURFACE_TYPE_VG = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_VG);
pub const CAIRO_SURFACE_TYPE_GL = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_GL);
pub const CAIRO_SURFACE_TYPE_DRM = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_DRM);
pub const CAIRO_SURFACE_TYPE_TEE = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_TEE);
pub const CAIRO_SURFACE_TYPE_XML = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_XML);
pub const CAIRO_SURFACE_TYPE_SKIA = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_SKIA);
pub const CAIRO_SURFACE_TYPE_SUBSURFACE = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_SUBSURFACE);
pub const CAIRO_SURFACE_TYPE_COGL = @enumToInt(enum__cairo_surface_type.CAIRO_SURFACE_TYPE_COGL);
pub const enum__cairo_surface_type = extern enum(c_int) {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
    CAIRO_SURFACE_TYPE_SCRIPT,
    CAIRO_SURFACE_TYPE_QT,
    CAIRO_SURFACE_TYPE_RECORDING,
    CAIRO_SURFACE_TYPE_VG,
    CAIRO_SURFACE_TYPE_GL,
    CAIRO_SURFACE_TYPE_DRM,
    CAIRO_SURFACE_TYPE_TEE,
    CAIRO_SURFACE_TYPE_XML,
    CAIRO_SURFACE_TYPE_SKIA,
    CAIRO_SURFACE_TYPE_SUBSURFACE,
    CAIRO_SURFACE_TYPE_COGL,
    _,
};
pub const cairo_surface_type_t = enum__cairo_surface_type;
pub extern fn cairo_surface_get_type(surface: ?*cairo_surface_t) cairo_surface_type_t;
pub extern fn cairo_surface_get_content(surface: ?*cairo_surface_t) cairo_content_t;
pub extern fn cairo_surface_write_to_png(surface: ?*cairo_surface_t, filename: [*c]const u8) cairo_status_t;
pub extern fn cairo_surface_write_to_png_stream(surface: ?*cairo_surface_t, write_func: cairo_write_func_t, closure: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_get_user_data(surface: ?*cairo_surface_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_surface_set_user_data(surface: ?*cairo_surface_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_surface_get_mime_data(surface: ?*cairo_surface_t, mime_type: [*c]const u8, data: [*c][*c]const u8, length: [*c]c_ulong) void;
pub extern fn cairo_surface_set_mime_data(surface: ?*cairo_surface_t, mime_type: [*c]const u8, data: [*c]const u8, length: c_ulong, destroy: cairo_destroy_func_t, closure: ?*c_void) cairo_status_t;
pub extern fn cairo_surface_supports_mime_type(surface: ?*cairo_surface_t, mime_type: [*c]const u8) cairo_bool_t;
pub extern fn cairo_surface_get_font_options(surface: ?*cairo_surface_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_surface_flush(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_mark_dirty(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_mark_dirty_rectangle(surface: ?*cairo_surface_t, x: c_int, y: c_int, width: c_int, height: c_int) void;
pub extern fn cairo_surface_set_device_scale(surface: ?*cairo_surface_t, x_scale: f64, y_scale: f64) void;
pub extern fn cairo_surface_get_device_scale(surface: ?*cairo_surface_t, x_scale: [*c]f64, y_scale: [*c]f64) void;
pub extern fn cairo_surface_set_device_offset(surface: ?*cairo_surface_t, x_offset: f64, y_offset: f64) void;
pub extern fn cairo_surface_get_device_offset(surface: ?*cairo_surface_t, x_offset: [*c]f64, y_offset: [*c]f64) void;
pub extern fn cairo_surface_set_fallback_resolution(surface: ?*cairo_surface_t, x_pixels_per_inch: f64, y_pixels_per_inch: f64) void;
pub extern fn cairo_surface_get_fallback_resolution(surface: ?*cairo_surface_t, x_pixels_per_inch: [*c]f64, y_pixels_per_inch: [*c]f64) void;
pub extern fn cairo_surface_copy_page(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_show_page(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_has_show_text_glyphs(surface: ?*cairo_surface_t) cairo_bool_t;
pub extern fn cairo_image_surface_create(format: cairo_format_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_format_stride_for_width(format: cairo_format_t, width: c_int) c_int;
pub extern fn cairo_image_surface_create_for_data(data: [*c]u8, format: cairo_format_t, width: c_int, height: c_int, stride: c_int) ?*cairo_surface_t;
pub extern fn cairo_image_surface_get_data(surface: ?*cairo_surface_t) [*c]u8;
pub extern fn cairo_image_surface_get_format(surface: ?*cairo_surface_t) cairo_format_t;
pub extern fn cairo_image_surface_get_width(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_get_height(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_get_stride(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_create_from_png(filename: [*c]const u8) ?*cairo_surface_t;
pub extern fn cairo_image_surface_create_from_png_stream(read_func: cairo_read_func_t, closure: ?*c_void) ?*cairo_surface_t;
pub extern fn cairo_recording_surface_create(content: cairo_content_t, extents: [*c]const cairo_rectangle_t) ?*cairo_surface_t;
pub extern fn cairo_recording_surface_ink_extents(surface: ?*cairo_surface_t, x0: [*c]f64, y0: [*c]f64, width: [*c]f64, height: [*c]f64) void;
pub extern fn cairo_recording_surface_get_extents(surface: ?*cairo_surface_t, extents: [*c]cairo_rectangle_t) cairo_bool_t;
pub const cairo_raster_source_acquire_func_t = ?fn (?*cairo_pattern_t, ?*c_void, ?*cairo_surface_t, [*c]const cairo_rectangle_int_t) callconv(.C) ?*cairo_surface_t;
pub const cairo_raster_source_release_func_t = ?fn (?*cairo_pattern_t, ?*c_void, ?*cairo_surface_t) callconv(.C) void;
pub const cairo_raster_source_snapshot_func_t = ?fn (?*cairo_pattern_t, ?*c_void) callconv(.C) cairo_status_t;
pub const cairo_raster_source_copy_func_t = ?fn (?*cairo_pattern_t, ?*c_void, ?*const cairo_pattern_t) callconv(.C) cairo_status_t;
pub const cairo_raster_source_finish_func_t = ?fn (?*cairo_pattern_t, ?*c_void) callconv(.C) void;
pub extern fn cairo_pattern_create_raster_source(user_data: ?*c_void, content: cairo_content_t, width: c_int, height: c_int) ?*cairo_pattern_t;
pub extern fn cairo_raster_source_pattern_set_callback_data(pattern: ?*cairo_pattern_t, data: ?*c_void) void;
pub extern fn cairo_raster_source_pattern_get_callback_data(pattern: ?*cairo_pattern_t) ?*c_void;
pub extern fn cairo_raster_source_pattern_set_acquire(pattern: ?*cairo_pattern_t, acquire: cairo_raster_source_acquire_func_t, release: cairo_raster_source_release_func_t) void;
pub extern fn cairo_raster_source_pattern_get_acquire(pattern: ?*cairo_pattern_t, acquire: [*c]cairo_raster_source_acquire_func_t, release: [*c]cairo_raster_source_release_func_t) void;
pub extern fn cairo_raster_source_pattern_set_snapshot(pattern: ?*cairo_pattern_t, snapshot: cairo_raster_source_snapshot_func_t) void;
pub extern fn cairo_raster_source_pattern_get_snapshot(pattern: ?*cairo_pattern_t) cairo_raster_source_snapshot_func_t;
pub extern fn cairo_raster_source_pattern_set_copy(pattern: ?*cairo_pattern_t, copy: cairo_raster_source_copy_func_t) void;
pub extern fn cairo_raster_source_pattern_get_copy(pattern: ?*cairo_pattern_t) cairo_raster_source_copy_func_t;
pub extern fn cairo_raster_source_pattern_set_finish(pattern: ?*cairo_pattern_t, finish: cairo_raster_source_finish_func_t) void;
pub extern fn cairo_raster_source_pattern_get_finish(pattern: ?*cairo_pattern_t) cairo_raster_source_finish_func_t;
pub extern fn cairo_pattern_create_rgb(red: f64, green: f64, blue: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_rgba(red: f64, green: f64, blue: f64, alpha: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_for_surface(surface: ?*cairo_surface_t) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_linear(x0: f64, y0: f64, x1: f64, y1: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_radial(cx0: f64, cy0: f64, radius0: f64, cx1: f64, cy1: f64, radius1: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_mesh() ?*cairo_pattern_t;
pub extern fn cairo_pattern_reference(pattern: ?*cairo_pattern_t) ?*cairo_pattern_t;
pub extern fn cairo_pattern_destroy(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_pattern_get_reference_count(pattern: ?*cairo_pattern_t) c_uint;
pub extern fn cairo_pattern_status(pattern: ?*cairo_pattern_t) cairo_status_t;
pub extern fn cairo_pattern_get_user_data(pattern: ?*cairo_pattern_t, key: [*c]const cairo_user_data_key_t) ?*c_void;
pub extern fn cairo_pattern_set_user_data(pattern: ?*cairo_pattern_t, key: [*c]const cairo_user_data_key_t, user_data: ?*c_void, destroy: cairo_destroy_func_t) cairo_status_t;
pub const CAIRO_PATTERN_TYPE_SOLID = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_SOLID);
pub const CAIRO_PATTERN_TYPE_SURFACE = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_SURFACE);
pub const CAIRO_PATTERN_TYPE_LINEAR = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_LINEAR);
pub const CAIRO_PATTERN_TYPE_RADIAL = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_RADIAL);
pub const CAIRO_PATTERN_TYPE_MESH = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_MESH);
pub const CAIRO_PATTERN_TYPE_RASTER_SOURCE = @enumToInt(enum__cairo_pattern_type.CAIRO_PATTERN_TYPE_RASTER_SOURCE);
pub const enum__cairo_pattern_type = extern enum(c_int) {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL,
    CAIRO_PATTERN_TYPE_MESH,
    CAIRO_PATTERN_TYPE_RASTER_SOURCE,
    _,
};
pub const cairo_pattern_type_t = enum__cairo_pattern_type;
pub extern fn cairo_pattern_get_type(pattern: ?*cairo_pattern_t) cairo_pattern_type_t;
pub extern fn cairo_pattern_add_color_stop_rgb(pattern: ?*cairo_pattern_t, offset: f64, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_pattern_add_color_stop_rgba(pattern: ?*cairo_pattern_t, offset: f64, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_mesh_pattern_begin_patch(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mesh_pattern_end_patch(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mesh_pattern_curve_to(pattern: ?*cairo_pattern_t, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) void;
pub extern fn cairo_mesh_pattern_line_to(pattern: ?*cairo_pattern_t, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_move_to(pattern: ?*cairo_pattern_t, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_set_control_point(pattern: ?*cairo_pattern_t, point_num: c_uint, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_set_corner_color_rgb(pattern: ?*cairo_pattern_t, corner_num: c_uint, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_mesh_pattern_set_corner_color_rgba(pattern: ?*cairo_pattern_t, corner_num: c_uint, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_pattern_set_matrix(pattern: ?*cairo_pattern_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_pattern_get_matrix(pattern: ?*cairo_pattern_t, matrix: [*c]cairo_matrix_t) void;
pub const CAIRO_EXTEND_NONE = @enumToInt(enum__cairo_extend.CAIRO_EXTEND_NONE);
pub const CAIRO_EXTEND_REPEAT = @enumToInt(enum__cairo_extend.CAIRO_EXTEND_REPEAT);
pub const CAIRO_EXTEND_REFLECT = @enumToInt(enum__cairo_extend.CAIRO_EXTEND_REFLECT);
pub const CAIRO_EXTEND_PAD = @enumToInt(enum__cairo_extend.CAIRO_EXTEND_PAD);
pub const enum__cairo_extend = extern enum(c_int) {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD,
    _,
};
pub const cairo_extend_t = enum__cairo_extend;
pub extern fn cairo_pattern_set_extend(pattern: ?*cairo_pattern_t, extend: cairo_extend_t) void;
pub extern fn cairo_pattern_get_extend(pattern: ?*cairo_pattern_t) cairo_extend_t;
pub const CAIRO_FILTER_FAST = @enumToInt(enum__cairo_filter.CAIRO_FILTER_FAST);
pub const CAIRO_FILTER_GOOD = @enumToInt(enum__cairo_filter.CAIRO_FILTER_GOOD);
pub const CAIRO_FILTER_BEST = @enumToInt(enum__cairo_filter.CAIRO_FILTER_BEST);
pub const CAIRO_FILTER_NEAREST = @enumToInt(enum__cairo_filter.CAIRO_FILTER_NEAREST);
pub const CAIRO_FILTER_BILINEAR = @enumToInt(enum__cairo_filter.CAIRO_FILTER_BILINEAR);
pub const CAIRO_FILTER_GAUSSIAN = @enumToInt(enum__cairo_filter.CAIRO_FILTER_GAUSSIAN);
pub const enum__cairo_filter = extern enum(c_int) {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN,
    _,
};
pub const cairo_filter_t = enum__cairo_filter;
pub extern fn cairo_pattern_set_filter(pattern: ?*cairo_pattern_t, filter: cairo_filter_t) void;
pub extern fn cairo_pattern_get_filter(pattern: ?*cairo_pattern_t) cairo_filter_t;
pub extern fn cairo_pattern_get_rgba(pattern: ?*cairo_pattern_t, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_surface(pattern: ?*cairo_pattern_t, surface: [*c]?*cairo_surface_t) cairo_status_t;
pub extern fn cairo_pattern_get_color_stop_rgba(pattern: ?*cairo_pattern_t, index: c_int, offset: [*c]f64, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_color_stop_count(pattern: ?*cairo_pattern_t, count: [*c]c_int) cairo_status_t;
pub extern fn cairo_pattern_get_linear_points(pattern: ?*cairo_pattern_t, x0: [*c]f64, y0: [*c]f64, x1: [*c]f64, y1: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_radial_circles(pattern: ?*cairo_pattern_t, x0: [*c]f64, y0: [*c]f64, r0: [*c]f64, x1: [*c]f64, y1: [*c]f64, r1: [*c]f64) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_patch_count(pattern: ?*cairo_pattern_t, count: [*c]c_uint) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_path(pattern: ?*cairo_pattern_t, patch_num: c_uint) [*c]cairo_path_t;
pub extern fn cairo_mesh_pattern_get_corner_color_rgba(pattern: ?*cairo_pattern_t, patch_num: c_uint, corner_num: c_uint, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_control_point(pattern: ?*cairo_pattern_t, patch_num: c_uint, point_num: c_uint, x: [*c]f64, y: [*c]f64) cairo_status_t;
pub extern fn cairo_matrix_init(matrix: [*c]cairo_matrix_t, xx: f64, yx: f64, xy: f64, yy: f64, x0: f64, y0: f64) void;
pub extern fn cairo_matrix_init_identity(matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_matrix_init_translate(matrix: [*c]cairo_matrix_t, tx: f64, ty: f64) void;
pub extern fn cairo_matrix_init_scale(matrix: [*c]cairo_matrix_t, sx: f64, sy: f64) void;
pub extern fn cairo_matrix_init_rotate(matrix: [*c]cairo_matrix_t, radians: f64) void;
pub extern fn cairo_matrix_translate(matrix: [*c]cairo_matrix_t, tx: f64, ty: f64) void;
pub extern fn cairo_matrix_scale(matrix: [*c]cairo_matrix_t, sx: f64, sy: f64) void;
pub extern fn cairo_matrix_rotate(matrix: [*c]cairo_matrix_t, radians: f64) void;
pub extern fn cairo_matrix_invert(matrix: [*c]cairo_matrix_t) cairo_status_t;
pub extern fn cairo_matrix_multiply(result: [*c]cairo_matrix_t, a: [*c]const cairo_matrix_t, b: [*c]const cairo_matrix_t) void;
pub extern fn cairo_matrix_transform_distance(matrix: [*c]const cairo_matrix_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_matrix_transform_point(matrix: [*c]const cairo_matrix_t, x: [*c]f64, y: [*c]f64) void;
pub const struct__cairo_region = opaque {};
pub const cairo_region_t = struct__cairo_region;
pub const CAIRO_REGION_OVERLAP_IN = @enumToInt(enum__cairo_region_overlap.CAIRO_REGION_OVERLAP_IN);
pub const CAIRO_REGION_OVERLAP_OUT = @enumToInt(enum__cairo_region_overlap.CAIRO_REGION_OVERLAP_OUT);
pub const CAIRO_REGION_OVERLAP_PART = @enumToInt(enum__cairo_region_overlap.CAIRO_REGION_OVERLAP_PART);
pub const enum__cairo_region_overlap = extern enum(c_int) {
    CAIRO_REGION_OVERLAP_IN,
    CAIRO_REGION_OVERLAP_OUT,
    CAIRO_REGION_OVERLAP_PART,
    _,
};
pub const cairo_region_overlap_t = enum__cairo_region_overlap;
pub extern fn cairo_region_create() ?*cairo_region_t;
pub extern fn cairo_region_create_rectangle(rectangle: [*c]const cairo_rectangle_int_t) ?*cairo_region_t;
pub extern fn cairo_region_create_rectangles(rects: [*c]const cairo_rectangle_int_t, count: c_int) ?*cairo_region_t;
pub extern fn cairo_region_copy(original: ?*const cairo_region_t) ?*cairo_region_t;
pub extern fn cairo_region_reference(region: ?*cairo_region_t) ?*cairo_region_t;
pub extern fn cairo_region_destroy(region: ?*cairo_region_t) void;
pub extern fn cairo_region_equal(a: ?*const cairo_region_t, b: ?*const cairo_region_t) cairo_bool_t;
pub extern fn cairo_region_status(region: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_get_extents(region: ?*const cairo_region_t, extents: [*c]cairo_rectangle_int_t) void;
pub extern fn cairo_region_num_rectangles(region: ?*const cairo_region_t) c_int;
pub extern fn cairo_region_get_rectangle(region: ?*const cairo_region_t, nth: c_int, rectangle: [*c]cairo_rectangle_int_t) void;
pub extern fn cairo_region_is_empty(region: ?*const cairo_region_t) cairo_bool_t;
pub extern fn cairo_region_contains_rectangle(region: ?*const cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_region_overlap_t;
pub extern fn cairo_region_contains_point(region: ?*const cairo_region_t, x: c_int, y: c_int) cairo_bool_t;
pub extern fn cairo_region_translate(region: ?*cairo_region_t, dx: c_int, dy: c_int) void;
pub extern fn cairo_region_subtract(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_subtract_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_intersect(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_intersect_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_union(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_union_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_xor(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_xor_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_debug_reset_static_data() void;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):62:9
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):66:9
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):73:9
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):77:9
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):81:9
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):96:9
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):159:9
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):187:9
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):225:9
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):229:9
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):265:9
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):269:9
pub const __GLIBC_USE = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/features.h:179:9
pub const __NTH = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:57:11
pub const __NTHNL = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:58:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:105:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:106:9
pub const __ptr_t = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:109:9
pub const __warndecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:133:10
pub const __warnattr = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:134:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:135:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:143:10
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:174:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:181:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:183:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:187:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:219:10
pub const __extern_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:346:11
pub const __extern_always_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:347:11
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:441:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:512:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:513:10
pub const __glibc_macro_warning1 = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:527:10
pub const __attr_access = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:559:11
pub const __S16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:109:9
pub const __U16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:110:9
pub const __SLONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:113:9
pub const __ULONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:114:9
pub const __SQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:128:10
pub const __UQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:129:10
pub const __SWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:130:10
pub const __UWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:131:10
pub const __S64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:134:10
pub const __U64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:135:10
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:137:10
pub const __TIMER_T_TYPE = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/typesizes.h:71:9
pub const __FSID_T_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/typesizes.h:73:9
pub const __INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:106:11
pub const __UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:107:11
pub const INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:252:11
pub const UINT32_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:260:10
pub const UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:262:11
pub const INTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:269:11
pub const UINTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:270:11
pub const APIENTRYP = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/GL/gl.h:88:9
pub const GLAPIENTRYP = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/GL/gl.h:92:9
pub const CAIRO_VERSION_STRINGIZE_ = @compileError("unable to translate C expr: unexpected token .Hash"); // /home/randy/Bureau/Programmation/zervo/cairo/src/cairo.h:74:9
pub const __llvm__ = 1;
pub const __clang__ = 1;
pub const __clang_major__ = 11;
pub const __clang_minor__ = 0;
pub const __clang_patchlevel__ = 0;
pub const __clang_version__ = "11.0.0 ";
pub const __GNUC__ = 4;
pub const __GNUC_MINOR__ = 2;
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __GXX_ABI_VERSION = 1002;
pub const __ATOMIC_RELAXED = 0;
pub const __ATOMIC_CONSUME = 1;
pub const __ATOMIC_ACQUIRE = 2;
pub const __ATOMIC_RELEASE = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __ATOMIC_SEQ_CST = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __VERSION__ = "Clang 11.0.0";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __OPTIMIZE__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = 1;
pub const _LP64 = 1;
pub const __LP64__ = 1;
pub const __CHAR_BIT__ = 8;
pub const __SCHAR_MAX__ = 127;
pub const __SHRT_MAX__ = 32767;
pub const __INT_MAX__ = 2147483647;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = 2147483647;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __SIZEOF_DOUBLE__ = 8;
pub const __SIZEOF_FLOAT__ = 4;
pub const __SIZEOF_INT__ = 4;
pub const __SIZEOF_LONG__ = 8;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZEOF_SHORT__ = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __SIZEOF_WINT_T__ = 4;
pub const __SIZEOF_INT128__ = 16;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __INTMAX_WIDTH__ = 64;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = 64;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = 64;
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = 32;
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = 32;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = 64;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = 64;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = 1;
pub const __FLT_DIG__ = 6;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __FLT_MAX_EXP__ = 128;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -37;
pub const __FLT_MIN_EXP__ = -125;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = 1;
pub const __DBL_DIG__ = 15;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = 1;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __DBL_MANT_DIG__ = 53;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __DBL_MAX_EXP__ = 1024;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __DBL_MIN_EXP__ = -1021;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = 1;
pub const __LDBL_DIG__ = 18;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __LDBL_MIN_EXP__ = -16381;
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = 64;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __WINT_UNSIGNED__ = 1;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = L;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_MAX__ = 255;
pub const __INT8_MAX__ = 127;
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_MAX__ = 65535;
pub const __INT16_MAX__ = 32767;
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = U;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __INT32_MAX__ = 2147483647;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = 127;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = 255;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = 127;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = 255;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __FINITE_MATH_ONLY__ = 0;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __PIC__ = 2;
pub const __pic__ = 2;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __FLT_RADIX__ = 2;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = 2;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const __code_model_small__ = 1;
pub const __amd64__ = 1;
pub const __amd64 = 1;
pub const __x86_64 = 1;
pub const __x86_64__ = 1;
pub const __SEG_GS = 1;
pub const __SEG_FS = 1;
pub const __seg_gs = __attribute__(address_space(256));
pub const __seg_fs = __attribute__(address_space(257));
pub const __bdver3 = 1;
pub const __bdver3__ = 1;
pub const __tune_bdver3__ = 1;
pub const __NO_MATH_INLINES = 1;
pub const __AES__ = 1;
pub const __PCLMUL__ = 1;
pub const __LZCNT__ = 1;
pub const __FSGSBASE__ = 1;
pub const __BMI__ = 1;
pub const __POPCNT__ = 1;
pub const __PRFCHW__ = 1;
pub const __TBM__ = 1;
pub const __LWP__ = 1;
pub const __XOP__ = 1;
pub const __FMA4__ = 1;
pub const __SSE4A__ = 1;
pub const __FMA__ = 1;
pub const __F16C__ = 1;
pub const __FXSR__ = 1;
pub const __XSAVE__ = 1;
pub const __XSAVEOPT__ = 1;
pub const __AVX__ = 1;
pub const __SSE4_2__ = 1;
pub const __SSE4_1__ = 1;
pub const __SSSE3__ = 1;
pub const __SSE3__ = 1;
pub const __SSE2__ = 1;
pub const __SSE2_MATH__ = 1;
pub const __SSE__ = 1;
pub const __SSE_MATH__ = 1;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __SIZEOF_FLOAT128__ = 16;
pub const unix = 1;
pub const __unix = 1;
pub const __unix__ = 1;
pub const linux = 1;
pub const __linux = 1;
pub const __linux__ = 1;
pub const __ELF__ = 1;
pub const __gnu_linux__ = 1;
pub const __FLOAT128__ = 1;
pub const __STDC__ = 1;
pub const __STDC_HOSTED__ = 1;
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = 1;
pub const __STDC_UTF_32__ = 1;
pub const _DEBUG = 1;
pub const NULL = (@import("std").meta.cast(?*c_void, 0));
pub inline fn offsetof(t: anytype, d: anytype) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const _STDINT_H = 1;
pub const _FEATURES_H = 1;
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min)) {
    return ((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min);
}
pub const _DEFAULT_SOURCE = 1;
pub const __GLIBC_USE_ISOC2X = 0;
pub const __USE_ISOC11 = 1;
pub const __USE_ISOC99 = 1;
pub const __USE_ISOC95 = 1;
pub const __USE_POSIX_IMPLICITLY = 1;
pub const _POSIX_SOURCE = 1;
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = 1;
pub const __USE_POSIX2 = 1;
pub const __USE_POSIX199309 = 1;
pub const __USE_POSIX199506 = 1;
pub const __USE_XOPEN2K = 1;
pub const __USE_XOPEN2K8 = 1;
pub const _ATFILE_SOURCE = 1;
pub const __USE_MISC = 1;
pub const __USE_ATFILE = 1;
pub const __USE_FORTIFY_LEVEL = 0;
pub const __GLIBC_USE_DEPRECATED_GETS = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF = 0;
pub const _STDC_PREDEF_H = 1;
pub const __STDC_IEC_559__ = 1;
pub const __STDC_IEC_559_COMPLEX__ = 1;
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = 6;
pub const __GLIBC__ = 2;
pub const __GLIBC_MINOR__ = 32;
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min);
}
pub const _SYS_CDEFS_H = 1;
pub const __THROW = __attribute__(__nothrow__ ++ __LEAF);
pub const __THROWNL = __attribute__(__nothrow__);
pub inline fn __glibc_clang_has_extension(ext: anytype) @TypeOf(__has_extension(ext)) {
    return __has_extension(ext);
}
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1)) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1);
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, 0)) {
    return __builtin_object_size(ptr, 0);
}
pub const __glibc_c99_flexarr_available = 1;
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub const __attribute_malloc__ = __attribute__(__malloc__);
pub const __attribute_pure__ = __attribute__(__pure__);
pub const __attribute_const__ = __attribute__(__const__);
pub const __attribute_used__ = __attribute__(__used__);
pub const __attribute_noinline__ = __attribute__(__noinline__);
pub const __attribute_deprecated__ = __attribute__(__deprecated__);
pub inline fn __attribute_deprecated_msg__(msg: anytype) @TypeOf(__attribute__(__deprecated__(msg))) {
    return __attribute__(__deprecated__(msg));
}
pub inline fn __attribute_format_arg__(x: anytype) @TypeOf(__attribute__(__format_arg__(x))) {
    return __attribute__(__format_arg__(x));
}
pub inline fn __attribute_format_strfmon__(a: anytype, b: anytype) @TypeOf(__attribute__(__format__(__strfmon__, a, b))) {
    return __attribute__(__format__(__strfmon__, a, b));
}
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute__(__nonnull__ ++ params)) {
    return __attribute__(__nonnull__ ++ params);
}
pub const __attribute_warn_unused_result__ = __attribute__(__warn_unused_result__);
pub const __always_inline = __inline ++ __attribute__(__always_inline__);
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = __restrict;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, 0)) {
    return __builtin_expect(cond, 0);
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, 1)) {
    return __builtin_expect(cond, 1);
}
pub inline fn __glibc_has_attribute(attr: anytype) @TypeOf(__has_attribute(attr)) {
    return __has_attribute(attr);
}
pub const __WORDSIZE = 64;
pub const __WORDSIZE_TIME64_COMPAT32 = 1;
pub const __SYSCALL_WORDSIZE = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub inline fn __glibc_macro_warning(message: anytype) @TypeOf(__glibc_macro_warning1(GCC ++ warning ++ message)) {
    return __glibc_macro_warning1(GCC ++ warning ++ message);
}
pub const __HAVE_GENERIC_SELECTION = 1;
pub const __USE_EXTERN_INLINES = 1;
pub const __GLIBC_USE_LIB_EXT2 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = 0;
pub const _BITS_TYPES_H = 1;
pub const __TIMESIZE = __WORDSIZE;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const _BITS_TYPESIZES_H = 1;
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = 1;
pub const __INO_T_MATCHES_INO64_T = 1;
pub const __RLIM_T_MATCHES_RLIM64_T = 1;
pub const __STATFS_MATCHES_STATFS64 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;
pub const __FD_SETSIZE = 1024;
pub const _BITS_TIME64_H = 1;
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = 1;
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - 1;
pub const _BITS_STDINT_INTN_H = 1;
pub const _BITS_STDINT_UINTN_H = 1;
pub const INT8_MIN = -128;
pub const INT16_MIN = -32767 - 1;
pub const INT32_MIN = -2147483647 - 1;
pub const INT64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT8_MAX = 127;
pub const INT16_MAX = 32767;
pub const INT32_MAX = 2147483647;
pub const INT64_MAX = __INT64_C(9223372036854775807);
pub const UINT8_MAX = 255;
pub const UINT16_MAX = 65535;
pub const UINT32_MAX = @as(c_uint, 4294967295);
pub const UINT64_MAX = __UINT64_C(18446744073709551615);
pub const INT_LEAST8_MIN = -128;
pub const INT_LEAST16_MIN = -32767 - 1;
pub const INT_LEAST32_MIN = -2147483647 - 1;
pub const INT_LEAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_LEAST8_MAX = 127;
pub const INT_LEAST16_MAX = 32767;
pub const INT_LEAST32_MAX = 2147483647;
pub const INT_LEAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_LEAST8_MAX = 255;
pub const UINT_LEAST16_MAX = 65535;
pub const UINT_LEAST32_MAX = @as(c_uint, 4294967295);
pub const UINT_LEAST64_MAX = __UINT64_C(18446744073709551615);
pub const INT_FAST8_MIN = -128;
pub const INT_FAST16_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST32_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_FAST8_MAX = 127;
pub const INT_FAST16_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST32_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_FAST8_MAX = 255;
pub const UINT_FAST16_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST32_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST64_MAX = __UINT64_C(18446744073709551615);
pub const INTPTR_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INTPTR_MAX = @as(c_long, 9223372036854775807);
pub const UINTPTR_MAX = @as(c_ulong, 18446744073709551615);
pub const INTMAX_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INTMAX_MAX = __INT64_C(9223372036854775807);
pub const UINTMAX_MAX = __UINT64_C(18446744073709551615);
pub const PTRDIFF_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const PTRDIFF_MAX = @as(c_long, 9223372036854775807);
pub const SIG_ATOMIC_MIN = -2147483647 - 1;
pub const SIG_ATOMIC_MAX = 2147483647;
pub const SIZE_MAX = @as(c_ulong, 18446744073709551615);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @as(c_uint, 4294967295);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub const GLAPI = __attribute__(visibility("default"));
pub const GL_VERSION_1_1 = 1;
pub const GL_VERSION_1_2 = 1;
pub const GL_VERSION_1_3 = 1;
pub const GL_ARB_imaging = 1;
pub const GL_FALSE = 0;
pub const GL_TRUE = 1;
pub const GL_BYTE = 0x1400;
pub const GL_UNSIGNED_BYTE = 0x1401;
pub const GL_SHORT = 0x1402;
pub const GL_UNSIGNED_SHORT = 0x1403;
pub const GL_INT = 0x1404;
pub const GL_UNSIGNED_INT = 0x1405;
pub const GL_FLOAT = 0x1406;
pub const GL_2_BYTES = 0x1407;
pub const GL_3_BYTES = 0x1408;
pub const GL_4_BYTES = 0x1409;
pub const GL_DOUBLE = 0x140A;
pub const GL_POINTS = 0x0000;
pub const GL_LINES = 0x0001;
pub const GL_LINE_LOOP = 0x0002;
pub const GL_LINE_STRIP = 0x0003;
pub const GL_TRIANGLES = 0x0004;
pub const GL_TRIANGLE_STRIP = 0x0005;
pub const GL_TRIANGLE_FAN = 0x0006;
pub const GL_QUADS = 0x0007;
pub const GL_QUAD_STRIP = 0x0008;
pub const GL_POLYGON = 0x0009;
pub const GL_VERTEX_ARRAY = 0x8074;
pub const GL_NORMAL_ARRAY = 0x8075;
pub const GL_COLOR_ARRAY = 0x8076;
pub const GL_INDEX_ARRAY = 0x8077;
pub const GL_TEXTURE_COORD_ARRAY = 0x8078;
pub const GL_EDGE_FLAG_ARRAY = 0x8079;
pub const GL_VERTEX_ARRAY_SIZE = 0x807A;
pub const GL_VERTEX_ARRAY_TYPE = 0x807B;
pub const GL_VERTEX_ARRAY_STRIDE = 0x807C;
pub const GL_NORMAL_ARRAY_TYPE = 0x807E;
pub const GL_NORMAL_ARRAY_STRIDE = 0x807F;
pub const GL_COLOR_ARRAY_SIZE = 0x8081;
pub const GL_COLOR_ARRAY_TYPE = 0x8082;
pub const GL_COLOR_ARRAY_STRIDE = 0x8083;
pub const GL_INDEX_ARRAY_TYPE = 0x8085;
pub const GL_INDEX_ARRAY_STRIDE = 0x8086;
pub const GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
pub const GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
pub const GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
pub const GL_VERTEX_ARRAY_POINTER = 0x808E;
pub const GL_NORMAL_ARRAY_POINTER = 0x808F;
pub const GL_COLOR_ARRAY_POINTER = 0x8090;
pub const GL_INDEX_ARRAY_POINTER = 0x8091;
pub const GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
pub const GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
pub const GL_V2F = 0x2A20;
pub const GL_V3F = 0x2A21;
pub const GL_C4UB_V2F = 0x2A22;
pub const GL_C4UB_V3F = 0x2A23;
pub const GL_C3F_V3F = 0x2A24;
pub const GL_N3F_V3F = 0x2A25;
pub const GL_C4F_N3F_V3F = 0x2A26;
pub const GL_T2F_V3F = 0x2A27;
pub const GL_T4F_V4F = 0x2A28;
pub const GL_T2F_C4UB_V3F = 0x2A29;
pub const GL_T2F_C3F_V3F = 0x2A2A;
pub const GL_T2F_N3F_V3F = 0x2A2B;
pub const GL_T2F_C4F_N3F_V3F = 0x2A2C;
pub const GL_T4F_C4F_N3F_V4F = 0x2A2D;
pub const GL_MATRIX_MODE = 0x0BA0;
pub const GL_MODELVIEW = 0x1700;
pub const GL_PROJECTION = 0x1701;
pub const GL_TEXTURE = 0x1702;
pub const GL_POINT_SMOOTH = 0x0B10;
pub const GL_POINT_SIZE = 0x0B11;
pub const GL_POINT_SIZE_GRANULARITY = 0x0B13;
pub const GL_POINT_SIZE_RANGE = 0x0B12;
pub const GL_LINE_SMOOTH = 0x0B20;
pub const GL_LINE_STIPPLE = 0x0B24;
pub const GL_LINE_STIPPLE_PATTERN = 0x0B25;
pub const GL_LINE_STIPPLE_REPEAT = 0x0B26;
pub const GL_LINE_WIDTH = 0x0B21;
pub const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const GL_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_POINT = 0x1B00;
pub const GL_LINE = 0x1B01;
pub const GL_FILL = 0x1B02;
pub const GL_CW = 0x0900;
pub const GL_CCW = 0x0901;
pub const GL_FRONT = 0x0404;
pub const GL_BACK = 0x0405;
pub const GL_POLYGON_MODE = 0x0B40;
pub const GL_POLYGON_SMOOTH = 0x0B41;
pub const GL_POLYGON_STIPPLE = 0x0B42;
pub const GL_EDGE_FLAG = 0x0B43;
pub const GL_CULL_FACE = 0x0B44;
pub const GL_CULL_FACE_MODE = 0x0B45;
pub const GL_FRONT_FACE = 0x0B46;
pub const GL_POLYGON_OFFSET_FACTOR = 0x8038;
pub const GL_POLYGON_OFFSET_UNITS = 0x2A00;
pub const GL_POLYGON_OFFSET_POINT = 0x2A01;
pub const GL_POLYGON_OFFSET_LINE = 0x2A02;
pub const GL_POLYGON_OFFSET_FILL = 0x8037;
pub const GL_COMPILE = 0x1300;
pub const GL_COMPILE_AND_EXECUTE = 0x1301;
pub const GL_LIST_BASE = 0x0B32;
pub const GL_LIST_INDEX = 0x0B33;
pub const GL_LIST_MODE = 0x0B30;
pub const GL_NEVER = 0x0200;
pub const GL_LESS = 0x0201;
pub const GL_EQUAL = 0x0202;
pub const GL_LEQUAL = 0x0203;
pub const GL_GREATER = 0x0204;
pub const GL_NOTEQUAL = 0x0205;
pub const GL_GEQUAL = 0x0206;
pub const GL_ALWAYS = 0x0207;
pub const GL_DEPTH_TEST = 0x0B71;
pub const GL_DEPTH_BITS = 0x0D56;
pub const GL_DEPTH_CLEAR_VALUE = 0x0B73;
pub const GL_DEPTH_FUNC = 0x0B74;
pub const GL_DEPTH_RANGE = 0x0B70;
pub const GL_DEPTH_WRITEMASK = 0x0B72;
pub const GL_DEPTH_COMPONENT = 0x1902;
pub const GL_LIGHTING = 0x0B50;
pub const GL_LIGHT0 = 0x4000;
pub const GL_LIGHT1 = 0x4001;
pub const GL_LIGHT2 = 0x4002;
pub const GL_LIGHT3 = 0x4003;
pub const GL_LIGHT4 = 0x4004;
pub const GL_LIGHT5 = 0x4005;
pub const GL_LIGHT6 = 0x4006;
pub const GL_LIGHT7 = 0x4007;
pub const GL_SPOT_EXPONENT = 0x1205;
pub const GL_SPOT_CUTOFF = 0x1206;
pub const GL_CONSTANT_ATTENUATION = 0x1207;
pub const GL_LINEAR_ATTENUATION = 0x1208;
pub const GL_QUADRATIC_ATTENUATION = 0x1209;
pub const GL_AMBIENT = 0x1200;
pub const GL_DIFFUSE = 0x1201;
pub const GL_SPECULAR = 0x1202;
pub const GL_SHININESS = 0x1601;
pub const GL_EMISSION = 0x1600;
pub const GL_POSITION = 0x1203;
pub const GL_SPOT_DIRECTION = 0x1204;
pub const GL_AMBIENT_AND_DIFFUSE = 0x1602;
pub const GL_COLOR_INDEXES = 0x1603;
pub const GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
pub const GL_LIGHT_MODEL_AMBIENT = 0x0B53;
pub const GL_FRONT_AND_BACK = 0x0408;
pub const GL_SHADE_MODEL = 0x0B54;
pub const GL_FLAT = 0x1D00;
pub const GL_SMOOTH = 0x1D01;
pub const GL_COLOR_MATERIAL = 0x0B57;
pub const GL_COLOR_MATERIAL_FACE = 0x0B55;
pub const GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
pub const GL_NORMALIZE = 0x0BA1;
pub const GL_CLIP_PLANE0 = 0x3000;
pub const GL_CLIP_PLANE1 = 0x3001;
pub const GL_CLIP_PLANE2 = 0x3002;
pub const GL_CLIP_PLANE3 = 0x3003;
pub const GL_CLIP_PLANE4 = 0x3004;
pub const GL_CLIP_PLANE5 = 0x3005;
pub const GL_ACCUM_RED_BITS = 0x0D58;
pub const GL_ACCUM_GREEN_BITS = 0x0D59;
pub const GL_ACCUM_BLUE_BITS = 0x0D5A;
pub const GL_ACCUM_ALPHA_BITS = 0x0D5B;
pub const GL_ACCUM_CLEAR_VALUE = 0x0B80;
pub const GL_ACCUM = 0x0100;
pub const GL_ADD = 0x0104;
pub const GL_LOAD = 0x0101;
pub const GL_MULT = 0x0103;
pub const GL_RETURN = 0x0102;
pub const GL_ALPHA_TEST = 0x0BC0;
pub const GL_ALPHA_TEST_REF = 0x0BC2;
pub const GL_ALPHA_TEST_FUNC = 0x0BC1;
pub const GL_BLEND = 0x0BE2;
pub const GL_BLEND_SRC = 0x0BE1;
pub const GL_BLEND_DST = 0x0BE0;
pub const GL_ZERO = 0;
pub const GL_ONE = 1;
pub const GL_SRC_COLOR = 0x0300;
pub const GL_ONE_MINUS_SRC_COLOR = 0x0301;
pub const GL_SRC_ALPHA = 0x0302;
pub const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
pub const GL_DST_ALPHA = 0x0304;
pub const GL_ONE_MINUS_DST_ALPHA = 0x0305;
pub const GL_DST_COLOR = 0x0306;
pub const GL_ONE_MINUS_DST_COLOR = 0x0307;
pub const GL_SRC_ALPHA_SATURATE = 0x0308;
pub const GL_FEEDBACK = 0x1C01;
pub const GL_RENDER = 0x1C00;
pub const GL_SELECT = 0x1C02;
pub const GL_2D = 0x0600;
pub const GL_3D = 0x0601;
pub const GL_3D_COLOR = 0x0602;
pub const GL_3D_COLOR_TEXTURE = 0x0603;
pub const GL_4D_COLOR_TEXTURE = 0x0604;
pub const GL_POINT_TOKEN = 0x0701;
pub const GL_LINE_TOKEN = 0x0702;
pub const GL_LINE_RESET_TOKEN = 0x0707;
pub const GL_POLYGON_TOKEN = 0x0703;
pub const GL_BITMAP_TOKEN = 0x0704;
pub const GL_DRAW_PIXEL_TOKEN = 0x0705;
pub const GL_COPY_PIXEL_TOKEN = 0x0706;
pub const GL_PASS_THROUGH_TOKEN = 0x0700;
pub const GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
pub const GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
pub const GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
pub const GL_SELECTION_BUFFER_POINTER = 0x0DF3;
pub const GL_SELECTION_BUFFER_SIZE = 0x0DF4;
pub const GL_FOG = 0x0B60;
pub const GL_FOG_MODE = 0x0B65;
pub const GL_FOG_DENSITY = 0x0B62;
pub const GL_FOG_COLOR = 0x0B66;
pub const GL_FOG_INDEX = 0x0B61;
pub const GL_FOG_START = 0x0B63;
pub const GL_FOG_END = 0x0B64;
pub const GL_LINEAR = 0x2601;
pub const GL_EXP = 0x0800;
pub const GL_EXP2 = 0x0801;
pub const GL_LOGIC_OP = 0x0BF1;
pub const GL_INDEX_LOGIC_OP = 0x0BF1;
pub const GL_COLOR_LOGIC_OP = 0x0BF2;
pub const GL_LOGIC_OP_MODE = 0x0BF0;
pub const GL_CLEAR = 0x1500;
pub const GL_SET = 0x150F;
pub const GL_COPY = 0x1503;
pub const GL_COPY_INVERTED = 0x150C;
pub const GL_NOOP = 0x1505;
pub const GL_INVERT = 0x150A;
pub const GL_AND = 0x1501;
pub const GL_NAND = 0x150E;
pub const GL_OR = 0x1507;
pub const GL_NOR = 0x1508;
pub const GL_XOR = 0x1506;
pub const GL_EQUIV = 0x1509;
pub const GL_AND_REVERSE = 0x1502;
pub const GL_AND_INVERTED = 0x1504;
pub const GL_OR_REVERSE = 0x150B;
pub const GL_OR_INVERTED = 0x150D;
pub const GL_STENCIL_BITS = 0x0D57;
pub const GL_STENCIL_TEST = 0x0B90;
pub const GL_STENCIL_CLEAR_VALUE = 0x0B91;
pub const GL_STENCIL_FUNC = 0x0B92;
pub const GL_STENCIL_VALUE_MASK = 0x0B93;
pub const GL_STENCIL_FAIL = 0x0B94;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub const GL_STENCIL_REF = 0x0B97;
pub const GL_STENCIL_WRITEMASK = 0x0B98;
pub const GL_STENCIL_INDEX = 0x1901;
pub const GL_KEEP = 0x1E00;
pub const GL_REPLACE = 0x1E01;
pub const GL_INCR = 0x1E02;
pub const GL_DECR = 0x1E03;
pub const GL_NONE = 0;
pub const GL_LEFT = 0x0406;
pub const GL_RIGHT = 0x0407;
pub const GL_FRONT_LEFT = 0x0400;
pub const GL_FRONT_RIGHT = 0x0401;
pub const GL_BACK_LEFT = 0x0402;
pub const GL_BACK_RIGHT = 0x0403;
pub const GL_AUX0 = 0x0409;
pub const GL_AUX1 = 0x040A;
pub const GL_AUX2 = 0x040B;
pub const GL_AUX3 = 0x040C;
pub const GL_COLOR_INDEX = 0x1900;
pub const GL_RED = 0x1903;
pub const GL_GREEN = 0x1904;
pub const GL_BLUE = 0x1905;
pub const GL_ALPHA = 0x1906;
pub const GL_LUMINANCE = 0x1909;
pub const GL_LUMINANCE_ALPHA = 0x190A;
pub const GL_ALPHA_BITS = 0x0D55;
pub const GL_RED_BITS = 0x0D52;
pub const GL_GREEN_BITS = 0x0D53;
pub const GL_BLUE_BITS = 0x0D54;
pub const GL_INDEX_BITS = 0x0D51;
pub const GL_SUBPIXEL_BITS = 0x0D50;
pub const GL_AUX_BUFFERS = 0x0C00;
pub const GL_READ_BUFFER = 0x0C02;
pub const GL_DRAW_BUFFER = 0x0C01;
pub const GL_DOUBLEBUFFER = 0x0C32;
pub const GL_STEREO = 0x0C33;
pub const GL_BITMAP = 0x1A00;
pub const GL_COLOR = 0x1800;
pub const GL_DEPTH = 0x1801;
pub const GL_STENCIL = 0x1802;
pub const GL_DITHER = 0x0BD0;
pub const GL_RGB = 0x1907;
pub const GL_RGBA = 0x1908;
pub const GL_MAX_LIST_NESTING = 0x0B31;
pub const GL_MAX_EVAL_ORDER = 0x0D30;
pub const GL_MAX_LIGHTS = 0x0D31;
pub const GL_MAX_CLIP_PLANES = 0x0D32;
pub const GL_MAX_TEXTURE_SIZE = 0x0D33;
pub const GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
pub const GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
pub const GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
pub const GL_MAX_NAME_STACK_DEPTH = 0x0D37;
pub const GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
pub const GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
pub const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
pub const GL_ATTRIB_STACK_DEPTH = 0x0BB0;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
pub const GL_COLOR_CLEAR_VALUE = 0x0C22;
pub const GL_COLOR_WRITEMASK = 0x0C23;
pub const GL_CURRENT_INDEX = 0x0B01;
pub const GL_CURRENT_COLOR = 0x0B00;
pub const GL_CURRENT_NORMAL = 0x0B02;
pub const GL_CURRENT_RASTER_COLOR = 0x0B04;
pub const GL_CURRENT_RASTER_DISTANCE = 0x0B09;
pub const GL_CURRENT_RASTER_INDEX = 0x0B05;
pub const GL_CURRENT_RASTER_POSITION = 0x0B07;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
pub const GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
pub const GL_CURRENT_TEXTURE_COORDS = 0x0B03;
pub const GL_INDEX_CLEAR_VALUE = 0x0C20;
pub const GL_INDEX_MODE = 0x0C30;
pub const GL_INDEX_WRITEMASK = 0x0C21;
pub const GL_MODELVIEW_MATRIX = 0x0BA6;
pub const GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
pub const GL_NAME_STACK_DEPTH = 0x0D70;
pub const GL_PROJECTION_MATRIX = 0x0BA7;
pub const GL_PROJECTION_STACK_DEPTH = 0x0BA4;
pub const GL_RENDER_MODE = 0x0C40;
pub const GL_RGBA_MODE = 0x0C31;
pub const GL_TEXTURE_MATRIX = 0x0BA8;
pub const GL_TEXTURE_STACK_DEPTH = 0x0BA5;
pub const GL_VIEWPORT = 0x0BA2;
pub const GL_AUTO_NORMAL = 0x0D80;
pub const GL_MAP1_COLOR_4 = 0x0D90;
pub const GL_MAP1_INDEX = 0x0D91;
pub const GL_MAP1_NORMAL = 0x0D92;
pub const GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
pub const GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
pub const GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
pub const GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
pub const GL_MAP1_VERTEX_3 = 0x0D97;
pub const GL_MAP1_VERTEX_4 = 0x0D98;
pub const GL_MAP2_COLOR_4 = 0x0DB0;
pub const GL_MAP2_INDEX = 0x0DB1;
pub const GL_MAP2_NORMAL = 0x0DB2;
pub const GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
pub const GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
pub const GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
pub const GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
pub const GL_MAP2_VERTEX_3 = 0x0DB7;
pub const GL_MAP2_VERTEX_4 = 0x0DB8;
pub const GL_MAP1_GRID_DOMAIN = 0x0DD0;
pub const GL_MAP1_GRID_SEGMENTS = 0x0DD1;
pub const GL_MAP2_GRID_DOMAIN = 0x0DD2;
pub const GL_MAP2_GRID_SEGMENTS = 0x0DD3;
pub const GL_COEFF = 0x0A00;
pub const GL_ORDER = 0x0A01;
pub const GL_DOMAIN = 0x0A02;
pub const GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
pub const GL_POINT_SMOOTH_HINT = 0x0C51;
pub const GL_LINE_SMOOTH_HINT = 0x0C52;
pub const GL_POLYGON_SMOOTH_HINT = 0x0C53;
pub const GL_FOG_HINT = 0x0C54;
pub const GL_DONT_CARE = 0x1100;
pub const GL_FASTEST = 0x1101;
pub const GL_NICEST = 0x1102;
pub const GL_SCISSOR_BOX = 0x0C10;
pub const GL_SCISSOR_TEST = 0x0C11;
pub const GL_MAP_COLOR = 0x0D10;
pub const GL_MAP_STENCIL = 0x0D11;
pub const GL_INDEX_SHIFT = 0x0D12;
pub const GL_INDEX_OFFSET = 0x0D13;
pub const GL_RED_SCALE = 0x0D14;
pub const GL_RED_BIAS = 0x0D15;
pub const GL_GREEN_SCALE = 0x0D18;
pub const GL_GREEN_BIAS = 0x0D19;
pub const GL_BLUE_SCALE = 0x0D1A;
pub const GL_BLUE_BIAS = 0x0D1B;
pub const GL_ALPHA_SCALE = 0x0D1C;
pub const GL_ALPHA_BIAS = 0x0D1D;
pub const GL_DEPTH_SCALE = 0x0D1E;
pub const GL_DEPTH_BIAS = 0x0D1F;
pub const GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
pub const GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
pub const GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
pub const GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
pub const GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
pub const GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
pub const GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
pub const GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
pub const GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
pub const GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
pub const GL_PIXEL_MAP_S_TO_S = 0x0C71;
pub const GL_PIXEL_MAP_I_TO_I = 0x0C70;
pub const GL_PIXEL_MAP_I_TO_R = 0x0C72;
pub const GL_PIXEL_MAP_I_TO_G = 0x0C73;
pub const GL_PIXEL_MAP_I_TO_B = 0x0C74;
pub const GL_PIXEL_MAP_I_TO_A = 0x0C75;
pub const GL_PIXEL_MAP_R_TO_R = 0x0C76;
pub const GL_PIXEL_MAP_G_TO_G = 0x0C77;
pub const GL_PIXEL_MAP_B_TO_B = 0x0C78;
pub const GL_PIXEL_MAP_A_TO_A = 0x0C79;
pub const GL_PACK_ALIGNMENT = 0x0D05;
pub const GL_PACK_LSB_FIRST = 0x0D01;
pub const GL_PACK_ROW_LENGTH = 0x0D02;
pub const GL_PACK_SKIP_PIXELS = 0x0D04;
pub const GL_PACK_SKIP_ROWS = 0x0D03;
pub const GL_PACK_SWAP_BYTES = 0x0D00;
pub const GL_UNPACK_ALIGNMENT = 0x0CF5;
pub const GL_UNPACK_LSB_FIRST = 0x0CF1;
pub const GL_UNPACK_ROW_LENGTH = 0x0CF2;
pub const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
pub const GL_UNPACK_SKIP_ROWS = 0x0CF3;
pub const GL_UNPACK_SWAP_BYTES = 0x0CF0;
pub const GL_ZOOM_X = 0x0D16;
pub const GL_ZOOM_Y = 0x0D17;
pub const GL_TEXTURE_ENV = 0x2300;
pub const GL_TEXTURE_ENV_MODE = 0x2200;
pub const GL_TEXTURE_1D = 0x0DE0;
pub const GL_TEXTURE_2D = 0x0DE1;
pub const GL_TEXTURE_WRAP_S = 0x2802;
pub const GL_TEXTURE_WRAP_T = 0x2803;
pub const GL_TEXTURE_MAG_FILTER = 0x2800;
pub const GL_TEXTURE_MIN_FILTER = 0x2801;
pub const GL_TEXTURE_ENV_COLOR = 0x2201;
pub const GL_TEXTURE_GEN_S = 0x0C60;
pub const GL_TEXTURE_GEN_T = 0x0C61;
pub const GL_TEXTURE_GEN_R = 0x0C62;
pub const GL_TEXTURE_GEN_Q = 0x0C63;
pub const GL_TEXTURE_GEN_MODE = 0x2500;
pub const GL_TEXTURE_BORDER_COLOR = 0x1004;
pub const GL_TEXTURE_WIDTH = 0x1000;
pub const GL_TEXTURE_HEIGHT = 0x1001;
pub const GL_TEXTURE_BORDER = 0x1005;
pub const GL_TEXTURE_COMPONENTS = 0x1003;
pub const GL_TEXTURE_RED_SIZE = 0x805C;
pub const GL_TEXTURE_GREEN_SIZE = 0x805D;
pub const GL_TEXTURE_BLUE_SIZE = 0x805E;
pub const GL_TEXTURE_ALPHA_SIZE = 0x805F;
pub const GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
pub const GL_TEXTURE_INTENSITY_SIZE = 0x8061;
pub const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
pub const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
pub const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
pub const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
pub const GL_OBJECT_LINEAR = 0x2401;
pub const GL_OBJECT_PLANE = 0x2501;
pub const GL_EYE_LINEAR = 0x2400;
pub const GL_EYE_PLANE = 0x2502;
pub const GL_SPHERE_MAP = 0x2402;
pub const GL_DECAL = 0x2101;
pub const GL_MODULATE = 0x2100;
pub const GL_NEAREST = 0x2600;
pub const GL_REPEAT = 0x2901;
pub const GL_CLAMP = 0x2900;
pub const GL_S = 0x2000;
pub const GL_T = 0x2001;
pub const GL_R = 0x2002;
pub const GL_Q = 0x2003;
pub const GL_VENDOR = 0x1F00;
pub const GL_RENDERER = 0x1F01;
pub const GL_VERSION = 0x1F02;
pub const GL_EXTENSIONS = 0x1F03;
pub const GL_NO_ERROR = 0;
pub const GL_INVALID_ENUM = 0x0500;
pub const GL_INVALID_VALUE = 0x0501;
pub const GL_INVALID_OPERATION = 0x0502;
pub const GL_STACK_OVERFLOW = 0x0503;
pub const GL_STACK_UNDERFLOW = 0x0504;
pub const GL_OUT_OF_MEMORY = 0x0505;
pub const GL_CURRENT_BIT = 0x00000001;
pub const GL_POINT_BIT = 0x00000002;
pub const GL_LINE_BIT = 0x00000004;
pub const GL_POLYGON_BIT = 0x00000008;
pub const GL_POLYGON_STIPPLE_BIT = 0x00000010;
pub const GL_PIXEL_MODE_BIT = 0x00000020;
pub const GL_LIGHTING_BIT = 0x00000040;
pub const GL_FOG_BIT = 0x00000080;
pub const GL_DEPTH_BUFFER_BIT = 0x00000100;
pub const GL_ACCUM_BUFFER_BIT = 0x00000200;
pub const GL_STENCIL_BUFFER_BIT = 0x00000400;
pub const GL_VIEWPORT_BIT = 0x00000800;
pub const GL_TRANSFORM_BIT = 0x00001000;
pub const GL_ENABLE_BIT = 0x00002000;
pub const GL_COLOR_BUFFER_BIT = 0x00004000;
pub const GL_HINT_BIT = 0x00008000;
pub const GL_EVAL_BIT = 0x00010000;
pub const GL_LIST_BIT = 0x00020000;
pub const GL_TEXTURE_BIT = 0x00040000;
pub const GL_SCISSOR_BIT = 0x00080000;
pub const GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const GL_PROXY_TEXTURE_1D = 0x8063;
pub const GL_PROXY_TEXTURE_2D = 0x8064;
pub const GL_TEXTURE_PRIORITY = 0x8066;
pub const GL_TEXTURE_RESIDENT = 0x8067;
pub const GL_TEXTURE_BINDING_1D = 0x8068;
pub const GL_TEXTURE_BINDING_2D = 0x8069;
pub const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
pub const GL_ALPHA4 = 0x803B;
pub const GL_ALPHA8 = 0x803C;
pub const GL_ALPHA12 = 0x803D;
pub const GL_ALPHA16 = 0x803E;
pub const GL_LUMINANCE4 = 0x803F;
pub const GL_LUMINANCE8 = 0x8040;
pub const GL_LUMINANCE12 = 0x8041;
pub const GL_LUMINANCE16 = 0x8042;
pub const GL_LUMINANCE4_ALPHA4 = 0x8043;
pub const GL_LUMINANCE6_ALPHA2 = 0x8044;
pub const GL_LUMINANCE8_ALPHA8 = 0x8045;
pub const GL_LUMINANCE12_ALPHA4 = 0x8046;
pub const GL_LUMINANCE12_ALPHA12 = 0x8047;
pub const GL_LUMINANCE16_ALPHA16 = 0x8048;
pub const GL_INTENSITY = 0x8049;
pub const GL_INTENSITY4 = 0x804A;
pub const GL_INTENSITY8 = 0x804B;
pub const GL_INTENSITY12 = 0x804C;
pub const GL_INTENSITY16 = 0x804D;
pub const GL_R3_G3_B2 = 0x2A10;
pub const GL_RGB4 = 0x804F;
pub const GL_RGB5 = 0x8050;
pub const GL_RGB8 = 0x8051;
pub const GL_RGB10 = 0x8052;
pub const GL_RGB12 = 0x8053;
pub const GL_RGB16 = 0x8054;
pub const GL_RGBA2 = 0x8055;
pub const GL_RGBA4 = 0x8056;
pub const GL_RGB5_A1 = 0x8057;
pub const GL_RGBA8 = 0x8058;
pub const GL_RGB10_A2 = 0x8059;
pub const GL_RGBA12 = 0x805A;
pub const GL_RGBA16 = 0x805B;
pub const GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
pub const GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
pub const GL_ALL_CLIENT_ATTRIB_BITS = 0xFFFFFFFF;
pub const GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const GL_RESCALE_NORMAL = 0x803A;
pub const GL_CLAMP_TO_EDGE = 0x812F;
pub const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
pub const GL_MAX_ELEMENTS_INDICES = 0x80E9;
pub const GL_BGR = 0x80E0;
pub const GL_BGRA = 0x80E1;
pub const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
pub const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
pub const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
pub const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
pub const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
pub const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
pub const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
pub const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
pub const GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
pub const GL_SINGLE_COLOR = 0x81F9;
pub const GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
pub const GL_TEXTURE_MIN_LOD = 0x813A;
pub const GL_TEXTURE_MAX_LOD = 0x813B;
pub const GL_TEXTURE_BASE_LEVEL = 0x813C;
pub const GL_TEXTURE_MAX_LEVEL = 0x813D;
pub const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
pub const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const GL_PACK_SKIP_IMAGES = 0x806B;
pub const GL_PACK_IMAGE_HEIGHT = 0x806C;
pub const GL_UNPACK_SKIP_IMAGES = 0x806D;
pub const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
pub const GL_TEXTURE_3D = 0x806F;
pub const GL_PROXY_TEXTURE_3D = 0x8070;
pub const GL_TEXTURE_DEPTH = 0x8071;
pub const GL_TEXTURE_WRAP_R = 0x8072;
pub const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
pub const GL_TEXTURE_BINDING_3D = 0x806A;
pub const GL_CONSTANT_COLOR = 0x8001;
pub const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const GL_CONSTANT_ALPHA = 0x8003;
pub const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const GL_COLOR_TABLE = 0x80D0;
pub const GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
pub const GL_PROXY_COLOR_TABLE = 0x80D3;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
pub const GL_COLOR_TABLE_SCALE = 0x80D6;
pub const GL_COLOR_TABLE_BIAS = 0x80D7;
pub const GL_COLOR_TABLE_FORMAT = 0x80D8;
pub const GL_COLOR_TABLE_WIDTH = 0x80D9;
pub const GL_COLOR_TABLE_RED_SIZE = 0x80DA;
pub const GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
pub const GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
pub const GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
pub const GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
pub const GL_CONVOLUTION_1D = 0x8010;
pub const GL_CONVOLUTION_2D = 0x8011;
pub const GL_SEPARABLE_2D = 0x8012;
pub const GL_CONVOLUTION_BORDER_MODE = 0x8013;
pub const GL_CONVOLUTION_FILTER_SCALE = 0x8014;
pub const GL_CONVOLUTION_FILTER_BIAS = 0x8015;
pub const GL_REDUCE = 0x8016;
pub const GL_CONVOLUTION_FORMAT = 0x8017;
pub const GL_CONVOLUTION_WIDTH = 0x8018;
pub const GL_CONVOLUTION_HEIGHT = 0x8019;
pub const GL_MAX_CONVOLUTION_WIDTH = 0x801A;
pub const GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
pub const GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
pub const GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
pub const GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
pub const GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
pub const GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
pub const GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
pub const GL_CONSTANT_BORDER = 0x8151;
pub const GL_REPLICATE_BORDER = 0x8153;
pub const GL_CONVOLUTION_BORDER_COLOR = 0x8154;
pub const GL_COLOR_MATRIX = 0x80B1;
pub const GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
pub const GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
pub const GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
pub const GL_HISTOGRAM = 0x8024;
pub const GL_PROXY_HISTOGRAM = 0x8025;
pub const GL_HISTOGRAM_WIDTH = 0x8026;
pub const GL_HISTOGRAM_FORMAT = 0x8027;
pub const GL_HISTOGRAM_RED_SIZE = 0x8028;
pub const GL_HISTOGRAM_GREEN_SIZE = 0x8029;
pub const GL_HISTOGRAM_BLUE_SIZE = 0x802A;
pub const GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
pub const GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
pub const GL_HISTOGRAM_SINK = 0x802D;
pub const GL_MINMAX = 0x802E;
pub const GL_MINMAX_FORMAT = 0x802F;
pub const GL_MINMAX_SINK = 0x8030;
pub const GL_TABLE_TOO_LARGE = 0x8031;
pub const GL_BLEND_EQUATION = 0x8009;
pub const GL_MIN = 0x8007;
pub const GL_MAX = 0x8008;
pub const GL_FUNC_ADD = 0x8006;
pub const GL_FUNC_SUBTRACT = 0x800A;
pub const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
pub const GL_BLEND_COLOR = 0x8005;
pub const GL_TEXTURE0 = 0x84C0;
pub const GL_TEXTURE1 = 0x84C1;
pub const GL_TEXTURE2 = 0x84C2;
pub const GL_TEXTURE3 = 0x84C3;
pub const GL_TEXTURE4 = 0x84C4;
pub const GL_TEXTURE5 = 0x84C5;
pub const GL_TEXTURE6 = 0x84C6;
pub const GL_TEXTURE7 = 0x84C7;
pub const GL_TEXTURE8 = 0x84C8;
pub const GL_TEXTURE9 = 0x84C9;
pub const GL_TEXTURE10 = 0x84CA;
pub const GL_TEXTURE11 = 0x84CB;
pub const GL_TEXTURE12 = 0x84CC;
pub const GL_TEXTURE13 = 0x84CD;
pub const GL_TEXTURE14 = 0x84CE;
pub const GL_TEXTURE15 = 0x84CF;
pub const GL_TEXTURE16 = 0x84D0;
pub const GL_TEXTURE17 = 0x84D1;
pub const GL_TEXTURE18 = 0x84D2;
pub const GL_TEXTURE19 = 0x84D3;
pub const GL_TEXTURE20 = 0x84D4;
pub const GL_TEXTURE21 = 0x84D5;
pub const GL_TEXTURE22 = 0x84D6;
pub const GL_TEXTURE23 = 0x84D7;
pub const GL_TEXTURE24 = 0x84D8;
pub const GL_TEXTURE25 = 0x84D9;
pub const GL_TEXTURE26 = 0x84DA;
pub const GL_TEXTURE27 = 0x84DB;
pub const GL_TEXTURE28 = 0x84DC;
pub const GL_TEXTURE29 = 0x84DD;
pub const GL_TEXTURE30 = 0x84DE;
pub const GL_TEXTURE31 = 0x84DF;
pub const GL_ACTIVE_TEXTURE = 0x84E0;
pub const GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
pub const GL_MAX_TEXTURE_UNITS = 0x84E2;
pub const GL_NORMAL_MAP = 0x8511;
pub const GL_REFLECTION_MAP = 0x8512;
pub const GL_TEXTURE_CUBE_MAP = 0x8513;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const GL_COMPRESSED_ALPHA = 0x84E9;
pub const GL_COMPRESSED_LUMINANCE = 0x84EA;
pub const GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
pub const GL_COMPRESSED_INTENSITY = 0x84EC;
pub const GL_COMPRESSED_RGB = 0x84ED;
pub const GL_COMPRESSED_RGBA = 0x84EE;
pub const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
pub const GL_TEXTURE_COMPRESSED = 0x86A1;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const GL_MULTISAMPLE = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
pub const GL_SAMPLE_COVERAGE = 0x80A0;
pub const GL_SAMPLE_BUFFERS = 0x80A8;
pub const GL_SAMPLES = 0x80A9;
pub const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const GL_MULTISAMPLE_BIT = 0x20000000;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
pub const GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
pub const GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
pub const GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
pub const GL_COMBINE = 0x8570;
pub const GL_COMBINE_RGB = 0x8571;
pub const GL_COMBINE_ALPHA = 0x8572;
pub const GL_SOURCE0_RGB = 0x8580;
pub const GL_SOURCE1_RGB = 0x8581;
pub const GL_SOURCE2_RGB = 0x8582;
pub const GL_SOURCE0_ALPHA = 0x8588;
pub const GL_SOURCE1_ALPHA = 0x8589;
pub const GL_SOURCE2_ALPHA = 0x858A;
pub const GL_OPERAND0_RGB = 0x8590;
pub const GL_OPERAND1_RGB = 0x8591;
pub const GL_OPERAND2_RGB = 0x8592;
pub const GL_OPERAND0_ALPHA = 0x8598;
pub const GL_OPERAND1_ALPHA = 0x8599;
pub const GL_OPERAND2_ALPHA = 0x859A;
pub const GL_RGB_SCALE = 0x8573;
pub const GL_ADD_SIGNED = 0x8574;
pub const GL_INTERPOLATE = 0x8575;
pub const GL_SUBTRACT = 0x84E7;
pub const GL_CONSTANT = 0x8576;
pub const GL_PRIMARY_COLOR = 0x8577;
pub const GL_PREVIOUS = 0x8578;
pub const GL_DOT3_RGB = 0x86AE;
pub const GL_DOT3_RGBA = 0x86AF;
pub const GL_CLAMP_TO_BORDER = 0x812D;
pub const GL_ARB_multitexture = 1;
pub const GL_TEXTURE0_ARB = 0x84C0;
pub const GL_TEXTURE1_ARB = 0x84C1;
pub const GL_TEXTURE2_ARB = 0x84C2;
pub const GL_TEXTURE3_ARB = 0x84C3;
pub const GL_TEXTURE4_ARB = 0x84C4;
pub const GL_TEXTURE5_ARB = 0x84C5;
pub const GL_TEXTURE6_ARB = 0x84C6;
pub const GL_TEXTURE7_ARB = 0x84C7;
pub const GL_TEXTURE8_ARB = 0x84C8;
pub const GL_TEXTURE9_ARB = 0x84C9;
pub const GL_TEXTURE10_ARB = 0x84CA;
pub const GL_TEXTURE11_ARB = 0x84CB;
pub const GL_TEXTURE12_ARB = 0x84CC;
pub const GL_TEXTURE13_ARB = 0x84CD;
pub const GL_TEXTURE14_ARB = 0x84CE;
pub const GL_TEXTURE15_ARB = 0x84CF;
pub const GL_TEXTURE16_ARB = 0x84D0;
pub const GL_TEXTURE17_ARB = 0x84D1;
pub const GL_TEXTURE18_ARB = 0x84D2;
pub const GL_TEXTURE19_ARB = 0x84D3;
pub const GL_TEXTURE20_ARB = 0x84D4;
pub const GL_TEXTURE21_ARB = 0x84D5;
pub const GL_TEXTURE22_ARB = 0x84D6;
pub const GL_TEXTURE23_ARB = 0x84D7;
pub const GL_TEXTURE24_ARB = 0x84D8;
pub const GL_TEXTURE25_ARB = 0x84D9;
pub const GL_TEXTURE26_ARB = 0x84DA;
pub const GL_TEXTURE27_ARB = 0x84DB;
pub const GL_TEXTURE28_ARB = 0x84DC;
pub const GL_TEXTURE29_ARB = 0x84DD;
pub const GL_TEXTURE30_ARB = 0x84DE;
pub const GL_TEXTURE31_ARB = 0x84DF;
pub const GL_ACTIVE_TEXTURE_ARB = 0x84E0;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
pub const GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
pub const __gl_glext_h_ = 1;
pub const GL_GLEXT_VERSION = 20190805;
pub const KHRONOS_SUPPORT_INT64 = 1;
pub const KHRONOS_SUPPORT_FLOAT = 1;
pub const KHRONOS_MAX_ENUM = 0x7FFFFFFF;
pub const GL_VERSION_1_4 = 1;
pub const GL_BLEND_DST_RGB = 0x80C8;
pub const GL_BLEND_SRC_RGB = 0x80C9;
pub const GL_BLEND_DST_ALPHA = 0x80CA;
pub const GL_BLEND_SRC_ALPHA = 0x80CB;
pub const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
pub const GL_DEPTH_COMPONENT16 = 0x81A5;
pub const GL_DEPTH_COMPONENT24 = 0x81A6;
pub const GL_DEPTH_COMPONENT32 = 0x81A7;
pub const GL_MIRRORED_REPEAT = 0x8370;
pub const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
pub const GL_TEXTURE_LOD_BIAS = 0x8501;
pub const GL_INCR_WRAP = 0x8507;
pub const GL_DECR_WRAP = 0x8508;
pub const GL_TEXTURE_DEPTH_SIZE = 0x884A;
pub const GL_TEXTURE_COMPARE_MODE = 0x884C;
pub const GL_TEXTURE_COMPARE_FUNC = 0x884D;
pub const GL_POINT_SIZE_MIN = 0x8126;
pub const GL_POINT_SIZE_MAX = 0x8127;
pub const GL_POINT_DISTANCE_ATTENUATION = 0x8129;
pub const GL_GENERATE_MIPMAP = 0x8191;
pub const GL_GENERATE_MIPMAP_HINT = 0x8192;
pub const GL_FOG_COORDINATE_SOURCE = 0x8450;
pub const GL_FOG_COORDINATE = 0x8451;
pub const GL_FRAGMENT_DEPTH = 0x8452;
pub const GL_CURRENT_FOG_COORDINATE = 0x8453;
pub const GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
pub const GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
pub const GL_FOG_COORDINATE_ARRAY = 0x8457;
pub const GL_COLOR_SUM = 0x8458;
pub const GL_CURRENT_SECONDARY_COLOR = 0x8459;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
pub const GL_SECONDARY_COLOR_ARRAY = 0x845E;
pub const GL_TEXTURE_FILTER_CONTROL = 0x8500;
pub const GL_DEPTH_TEXTURE_MODE = 0x884B;
pub const GL_COMPARE_R_TO_TEXTURE = 0x884E;
pub const GL_VERSION_1_5 = 1;
pub const GL_BUFFER_SIZE = 0x8764;
pub const GL_BUFFER_USAGE = 0x8765;
pub const GL_QUERY_COUNTER_BITS = 0x8864;
pub const GL_CURRENT_QUERY = 0x8865;
pub const GL_QUERY_RESULT = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE = 0x8867;
pub const GL_ARRAY_BUFFER = 0x8892;
pub const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
pub const GL_ARRAY_BUFFER_BINDING = 0x8894;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const GL_READ_ONLY = 0x88B8;
pub const GL_WRITE_ONLY = 0x88B9;
pub const GL_READ_WRITE = 0x88BA;
pub const GL_BUFFER_ACCESS = 0x88BB;
pub const GL_BUFFER_MAPPED = 0x88BC;
pub const GL_BUFFER_MAP_POINTER = 0x88BD;
pub const GL_STREAM_DRAW = 0x88E0;
pub const GL_STREAM_READ = 0x88E1;
pub const GL_STREAM_COPY = 0x88E2;
pub const GL_STATIC_DRAW = 0x88E4;
pub const GL_STATIC_READ = 0x88E5;
pub const GL_STATIC_COPY = 0x88E6;
pub const GL_DYNAMIC_DRAW = 0x88E8;
pub const GL_DYNAMIC_READ = 0x88E9;
pub const GL_DYNAMIC_COPY = 0x88EA;
pub const GL_SAMPLES_PASSED = 0x8914;
pub const GL_SRC1_ALPHA = 0x8589;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
pub const GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
pub const GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
pub const GL_FOG_COORD_SRC = 0x8450;
pub const GL_FOG_COORD = 0x8451;
pub const GL_CURRENT_FOG_COORD = 0x8453;
pub const GL_FOG_COORD_ARRAY_TYPE = 0x8454;
pub const GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
pub const GL_FOG_COORD_ARRAY_POINTER = 0x8456;
pub const GL_FOG_COORD_ARRAY = 0x8457;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
pub const GL_SRC0_RGB = 0x8580;
pub const GL_SRC1_RGB = 0x8581;
pub const GL_SRC2_RGB = 0x8582;
pub const GL_SRC0_ALPHA = 0x8588;
pub const GL_SRC2_ALPHA = 0x858A;
pub const GL_VERSION_2_0 = 1;
pub const GL_BLEND_EQUATION_RGB = 0x8009;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
pub const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const GL_STENCIL_BACK_FUNC = 0x8800;
pub const GL_STENCIL_BACK_FAIL = 0x8801;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const GL_MAX_DRAW_BUFFERS = 0x8824;
pub const GL_DRAW_BUFFER0 = 0x8825;
pub const GL_DRAW_BUFFER1 = 0x8826;
pub const GL_DRAW_BUFFER2 = 0x8827;
pub const GL_DRAW_BUFFER3 = 0x8828;
pub const GL_DRAW_BUFFER4 = 0x8829;
pub const GL_DRAW_BUFFER5 = 0x882A;
pub const GL_DRAW_BUFFER6 = 0x882B;
pub const GL_DRAW_BUFFER7 = 0x882C;
pub const GL_DRAW_BUFFER8 = 0x882D;
pub const GL_DRAW_BUFFER9 = 0x882E;
pub const GL_DRAW_BUFFER10 = 0x882F;
pub const GL_DRAW_BUFFER11 = 0x8830;
pub const GL_DRAW_BUFFER12 = 0x8831;
pub const GL_DRAW_BUFFER13 = 0x8832;
pub const GL_DRAW_BUFFER14 = 0x8833;
pub const GL_DRAW_BUFFER15 = 0x8834;
pub const GL_BLEND_EQUATION_ALPHA = 0x883D;
pub const GL_MAX_VERTEX_ATTRIBS = 0x8869;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const GL_FRAGMENT_SHADER = 0x8B30;
pub const GL_VERTEX_SHADER = 0x8B31;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
pub const GL_MAX_VARYING_FLOATS = 0x8B4B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const GL_SHADER_TYPE = 0x8B4F;
pub const GL_FLOAT_VEC2 = 0x8B50;
pub const GL_FLOAT_VEC3 = 0x8B51;
pub const GL_FLOAT_VEC4 = 0x8B52;
pub const GL_INT_VEC2 = 0x8B53;
pub const GL_INT_VEC3 = 0x8B54;
pub const GL_INT_VEC4 = 0x8B55;
pub const GL_BOOL = 0x8B56;
pub const GL_BOOL_VEC2 = 0x8B57;
pub const GL_BOOL_VEC3 = 0x8B58;
pub const GL_BOOL_VEC4 = 0x8B59;
pub const GL_FLOAT_MAT2 = 0x8B5A;
pub const GL_FLOAT_MAT3 = 0x8B5B;
pub const GL_FLOAT_MAT4 = 0x8B5C;
pub const GL_SAMPLER_1D = 0x8B5D;
pub const GL_SAMPLER_2D = 0x8B5E;
pub const GL_SAMPLER_3D = 0x8B5F;
pub const GL_SAMPLER_CUBE = 0x8B60;
pub const GL_SAMPLER_1D_SHADOW = 0x8B61;
pub const GL_SAMPLER_2D_SHADOW = 0x8B62;
pub const GL_DELETE_STATUS = 0x8B80;
pub const GL_COMPILE_STATUS = 0x8B81;
pub const GL_LINK_STATUS = 0x8B82;
pub const GL_VALIDATE_STATUS = 0x8B83;
pub const GL_INFO_LOG_LENGTH = 0x8B84;
pub const GL_ATTACHED_SHADERS = 0x8B85;
pub const GL_ACTIVE_UNIFORMS = 0x8B86;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const GL_SHADER_SOURCE_LENGTH = 0x8B88;
pub const GL_ACTIVE_ATTRIBUTES = 0x8B89;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
pub const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const GL_CURRENT_PROGRAM = 0x8B8D;
pub const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
pub const GL_LOWER_LEFT = 0x8CA1;
pub const GL_UPPER_LEFT = 0x8CA2;
pub const GL_STENCIL_BACK_REF = 0x8CA3;
pub const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
pub const GL_POINT_SPRITE = 0x8861;
pub const GL_COORD_REPLACE = 0x8862;
pub const GL_MAX_TEXTURE_COORDS = 0x8871;
pub const GL_VERSION_2_1 = 1;
pub const GL_PIXEL_PACK_BUFFER = 0x88EB;
pub const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
pub const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
pub const GL_FLOAT_MAT2x3 = 0x8B65;
pub const GL_FLOAT_MAT2x4 = 0x8B66;
pub const GL_FLOAT_MAT3x2 = 0x8B67;
pub const GL_FLOAT_MAT3x4 = 0x8B68;
pub const GL_FLOAT_MAT4x2 = 0x8B69;
pub const GL_FLOAT_MAT4x3 = 0x8B6A;
pub const GL_SRGB = 0x8C40;
pub const GL_SRGB8 = 0x8C41;
pub const GL_SRGB_ALPHA = 0x8C42;
pub const GL_SRGB8_ALPHA8 = 0x8C43;
pub const GL_COMPRESSED_SRGB = 0x8C48;
pub const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
pub const GL_SLUMINANCE_ALPHA = 0x8C44;
pub const GL_SLUMINANCE8_ALPHA8 = 0x8C45;
pub const GL_SLUMINANCE = 0x8C46;
pub const GL_SLUMINANCE8 = 0x8C47;
pub const GL_COMPRESSED_SLUMINANCE = 0x8C4A;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
pub const GL_VERSION_3_0 = 1;
pub const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
pub const GL_CLIP_DISTANCE0 = 0x3000;
pub const GL_CLIP_DISTANCE1 = 0x3001;
pub const GL_CLIP_DISTANCE2 = 0x3002;
pub const GL_CLIP_DISTANCE3 = 0x3003;
pub const GL_CLIP_DISTANCE4 = 0x3004;
pub const GL_CLIP_DISTANCE5 = 0x3005;
pub const GL_CLIP_DISTANCE6 = 0x3006;
pub const GL_CLIP_DISTANCE7 = 0x3007;
pub const GL_MAX_CLIP_DISTANCES = 0x0D32;
pub const GL_MAJOR_VERSION = 0x821B;
pub const GL_MINOR_VERSION = 0x821C;
pub const GL_NUM_EXTENSIONS = 0x821D;
pub const GL_CONTEXT_FLAGS = 0x821E;
pub const GL_COMPRESSED_RED = 0x8225;
pub const GL_COMPRESSED_RG = 0x8226;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
pub const GL_RGBA32F = 0x8814;
pub const GL_RGB32F = 0x8815;
pub const GL_RGBA16F = 0x881A;
pub const GL_RGB16F = 0x881B;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
pub const GL_CLAMP_READ_COLOR = 0x891C;
pub const GL_FIXED_ONLY = 0x891D;
pub const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
pub const GL_TEXTURE_1D_ARRAY = 0x8C18;
pub const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
pub const GL_TEXTURE_2D_ARRAY = 0x8C1A;
pub const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const GL_R11F_G11F_B10F = 0x8C3A;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const GL_RGB9_E5 = 0x8C3D;
pub const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
pub const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
pub const GL_PRIMITIVES_GENERATED = 0x8C87;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
pub const GL_RASTERIZER_DISCARD = 0x8C89;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
pub const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
pub const GL_SEPARATE_ATTRIBS = 0x8C8D;
pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
pub const GL_RGBA32UI = 0x8D70;
pub const GL_RGB32UI = 0x8D71;
pub const GL_RGBA16UI = 0x8D76;
pub const GL_RGB16UI = 0x8D77;
pub const GL_RGBA8UI = 0x8D7C;
pub const GL_RGB8UI = 0x8D7D;
pub const GL_RGBA32I = 0x8D82;
pub const GL_RGB32I = 0x8D83;
pub const GL_RGBA16I = 0x8D88;
pub const GL_RGB16I = 0x8D89;
pub const GL_RGBA8I = 0x8D8E;
pub const GL_RGB8I = 0x8D8F;
pub const GL_RED_INTEGER = 0x8D94;
pub const GL_GREEN_INTEGER = 0x8D95;
pub const GL_BLUE_INTEGER = 0x8D96;
pub const GL_RGB_INTEGER = 0x8D98;
pub const GL_RGBA_INTEGER = 0x8D99;
pub const GL_BGR_INTEGER = 0x8D9A;
pub const GL_BGRA_INTEGER = 0x8D9B;
pub const GL_SAMPLER_1D_ARRAY = 0x8DC0;
pub const GL_SAMPLER_2D_ARRAY = 0x8DC1;
pub const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
pub const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
pub const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
pub const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
pub const GL_INT_SAMPLER_1D = 0x8DC9;
pub const GL_INT_SAMPLER_2D = 0x8DCA;
pub const GL_INT_SAMPLER_3D = 0x8DCB;
pub const GL_INT_SAMPLER_CUBE = 0x8DCC;
pub const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
pub const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
pub const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
pub const GL_QUERY_WAIT = 0x8E13;
pub const GL_QUERY_NO_WAIT = 0x8E14;
pub const GL_QUERY_BY_REGION_WAIT = 0x8E15;
pub const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
pub const GL_BUFFER_ACCESS_FLAGS = 0x911F;
pub const GL_BUFFER_MAP_LENGTH = 0x9120;
pub const GL_BUFFER_MAP_OFFSET = 0x9121;
pub const GL_DEPTH_COMPONENT32F = 0x8CAC;
pub const GL_DEPTH32F_STENCIL8 = 0x8CAD;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
pub const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
pub const GL_FRAMEBUFFER_DEFAULT = 0x8218;
pub const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
pub const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
pub const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const GL_DEPTH_STENCIL = 0x84F9;
pub const GL_UNSIGNED_INT_24_8 = 0x84FA;
pub const GL_DEPTH24_STENCIL8 = 0x88F0;
pub const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
pub const GL_TEXTURE_RED_TYPE = 0x8C10;
pub const GL_TEXTURE_GREEN_TYPE = 0x8C11;
pub const GL_TEXTURE_BLUE_TYPE = 0x8C12;
pub const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
pub const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
pub const GL_UNSIGNED_NORMALIZED = 0x8C17;
pub const GL_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_RENDERBUFFER_BINDING = 0x8CA7;
pub const GL_READ_FRAMEBUFFER = 0x8CA8;
pub const GL_DRAW_FRAMEBUFFER = 0x8CA9;
pub const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
pub const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
pub const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
pub const GL_COLOR_ATTACHMENT0 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT10 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13 = 0x8CED;
pub const GL_COLOR_ATTACHMENT14 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT16 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT17 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT18 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT19 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT20 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT21 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT22 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT23 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT24 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT25 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT26 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT27 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT28 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT29 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT30 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT31 = 0x8CFF;
pub const GL_DEPTH_ATTACHMENT = 0x8D00;
pub const GL_STENCIL_ATTACHMENT = 0x8D20;
pub const GL_FRAMEBUFFER = 0x8D40;
pub const GL_RENDERBUFFER = 0x8D41;
pub const GL_RENDERBUFFER_WIDTH = 0x8D42;
pub const GL_RENDERBUFFER_HEIGHT = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const GL_STENCIL_INDEX1 = 0x8D46;
pub const GL_STENCIL_INDEX4 = 0x8D47;
pub const GL_STENCIL_INDEX8 = 0x8D48;
pub const GL_STENCIL_INDEX16 = 0x8D49;
pub const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
pub const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
pub const GL_MAX_SAMPLES = 0x8D57;
pub const GL_INDEX = 0x8222;
pub const GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
pub const GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
pub const GL_FRAMEBUFFER_SRGB = 0x8DB9;
pub const GL_HALF_FLOAT = 0x140B;
pub const GL_MAP_READ_BIT = 0x0001;
pub const GL_MAP_WRITE_BIT = 0x0002;
pub const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
pub const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
pub const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
pub const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
pub const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
pub const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
pub const GL_RG = 0x8227;
pub const GL_RG_INTEGER = 0x8228;
pub const GL_R8 = 0x8229;
pub const GL_R16 = 0x822A;
pub const GL_RG8 = 0x822B;
pub const GL_RG16 = 0x822C;
pub const GL_R16F = 0x822D;
pub const GL_R32F = 0x822E;
pub const GL_RG16F = 0x822F;
pub const GL_RG32F = 0x8230;
pub const GL_R8I = 0x8231;
pub const GL_R8UI = 0x8232;
pub const GL_R16I = 0x8233;
pub const GL_R16UI = 0x8234;
pub const GL_R32I = 0x8235;
pub const GL_R32UI = 0x8236;
pub const GL_RG8I = 0x8237;
pub const GL_RG8UI = 0x8238;
pub const GL_RG16I = 0x8239;
pub const GL_RG16UI = 0x823A;
pub const GL_RG32I = 0x823B;
pub const GL_RG32UI = 0x823C;
pub const GL_VERTEX_ARRAY_BINDING = 0x85B5;
pub const GL_CLAMP_VERTEX_COLOR = 0x891A;
pub const GL_CLAMP_FRAGMENT_COLOR = 0x891B;
pub const GL_ALPHA_INTEGER = 0x8D97;
pub const GL_VERSION_3_1 = 1;
pub const GL_SAMPLER_2D_RECT = 0x8B63;
pub const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
pub const GL_SAMPLER_BUFFER = 0x8DC2;
pub const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
pub const GL_INT_SAMPLER_BUFFER = 0x8DD0;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
pub const GL_TEXTURE_BUFFER = 0x8C2A;
pub const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
pub const GL_TEXTURE_RECTANGLE = 0x84F5;
pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
pub const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
pub const GL_R8_SNORM = 0x8F94;
pub const GL_RG8_SNORM = 0x8F95;
pub const GL_RGB8_SNORM = 0x8F96;
pub const GL_RGBA8_SNORM = 0x8F97;
pub const GL_R16_SNORM = 0x8F98;
pub const GL_RG16_SNORM = 0x8F99;
pub const GL_RGB16_SNORM = 0x8F9A;
pub const GL_RGBA16_SNORM = 0x8F9B;
pub const GL_SIGNED_NORMALIZED = 0x8F9C;
pub const GL_PRIMITIVE_RESTART = 0x8F9D;
pub const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
pub const GL_COPY_READ_BUFFER = 0x8F36;
pub const GL_COPY_WRITE_BUFFER = 0x8F37;
pub const GL_UNIFORM_BUFFER = 0x8A11;
pub const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
pub const GL_UNIFORM_BUFFER_START = 0x8A29;
pub const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
pub const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
pub const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
pub const GL_UNIFORM_TYPE = 0x8A37;
pub const GL_UNIFORM_SIZE = 0x8A38;
pub const GL_UNIFORM_NAME_LENGTH = 0x8A39;
pub const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
pub const GL_UNIFORM_OFFSET = 0x8A3B;
pub const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
pub const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
pub const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
pub const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
pub const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
pub const GL_INVALID_INDEX = @as(c_uint, 0xFFFFFFFF);
pub const GL_VERSION_3_2 = 1;
pub const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
pub const GL_LINES_ADJACENCY = 0x000A;
pub const GL_LINE_STRIP_ADJACENCY = 0x000B;
pub const GL_TRIANGLES_ADJACENCY = 0x000C;
pub const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
pub const GL_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
pub const GL_GEOMETRY_SHADER = 0x8DD9;
pub const GL_GEOMETRY_VERTICES_OUT = 0x8916;
pub const GL_GEOMETRY_INPUT_TYPE = 0x8917;
pub const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
pub const GL_CONTEXT_PROFILE_MASK = 0x9126;
pub const GL_DEPTH_CLAMP = 0x864F;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
pub const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
pub const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
pub const GL_PROVOKING_VERTEX = 0x8E4F;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
pub const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
pub const GL_OBJECT_TYPE = 0x9112;
pub const GL_SYNC_CONDITION = 0x9113;
pub const GL_SYNC_STATUS = 0x9114;
pub const GL_SYNC_FLAGS = 0x9115;
pub const GL_SYNC_FENCE = 0x9116;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
pub const GL_UNSIGNALED = 0x9118;
pub const GL_SIGNALED = 0x9119;
pub const GL_ALREADY_SIGNALED = 0x911A;
pub const GL_TIMEOUT_EXPIRED = 0x911B;
pub const GL_CONDITION_SATISFIED = 0x911C;
pub const GL_WAIT_FAILED = 0x911D;
pub const GL_TIMEOUT_IGNORED = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
pub const GL_SAMPLE_POSITION = 0x8E50;
pub const GL_SAMPLE_MASK = 0x8E51;
pub const GL_SAMPLE_MASK_VALUE = 0x8E52;
pub const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
pub const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
pub const GL_TEXTURE_SAMPLES = 0x9106;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
pub const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
pub const GL_MAX_INTEGER_SAMPLES = 0x9110;
pub const GL_VERSION_3_3 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
pub const GL_SRC1_COLOR = 0x88F9;
pub const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
pub const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
pub const GL_ANY_SAMPLES_PASSED = 0x8C2F;
pub const GL_SAMPLER_BINDING = 0x8919;
pub const GL_RGB10_A2UI = 0x906F;
pub const GL_TEXTURE_SWIZZLE_R = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_G = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_B = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_A = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
pub const GL_TIME_ELAPSED = 0x88BF;
pub const GL_TIMESTAMP = 0x8E28;
pub const GL_INT_2_10_10_10_REV = 0x8D9F;
pub const GL_VERSION_4_0 = 1;
pub const GL_SAMPLE_SHADING = 0x8C36;
pub const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
pub const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
pub const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
pub const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
pub const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
pub const GL_MAX_VERTEX_STREAMS = 0x8E71;
pub const GL_DOUBLE_VEC2 = 0x8FFC;
pub const GL_DOUBLE_VEC3 = 0x8FFD;
pub const GL_DOUBLE_VEC4 = 0x8FFE;
pub const GL_DOUBLE_MAT2 = 0x8F46;
pub const GL_DOUBLE_MAT3 = 0x8F47;
pub const GL_DOUBLE_MAT4 = 0x8F48;
pub const GL_DOUBLE_MAT2x3 = 0x8F49;
pub const GL_DOUBLE_MAT2x4 = 0x8F4A;
pub const GL_DOUBLE_MAT3x2 = 0x8F4B;
pub const GL_DOUBLE_MAT3x4 = 0x8F4C;
pub const GL_DOUBLE_MAT4x2 = 0x8F4D;
pub const GL_DOUBLE_MAT4x3 = 0x8F4E;
pub const GL_ACTIVE_SUBROUTINES = 0x8DE5;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
pub const GL_MAX_SUBROUTINES = 0x8DE7;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
pub const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
pub const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
pub const GL_PATCHES = 0x000E;
pub const GL_PATCH_VERTICES = 0x8E72;
pub const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
pub const GL_TESS_GEN_MODE = 0x8E76;
pub const GL_TESS_GEN_SPACING = 0x8E77;
pub const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
pub const GL_TESS_GEN_POINT_MODE = 0x8E79;
pub const GL_ISOLINES = 0x8E7A;
pub const GL_FRACTIONAL_ODD = 0x8E7B;
pub const GL_FRACTIONAL_EVEN = 0x8E7C;
pub const GL_MAX_PATCH_VERTICES = 0x8E7D;
pub const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
pub const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
pub const GL_TESS_EVALUATION_SHADER = 0x8E87;
pub const GL_TESS_CONTROL_SHADER = 0x8E88;
pub const GL_TRANSFORM_FEEDBACK = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
pub const GL_VERSION_4_1 = 1;
pub const GL_FIXED = 0x140C;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const GL_LOW_FLOAT = 0x8DF0;
pub const GL_MEDIUM_FLOAT = 0x8DF1;
pub const GL_HIGH_FLOAT = 0x8DF2;
pub const GL_LOW_INT = 0x8DF3;
pub const GL_MEDIUM_INT = 0x8DF4;
pub const GL_HIGH_INT = 0x8DF5;
pub const GL_SHADER_COMPILER = 0x8DFA;
pub const GL_SHADER_BINARY_FORMATS = 0x8DF8;
pub const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const GL_MAX_VARYING_VECTORS = 0x8DFC;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const GL_RGB565 = 0x8D62;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
pub const GL_PROGRAM_BINARY_LENGTH = 0x8741;
pub const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
pub const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
pub const GL_VERTEX_SHADER_BIT = 0x00000001;
pub const GL_FRAGMENT_SHADER_BIT = 0x00000002;
pub const GL_GEOMETRY_SHADER_BIT = 0x00000004;
pub const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
pub const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
pub const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
pub const GL_PROGRAM_SEPARABLE = 0x8258;
pub const GL_ACTIVE_PROGRAM = 0x8259;
pub const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
pub const GL_MAX_VIEWPORTS = 0x825B;
pub const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
pub const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
pub const GL_LAYER_PROVOKING_VERTEX = 0x825E;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
pub const GL_UNDEFINED_VERTEX = 0x8260;
pub const GL_VERSION_4_2 = 1;
pub const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
pub const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
pub const GL_NUM_SAMPLE_COUNTS = 0x9380;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
pub const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
pub const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
pub const GL_UNIFORM_BARRIER_BIT = 0x00000004;
pub const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
pub const GL_COMMAND_BARRIER_BIT = 0x00000040;
pub const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
pub const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
pub const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
pub const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
pub const GL_MAX_IMAGE_UNITS = 0x8F38;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
pub const GL_IMAGE_BINDING_NAME = 0x8F3A;
pub const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
pub const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYER = 0x8F3D;
pub const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
pub const GL_IMAGE_1D = 0x904C;
pub const GL_IMAGE_2D = 0x904D;
pub const GL_IMAGE_3D = 0x904E;
pub const GL_IMAGE_2D_RECT = 0x904F;
pub const GL_IMAGE_CUBE = 0x9050;
pub const GL_IMAGE_BUFFER = 0x9051;
pub const GL_IMAGE_1D_ARRAY = 0x9052;
pub const GL_IMAGE_2D_ARRAY = 0x9053;
pub const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
pub const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
pub const GL_INT_IMAGE_1D = 0x9057;
pub const GL_INT_IMAGE_2D = 0x9058;
pub const GL_INT_IMAGE_3D = 0x9059;
pub const GL_INT_IMAGE_2D_RECT = 0x905A;
pub const GL_INT_IMAGE_CUBE = 0x905B;
pub const GL_INT_IMAGE_BUFFER = 0x905C;
pub const GL_INT_IMAGE_1D_ARRAY = 0x905D;
pub const GL_INT_IMAGE_2D_ARRAY = 0x905E;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
pub const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
pub const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
pub const GL_MAX_IMAGE_SAMPLES = 0x906D;
pub const GL_IMAGE_BINDING_FORMAT = 0x906E;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
pub const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
pub const GL_VERSION_4_3 = 1;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
pub const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
pub const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
pub const GL_COMPRESSED_R11_EAC = 0x9270;
pub const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
pub const GL_COMPRESSED_RG11_EAC = 0x9272;
pub const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
pub const GL_MAX_ELEMENT_INDEX = 0x8D6B;
pub const GL_COMPUTE_SHADER = 0x91B9;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
pub const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
pub const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
pub const GL_COMPUTE_SHADER_BIT = 0x00000020;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
pub const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
pub const GL_DEBUG_SOURCE_API = 0x8246;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
pub const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER = 0x824B;
pub const GL_DEBUG_TYPE_ERROR = 0x824C;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
pub const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
pub const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
pub const GL_DEBUG_TYPE_OTHER = 0x8251;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
pub const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
pub const GL_DEBUG_SEVERITY_HIGH = 0x9146;
pub const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
pub const GL_DEBUG_SEVERITY_LOW = 0x9148;
pub const GL_DEBUG_TYPE_MARKER = 0x8268;
pub const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
pub const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
pub const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
pub const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
pub const GL_BUFFER = 0x82E0;
pub const GL_SHADER = 0x82E1;
pub const GL_PROGRAM = 0x82E2;
pub const GL_QUERY = 0x82E3;
pub const GL_PROGRAM_PIPELINE = 0x82E4;
pub const GL_SAMPLER = 0x82E6;
pub const GL_MAX_LABEL_LENGTH = 0x82E8;
pub const GL_DEBUG_OUTPUT = 0x92E0;
pub const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
pub const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
pub const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
pub const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
pub const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
pub const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
pub const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
pub const GL_INTERNALFORMAT_PREFERRED = 0x8270;
pub const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
pub const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
pub const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
pub const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
pub const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
pub const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
pub const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
pub const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
pub const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
pub const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
pub const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
pub const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
pub const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
pub const GL_MAX_WIDTH = 0x827E;
pub const GL_MAX_HEIGHT = 0x827F;
pub const GL_MAX_DEPTH = 0x8280;
pub const GL_MAX_LAYERS = 0x8281;
pub const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
pub const GL_COLOR_COMPONENTS = 0x8283;
pub const GL_DEPTH_COMPONENTS = 0x8284;
pub const GL_STENCIL_COMPONENTS = 0x8285;
pub const GL_COLOR_RENDERABLE = 0x8286;
pub const GL_DEPTH_RENDERABLE = 0x8287;
pub const GL_STENCIL_RENDERABLE = 0x8288;
pub const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
pub const GL_FRAMEBUFFER_BLEND = 0x828B;
pub const GL_READ_PIXELS = 0x828C;
pub const GL_READ_PIXELS_FORMAT = 0x828D;
pub const GL_READ_PIXELS_TYPE = 0x828E;
pub const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
pub const GL_TEXTURE_IMAGE_TYPE = 0x8290;
pub const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
pub const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
pub const GL_MIPMAP = 0x8293;
pub const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
pub const GL_AUTO_GENERATE_MIPMAP = 0x8295;
pub const GL_COLOR_ENCODING = 0x8296;
pub const GL_SRGB_READ = 0x8297;
pub const GL_SRGB_WRITE = 0x8298;
pub const GL_FILTER = 0x829A;
pub const GL_VERTEX_TEXTURE = 0x829B;
pub const GL_TESS_CONTROL_TEXTURE = 0x829C;
pub const GL_TESS_EVALUATION_TEXTURE = 0x829D;
pub const GL_GEOMETRY_TEXTURE = 0x829E;
pub const GL_FRAGMENT_TEXTURE = 0x829F;
pub const GL_COMPUTE_TEXTURE = 0x82A0;
pub const GL_TEXTURE_SHADOW = 0x82A1;
pub const GL_TEXTURE_GATHER = 0x82A2;
pub const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
pub const GL_SHADER_IMAGE_LOAD = 0x82A4;
pub const GL_SHADER_IMAGE_STORE = 0x82A5;
pub const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
pub const GL_IMAGE_TEXEL_SIZE = 0x82A7;
pub const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
pub const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
pub const GL_IMAGE_PIXEL_TYPE = 0x82AA;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
pub const GL_CLEAR_BUFFER = 0x82B4;
pub const GL_TEXTURE_VIEW = 0x82B5;
pub const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
pub const GL_FULL_SUPPORT = 0x82B7;
pub const GL_CAVEAT_SUPPORT = 0x82B8;
pub const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
pub const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
pub const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
pub const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
pub const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
pub const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
pub const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
pub const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
pub const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
pub const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
pub const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
pub const GL_VIEW_CLASS_128_BITS = 0x82C4;
pub const GL_VIEW_CLASS_96_BITS = 0x82C5;
pub const GL_VIEW_CLASS_64_BITS = 0x82C6;
pub const GL_VIEW_CLASS_48_BITS = 0x82C7;
pub const GL_VIEW_CLASS_32_BITS = 0x82C8;
pub const GL_VIEW_CLASS_24_BITS = 0x82C9;
pub const GL_VIEW_CLASS_16_BITS = 0x82CA;
pub const GL_VIEW_CLASS_8_BITS = 0x82CB;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
pub const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
pub const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
pub const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
pub const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
pub const GL_UNIFORM = 0x92E1;
pub const GL_UNIFORM_BLOCK = 0x92E2;
pub const GL_PROGRAM_INPUT = 0x92E3;
pub const GL_PROGRAM_OUTPUT = 0x92E4;
pub const GL_BUFFER_VARIABLE = 0x92E5;
pub const GL_SHADER_STORAGE_BLOCK = 0x92E6;
pub const GL_VERTEX_SUBROUTINE = 0x92E8;
pub const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
pub const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
pub const GL_GEOMETRY_SUBROUTINE = 0x92EB;
pub const GL_FRAGMENT_SUBROUTINE = 0x92EC;
pub const GL_COMPUTE_SUBROUTINE = 0x92ED;
pub const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
pub const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
pub const GL_ACTIVE_RESOURCES = 0x92F5;
pub const GL_MAX_NAME_LENGTH = 0x92F6;
pub const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
pub const GL_NAME_LENGTH = 0x92F9;
pub const GL_TYPE = 0x92FA;
pub const GL_ARRAY_SIZE = 0x92FB;
pub const GL_OFFSET = 0x92FC;
pub const GL_BLOCK_INDEX = 0x92FD;
pub const GL_ARRAY_STRIDE = 0x92FE;
pub const GL_MATRIX_STRIDE = 0x92FF;
pub const GL_IS_ROW_MAJOR = 0x9300;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
pub const GL_BUFFER_BINDING = 0x9302;
pub const GL_BUFFER_DATA_SIZE = 0x9303;
pub const GL_NUM_ACTIVE_VARIABLES = 0x9304;
pub const GL_ACTIVE_VARIABLES = 0x9305;
pub const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
pub const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
pub const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
pub const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
pub const GL_LOCATION = 0x930E;
pub const GL_LOCATION_INDEX = 0x930F;
pub const GL_IS_PER_PATCH = 0x92E7;
pub const GL_SHADER_STORAGE_BUFFER = 0x90D2;
pub const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
pub const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
pub const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
pub const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
pub const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
pub const GL_TEXTURE_BUFFER_SIZE = 0x919E;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
pub const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
pub const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
pub const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
pub const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
pub const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
pub const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
pub const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
pub const GL_VERTEX_BINDING_OFFSET = 0x82D7;
pub const GL_VERTEX_BINDING_STRIDE = 0x82D8;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
pub const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
pub const GL_DISPLAY_LIST = 0x82E7;
pub const GL_VERSION_4_4 = 1;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
pub const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
pub const GL_MAP_PERSISTENT_BIT = 0x0040;
pub const GL_MAP_COHERENT_BIT = 0x0080;
pub const GL_DYNAMIC_STORAGE_BIT = 0x0100;
pub const GL_CLIENT_STORAGE_BIT = 0x0200;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
pub const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
pub const GL_BUFFER_STORAGE_FLAGS = 0x8220;
pub const GL_CLEAR_TEXTURE = 0x9365;
pub const GL_LOCATION_COMPONENT = 0x934A;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
pub const GL_QUERY_BUFFER = 0x9192;
pub const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
pub const GL_QUERY_BUFFER_BINDING = 0x9193;
pub const GL_QUERY_RESULT_NO_WAIT = 0x9194;
pub const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
pub const GL_VERSION_4_5 = 1;
pub const GL_CONTEXT_LOST = 0x0507;
pub const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
pub const GL_ZERO_TO_ONE = 0x935F;
pub const GL_CLIP_ORIGIN = 0x935C;
pub const GL_CLIP_DEPTH_MODE = 0x935D;
pub const GL_QUERY_WAIT_INVERTED = 0x8E17;
pub const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
pub const GL_MAX_CULL_DISTANCES = 0x82F9;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
pub const GL_TEXTURE_TARGET = 0x1006;
pub const GL_QUERY_TARGET = 0x82EA;
pub const GL_GUILTY_CONTEXT_RESET = 0x8253;
pub const GL_INNOCENT_CONTEXT_RESET = 0x8254;
pub const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
pub const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
pub const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
pub const GL_NO_RESET_NOTIFICATION = 0x8261;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
pub const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
pub const GL_VERSION_4_6 = 1;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
pub const GL_SPIR_V_BINARY = 0x9552;
pub const GL_PARAMETER_BUFFER = 0x80EE;
pub const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
pub const GL_VERTICES_SUBMITTED = 0x82EE;
pub const GL_PRIMITIVES_SUBMITTED = 0x82EF;
pub const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
pub const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
pub const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
pub const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
pub const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
pub const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
pub const GL_SPIR_V_EXTENSIONS = 0x9553;
pub const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
pub const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
pub const GL_ARB_ES2_compatibility = 1;
pub const GL_ARB_ES3_1_compatibility = 1;
pub const GL_ARB_ES3_2_compatibility = 1;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
pub const GL_ARB_ES3_compatibility = 1;
pub const GL_ARB_arrays_of_arrays = 1;
pub const GL_ARB_base_instance = 1;
pub const GL_ARB_bindless_texture = 1;
pub const GL_UNSIGNED_INT64_ARB = 0x140F;
pub const GL_ARB_blend_func_extended = 1;
pub const GL_ARB_buffer_storage = 1;
pub const GL_ARB_cl_event = 1;
pub const GL_SYNC_CL_EVENT_ARB = 0x8240;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
pub const GL_ARB_clear_buffer_object = 1;
pub const GL_ARB_clear_texture = 1;
pub const GL_ARB_clip_control = 1;
pub const GL_ARB_color_buffer_float = 1;
pub const GL_RGBA_FLOAT_MODE_ARB = 0x8820;
pub const GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
pub const GL_CLAMP_READ_COLOR_ARB = 0x891C;
pub const GL_FIXED_ONLY_ARB = 0x891D;
pub const GL_ARB_compatibility = 1;
pub const GL_ARB_compressed_texture_pixel_storage = 1;
pub const GL_ARB_compute_shader = 1;
pub const GL_ARB_compute_variable_group_size = 1;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
pub const GL_ARB_conditional_render_inverted = 1;
pub const GL_ARB_conservative_depth = 1;
pub const GL_ARB_copy_buffer = 1;
pub const GL_ARB_copy_image = 1;
pub const GL_ARB_cull_distance = 1;
pub const GL_ARB_debug_output = 1;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
pub const GL_DEBUG_SOURCE_API_ARB = 0x8246;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
pub const GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
pub const GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
pub const GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
pub const GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
pub const GL_ARB_depth_buffer_float = 1;
pub const GL_ARB_depth_clamp = 1;
pub const GL_ARB_depth_texture = 1;
pub const GL_DEPTH_COMPONENT16_ARB = 0x81A5;
pub const GL_DEPTH_COMPONENT24_ARB = 0x81A6;
pub const GL_DEPTH_COMPONENT32_ARB = 0x81A7;
pub const GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
pub const GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
pub const GL_ARB_derivative_control = 1;
pub const GL_ARB_direct_state_access = 1;
pub const GL_ARB_draw_buffers = 1;
pub const GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
pub const GL_DRAW_BUFFER0_ARB = 0x8825;
pub const GL_DRAW_BUFFER1_ARB = 0x8826;
pub const GL_DRAW_BUFFER2_ARB = 0x8827;
pub const GL_DRAW_BUFFER3_ARB = 0x8828;
pub const GL_DRAW_BUFFER4_ARB = 0x8829;
pub const GL_DRAW_BUFFER5_ARB = 0x882A;
pub const GL_DRAW_BUFFER6_ARB = 0x882B;
pub const GL_DRAW_BUFFER7_ARB = 0x882C;
pub const GL_DRAW_BUFFER8_ARB = 0x882D;
pub const GL_DRAW_BUFFER9_ARB = 0x882E;
pub const GL_DRAW_BUFFER10_ARB = 0x882F;
pub const GL_DRAW_BUFFER11_ARB = 0x8830;
pub const GL_DRAW_BUFFER12_ARB = 0x8831;
pub const GL_DRAW_BUFFER13_ARB = 0x8832;
pub const GL_DRAW_BUFFER14_ARB = 0x8833;
pub const GL_DRAW_BUFFER15_ARB = 0x8834;
pub const GL_ARB_draw_buffers_blend = 1;
pub const GL_ARB_draw_elements_base_vertex = 1;
pub const GL_ARB_draw_indirect = 1;
pub const GL_ARB_draw_instanced = 1;
pub const GL_ARB_enhanced_layouts = 1;
pub const GL_ARB_explicit_attrib_location = 1;
pub const GL_ARB_explicit_uniform_location = 1;
pub const GL_ARB_fragment_coord_conventions = 1;
pub const GL_ARB_fragment_layer_viewport = 1;
pub const GL_ARB_fragment_program = 1;
pub const GL_FRAGMENT_PROGRAM_ARB = 0x8804;
pub const GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
pub const GL_PROGRAM_LENGTH_ARB = 0x8627;
pub const GL_PROGRAM_FORMAT_ARB = 0x8876;
pub const GL_PROGRAM_BINDING_ARB = 0x8677;
pub const GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
pub const GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
pub const GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
pub const GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
pub const GL_PROGRAM_STRING_ARB = 0x8628;
pub const GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
pub const GL_CURRENT_MATRIX_ARB = 0x8641;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
pub const GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
pub const GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
pub const GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
pub const GL_MATRIX0_ARB = 0x88C0;
pub const GL_MATRIX1_ARB = 0x88C1;
pub const GL_MATRIX2_ARB = 0x88C2;
pub const GL_MATRIX3_ARB = 0x88C3;
pub const GL_MATRIX4_ARB = 0x88C4;
pub const GL_MATRIX5_ARB = 0x88C5;
pub const GL_MATRIX6_ARB = 0x88C6;
pub const GL_MATRIX7_ARB = 0x88C7;
pub const GL_MATRIX8_ARB = 0x88C8;
pub const GL_MATRIX9_ARB = 0x88C9;
pub const GL_MATRIX10_ARB = 0x88CA;
pub const GL_MATRIX11_ARB = 0x88CB;
pub const GL_MATRIX12_ARB = 0x88CC;
pub const GL_MATRIX13_ARB = 0x88CD;
pub const GL_MATRIX14_ARB = 0x88CE;
pub const GL_MATRIX15_ARB = 0x88CF;
pub const GL_MATRIX16_ARB = 0x88D0;
pub const GL_MATRIX17_ARB = 0x88D1;
pub const GL_MATRIX18_ARB = 0x88D2;
pub const GL_MATRIX19_ARB = 0x88D3;
pub const GL_MATRIX20_ARB = 0x88D4;
pub const GL_MATRIX21_ARB = 0x88D5;
pub const GL_MATRIX22_ARB = 0x88D6;
pub const GL_MATRIX23_ARB = 0x88D7;
pub const GL_MATRIX24_ARB = 0x88D8;
pub const GL_MATRIX25_ARB = 0x88D9;
pub const GL_MATRIX26_ARB = 0x88DA;
pub const GL_MATRIX27_ARB = 0x88DB;
pub const GL_MATRIX28_ARB = 0x88DC;
pub const GL_MATRIX29_ARB = 0x88DD;
pub const GL_MATRIX30_ARB = 0x88DE;
pub const GL_MATRIX31_ARB = 0x88DF;
pub const GL_ARB_fragment_program_shadow = 1;
pub const GL_ARB_fragment_shader = 1;
pub const GL_FRAGMENT_SHADER_ARB = 0x8B30;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
pub const GL_ARB_fragment_shader_interlock = 1;
pub const GL_ARB_framebuffer_no_attachments = 1;
pub const GL_ARB_framebuffer_object = 1;
pub const GL_ARB_framebuffer_sRGB = 1;
pub const GL_ARB_geometry_shader4 = 1;
pub const GL_LINES_ADJACENCY_ARB = 0x000A;
pub const GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
pub const GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
pub const GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
pub const GL_GEOMETRY_SHADER_ARB = 0x8DD9;
pub const GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
pub const GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
pub const GL_ARB_get_program_binary = 1;
pub const GL_ARB_get_texture_sub_image = 1;
pub const GL_ARB_gl_spirv = 1;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
pub const GL_SPIR_V_BINARY_ARB = 0x9552;
pub const GL_ARB_gpu_shader5 = 1;
pub const GL_ARB_gpu_shader_fp64 = 1;
pub const GL_ARB_gpu_shader_int64 = 1;
pub const GL_INT64_ARB = 0x140E;
pub const GL_INT64_VEC2_ARB = 0x8FE9;
pub const GL_INT64_VEC3_ARB = 0x8FEA;
pub const GL_INT64_VEC4_ARB = 0x8FEB;
pub const GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
pub const GL_ARB_half_float_pixel = 1;
pub const GL_HALF_FLOAT_ARB = 0x140B;
pub const GL_ARB_half_float_vertex = 1;
pub const GL_ARB_indirect_parameters = 1;
pub const GL_PARAMETER_BUFFER_ARB = 0x80EE;
pub const GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
pub const GL_ARB_instanced_arrays = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
pub const GL_ARB_internalformat_query = 1;
pub const GL_ARB_internalformat_query2 = 1;
pub const GL_SRGB_DECODE_ARB = 0x8299;
pub const GL_VIEW_CLASS_EAC_R11 = 0x9383;
pub const GL_VIEW_CLASS_EAC_RG11 = 0x9384;
pub const GL_VIEW_CLASS_ETC2_RGB = 0x9385;
pub const GL_VIEW_CLASS_ETC2_RGBA = 0x9386;
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA = 0x9388;
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA = 0x9389;
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA = 0x938A;
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA = 0x938B;
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA = 0x938C;
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA = 0x938D;
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA = 0x938E;
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA = 0x938F;
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA = 0x9390;
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA = 0x9391;
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA = 0x9392;
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA = 0x9393;
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA = 0x9394;
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA = 0x9395;
pub const GL_ARB_invalidate_subdata = 1;
pub const GL_ARB_map_buffer_alignment = 1;
pub const GL_ARB_map_buffer_range = 1;
pub const GL_ARB_matrix_palette = 1;
pub const GL_MATRIX_PALETTE_ARB = 0x8840;
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
pub const GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
pub const GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
pub const GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
pub const GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
pub const GL_ARB_multi_bind = 1;
pub const GL_ARB_multi_draw_indirect = 1;
pub const GL_ARB_multisample = 1;
pub const GL_MULTISAMPLE_ARB = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
pub const GL_SAMPLE_COVERAGE_ARB = 0x80A0;
pub const GL_SAMPLE_BUFFERS_ARB = 0x80A8;
pub const GL_SAMPLES_ARB = 0x80A9;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
pub const GL_MULTISAMPLE_BIT_ARB = 0x20000000;
pub const GL_ARB_occlusion_query = 1;
pub const GL_QUERY_COUNTER_BITS_ARB = 0x8864;
pub const GL_CURRENT_QUERY_ARB = 0x8865;
pub const GL_QUERY_RESULT_ARB = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
pub const GL_SAMPLES_PASSED_ARB = 0x8914;
pub const GL_ARB_occlusion_query2 = 1;
pub const GL_ARB_parallel_shader_compile = 1;
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
pub const GL_COMPLETION_STATUS_ARB = 0x91B1;
pub const GL_ARB_pipeline_statistics_query = 1;
pub const GL_VERTICES_SUBMITTED_ARB = 0x82EE;
pub const GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
pub const GL_ARB_pixel_buffer_object = 1;
pub const GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
pub const GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
pub const GL_ARB_point_parameters = 1;
pub const GL_POINT_SIZE_MIN_ARB = 0x8126;
pub const GL_POINT_SIZE_MAX_ARB = 0x8127;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
pub const GL_ARB_point_sprite = 1;
pub const GL_POINT_SPRITE_ARB = 0x8861;
pub const GL_COORD_REPLACE_ARB = 0x8862;
pub const GL_ARB_polygon_offset_clamp = 1;
pub const GL_ARB_post_depth_coverage = 1;
pub const GL_ARB_program_interface_query = 1;
pub const GL_ARB_provoking_vertex = 1;
pub const GL_ARB_query_buffer_object = 1;
pub const GL_ARB_robust_buffer_access_behavior = 1;
pub const GL_ARB_robustness = 1;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
pub const GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
pub const GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
pub const GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
pub const GL_ARB_robustness_isolation = 1;
pub const GL_ARB_sample_locations = 1;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
pub const GL_SAMPLE_LOCATION_ARB = 0x8E50;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
pub const GL_ARB_sample_shading = 1;
pub const GL_SAMPLE_SHADING_ARB = 0x8C36;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
pub const GL_ARB_sampler_objects = 1;
pub const GL_ARB_seamless_cube_map = 1;
pub const GL_ARB_seamless_cubemap_per_texture = 1;
pub const GL_ARB_separate_shader_objects = 1;
pub const GL_ARB_shader_atomic_counter_ops = 1;
pub const GL_ARB_shader_atomic_counters = 1;
pub const GL_ARB_shader_ballot = 1;
pub const GL_ARB_shader_bit_encoding = 1;
pub const GL_ARB_shader_clock = 1;
pub const GL_ARB_shader_draw_parameters = 1;
pub const GL_ARB_shader_group_vote = 1;
pub const GL_ARB_shader_image_load_store = 1;
pub const GL_ARB_shader_image_size = 1;
pub const GL_ARB_shader_objects = 1;
pub const GL_PROGRAM_OBJECT_ARB = 0x8B40;
pub const GL_SHADER_OBJECT_ARB = 0x8B48;
pub const GL_OBJECT_TYPE_ARB = 0x8B4E;
pub const GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
pub const GL_FLOAT_VEC2_ARB = 0x8B50;
pub const GL_FLOAT_VEC3_ARB = 0x8B51;
pub const GL_FLOAT_VEC4_ARB = 0x8B52;
pub const GL_INT_VEC2_ARB = 0x8B53;
pub const GL_INT_VEC3_ARB = 0x8B54;
pub const GL_INT_VEC4_ARB = 0x8B55;
pub const GL_BOOL_ARB = 0x8B56;
pub const GL_BOOL_VEC2_ARB = 0x8B57;
pub const GL_BOOL_VEC3_ARB = 0x8B58;
pub const GL_BOOL_VEC4_ARB = 0x8B59;
pub const GL_FLOAT_MAT2_ARB = 0x8B5A;
pub const GL_FLOAT_MAT3_ARB = 0x8B5B;
pub const GL_FLOAT_MAT4_ARB = 0x8B5C;
pub const GL_SAMPLER_1D_ARB = 0x8B5D;
pub const GL_SAMPLER_2D_ARB = 0x8B5E;
pub const GL_SAMPLER_3D_ARB = 0x8B5F;
pub const GL_SAMPLER_CUBE_ARB = 0x8B60;
pub const GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
pub const GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
pub const GL_SAMPLER_2D_RECT_ARB = 0x8B63;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
pub const GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
pub const GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
pub const GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
pub const GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
pub const GL_ARB_shader_precision = 1;
pub const GL_ARB_shader_stencil_export = 1;
pub const GL_ARB_shader_storage_buffer_object = 1;
pub const GL_ARB_shader_subroutine = 1;
pub const GL_ARB_shader_texture_image_samples = 1;
pub const GL_ARB_shader_texture_lod = 1;
pub const GL_ARB_shader_viewport_layer_array = 1;
pub const GL_ARB_shading_language_100 = 1;
pub const GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
pub const GL_ARB_shading_language_420pack = 1;
pub const GL_ARB_shading_language_include = 1;
pub const GL_SHADER_INCLUDE_ARB = 0x8DAE;
pub const GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
pub const GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
pub const GL_ARB_shading_language_packing = 1;
pub const GL_ARB_shadow = 1;
pub const GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
pub const GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
pub const GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
pub const GL_ARB_shadow_ambient = 1;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
pub const GL_ARB_sparse_buffer = 1;
pub const GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
pub const GL_ARB_sparse_texture = 1;
pub const GL_TEXTURE_SPARSE_ARB = 0x91A6;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
pub const GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
pub const GL_ARB_sparse_texture2 = 1;
pub const GL_ARB_sparse_texture_clamp = 1;
pub const GL_ARB_spirv_extensions = 1;
pub const GL_ARB_stencil_texturing = 1;
pub const GL_ARB_sync = 1;
pub const GL_ARB_tessellation_shader = 1;
pub const GL_ARB_texture_barrier = 1;
pub const GL_ARB_texture_border_clamp = 1;
pub const GL_CLAMP_TO_BORDER_ARB = 0x812D;
pub const GL_ARB_texture_buffer_object = 1;
pub const GL_TEXTURE_BUFFER_ARB = 0x8C2A;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
pub const GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
pub const GL_ARB_texture_buffer_object_rgb32 = 1;
pub const GL_ARB_texture_buffer_range = 1;
pub const GL_ARB_texture_compression = 1;
pub const GL_COMPRESSED_ALPHA_ARB = 0x84E9;
pub const GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
pub const GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
pub const GL_COMPRESSED_RGB_ARB = 0x84ED;
pub const GL_COMPRESSED_RGBA_ARB = 0x84EE;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
pub const GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
pub const GL_ARB_texture_compression_bptc = 1;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
pub const GL_ARB_texture_compression_rgtc = 1;
pub const GL_ARB_texture_cube_map = 1;
pub const GL_NORMAL_MAP_ARB = 0x8511;
pub const GL_REFLECTION_MAP_ARB = 0x8512;
pub const GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
pub const GL_ARB_texture_cube_map_array = 1;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
pub const GL_ARB_texture_env_add = 1;
pub const GL_ARB_texture_env_combine = 1;
pub const GL_COMBINE_ARB = 0x8570;
pub const GL_COMBINE_RGB_ARB = 0x8571;
pub const GL_COMBINE_ALPHA_ARB = 0x8572;
pub const GL_SOURCE0_RGB_ARB = 0x8580;
pub const GL_SOURCE1_RGB_ARB = 0x8581;
pub const GL_SOURCE2_RGB_ARB = 0x8582;
pub const GL_SOURCE0_ALPHA_ARB = 0x8588;
pub const GL_SOURCE1_ALPHA_ARB = 0x8589;
pub const GL_SOURCE2_ALPHA_ARB = 0x858A;
pub const GL_OPERAND0_RGB_ARB = 0x8590;
pub const GL_OPERAND1_RGB_ARB = 0x8591;
pub const GL_OPERAND2_RGB_ARB = 0x8592;
pub const GL_OPERAND0_ALPHA_ARB = 0x8598;
pub const GL_OPERAND1_ALPHA_ARB = 0x8599;
pub const GL_OPERAND2_ALPHA_ARB = 0x859A;
pub const GL_RGB_SCALE_ARB = 0x8573;
pub const GL_ADD_SIGNED_ARB = 0x8574;
pub const GL_INTERPOLATE_ARB = 0x8575;
pub const GL_SUBTRACT_ARB = 0x84E7;
pub const GL_CONSTANT_ARB = 0x8576;
pub const GL_PRIMARY_COLOR_ARB = 0x8577;
pub const GL_PREVIOUS_ARB = 0x8578;
pub const GL_ARB_texture_env_crossbar = 1;
pub const GL_ARB_texture_env_dot3 = 1;
pub const GL_DOT3_RGB_ARB = 0x86AE;
pub const GL_DOT3_RGBA_ARB = 0x86AF;
pub const GL_ARB_texture_filter_anisotropic = 1;
pub const GL_ARB_texture_filter_minmax = 1;
pub const GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
pub const GL_WEIGHTED_AVERAGE_ARB = 0x9367;
pub const GL_ARB_texture_float = 1;
pub const GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
pub const GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
pub const GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
pub const GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
pub const GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
pub const GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
pub const GL_RGBA32F_ARB = 0x8814;
pub const GL_RGB32F_ARB = 0x8815;
pub const GL_ALPHA32F_ARB = 0x8816;
pub const GL_INTENSITY32F_ARB = 0x8817;
pub const GL_LUMINANCE32F_ARB = 0x8818;
pub const GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
pub const GL_RGBA16F_ARB = 0x881A;
pub const GL_RGB16F_ARB = 0x881B;
pub const GL_ALPHA16F_ARB = 0x881C;
pub const GL_INTENSITY16F_ARB = 0x881D;
pub const GL_LUMINANCE16F_ARB = 0x881E;
pub const GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
pub const GL_ARB_texture_gather = 1;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
pub const GL_ARB_texture_mirror_clamp_to_edge = 1;
pub const GL_ARB_texture_mirrored_repeat = 1;
pub const GL_MIRRORED_REPEAT_ARB = 0x8370;
pub const GL_ARB_texture_multisample = 1;
pub const GL_ARB_texture_non_power_of_two = 1;
pub const GL_ARB_texture_query_levels = 1;
pub const GL_ARB_texture_query_lod = 1;
pub const GL_ARB_texture_rectangle = 1;
pub const GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
pub const GL_ARB_texture_rg = 1;
pub const GL_ARB_texture_rgb10_a2ui = 1;
pub const GL_ARB_texture_stencil8 = 1;
pub const GL_ARB_texture_storage = 1;
pub const GL_ARB_texture_storage_multisample = 1;
pub const GL_ARB_texture_swizzle = 1;
pub const GL_ARB_texture_view = 1;
pub const GL_ARB_timer_query = 1;
pub const GL_ARB_transform_feedback2 = 1;
pub const GL_ARB_transform_feedback3 = 1;
pub const GL_ARB_transform_feedback_instanced = 1;
pub const GL_ARB_transform_feedback_overflow_query = 1;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
pub const GL_ARB_transpose_matrix = 1;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
pub const GL_ARB_uniform_buffer_object = 1;
pub const GL_ARB_vertex_array_bgra = 1;
pub const GL_ARB_vertex_array_object = 1;
pub const GL_ARB_vertex_attrib_64bit = 1;
pub const GL_ARB_vertex_attrib_binding = 1;
pub const GL_ARB_vertex_blend = 1;
pub const GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
pub const GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
pub const GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
pub const GL_VERTEX_BLEND_ARB = 0x86A7;
pub const GL_CURRENT_WEIGHT_ARB = 0x86A8;
pub const GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
pub const GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
pub const GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
pub const GL_WEIGHT_ARRAY_ARB = 0x86AD;
pub const GL_MODELVIEW0_ARB = 0x1700;
pub const GL_MODELVIEW1_ARB = 0x850A;
pub const GL_MODELVIEW2_ARB = 0x8722;
pub const GL_MODELVIEW3_ARB = 0x8723;
pub const GL_MODELVIEW4_ARB = 0x8724;
pub const GL_MODELVIEW5_ARB = 0x8725;
pub const GL_MODELVIEW6_ARB = 0x8726;
pub const GL_MODELVIEW7_ARB = 0x8727;
pub const GL_MODELVIEW8_ARB = 0x8728;
pub const GL_MODELVIEW9_ARB = 0x8729;
pub const GL_MODELVIEW10_ARB = 0x872A;
pub const GL_MODELVIEW11_ARB = 0x872B;
pub const GL_MODELVIEW12_ARB = 0x872C;
pub const GL_MODELVIEW13_ARB = 0x872D;
pub const GL_MODELVIEW14_ARB = 0x872E;
pub const GL_MODELVIEW15_ARB = 0x872F;
pub const GL_MODELVIEW16_ARB = 0x8730;
pub const GL_MODELVIEW17_ARB = 0x8731;
pub const GL_MODELVIEW18_ARB = 0x8732;
pub const GL_MODELVIEW19_ARB = 0x8733;
pub const GL_MODELVIEW20_ARB = 0x8734;
pub const GL_MODELVIEW21_ARB = 0x8735;
pub const GL_MODELVIEW22_ARB = 0x8736;
pub const GL_MODELVIEW23_ARB = 0x8737;
pub const GL_MODELVIEW24_ARB = 0x8738;
pub const GL_MODELVIEW25_ARB = 0x8739;
pub const GL_MODELVIEW26_ARB = 0x873A;
pub const GL_MODELVIEW27_ARB = 0x873B;
pub const GL_MODELVIEW28_ARB = 0x873C;
pub const GL_MODELVIEW29_ARB = 0x873D;
pub const GL_MODELVIEW30_ARB = 0x873E;
pub const GL_MODELVIEW31_ARB = 0x873F;
pub const GL_ARB_vertex_buffer_object = 1;
pub const GL_BUFFER_SIZE_ARB = 0x8764;
pub const GL_BUFFER_USAGE_ARB = 0x8765;
pub const GL_ARRAY_BUFFER_ARB = 0x8892;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
pub const GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
pub const GL_READ_ONLY_ARB = 0x88B8;
pub const GL_WRITE_ONLY_ARB = 0x88B9;
pub const GL_READ_WRITE_ARB = 0x88BA;
pub const GL_BUFFER_ACCESS_ARB = 0x88BB;
pub const GL_BUFFER_MAPPED_ARB = 0x88BC;
pub const GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
pub const GL_STREAM_DRAW_ARB = 0x88E0;
pub const GL_STREAM_READ_ARB = 0x88E1;
pub const GL_STREAM_COPY_ARB = 0x88E2;
pub const GL_STATIC_DRAW_ARB = 0x88E4;
pub const GL_STATIC_READ_ARB = 0x88E5;
pub const GL_STATIC_COPY_ARB = 0x88E6;
pub const GL_DYNAMIC_DRAW_ARB = 0x88E8;
pub const GL_DYNAMIC_READ_ARB = 0x88E9;
pub const GL_DYNAMIC_COPY_ARB = 0x88EA;
pub const GL_ARB_vertex_program = 1;
pub const GL_COLOR_SUM_ARB = 0x8458;
pub const GL_VERTEX_PROGRAM_ARB = 0x8620;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
pub const GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
pub const GL_ARB_vertex_shader = 1;
pub const GL_VERTEX_SHADER_ARB = 0x8B31;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
pub const GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
pub const GL_ARB_vertex_type_10f_11f_11f_rev = 1;
pub const GL_ARB_vertex_type_2_10_10_10_rev = 1;
pub const GL_ARB_viewport_array = 1;
pub const GL_ARB_window_pos = 1;
pub const GL_KHR_blend_equation_advanced = 1;
pub const GL_MULTIPLY_KHR = 0x9294;
pub const GL_SCREEN_KHR = 0x9295;
pub const GL_OVERLAY_KHR = 0x9296;
pub const GL_DARKEN_KHR = 0x9297;
pub const GL_LIGHTEN_KHR = 0x9298;
pub const GL_COLORDODGE_KHR = 0x9299;
pub const GL_COLORBURN_KHR = 0x929A;
pub const GL_HARDLIGHT_KHR = 0x929B;
pub const GL_SOFTLIGHT_KHR = 0x929C;
pub const GL_DIFFERENCE_KHR = 0x929E;
pub const GL_EXCLUSION_KHR = 0x92A0;
pub const GL_HSL_HUE_KHR = 0x92AD;
pub const GL_HSL_SATURATION_KHR = 0x92AE;
pub const GL_HSL_COLOR_KHR = 0x92AF;
pub const GL_HSL_LUMINOSITY_KHR = 0x92B0;
pub const GL_KHR_blend_equation_advanced_coherent = 1;
pub const GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
pub const GL_KHR_context_flush_control = 1;
pub const GL_KHR_debug = 1;
pub const GL_KHR_no_error = 1;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
pub const GL_KHR_parallel_shader_compile = 1;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
pub const GL_COMPLETION_STATUS_KHR = 0x91B1;
pub const GL_KHR_robust_buffer_access_behavior = 1;
pub const GL_KHR_robustness = 1;
pub const GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
pub const GL_KHR_shader_subgroup = 1;
pub const GL_SUBGROUP_SIZE_KHR = 0x9532;
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
pub const GL_KHR_texture_compression_astc_hdr = 1;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
pub const GL_KHR_texture_compression_astc_ldr = 1;
pub const GL_KHR_texture_compression_astc_sliced_3d = 1;
pub const GL_OES_byte_coordinates = 1;
pub const GL_OES_compressed_paletted_texture = 1;
pub const GL_PALETTE4_RGB8_OES = 0x8B90;
pub const GL_PALETTE4_RGBA8_OES = 0x8B91;
pub const GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
pub const GL_PALETTE4_RGBA4_OES = 0x8B93;
pub const GL_PALETTE4_RGB5_A1_OES = 0x8B94;
pub const GL_PALETTE8_RGB8_OES = 0x8B95;
pub const GL_PALETTE8_RGBA8_OES = 0x8B96;
pub const GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
pub const GL_PALETTE8_RGBA4_OES = 0x8B98;
pub const GL_PALETTE8_RGB5_A1_OES = 0x8B99;
pub const GL_OES_fixed_point = 1;
pub const GL_FIXED_OES = 0x140C;
pub const GL_OES_query_matrix = 1;
pub const GL_OES_read_format = 1;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
pub const GL_OES_single_precision = 1;
pub const GL_3DFX_multisample = 1;
pub const GL_MULTISAMPLE_3DFX = 0x86B2;
pub const GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
pub const GL_SAMPLES_3DFX = 0x86B4;
pub const GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
pub const GL_3DFX_tbuffer = 1;
pub const GL_3DFX_texture_compression_FXT1 = 1;
pub const GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
pub const GL_AMD_blend_minmax_factor = 1;
pub const GL_FACTOR_MIN_AMD = 0x901C;
pub const GL_FACTOR_MAX_AMD = 0x901D;
pub const GL_AMD_conservative_depth = 1;
pub const GL_AMD_debug_output = 1;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
pub const GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
pub const GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
pub const GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
pub const GL_AMD_depth_clamp_separate = 1;
pub const GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
pub const GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
pub const GL_AMD_draw_buffers_blend = 1;
pub const GL_AMD_framebuffer_multisample_advanced = 1;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
pub const GL_AMD_framebuffer_sample_positions = 1;
pub const GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
pub const GL_ALL_PIXELS_AMD = 0xFFFFFFFF;
pub const GL_AMD_gcn_shader = 1;
pub const GL_AMD_gpu_shader_half_float = 1;
pub const GL_FLOAT16_NV = 0x8FF8;
pub const GL_FLOAT16_VEC2_NV = 0x8FF9;
pub const GL_FLOAT16_VEC3_NV = 0x8FFA;
pub const GL_FLOAT16_VEC4_NV = 0x8FFB;
pub const GL_FLOAT16_MAT2_AMD = 0x91C5;
pub const GL_FLOAT16_MAT3_AMD = 0x91C6;
pub const GL_FLOAT16_MAT4_AMD = 0x91C7;
pub const GL_FLOAT16_MAT2x3_AMD = 0x91C8;
pub const GL_FLOAT16_MAT2x4_AMD = 0x91C9;
pub const GL_FLOAT16_MAT3x2_AMD = 0x91CA;
pub const GL_FLOAT16_MAT3x4_AMD = 0x91CB;
pub const GL_FLOAT16_MAT4x2_AMD = 0x91CC;
pub const GL_FLOAT16_MAT4x3_AMD = 0x91CD;
pub const GL_AMD_gpu_shader_int16 = 1;
pub const GL_AMD_gpu_shader_int64 = 1;
pub const GL_INT64_NV = 0x140E;
pub const GL_UNSIGNED_INT64_NV = 0x140F;
pub const GL_INT8_NV = 0x8FE0;
pub const GL_INT8_VEC2_NV = 0x8FE1;
pub const GL_INT8_VEC3_NV = 0x8FE2;
pub const GL_INT8_VEC4_NV = 0x8FE3;
pub const GL_INT16_NV = 0x8FE4;
pub const GL_INT16_VEC2_NV = 0x8FE5;
pub const GL_INT16_VEC3_NV = 0x8FE6;
pub const GL_INT16_VEC4_NV = 0x8FE7;
pub const GL_INT64_VEC2_NV = 0x8FE9;
pub const GL_INT64_VEC3_NV = 0x8FEA;
pub const GL_INT64_VEC4_NV = 0x8FEB;
pub const GL_UNSIGNED_INT8_NV = 0x8FEC;
pub const GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
pub const GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
pub const GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
pub const GL_UNSIGNED_INT16_NV = 0x8FF0;
pub const GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
pub const GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
pub const GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
pub const GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
pub const GL_AMD_interleaved_elements = 1;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
pub const GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
pub const GL_AMD_multi_draw_indirect = 1;
pub const GL_AMD_name_gen_delete = 1;
pub const GL_DATA_BUFFER_AMD = 0x9151;
pub const GL_PERFORMANCE_MONITOR_AMD = 0x9152;
pub const GL_QUERY_OBJECT_AMD = 0x9153;
pub const GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
pub const GL_SAMPLER_OBJECT_AMD = 0x9155;
pub const GL_AMD_occlusion_query_event = 1;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
pub const GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
pub const GL_AMD_performance_monitor = 1;
pub const GL_COUNTER_TYPE_AMD = 0x8BC0;
pub const GL_COUNTER_RANGE_AMD = 0x8BC1;
pub const GL_UNSIGNED_INT64_AMD = 0x8BC2;
pub const GL_PERCENTAGE_AMD = 0x8BC3;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
pub const GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
pub const GL_PERFMON_RESULT_AMD = 0x8BC6;
pub const GL_AMD_pinned_memory = 1;
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
pub const GL_AMD_query_buffer_object = 1;
pub const GL_QUERY_BUFFER_AMD = 0x9192;
pub const GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
pub const GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
pub const GL_AMD_sample_positions = 1;
pub const GL_AMD_seamless_cubemap_per_texture = 1;
pub const GL_AMD_shader_atomic_counter_ops = 1;
pub const GL_AMD_shader_ballot = 1;
pub const GL_AMD_shader_explicit_vertex_parameter = 1;
pub const GL_AMD_shader_gpu_shader_half_float_fetch = 1;
pub const GL_AMD_shader_image_load_store_lod = 1;
pub const GL_AMD_shader_stencil_export = 1;
pub const GL_AMD_shader_trinary_minmax = 1;
pub const GL_AMD_sparse_texture = 1;
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
pub const GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
pub const GL_MIN_LOD_WARNING_AMD = 0x919C;
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
pub const GL_AMD_stencil_operation_extended = 1;
pub const GL_SET_AMD = 0x874A;
pub const GL_REPLACE_VALUE_AMD = 0x874B;
pub const GL_STENCIL_OP_VALUE_AMD = 0x874C;
pub const GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
pub const GL_AMD_texture_gather_bias_lod = 1;
pub const GL_AMD_texture_texture4 = 1;
pub const GL_AMD_transform_feedback3_lines_triangles = 1;
pub const GL_AMD_transform_feedback4 = 1;
pub const GL_STREAM_RASTERIZATION_AMD = 0x91A0;
pub const GL_AMD_vertex_shader_layer = 1;
pub const GL_AMD_vertex_shader_tessellator = 1;
pub const GL_SAMPLER_BUFFER_AMD = 0x9001;
pub const GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
pub const GL_TESSELLATION_MODE_AMD = 0x9004;
pub const GL_TESSELLATION_FACTOR_AMD = 0x9005;
pub const GL_DISCRETE_AMD = 0x9006;
pub const GL_CONTINUOUS_AMD = 0x9007;
pub const GL_AMD_vertex_shader_viewport_index = 1;
pub const GL_APPLE_aux_depth_stencil = 1;
pub const GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
pub const GL_APPLE_client_storage = 1;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
pub const GL_APPLE_element_array = 1;
pub const GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
pub const GL_APPLE_fence = 1;
pub const GL_DRAW_PIXELS_APPLE = 0x8A0A;
pub const GL_FENCE_APPLE = 0x8A0B;
pub const GL_APPLE_float_pixels = 1;
pub const GL_HALF_APPLE = 0x140B;
pub const GL_RGBA_FLOAT32_APPLE = 0x8814;
pub const GL_RGB_FLOAT32_APPLE = 0x8815;
pub const GL_ALPHA_FLOAT32_APPLE = 0x8816;
pub const GL_INTENSITY_FLOAT32_APPLE = 0x8817;
pub const GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
pub const GL_RGBA_FLOAT16_APPLE = 0x881A;
pub const GL_RGB_FLOAT16_APPLE = 0x881B;
pub const GL_ALPHA_FLOAT16_APPLE = 0x881C;
pub const GL_INTENSITY_FLOAT16_APPLE = 0x881D;
pub const GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
pub const GL_COLOR_FLOAT_APPLE = 0x8A0F;
pub const GL_APPLE_flush_buffer_range = 1;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
pub const GL_APPLE_object_purgeable = 1;
pub const GL_BUFFER_OBJECT_APPLE = 0x85B3;
pub const GL_RELEASED_APPLE = 0x8A19;
pub const GL_VOLATILE_APPLE = 0x8A1A;
pub const GL_RETAINED_APPLE = 0x8A1B;
pub const GL_UNDEFINED_APPLE = 0x8A1C;
pub const GL_PURGEABLE_APPLE = 0x8A1D;
pub const GL_APPLE_rgb_422 = 1;
pub const GL_RGB_422_APPLE = 0x8A1F;
pub const GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
pub const GL_RGB_RAW_422_APPLE = 0x8A51;
pub const GL_APPLE_row_bytes = 1;
pub const GL_PACK_ROW_BYTES_APPLE = 0x8A15;
pub const GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
pub const GL_APPLE_specular_vector = 1;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
pub const GL_APPLE_texture_range = 1;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
pub const GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
pub const GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
pub const GL_STORAGE_PRIVATE_APPLE = 0x85BD;
pub const GL_STORAGE_CACHED_APPLE = 0x85BE;
pub const GL_STORAGE_SHARED_APPLE = 0x85BF;
pub const GL_APPLE_transform_hint = 1;
pub const GL_TRANSFORM_HINT_APPLE = 0x85B1;
pub const GL_APPLE_vertex_array_object = 1;
pub const GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
pub const GL_APPLE_vertex_array_range = 1;
pub const GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
pub const GL_STORAGE_CLIENT_APPLE = 0x85B4;
pub const GL_APPLE_vertex_program_evaluators = 1;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
pub const GL_APPLE_ycbcr_422 = 1;
pub const GL_YCBCR_422_APPLE = 0x85B9;
pub const GL_ATI_draw_buffers = 1;
pub const GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
pub const GL_DRAW_BUFFER0_ATI = 0x8825;
pub const GL_DRAW_BUFFER1_ATI = 0x8826;
pub const GL_DRAW_BUFFER2_ATI = 0x8827;
pub const GL_DRAW_BUFFER3_ATI = 0x8828;
pub const GL_DRAW_BUFFER4_ATI = 0x8829;
pub const GL_DRAW_BUFFER5_ATI = 0x882A;
pub const GL_DRAW_BUFFER6_ATI = 0x882B;
pub const GL_DRAW_BUFFER7_ATI = 0x882C;
pub const GL_DRAW_BUFFER8_ATI = 0x882D;
pub const GL_DRAW_BUFFER9_ATI = 0x882E;
pub const GL_DRAW_BUFFER10_ATI = 0x882F;
pub const GL_DRAW_BUFFER11_ATI = 0x8830;
pub const GL_DRAW_BUFFER12_ATI = 0x8831;
pub const GL_DRAW_BUFFER13_ATI = 0x8832;
pub const GL_DRAW_BUFFER14_ATI = 0x8833;
pub const GL_DRAW_BUFFER15_ATI = 0x8834;
pub const GL_ATI_element_array = 1;
pub const GL_ELEMENT_ARRAY_ATI = 0x8768;
pub const GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
pub const GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
pub const GL_ATI_envmap_bumpmap = 1;
pub const GL_BUMP_ROT_MATRIX_ATI = 0x8775;
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
pub const GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
pub const GL_BUMP_TEX_UNITS_ATI = 0x8778;
pub const GL_DUDV_ATI = 0x8779;
pub const GL_DU8DV8_ATI = 0x877A;
pub const GL_BUMP_ENVMAP_ATI = 0x877B;
pub const GL_BUMP_TARGET_ATI = 0x877C;
pub const GL_ATI_fragment_shader = 1;
pub const GL_FRAGMENT_SHADER_ATI = 0x8920;
pub const GL_REG_0_ATI = 0x8921;
pub const GL_REG_1_ATI = 0x8922;
pub const GL_REG_2_ATI = 0x8923;
pub const GL_REG_3_ATI = 0x8924;
pub const GL_REG_4_ATI = 0x8925;
pub const GL_REG_5_ATI = 0x8926;
pub const GL_REG_6_ATI = 0x8927;
pub const GL_REG_7_ATI = 0x8928;
pub const GL_REG_8_ATI = 0x8929;
pub const GL_REG_9_ATI = 0x892A;
pub const GL_REG_10_ATI = 0x892B;
pub const GL_REG_11_ATI = 0x892C;
pub const GL_REG_12_ATI = 0x892D;
pub const GL_REG_13_ATI = 0x892E;
pub const GL_REG_14_ATI = 0x892F;
pub const GL_REG_15_ATI = 0x8930;
pub const GL_REG_16_ATI = 0x8931;
pub const GL_REG_17_ATI = 0x8932;
pub const GL_REG_18_ATI = 0x8933;
pub const GL_REG_19_ATI = 0x8934;
pub const GL_REG_20_ATI = 0x8935;
pub const GL_REG_21_ATI = 0x8936;
pub const GL_REG_22_ATI = 0x8937;
pub const GL_REG_23_ATI = 0x8938;
pub const GL_REG_24_ATI = 0x8939;
pub const GL_REG_25_ATI = 0x893A;
pub const GL_REG_26_ATI = 0x893B;
pub const GL_REG_27_ATI = 0x893C;
pub const GL_REG_28_ATI = 0x893D;
pub const GL_REG_29_ATI = 0x893E;
pub const GL_REG_30_ATI = 0x893F;
pub const GL_REG_31_ATI = 0x8940;
pub const GL_CON_0_ATI = 0x8941;
pub const GL_CON_1_ATI = 0x8942;
pub const GL_CON_2_ATI = 0x8943;
pub const GL_CON_3_ATI = 0x8944;
pub const GL_CON_4_ATI = 0x8945;
pub const GL_CON_5_ATI = 0x8946;
pub const GL_CON_6_ATI = 0x8947;
pub const GL_CON_7_ATI = 0x8948;
pub const GL_CON_8_ATI = 0x8949;
pub const GL_CON_9_ATI = 0x894A;
pub const GL_CON_10_ATI = 0x894B;
pub const GL_CON_11_ATI = 0x894C;
pub const GL_CON_12_ATI = 0x894D;
pub const GL_CON_13_ATI = 0x894E;
pub const GL_CON_14_ATI = 0x894F;
pub const GL_CON_15_ATI = 0x8950;
pub const GL_CON_16_ATI = 0x8951;
pub const GL_CON_17_ATI = 0x8952;
pub const GL_CON_18_ATI = 0x8953;
pub const GL_CON_19_ATI = 0x8954;
pub const GL_CON_20_ATI = 0x8955;
pub const GL_CON_21_ATI = 0x8956;
pub const GL_CON_22_ATI = 0x8957;
pub const GL_CON_23_ATI = 0x8958;
pub const GL_CON_24_ATI = 0x8959;
pub const GL_CON_25_ATI = 0x895A;
pub const GL_CON_26_ATI = 0x895B;
pub const GL_CON_27_ATI = 0x895C;
pub const GL_CON_28_ATI = 0x895D;
pub const GL_CON_29_ATI = 0x895E;
pub const GL_CON_30_ATI = 0x895F;
pub const GL_CON_31_ATI = 0x8960;
pub const GL_MOV_ATI = 0x8961;
pub const GL_ADD_ATI = 0x8963;
pub const GL_MUL_ATI = 0x8964;
pub const GL_SUB_ATI = 0x8965;
pub const GL_DOT3_ATI = 0x8966;
pub const GL_DOT4_ATI = 0x8967;
pub const GL_MAD_ATI = 0x8968;
pub const GL_LERP_ATI = 0x8969;
pub const GL_CND_ATI = 0x896A;
pub const GL_CND0_ATI = 0x896B;
pub const GL_DOT2_ADD_ATI = 0x896C;
pub const GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
pub const GL_NUM_PASSES_ATI = 0x8970;
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
pub const GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
pub const GL_SWIZZLE_STR_ATI = 0x8976;
pub const GL_SWIZZLE_STQ_ATI = 0x8977;
pub const GL_SWIZZLE_STR_DR_ATI = 0x8978;
pub const GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
pub const GL_SWIZZLE_STRQ_ATI = 0x897A;
pub const GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
pub const GL_RED_BIT_ATI = 0x00000001;
pub const GL_GREEN_BIT_ATI = 0x00000002;
pub const GL_BLUE_BIT_ATI = 0x00000004;
pub const GL_2X_BIT_ATI = 0x00000001;
pub const GL_4X_BIT_ATI = 0x00000002;
pub const GL_8X_BIT_ATI = 0x00000004;
pub const GL_HALF_BIT_ATI = 0x00000008;
pub const GL_QUARTER_BIT_ATI = 0x00000010;
pub const GL_EIGHTH_BIT_ATI = 0x00000020;
pub const GL_SATURATE_BIT_ATI = 0x00000040;
pub const GL_COMP_BIT_ATI = 0x00000002;
pub const GL_NEGATE_BIT_ATI = 0x00000004;
pub const GL_BIAS_BIT_ATI = 0x00000008;
pub const GL_ATI_map_object_buffer = 1;
pub const GL_ATI_meminfo = 1;
pub const GL_VBO_FREE_MEMORY_ATI = 0x87FB;
pub const GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
pub const GL_ATI_pixel_format_float = 1;
pub const GL_RGBA_FLOAT_MODE_ATI = 0x8820;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
pub const GL_ATI_pn_triangles = 1;
pub const GL_PN_TRIANGLES_ATI = 0x87F0;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
pub const GL_ATI_separate_stencil = 1;
pub const GL_STENCIL_BACK_FUNC_ATI = 0x8800;
pub const GL_STENCIL_BACK_FAIL_ATI = 0x8801;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
pub const GL_ATI_text_fragment_shader = 1;
pub const GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
pub const GL_ATI_texture_env_combine3 = 1;
pub const GL_MODULATE_ADD_ATI = 0x8744;
pub const GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
pub const GL_MODULATE_SUBTRACT_ATI = 0x8746;
pub const GL_ATI_texture_float = 1;
pub const GL_RGBA_FLOAT32_ATI = 0x8814;
pub const GL_RGB_FLOAT32_ATI = 0x8815;
pub const GL_ALPHA_FLOAT32_ATI = 0x8816;
pub const GL_INTENSITY_FLOAT32_ATI = 0x8817;
pub const GL_LUMINANCE_FLOAT32_ATI = 0x8818;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
pub const GL_RGBA_FLOAT16_ATI = 0x881A;
pub const GL_RGB_FLOAT16_ATI = 0x881B;
pub const GL_ALPHA_FLOAT16_ATI = 0x881C;
pub const GL_INTENSITY_FLOAT16_ATI = 0x881D;
pub const GL_LUMINANCE_FLOAT16_ATI = 0x881E;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
pub const GL_ATI_texture_mirror_once = 1;
pub const GL_MIRROR_CLAMP_ATI = 0x8742;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
pub const GL_ATI_vertex_array_object = 1;
pub const GL_STATIC_ATI = 0x8760;
pub const GL_DYNAMIC_ATI = 0x8761;
pub const GL_PRESERVE_ATI = 0x8762;
pub const GL_DISCARD_ATI = 0x8763;
pub const GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
pub const GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
pub const GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
pub const GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
pub const GL_ATI_vertex_attrib_array_object = 1;
pub const GL_ATI_vertex_streams = 1;
pub const GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
pub const GL_VERTEX_STREAM0_ATI = 0x876C;
pub const GL_VERTEX_STREAM1_ATI = 0x876D;
pub const GL_VERTEX_STREAM2_ATI = 0x876E;
pub const GL_VERTEX_STREAM3_ATI = 0x876F;
pub const GL_VERTEX_STREAM4_ATI = 0x8770;
pub const GL_VERTEX_STREAM5_ATI = 0x8771;
pub const GL_VERTEX_STREAM6_ATI = 0x8772;
pub const GL_VERTEX_STREAM7_ATI = 0x8773;
pub const GL_VERTEX_SOURCE_ATI = 0x8774;
pub const GL_EXT_422_pixels = 1;
pub const GL_422_EXT = 0x80CC;
pub const GL_422_REV_EXT = 0x80CD;
pub const GL_422_AVERAGE_EXT = 0x80CE;
pub const GL_422_REV_AVERAGE_EXT = 0x80CF;
pub const GL_EXT_EGL_image_storage = 1;
pub const GL_EXT_abgr = 1;
pub const GL_ABGR_EXT = 0x8000;
pub const GL_EXT_bgra = 1;
pub const GL_BGR_EXT = 0x80E0;
pub const GL_BGRA_EXT = 0x80E1;
pub const GL_EXT_bindable_uniform = 1;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
pub const GL_UNIFORM_BUFFER_EXT = 0x8DEE;
pub const GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
pub const GL_EXT_blend_color = 1;
pub const GL_CONSTANT_COLOR_EXT = 0x8001;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
pub const GL_CONSTANT_ALPHA_EXT = 0x8003;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
pub const GL_BLEND_COLOR_EXT = 0x8005;
pub const GL_EXT_blend_equation_separate = 1;
pub const GL_BLEND_EQUATION_RGB_EXT = 0x8009;
pub const GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
pub const GL_EXT_blend_func_separate = 1;
pub const GL_BLEND_DST_RGB_EXT = 0x80C8;
pub const GL_BLEND_SRC_RGB_EXT = 0x80C9;
pub const GL_BLEND_DST_ALPHA_EXT = 0x80CA;
pub const GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
pub const GL_EXT_blend_logic_op = 1;
pub const GL_EXT_blend_minmax = 1;
pub const GL_MIN_EXT = 0x8007;
pub const GL_MAX_EXT = 0x8008;
pub const GL_FUNC_ADD_EXT = 0x8006;
pub const GL_BLEND_EQUATION_EXT = 0x8009;
pub const GL_EXT_blend_subtract = 1;
pub const GL_FUNC_SUBTRACT_EXT = 0x800A;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
pub const GL_EXT_clip_volume_hint = 1;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
pub const GL_EXT_cmyka = 1;
pub const GL_CMYK_EXT = 0x800C;
pub const GL_CMYKA_EXT = 0x800D;
pub const GL_PACK_CMYK_HINT_EXT = 0x800E;
pub const GL_UNPACK_CMYK_HINT_EXT = 0x800F;
pub const GL_EXT_color_subtable = 1;
pub const GL_EXT_compiled_vertex_array = 1;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
pub const GL_EXT_convolution = 1;
pub const GL_CONVOLUTION_1D_EXT = 0x8010;
pub const GL_CONVOLUTION_2D_EXT = 0x8011;
pub const GL_SEPARABLE_2D_EXT = 0x8012;
pub const GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
pub const GL_REDUCE_EXT = 0x8016;
pub const GL_CONVOLUTION_FORMAT_EXT = 0x8017;
pub const GL_CONVOLUTION_WIDTH_EXT = 0x8018;
pub const GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
pub const GL_EXT_coordinate_frame = 1;
pub const GL_TANGENT_ARRAY_EXT = 0x8439;
pub const GL_BINORMAL_ARRAY_EXT = 0x843A;
pub const GL_CURRENT_TANGENT_EXT = 0x843B;
pub const GL_CURRENT_BINORMAL_EXT = 0x843C;
pub const GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
pub const GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
pub const GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
pub const GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
pub const GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
pub const GL_MAP1_TANGENT_EXT = 0x8444;
pub const GL_MAP2_TANGENT_EXT = 0x8445;
pub const GL_MAP1_BINORMAL_EXT = 0x8446;
pub const GL_MAP2_BINORMAL_EXT = 0x8447;
pub const GL_EXT_copy_texture = 1;
pub const GL_EXT_cull_vertex = 1;
pub const GL_CULL_VERTEX_EXT = 0x81AA;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
pub const GL_EXT_debug_label = 1;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
pub const GL_PROGRAM_OBJECT_EXT = 0x8B40;
pub const GL_SHADER_OBJECT_EXT = 0x8B48;
pub const GL_BUFFER_OBJECT_EXT = 0x9151;
pub const GL_QUERY_OBJECT_EXT = 0x9153;
pub const GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
pub const GL_EXT_debug_marker = 1;
pub const GL_EXT_depth_bounds_test = 1;
pub const GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
pub const GL_DEPTH_BOUNDS_EXT = 0x8891;
pub const GL_EXT_direct_state_access = 1;
pub const GL_PROGRAM_MATRIX_EXT = 0x8E2D;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
pub const GL_EXT_draw_buffers2 = 1;
pub const GL_EXT_draw_instanced = 1;
pub const GL_EXT_draw_range_elements = 1;
pub const GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
pub const GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
pub const GL_EXT_external_buffer = 1;
pub const GL_EXT_fog_coord = 1;
pub const GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
pub const GL_FOG_COORDINATE_EXT = 0x8451;
pub const GL_FRAGMENT_DEPTH_EXT = 0x8452;
pub const GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
pub const GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
pub const GL_EXT_framebuffer_blit = 1;
pub const GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
pub const GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
pub const GL_EXT_framebuffer_multisample = 1;
pub const GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
pub const GL_MAX_SAMPLES_EXT = 0x8D57;
pub const GL_EXT_framebuffer_multisample_blit_scaled = 1;
pub const GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
pub const GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
pub const GL_EXT_framebuffer_object = 1;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
pub const GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
pub const GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
pub const GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
pub const GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
pub const GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
pub const GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
pub const GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
pub const GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
pub const GL_FRAMEBUFFER_EXT = 0x8D40;
pub const GL_RENDERBUFFER_EXT = 0x8D41;
pub const GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
pub const GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
pub const GL_STENCIL_INDEX1_EXT = 0x8D46;
pub const GL_STENCIL_INDEX4_EXT = 0x8D47;
pub const GL_STENCIL_INDEX8_EXT = 0x8D48;
pub const GL_STENCIL_INDEX16_EXT = 0x8D49;
pub const GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
pub const GL_EXT_framebuffer_sRGB = 1;
pub const GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
pub const GL_EXT_geometry_shader4 = 1;
pub const GL_GEOMETRY_SHADER_EXT = 0x8DD9;
pub const GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
pub const GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
pub const GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
pub const GL_LINES_ADJACENCY_EXT = 0x000A;
pub const GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
pub const GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
pub const GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
pub const GL_EXT_gpu_program_parameters = 1;
pub const GL_EXT_gpu_shader4 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
pub const GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
pub const GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
pub const GL_SAMPLER_BUFFER_EXT = 0x8DC2;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
pub const GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
pub const GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
pub const GL_INT_SAMPLER_1D_EXT = 0x8DC9;
pub const GL_INT_SAMPLER_2D_EXT = 0x8DCA;
pub const GL_INT_SAMPLER_3D_EXT = 0x8DCB;
pub const GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
pub const GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
pub const GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
pub const GL_EXT_histogram = 1;
pub const GL_HISTOGRAM_EXT = 0x8024;
pub const GL_PROXY_HISTOGRAM_EXT = 0x8025;
pub const GL_HISTOGRAM_WIDTH_EXT = 0x8026;
pub const GL_HISTOGRAM_FORMAT_EXT = 0x8027;
pub const GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
pub const GL_HISTOGRAM_SINK_EXT = 0x802D;
pub const GL_MINMAX_EXT = 0x802E;
pub const GL_MINMAX_FORMAT_EXT = 0x802F;
pub const GL_MINMAX_SINK_EXT = 0x8030;
pub const GL_TABLE_TOO_LARGE_EXT = 0x8031;
pub const GL_EXT_index_array_formats = 1;
pub const GL_IUI_V2F_EXT = 0x81AD;
pub const GL_IUI_V3F_EXT = 0x81AE;
pub const GL_IUI_N3F_V2F_EXT = 0x81AF;
pub const GL_IUI_N3F_V3F_EXT = 0x81B0;
pub const GL_T2F_IUI_V2F_EXT = 0x81B1;
pub const GL_T2F_IUI_V3F_EXT = 0x81B2;
pub const GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
pub const GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
pub const GL_EXT_index_func = 1;
pub const GL_INDEX_TEST_EXT = 0x81B5;
pub const GL_INDEX_TEST_FUNC_EXT = 0x81B6;
pub const GL_INDEX_TEST_REF_EXT = 0x81B7;
pub const GL_EXT_index_material = 1;
pub const GL_INDEX_MATERIAL_EXT = 0x81B8;
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
pub const GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
pub const GL_EXT_index_texture = 1;
pub const GL_EXT_light_texture = 1;
pub const GL_FRAGMENT_MATERIAL_EXT = 0x8349;
pub const GL_FRAGMENT_NORMAL_EXT = 0x834A;
pub const GL_FRAGMENT_COLOR_EXT = 0x834C;
pub const GL_ATTENUATION_EXT = 0x834D;
pub const GL_SHADOW_ATTENUATION_EXT = 0x834E;
pub const GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
pub const GL_TEXTURE_LIGHT_EXT = 0x8350;
pub const GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
pub const GL_EXT_memory_object = 1;
pub const GL_TEXTURE_TILING_EXT = 0x9580;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
pub const GL_NUM_TILING_TYPES_EXT = 0x9582;
pub const GL_TILING_TYPES_EXT = 0x9583;
pub const GL_OPTIMAL_TILING_EXT = 0x9584;
pub const GL_LINEAR_TILING_EXT = 0x9585;
pub const GL_NUM_DEVICE_UUIDS_EXT = 0x9596;
pub const GL_DEVICE_UUID_EXT = 0x9597;
pub const GL_DRIVER_UUID_EXT = 0x9598;
pub const GL_UUID_SIZE_EXT = 16;
pub const GL_EXT_memory_object_fd = 1;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
pub const GL_EXT_memory_object_win32 = 1;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
pub const GL_DEVICE_LUID_EXT = 0x9599;
pub const GL_DEVICE_NODE_MASK_EXT = 0x959A;
pub const GL_LUID_SIZE_EXT = 8;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
pub const GL_EXT_misc_attribute = 1;
pub const GL_EXT_multi_draw_arrays = 1;
pub const GL_EXT_multisample = 1;
pub const GL_MULTISAMPLE_EXT = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
pub const GL_SAMPLE_MASK_EXT = 0x80A0;
pub const GL_1PASS_EXT = 0x80A1;
pub const GL_2PASS_0_EXT = 0x80A2;
pub const GL_2PASS_1_EXT = 0x80A3;
pub const GL_4PASS_0_EXT = 0x80A4;
pub const GL_4PASS_1_EXT = 0x80A5;
pub const GL_4PASS_2_EXT = 0x80A6;
pub const GL_4PASS_3_EXT = 0x80A7;
pub const GL_SAMPLE_BUFFERS_EXT = 0x80A8;
pub const GL_SAMPLES_EXT = 0x80A9;
pub const GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
pub const GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
pub const GL_SAMPLE_PATTERN_EXT = 0x80AC;
pub const GL_MULTISAMPLE_BIT_EXT = 0x20000000;
pub const GL_EXT_multiview_tessellation_geometry_shader = 1;
pub const GL_EXT_multiview_texture_multisample = 1;
pub const GL_EXT_multiview_timer_query = 1;
pub const GL_EXT_packed_depth_stencil = 1;
pub const GL_DEPTH_STENCIL_EXT = 0x84F9;
pub const GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
pub const GL_DEPTH24_STENCIL8_EXT = 0x88F0;
pub const GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
pub const GL_EXT_packed_float = 1;
pub const GL_R11F_G11F_B10F_EXT = 0x8C3A;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
pub const GL_EXT_packed_pixels = 1;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
pub const GL_EXT_paletted_texture = 1;
pub const GL_COLOR_INDEX1_EXT = 0x80E2;
pub const GL_COLOR_INDEX2_EXT = 0x80E3;
pub const GL_COLOR_INDEX4_EXT = 0x80E4;
pub const GL_COLOR_INDEX8_EXT = 0x80E5;
pub const GL_COLOR_INDEX12_EXT = 0x80E6;
pub const GL_COLOR_INDEX16_EXT = 0x80E7;
pub const GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
pub const GL_EXT_pixel_buffer_object = 1;
pub const GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
pub const GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
pub const GL_EXT_pixel_transform = 1;
pub const GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
pub const GL_PIXEL_MAG_FILTER_EXT = 0x8331;
pub const GL_PIXEL_MIN_FILTER_EXT = 0x8332;
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
pub const GL_CUBIC_EXT = 0x8334;
pub const GL_AVERAGE_EXT = 0x8335;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
pub const GL_EXT_pixel_transform_color_table = 1;
pub const GL_EXT_point_parameters = 1;
pub const GL_POINT_SIZE_MIN_EXT = 0x8126;
pub const GL_POINT_SIZE_MAX_EXT = 0x8127;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
pub const GL_DISTANCE_ATTENUATION_EXT = 0x8129;
pub const GL_EXT_polygon_offset = 1;
pub const GL_POLYGON_OFFSET_EXT = 0x8037;
pub const GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
pub const GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
pub const GL_EXT_polygon_offset_clamp = 1;
pub const GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
pub const GL_EXT_post_depth_coverage = 1;
pub const GL_EXT_provoking_vertex = 1;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
pub const GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
pub const GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
pub const GL_PROVOKING_VERTEX_EXT = 0x8E4F;
pub const GL_EXT_raster_multisample = 1;
pub const GL_RASTER_MULTISAMPLE_EXT = 0x9327;
pub const GL_RASTER_SAMPLES_EXT = 0x9328;
pub const GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
pub const GL_EXT_rescale_normal = 1;
pub const GL_RESCALE_NORMAL_EXT = 0x803A;
pub const GL_EXT_secondary_color = 1;
pub const GL_COLOR_SUM_EXT = 0x8458;
pub const GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
pub const GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
pub const GL_EXT_semaphore = 1;
pub const GL_LAYOUT_GENERAL_EXT = 0x958D;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
pub const GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592;
pub const GL_LAYOUT_TRANSFER_DST_EXT = 0x9593;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531;
pub const GL_EXT_semaphore_fd = 1;
pub const GL_EXT_semaphore_win32 = 1;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
pub const GL_D3D12_FENCE_VALUE_EXT = 0x9595;
pub const GL_EXT_separate_shader_objects = 1;
pub const GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
pub const GL_EXT_separate_specular_color = 1;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
pub const GL_SINGLE_COLOR_EXT = 0x81F9;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
pub const GL_EXT_shader_framebuffer_fetch = 1;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = 1;
pub const GL_EXT_shader_image_load_formatted = 1;
pub const GL_EXT_shader_image_load_store = 1;
pub const GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
pub const GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
pub const GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
pub const GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
pub const GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
pub const GL_IMAGE_1D_EXT = 0x904C;
pub const GL_IMAGE_2D_EXT = 0x904D;
pub const GL_IMAGE_3D_EXT = 0x904E;
pub const GL_IMAGE_2D_RECT_EXT = 0x904F;
pub const GL_IMAGE_CUBE_EXT = 0x9050;
pub const GL_IMAGE_BUFFER_EXT = 0x9051;
pub const GL_IMAGE_1D_ARRAY_EXT = 0x9052;
pub const GL_IMAGE_2D_ARRAY_EXT = 0x9053;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
pub const GL_INT_IMAGE_1D_EXT = 0x9057;
pub const GL_INT_IMAGE_2D_EXT = 0x9058;
pub const GL_INT_IMAGE_3D_EXT = 0x9059;
pub const GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
pub const GL_INT_IMAGE_CUBE_EXT = 0x905B;
pub const GL_INT_IMAGE_BUFFER_EXT = 0x905C;
pub const GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
pub const GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
pub const GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
pub const GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
pub const GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
pub const GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
pub const GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
pub const GL_EXT_shader_integer_mix = 1;
pub const GL_EXT_shadow_funcs = 1;
pub const GL_EXT_shared_texture_palette = 1;
pub const GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
pub const GL_EXT_sparse_texture2 = 1;
pub const GL_EXT_stencil_clear_tag = 1;
pub const GL_STENCIL_TAG_BITS_EXT = 0x88F2;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
pub const GL_EXT_stencil_two_side = 1;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
pub const GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
pub const GL_EXT_stencil_wrap = 1;
pub const GL_INCR_WRAP_EXT = 0x8507;
pub const GL_DECR_WRAP_EXT = 0x8508;
pub const GL_EXT_subtexture = 1;
pub const GL_EXT_texture = 1;
pub const GL_ALPHA4_EXT = 0x803B;
pub const GL_ALPHA8_EXT = 0x803C;
pub const GL_ALPHA12_EXT = 0x803D;
pub const GL_ALPHA16_EXT = 0x803E;
pub const GL_LUMINANCE4_EXT = 0x803F;
pub const GL_LUMINANCE8_EXT = 0x8040;
pub const GL_LUMINANCE12_EXT = 0x8041;
pub const GL_LUMINANCE16_EXT = 0x8042;
pub const GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
pub const GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
pub const GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
pub const GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
pub const GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
pub const GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
pub const GL_INTENSITY_EXT = 0x8049;
pub const GL_INTENSITY4_EXT = 0x804A;
pub const GL_INTENSITY8_EXT = 0x804B;
pub const GL_INTENSITY12_EXT = 0x804C;
pub const GL_INTENSITY16_EXT = 0x804D;
pub const GL_RGB2_EXT = 0x804E;
pub const GL_RGB4_EXT = 0x804F;
pub const GL_RGB5_EXT = 0x8050;
pub const GL_RGB8_EXT = 0x8051;
pub const GL_RGB10_EXT = 0x8052;
pub const GL_RGB12_EXT = 0x8053;
pub const GL_RGB16_EXT = 0x8054;
pub const GL_RGBA2_EXT = 0x8055;
pub const GL_RGBA4_EXT = 0x8056;
pub const GL_RGB5_A1_EXT = 0x8057;
pub const GL_RGBA8_EXT = 0x8058;
pub const GL_RGB10_A2_EXT = 0x8059;
pub const GL_RGBA12_EXT = 0x805A;
pub const GL_RGBA16_EXT = 0x805B;
pub const GL_TEXTURE_RED_SIZE_EXT = 0x805C;
pub const GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
pub const GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
pub const GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
pub const GL_REPLACE_EXT = 0x8062;
pub const GL_PROXY_TEXTURE_1D_EXT = 0x8063;
pub const GL_PROXY_TEXTURE_2D_EXT = 0x8064;
pub const GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
pub const GL_EXT_texture3D = 1;
pub const GL_PACK_SKIP_IMAGES_EXT = 0x806B;
pub const GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
pub const GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
pub const GL_TEXTURE_3D_EXT = 0x806F;
pub const GL_PROXY_TEXTURE_3D_EXT = 0x8070;
pub const GL_TEXTURE_DEPTH_EXT = 0x8071;
pub const GL_TEXTURE_WRAP_R_EXT = 0x8072;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
pub const GL_EXT_texture_array = 1;
pub const GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
pub const GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
pub const GL_EXT_texture_buffer_object = 1;
pub const GL_TEXTURE_BUFFER_EXT = 0x8C2A;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
pub const GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
pub const GL_EXT_texture_compression_latc = 1;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
pub const GL_EXT_texture_compression_rgtc = 1;
pub const GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
pub const GL_EXT_texture_compression_s3tc = 1;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
pub const GL_EXT_texture_cube_map = 1;
pub const GL_NORMAL_MAP_EXT = 0x8511;
pub const GL_REFLECTION_MAP_EXT = 0x8512;
pub const GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
pub const GL_EXT_texture_env_add = 1;
pub const GL_EXT_texture_env_combine = 1;
pub const GL_COMBINE_EXT = 0x8570;
pub const GL_COMBINE_RGB_EXT = 0x8571;
pub const GL_COMBINE_ALPHA_EXT = 0x8572;
pub const GL_RGB_SCALE_EXT = 0x8573;
pub const GL_ADD_SIGNED_EXT = 0x8574;
pub const GL_INTERPOLATE_EXT = 0x8575;
pub const GL_CONSTANT_EXT = 0x8576;
pub const GL_PRIMARY_COLOR_EXT = 0x8577;
pub const GL_PREVIOUS_EXT = 0x8578;
pub const GL_SOURCE0_RGB_EXT = 0x8580;
pub const GL_SOURCE1_RGB_EXT = 0x8581;
pub const GL_SOURCE2_RGB_EXT = 0x8582;
pub const GL_SOURCE0_ALPHA_EXT = 0x8588;
pub const GL_SOURCE1_ALPHA_EXT = 0x8589;
pub const GL_SOURCE2_ALPHA_EXT = 0x858A;
pub const GL_OPERAND0_RGB_EXT = 0x8590;
pub const GL_OPERAND1_RGB_EXT = 0x8591;
pub const GL_OPERAND2_RGB_EXT = 0x8592;
pub const GL_OPERAND0_ALPHA_EXT = 0x8598;
pub const GL_OPERAND1_ALPHA_EXT = 0x8599;
pub const GL_OPERAND2_ALPHA_EXT = 0x859A;
pub const GL_EXT_texture_env_dot3 = 1;
pub const GL_DOT3_RGB_EXT = 0x8740;
pub const GL_DOT3_RGBA_EXT = 0x8741;
pub const GL_EXT_texture_filter_anisotropic = 1;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
pub const GL_EXT_texture_filter_minmax = 1;
pub const GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
pub const GL_WEIGHTED_AVERAGE_EXT = 0x9367;
pub const GL_EXT_texture_integer = 1;
pub const GL_RGBA32UI_EXT = 0x8D70;
pub const GL_RGB32UI_EXT = 0x8D71;
pub const GL_ALPHA32UI_EXT = 0x8D72;
pub const GL_INTENSITY32UI_EXT = 0x8D73;
pub const GL_LUMINANCE32UI_EXT = 0x8D74;
pub const GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
pub const GL_RGBA16UI_EXT = 0x8D76;
pub const GL_RGB16UI_EXT = 0x8D77;
pub const GL_ALPHA16UI_EXT = 0x8D78;
pub const GL_INTENSITY16UI_EXT = 0x8D79;
pub const GL_LUMINANCE16UI_EXT = 0x8D7A;
pub const GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
pub const GL_RGBA8UI_EXT = 0x8D7C;
pub const GL_RGB8UI_EXT = 0x8D7D;
pub const GL_ALPHA8UI_EXT = 0x8D7E;
pub const GL_INTENSITY8UI_EXT = 0x8D7F;
pub const GL_LUMINANCE8UI_EXT = 0x8D80;
pub const GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
pub const GL_RGBA32I_EXT = 0x8D82;
pub const GL_RGB32I_EXT = 0x8D83;
pub const GL_ALPHA32I_EXT = 0x8D84;
pub const GL_INTENSITY32I_EXT = 0x8D85;
pub const GL_LUMINANCE32I_EXT = 0x8D86;
pub const GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
pub const GL_RGBA16I_EXT = 0x8D88;
pub const GL_RGB16I_EXT = 0x8D89;
pub const GL_ALPHA16I_EXT = 0x8D8A;
pub const GL_INTENSITY16I_EXT = 0x8D8B;
pub const GL_LUMINANCE16I_EXT = 0x8D8C;
pub const GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
pub const GL_RGBA8I_EXT = 0x8D8E;
pub const GL_RGB8I_EXT = 0x8D8F;
pub const GL_ALPHA8I_EXT = 0x8D90;
pub const GL_INTENSITY8I_EXT = 0x8D91;
pub const GL_LUMINANCE8I_EXT = 0x8D92;
pub const GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
pub const GL_RED_INTEGER_EXT = 0x8D94;
pub const GL_GREEN_INTEGER_EXT = 0x8D95;
pub const GL_BLUE_INTEGER_EXT = 0x8D96;
pub const GL_ALPHA_INTEGER_EXT = 0x8D97;
pub const GL_RGB_INTEGER_EXT = 0x8D98;
pub const GL_RGBA_INTEGER_EXT = 0x8D99;
pub const GL_BGR_INTEGER_EXT = 0x8D9A;
pub const GL_BGRA_INTEGER_EXT = 0x8D9B;
pub const GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
pub const GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
pub const GL_EXT_texture_lod_bias = 1;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
pub const GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
pub const GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
pub const GL_EXT_texture_mirror_clamp = 1;
pub const GL_MIRROR_CLAMP_EXT = 0x8742;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
pub const GL_EXT_texture_object = 1;
pub const GL_TEXTURE_PRIORITY_EXT = 0x8066;
pub const GL_TEXTURE_RESIDENT_EXT = 0x8067;
pub const GL_TEXTURE_1D_BINDING_EXT = 0x8068;
pub const GL_TEXTURE_2D_BINDING_EXT = 0x8069;
pub const GL_TEXTURE_3D_BINDING_EXT = 0x806A;
pub const GL_EXT_texture_perturb_normal = 1;
pub const GL_PERTURB_EXT = 0x85AE;
pub const GL_TEXTURE_NORMAL_EXT = 0x85AF;
pub const GL_EXT_texture_sRGB = 1;
pub const GL_SRGB_EXT = 0x8C40;
pub const GL_SRGB8_EXT = 0x8C41;
pub const GL_SRGB_ALPHA_EXT = 0x8C42;
pub const GL_SRGB8_ALPHA8_EXT = 0x8C43;
pub const GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
pub const GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
pub const GL_SLUMINANCE_EXT = 0x8C46;
pub const GL_SLUMINANCE8_EXT = 0x8C47;
pub const GL_COMPRESSED_SRGB_EXT = 0x8C48;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
pub const GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
pub const GL_EXT_texture_sRGB_R8 = 1;
pub const GL_SR8_EXT = 0x8FBD;
pub const GL_EXT_texture_sRGB_decode = 1;
pub const GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
pub const GL_DECODE_EXT = 0x8A49;
pub const GL_SKIP_DECODE_EXT = 0x8A4A;
pub const GL_EXT_texture_shadow_lod = 1;
pub const GL_EXT_texture_shared_exponent = 1;
pub const GL_RGB9_E5_EXT = 0x8C3D;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
pub const GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
pub const GL_EXT_texture_snorm = 1;
pub const GL_ALPHA_SNORM = 0x9010;
pub const GL_LUMINANCE_SNORM = 0x9011;
pub const GL_LUMINANCE_ALPHA_SNORM = 0x9012;
pub const GL_INTENSITY_SNORM = 0x9013;
pub const GL_ALPHA8_SNORM = 0x9014;
pub const GL_LUMINANCE8_SNORM = 0x9015;
pub const GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
pub const GL_INTENSITY8_SNORM = 0x9017;
pub const GL_ALPHA16_SNORM = 0x9018;
pub const GL_LUMINANCE16_SNORM = 0x9019;
pub const GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
pub const GL_INTENSITY16_SNORM = 0x901B;
pub const GL_RED_SNORM = 0x8F90;
pub const GL_RG_SNORM = 0x8F91;
pub const GL_RGB_SNORM = 0x8F92;
pub const GL_RGBA_SNORM = 0x8F93;
pub const GL_EXT_texture_swizzle = 1;
pub const GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
pub const GL_EXT_timer_query = 1;
pub const GL_TIME_ELAPSED_EXT = 0x88BF;
pub const GL_EXT_transform_feedback = 1;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
pub const GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
pub const GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
pub const GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
pub const GL_RASTERIZER_DISCARD_EXT = 0x8C89;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
pub const GL_EXT_vertex_array = 1;
pub const GL_VERTEX_ARRAY_EXT = 0x8074;
pub const GL_NORMAL_ARRAY_EXT = 0x8075;
pub const GL_COLOR_ARRAY_EXT = 0x8076;
pub const GL_INDEX_ARRAY_EXT = 0x8077;
pub const GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
pub const GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
pub const GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
pub const GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
pub const GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
pub const GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
pub const GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
pub const GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
pub const GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
pub const GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
pub const GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
pub const GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
pub const GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
pub const GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
pub const GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
pub const GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
pub const GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
pub const GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
pub const GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
pub const GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
pub const GL_EXT_vertex_array_bgra = 1;
pub const GL_EXT_vertex_attrib_64bit = 1;
pub const GL_DOUBLE_VEC2_EXT = 0x8FFC;
pub const GL_DOUBLE_VEC3_EXT = 0x8FFD;
pub const GL_DOUBLE_VEC4_EXT = 0x8FFE;
pub const GL_DOUBLE_MAT2_EXT = 0x8F46;
pub const GL_DOUBLE_MAT3_EXT = 0x8F47;
pub const GL_DOUBLE_MAT4_EXT = 0x8F48;
pub const GL_DOUBLE_MAT2x3_EXT = 0x8F49;
pub const GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
pub const GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
pub const GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
pub const GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
pub const GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
pub const GL_EXT_vertex_shader = 1;
pub const GL_VERTEX_SHADER_EXT = 0x8780;
pub const GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
pub const GL_OP_INDEX_EXT = 0x8782;
pub const GL_OP_NEGATE_EXT = 0x8783;
pub const GL_OP_DOT3_EXT = 0x8784;
pub const GL_OP_DOT4_EXT = 0x8785;
pub const GL_OP_MUL_EXT = 0x8786;
pub const GL_OP_ADD_EXT = 0x8787;
pub const GL_OP_MADD_EXT = 0x8788;
pub const GL_OP_FRAC_EXT = 0x8789;
pub const GL_OP_MAX_EXT = 0x878A;
pub const GL_OP_MIN_EXT = 0x878B;
pub const GL_OP_SET_GE_EXT = 0x878C;
pub const GL_OP_SET_LT_EXT = 0x878D;
pub const GL_OP_CLAMP_EXT = 0x878E;
pub const GL_OP_FLOOR_EXT = 0x878F;
pub const GL_OP_ROUND_EXT = 0x8790;
pub const GL_OP_EXP_BASE_2_EXT = 0x8791;
pub const GL_OP_LOG_BASE_2_EXT = 0x8792;
pub const GL_OP_POWER_EXT = 0x8793;
pub const GL_OP_RECIP_EXT = 0x8794;
pub const GL_OP_RECIP_SQRT_EXT = 0x8795;
pub const GL_OP_SUB_EXT = 0x8796;
pub const GL_OP_CROSS_PRODUCT_EXT = 0x8797;
pub const GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
pub const GL_OP_MOV_EXT = 0x8799;
pub const GL_OUTPUT_VERTEX_EXT = 0x879A;
pub const GL_OUTPUT_COLOR0_EXT = 0x879B;
pub const GL_OUTPUT_COLOR1_EXT = 0x879C;
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
pub const GL_OUTPUT_FOG_EXT = 0x87BD;
pub const GL_SCALAR_EXT = 0x87BE;
pub const GL_VECTOR_EXT = 0x87BF;
pub const GL_MATRIX_EXT = 0x87C0;
pub const GL_VARIANT_EXT = 0x87C1;
pub const GL_INVARIANT_EXT = 0x87C2;
pub const GL_LOCAL_CONSTANT_EXT = 0x87C3;
pub const GL_LOCAL_EXT = 0x87C4;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
pub const GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
pub const GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
pub const GL_X_EXT = 0x87D5;
pub const GL_Y_EXT = 0x87D6;
pub const GL_Z_EXT = 0x87D7;
pub const GL_W_EXT = 0x87D8;
pub const GL_NEGATIVE_X_EXT = 0x87D9;
pub const GL_NEGATIVE_Y_EXT = 0x87DA;
pub const GL_NEGATIVE_Z_EXT = 0x87DB;
pub const GL_NEGATIVE_W_EXT = 0x87DC;
pub const GL_ZERO_EXT = 0x87DD;
pub const GL_ONE_EXT = 0x87DE;
pub const GL_NEGATIVE_ONE_EXT = 0x87DF;
pub const GL_NORMALIZED_RANGE_EXT = 0x87E0;
pub const GL_FULL_RANGE_EXT = 0x87E1;
pub const GL_CURRENT_VERTEX_EXT = 0x87E2;
pub const GL_MVP_MATRIX_EXT = 0x87E3;
pub const GL_VARIANT_VALUE_EXT = 0x87E4;
pub const GL_VARIANT_DATATYPE_EXT = 0x87E5;
pub const GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
pub const GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
pub const GL_VARIANT_ARRAY_EXT = 0x87E8;
pub const GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
pub const GL_INVARIANT_VALUE_EXT = 0x87EA;
pub const GL_INVARIANT_DATATYPE_EXT = 0x87EB;
pub const GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
pub const GL_EXT_vertex_weighting = 1;
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
pub const GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
pub const GL_MODELVIEW1_MATRIX_EXT = 0x8506;
pub const GL_VERTEX_WEIGHTING_EXT = 0x8509;
pub const GL_MODELVIEW0_EXT = 0x1700;
pub const GL_MODELVIEW1_EXT = 0x850A;
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
pub const GL_EXT_win32_keyed_mutex = 1;
pub const GL_EXT_window_rectangles = 1;
pub const GL_INCLUSIVE_EXT = 0x8F10;
pub const GL_EXCLUSIVE_EXT = 0x8F11;
pub const GL_WINDOW_RECTANGLE_EXT = 0x8F12;
pub const GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
pub const GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
pub const GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
pub const GL_EXT_x11_sync_object = 1;
pub const GL_SYNC_X11_FENCE_EXT = 0x90E1;
pub const GL_GREMEDY_frame_terminator = 1;
pub const GL_GREMEDY_string_marker = 1;
pub const GL_HP_convolution_border_modes = 1;
pub const GL_IGNORE_BORDER_HP = 0x8150;
pub const GL_CONSTANT_BORDER_HP = 0x8151;
pub const GL_REPLICATE_BORDER_HP = 0x8153;
pub const GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
pub const GL_HP_image_transform = 1;
pub const GL_IMAGE_SCALE_X_HP = 0x8155;
pub const GL_IMAGE_SCALE_Y_HP = 0x8156;
pub const GL_IMAGE_TRANSLATE_X_HP = 0x8157;
pub const GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
pub const GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
pub const GL_IMAGE_MAG_FILTER_HP = 0x815C;
pub const GL_IMAGE_MIN_FILTER_HP = 0x815D;
pub const GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
pub const GL_CUBIC_HP = 0x815F;
pub const GL_AVERAGE_HP = 0x8160;
pub const GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
pub const GL_HP_occlusion_test = 1;
pub const GL_OCCLUSION_TEST_HP = 0x8165;
pub const GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
pub const GL_HP_texture_lighting = 1;
pub const GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
pub const GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
pub const GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
pub const GL_IBM_cull_vertex = 1;
pub const GL_CULL_VERTEX_IBM = 103050;
pub const GL_IBM_multimode_draw_arrays = 1;
pub const GL_IBM_rasterpos_clip = 1;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
pub const GL_IBM_static_data = 1;
pub const GL_ALL_STATIC_DATA_IBM = 103060;
pub const GL_STATIC_VERTEX_ARRAY_IBM = 103061;
pub const GL_IBM_texture_mirrored_repeat = 1;
pub const GL_MIRRORED_REPEAT_IBM = 0x8370;
pub const GL_IBM_vertex_array_lists = 1;
pub const GL_VERTEX_ARRAY_LIST_IBM = 103070;
pub const GL_NORMAL_ARRAY_LIST_IBM = 103071;
pub const GL_COLOR_ARRAY_LIST_IBM = 103072;
pub const GL_INDEX_ARRAY_LIST_IBM = 103073;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
pub const GL_INGR_blend_func_separate = 1;
pub const GL_INGR_color_clamp = 1;
pub const GL_RED_MIN_CLAMP_INGR = 0x8560;
pub const GL_GREEN_MIN_CLAMP_INGR = 0x8561;
pub const GL_BLUE_MIN_CLAMP_INGR = 0x8562;
pub const GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
pub const GL_RED_MAX_CLAMP_INGR = 0x8564;
pub const GL_GREEN_MAX_CLAMP_INGR = 0x8565;
pub const GL_BLUE_MAX_CLAMP_INGR = 0x8566;
pub const GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
pub const GL_INGR_interlace_read = 1;
pub const GL_INTERLACE_READ_INGR = 0x8568;
pub const GL_INTEL_blackhole_render = 1;
pub const GL_BLACKHOLE_RENDER_INTEL = 0x83FC;
pub const GL_INTEL_conservative_rasterization = 1;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
pub const GL_INTEL_fragment_shader_ordering = 1;
pub const GL_INTEL_framebuffer_CMAA = 1;
pub const GL_INTEL_map_texture = 1;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
pub const GL_LAYOUT_DEFAULT_INTEL = 0;
pub const GL_LAYOUT_LINEAR_INTEL = 1;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
pub const GL_INTEL_parallel_arrays = 1;
pub const GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
pub const GL_INTEL_performance_query = 1;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
pub const GL_PERFQUERY_WAIT_INTEL = 0x83FB;
pub const GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
pub const GL_MESAX_texture_stack = 1;
pub const GL_TEXTURE_1D_STACK_MESAX = 0x8759;
pub const GL_TEXTURE_2D_STACK_MESAX = 0x875A;
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
pub const GL_MESA_framebuffer_flip_y = 1;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
pub const GL_MESA_pack_invert = 1;
pub const GL_PACK_INVERT_MESA = 0x8758;
pub const GL_MESA_program_binary_formats = 1;
pub const GL_PROGRAM_BINARY_FORMAT_MESA = 0x875F;
pub const GL_MESA_resize_buffers = 1;
pub const GL_MESA_shader_integer_functions = 1;
pub const GL_MESA_tile_raster_order = 1;
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8;
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9;
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA;
pub const GL_MESA_window_pos = 1;
pub const GL_MESA_ycbcr_texture = 1;
pub const GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
pub const GL_YCBCR_MESA = 0x8757;
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = 1;
pub const GL_NVX_conditional_render = 1;
pub const GL_NVX_gpu_memory_info = 1;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
pub const GL_NVX_gpu_multicast2 = 1;
pub const GL_UPLOAD_GPU_MASK_NVX = 0x954A;
pub const GL_NVX_linked_gpu_multicast = 1;
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
pub const GL_MAX_LGPU_GPUS_NVX = 0x92BA;
pub const GL_NVX_progress_fence = 1;
pub const GL_NV_alpha_to_coverage_dither_control = 1;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
pub const GL_NV_bindless_multi_draw_indirect = 1;
pub const GL_NV_bindless_multi_draw_indirect_count = 1;
pub const GL_NV_bindless_texture = 1;
pub const GL_NV_blend_equation_advanced = 1;
pub const GL_BLEND_OVERLAP_NV = 0x9281;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
pub const GL_BLUE_NV = 0x1905;
pub const GL_COLORBURN_NV = 0x929A;
pub const GL_COLORDODGE_NV = 0x9299;
pub const GL_CONJOINT_NV = 0x9284;
pub const GL_CONTRAST_NV = 0x92A1;
pub const GL_DARKEN_NV = 0x9297;
pub const GL_DIFFERENCE_NV = 0x929E;
pub const GL_DISJOINT_NV = 0x9283;
pub const GL_DST_ATOP_NV = 0x928F;
pub const GL_DST_IN_NV = 0x928B;
pub const GL_DST_NV = 0x9287;
pub const GL_DST_OUT_NV = 0x928D;
pub const GL_DST_OVER_NV = 0x9289;
pub const GL_EXCLUSION_NV = 0x92A0;
pub const GL_GREEN_NV = 0x1904;
pub const GL_HARDLIGHT_NV = 0x929B;
pub const GL_HARDMIX_NV = 0x92A9;
pub const GL_HSL_COLOR_NV = 0x92AF;
pub const GL_HSL_HUE_NV = 0x92AD;
pub const GL_HSL_LUMINOSITY_NV = 0x92B0;
pub const GL_HSL_SATURATION_NV = 0x92AE;
pub const GL_INVERT_OVG_NV = 0x92B4;
pub const GL_INVERT_RGB_NV = 0x92A3;
pub const GL_LIGHTEN_NV = 0x9298;
pub const GL_LINEARBURN_NV = 0x92A5;
pub const GL_LINEARDODGE_NV = 0x92A4;
pub const GL_LINEARLIGHT_NV = 0x92A7;
pub const GL_MINUS_CLAMPED_NV = 0x92B3;
pub const GL_MINUS_NV = 0x929F;
pub const GL_MULTIPLY_NV = 0x9294;
pub const GL_OVERLAY_NV = 0x9296;
pub const GL_PINLIGHT_NV = 0x92A8;
pub const GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
pub const GL_PLUS_CLAMPED_NV = 0x92B1;
pub const GL_PLUS_DARKER_NV = 0x9292;
pub const GL_PLUS_NV = 0x9291;
pub const GL_RED_NV = 0x1903;
pub const GL_SCREEN_NV = 0x9295;
pub const GL_SOFTLIGHT_NV = 0x929C;
pub const GL_SRC_ATOP_NV = 0x928E;
pub const GL_SRC_IN_NV = 0x928A;
pub const GL_SRC_NV = 0x9286;
pub const GL_SRC_OUT_NV = 0x928C;
pub const GL_SRC_OVER_NV = 0x9288;
pub const GL_UNCORRELATED_NV = 0x9282;
pub const GL_VIVIDLIGHT_NV = 0x92A6;
pub const GL_XOR_NV = 0x1506;
pub const GL_NV_blend_equation_advanced_coherent = 1;
pub const GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
pub const GL_NV_blend_minmax_factor = 1;
pub const GL_NV_blend_square = 1;
pub const GL_NV_clip_space_w_scaling = 1;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
pub const GL_NV_command_list = 1;
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
pub const GL_NOP_COMMAND_NV = 0x0001;
pub const GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
pub const GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
pub const GL_BLEND_COLOR_COMMAND_NV = 0x000B;
pub const GL_STENCIL_REF_COMMAND_NV = 0x000C;
pub const GL_LINE_WIDTH_COMMAND_NV = 0x000D;
pub const GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
pub const GL_ALPHA_REF_COMMAND_NV = 0x000F;
pub const GL_VIEWPORT_COMMAND_NV = 0x0010;
pub const GL_SCISSOR_COMMAND_NV = 0x0011;
pub const GL_FRONT_FACE_COMMAND_NV = 0x0012;
pub const GL_NV_compute_program5 = 1;
pub const GL_COMPUTE_PROGRAM_NV = 0x90FB;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
pub const GL_NV_compute_shader_derivatives = 1;
pub const GL_NV_conditional_render = 1;
pub const GL_QUERY_WAIT_NV = 0x8E13;
pub const GL_QUERY_NO_WAIT_NV = 0x8E14;
pub const GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
pub const GL_NV_conservative_raster = 1;
pub const GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
pub const GL_NV_conservative_raster_dilate = 1;
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
pub const GL_NV_conservative_raster_pre_snap = 1;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
pub const GL_NV_conservative_raster_pre_snap_triangles = 1;
pub const GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
pub const GL_NV_conservative_raster_underestimation = 1;
pub const GL_NV_copy_depth_to_color = 1;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
pub const GL_NV_copy_image = 1;
pub const GL_NV_deep_texture3D = 1;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
pub const GL_NV_depth_buffer_float = 1;
pub const GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
pub const GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
pub const GL_NV_depth_clamp = 1;
pub const GL_DEPTH_CLAMP_NV = 0x864F;
pub const GL_NV_draw_texture = 1;
pub const GL_NV_draw_vulkan_image = 1;
pub const GL_NV_evaluators = 1;
pub const GL_EVAL_2D_NV = 0x86C0;
pub const GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
pub const GL_MAP_TESSELLATION_NV = 0x86C2;
pub const GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
pub const GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
pub const GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
pub const GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
pub const GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
pub const GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
pub const GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
pub const GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
pub const GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
pub const GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
pub const GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
pub const GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
pub const GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
pub const GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
pub const GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
pub const GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
pub const GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
pub const GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
pub const GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
pub const GL_NV_explicit_multisample = 1;
pub const GL_SAMPLE_POSITION_NV = 0x8E50;
pub const GL_SAMPLE_MASK_NV = 0x8E51;
pub const GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
pub const GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
pub const GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
pub const GL_NV_fence = 1;
pub const GL_ALL_COMPLETED_NV = 0x84F2;
pub const GL_FENCE_STATUS_NV = 0x84F3;
pub const GL_FENCE_CONDITION_NV = 0x84F4;
pub const GL_NV_fill_rectangle = 1;
pub const GL_FILL_RECTANGLE_NV = 0x933C;
pub const GL_NV_float_buffer = 1;
pub const GL_FLOAT_R_NV = 0x8880;
pub const GL_FLOAT_RG_NV = 0x8881;
pub const GL_FLOAT_RGB_NV = 0x8882;
pub const GL_FLOAT_RGBA_NV = 0x8883;
pub const GL_FLOAT_R16_NV = 0x8884;
pub const GL_FLOAT_R32_NV = 0x8885;
pub const GL_FLOAT_RG16_NV = 0x8886;
pub const GL_FLOAT_RG32_NV = 0x8887;
pub const GL_FLOAT_RGB16_NV = 0x8888;
pub const GL_FLOAT_RGB32_NV = 0x8889;
pub const GL_FLOAT_RGBA16_NV = 0x888A;
pub const GL_FLOAT_RGBA32_NV = 0x888B;
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
pub const GL_FLOAT_RGBA_MODE_NV = 0x888E;
pub const GL_NV_fog_distance = 1;
pub const GL_FOG_DISTANCE_MODE_NV = 0x855A;
pub const GL_EYE_RADIAL_NV = 0x855B;
pub const GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
pub const GL_NV_fragment_coverage_to_color = 1;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
pub const GL_NV_fragment_program = 1;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
pub const GL_FRAGMENT_PROGRAM_NV = 0x8870;
pub const GL_MAX_TEXTURE_COORDS_NV = 0x8871;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
pub const GL_PROGRAM_ERROR_STRING_NV = 0x8874;
pub const GL_NV_fragment_program2 = 1;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
pub const GL_NV_fragment_program4 = 1;
pub const GL_NV_fragment_program_option = 1;
pub const GL_NV_fragment_shader_barycentric = 1;
pub const GL_NV_fragment_shader_interlock = 1;
pub const GL_NV_framebuffer_mixed_samples = 1;
pub const GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
pub const GL_COLOR_SAMPLES_NV = 0x8E20;
pub const GL_DEPTH_SAMPLES_NV = 0x932D;
pub const GL_STENCIL_SAMPLES_NV = 0x932E;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
pub const GL_COVERAGE_MODULATION_NV = 0x9332;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
pub const GL_NV_framebuffer_multisample_coverage = 1;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
pub const GL_NV_geometry_program4 = 1;
pub const GL_GEOMETRY_PROGRAM_NV = 0x8C26;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
pub const GL_NV_geometry_shader4 = 1;
pub const GL_NV_geometry_shader_passthrough = 1;
pub const GL_NV_gpu_multicast = 1;
pub const GL_PER_GPU_STORAGE_BIT_NV = 0x0800;
pub const GL_MULTICAST_GPUS_NV = 0x92BA;
pub const GL_RENDER_GPU_MASK_NV = 0x9558;
pub const GL_PER_GPU_STORAGE_NV = 0x9548;
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
pub const GL_NV_gpu_program4 = 1;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
pub const GL_NV_gpu_program5 = 1;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
pub const GL_NV_gpu_program5_mem_extended = 1;
pub const GL_NV_gpu_shader5 = 1;
pub const GL_NV_half_float = 1;
pub const GL_HALF_FLOAT_NV = 0x140B;
pub const GL_NV_internalformat_sample_query = 1;
pub const GL_MULTISAMPLES_NV = 0x9371;
pub const GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
pub const GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
pub const GL_CONFORMANT_NV = 0x9374;
pub const GL_NV_light_max_exponent = 1;
pub const GL_MAX_SHININESS_NV = 0x8504;
pub const GL_MAX_SPOT_EXPONENT_NV = 0x8505;
pub const GL_NV_memory_attachment = 1;
pub const GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
pub const GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
pub const GL_MEMORY_ATTACHABLE_NV = 0x95A8;
pub const GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
pub const GL_DETACHED_TEXTURES_NV = 0x95AA;
pub const GL_DETACHED_BUFFERS_NV = 0x95AB;
pub const GL_MAX_DETACHED_TEXTURES_NV = 0x95AC;
pub const GL_MAX_DETACHED_BUFFERS_NV = 0x95AD;
pub const GL_NV_mesh_shader = 1;
pub const GL_MESH_SHADER_NV = 0x9559;
pub const GL_TASK_SHADER_NV = 0x955A;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
pub const GL_MAX_MESH_VIEWS_NV = 0x9557;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
pub const GL_MESH_WORK_GROUP_SIZE_NV = 0x953E;
pub const GL_TASK_WORK_GROUP_SIZE_NV = 0x953F;
pub const GL_MESH_VERTICES_OUT_NV = 0x9579;
pub const GL_MESH_PRIMITIVES_OUT_NV = 0x957A;
pub const GL_MESH_OUTPUT_TYPE_NV = 0x957B;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
pub const GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
pub const GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
pub const GL_MESH_SHADER_BIT_NV = 0x00000040;
pub const GL_TASK_SHADER_BIT_NV = 0x00000080;
pub const GL_MESH_SUBROUTINE_NV = 0x957C;
pub const GL_TASK_SUBROUTINE_NV = 0x957D;
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
pub const GL_NV_multisample_coverage = 1;
pub const GL_NV_multisample_filter_hint = 1;
pub const GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
pub const GL_NV_occlusion_query = 1;
pub const GL_PIXEL_COUNTER_BITS_NV = 0x8864;
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
pub const GL_PIXEL_COUNT_NV = 0x8866;
pub const GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
pub const GL_NV_packed_depth_stencil = 1;
pub const GL_DEPTH_STENCIL_NV = 0x84F9;
pub const GL_UNSIGNED_INT_24_8_NV = 0x84FA;
pub const GL_NV_parameter_buffer_object = 1;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
pub const GL_NV_parameter_buffer_object2 = 1;
pub const GL_NV_path_rendering = 1;
pub const GL_PATH_FORMAT_SVG_NV = 0x9070;
pub const GL_PATH_FORMAT_PS_NV = 0x9071;
pub const GL_STANDARD_FONT_NAME_NV = 0x9072;
pub const GL_SYSTEM_FONT_NAME_NV = 0x9073;
pub const GL_FILE_NAME_NV = 0x9074;
pub const GL_PATH_STROKE_WIDTH_NV = 0x9075;
pub const GL_PATH_END_CAPS_NV = 0x9076;
pub const GL_PATH_INITIAL_END_CAP_NV = 0x9077;
pub const GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
pub const GL_PATH_JOIN_STYLE_NV = 0x9079;
pub const GL_PATH_MITER_LIMIT_NV = 0x907A;
pub const GL_PATH_DASH_CAPS_NV = 0x907B;
pub const GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
pub const GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
pub const GL_PATH_DASH_OFFSET_NV = 0x907E;
pub const GL_PATH_CLIENT_LENGTH_NV = 0x907F;
pub const GL_PATH_FILL_MODE_NV = 0x9080;
pub const GL_PATH_FILL_MASK_NV = 0x9081;
pub const GL_PATH_FILL_COVER_MODE_NV = 0x9082;
pub const GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
pub const GL_PATH_STROKE_MASK_NV = 0x9084;
pub const GL_COUNT_UP_NV = 0x9088;
pub const GL_COUNT_DOWN_NV = 0x9089;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
pub const GL_CONVEX_HULL_NV = 0x908B;
pub const GL_BOUNDING_BOX_NV = 0x908D;
pub const GL_TRANSLATE_X_NV = 0x908E;
pub const GL_TRANSLATE_Y_NV = 0x908F;
pub const GL_TRANSLATE_2D_NV = 0x9090;
pub const GL_TRANSLATE_3D_NV = 0x9091;
pub const GL_AFFINE_2D_NV = 0x9092;
pub const GL_AFFINE_3D_NV = 0x9094;
pub const GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
pub const GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
pub const GL_UTF8_NV = 0x909A;
pub const GL_UTF16_NV = 0x909B;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
pub const GL_PATH_COMMAND_COUNT_NV = 0x909D;
pub const GL_PATH_COORD_COUNT_NV = 0x909E;
pub const GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
pub const GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
pub const GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
pub const GL_SQUARE_NV = 0x90A3;
pub const GL_ROUND_NV = 0x90A4;
pub const GL_TRIANGULAR_NV = 0x90A5;
pub const GL_BEVEL_NV = 0x90A6;
pub const GL_MITER_REVERT_NV = 0x90A7;
pub const GL_MITER_TRUNCATE_NV = 0x90A8;
pub const GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
pub const GL_USE_MISSING_GLYPH_NV = 0x90AA;
pub const GL_PATH_ERROR_POSITION_NV = 0x90AB;
pub const GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
pub const GL_ADJACENT_PAIRS_NV = 0x90AE;
pub const GL_FIRST_TO_REST_NV = 0x90AF;
pub const GL_PATH_GEN_MODE_NV = 0x90B0;
pub const GL_PATH_GEN_COEFF_NV = 0x90B1;
pub const GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
pub const GL_PATH_STENCIL_FUNC_NV = 0x90B7;
pub const GL_PATH_STENCIL_REF_NV = 0x90B8;
pub const GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
pub const GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
pub const GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
pub const GL_MOVE_TO_RESETS_NV = 0x90B5;
pub const GL_MOVE_TO_CONTINUES_NV = 0x90B6;
pub const GL_CLOSE_PATH_NV = 0x00;
pub const GL_MOVE_TO_NV = 0x02;
pub const GL_RELATIVE_MOVE_TO_NV = 0x03;
pub const GL_LINE_TO_NV = 0x04;
pub const GL_RELATIVE_LINE_TO_NV = 0x05;
pub const GL_HORIZONTAL_LINE_TO_NV = 0x06;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
pub const GL_VERTICAL_LINE_TO_NV = 0x08;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
pub const GL_QUADRATIC_CURVE_TO_NV = 0x0A;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
pub const GL_CUBIC_CURVE_TO_NV = 0x0C;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
pub const GL_SMALL_CCW_ARC_TO_NV = 0x12;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
pub const GL_SMALL_CW_ARC_TO_NV = 0x14;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
pub const GL_LARGE_CCW_ARC_TO_NV = 0x16;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
pub const GL_LARGE_CW_ARC_TO_NV = 0x18;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
pub const GL_RESTART_PATH_NV = 0xF0;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
pub const GL_RECT_NV = 0xF6;
pub const GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
pub const GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
pub const GL_ARC_TO_NV = 0xFE;
pub const GL_RELATIVE_ARC_TO_NV = 0xFF;
pub const GL_BOLD_BIT_NV = 0x01;
pub const GL_ITALIC_BIT_NV = 0x02;
pub const GL_GLYPH_WIDTH_BIT_NV = 0x01;
pub const GL_GLYPH_HEIGHT_BIT_NV = 0x02;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
pub const GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
pub const GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
pub const GL_FONT_ASCENDER_BIT_NV = 0x00200000;
pub const GL_FONT_DESCENDER_BIT_NV = 0x00400000;
pub const GL_FONT_HEIGHT_BIT_NV = 0x00800000;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
pub const GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
pub const GL_ROUNDED_RECT_NV = 0xE8;
pub const GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
pub const GL_ROUNDED_RECT2_NV = 0xEA;
pub const GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
pub const GL_ROUNDED_RECT4_NV = 0xEC;
pub const GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
pub const GL_ROUNDED_RECT8_NV = 0xEE;
pub const GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
pub const GL_RELATIVE_RECT_NV = 0xF7;
pub const GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
pub const GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
pub const GL_FONT_UNAVAILABLE_NV = 0x936A;
pub const GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
pub const GL_CONIC_CURVE_TO_NV = 0x1A;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
pub const GL_STANDARD_FONT_FORMAT_NV = 0x936C;
pub const GL_2_BYTES_NV = 0x1407;
pub const GL_3_BYTES_NV = 0x1408;
pub const GL_4_BYTES_NV = 0x1409;
pub const GL_EYE_LINEAR_NV = 0x2400;
pub const GL_OBJECT_LINEAR_NV = 0x2401;
pub const GL_CONSTANT_NV = 0x8576;
pub const GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
pub const GL_PRIMARY_COLOR_NV = 0x852C;
pub const GL_SECONDARY_COLOR_NV = 0x852D;
pub const GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
pub const GL_PATH_PROJECTION_NV = 0x1701;
pub const GL_PATH_MODELVIEW_NV = 0x1700;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
pub const GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
pub const GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
pub const GL_FRAGMENT_INPUT_NV = 0x936D;
pub const GL_NV_path_rendering_shared_edge = 1;
pub const GL_SHARED_EDGE_NV = 0xC0;
pub const GL_NV_pixel_data_range = 1;
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
pub const GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
pub const GL_NV_point_sprite = 1;
pub const GL_POINT_SPRITE_NV = 0x8861;
pub const GL_COORD_REPLACE_NV = 0x8862;
pub const GL_POINT_SPRITE_R_MODE_NV = 0x8863;
pub const GL_NV_present_video = 1;
pub const GL_FRAME_NV = 0x8E26;
pub const GL_FIELDS_NV = 0x8E27;
pub const GL_CURRENT_TIME_NV = 0x8E28;
pub const GL_NUM_FILL_STREAMS_NV = 0x8E29;
pub const GL_PRESENT_TIME_NV = 0x8E2A;
pub const GL_PRESENT_DURATION_NV = 0x8E2B;
pub const GL_NV_primitive_restart = 1;
pub const GL_PRIMITIVE_RESTART_NV = 0x8558;
pub const GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
pub const GL_NV_query_resource = 1;
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;
pub const GL_QUERY_RESOURCE_TEXTURE_NV = 0x9545;
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;
pub const GL_NV_query_resource_tag = 1;
pub const GL_NV_register_combiners = 1;
pub const GL_REGISTER_COMBINERS_NV = 0x8522;
pub const GL_VARIABLE_A_NV = 0x8523;
pub const GL_VARIABLE_B_NV = 0x8524;
pub const GL_VARIABLE_C_NV = 0x8525;
pub const GL_VARIABLE_D_NV = 0x8526;
pub const GL_VARIABLE_E_NV = 0x8527;
pub const GL_VARIABLE_F_NV = 0x8528;
pub const GL_VARIABLE_G_NV = 0x8529;
pub const GL_CONSTANT_COLOR0_NV = 0x852A;
pub const GL_CONSTANT_COLOR1_NV = 0x852B;
pub const GL_SPARE0_NV = 0x852E;
pub const GL_SPARE1_NV = 0x852F;
pub const GL_DISCARD_NV = 0x8530;
pub const GL_E_TIMES_F_NV = 0x8531;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
pub const GL_UNSIGNED_IDENTITY_NV = 0x8536;
pub const GL_UNSIGNED_INVERT_NV = 0x8537;
pub const GL_EXPAND_NORMAL_NV = 0x8538;
pub const GL_EXPAND_NEGATE_NV = 0x8539;
pub const GL_HALF_BIAS_NORMAL_NV = 0x853A;
pub const GL_HALF_BIAS_NEGATE_NV = 0x853B;
pub const GL_SIGNED_IDENTITY_NV = 0x853C;
pub const GL_SIGNED_NEGATE_NV = 0x853D;
pub const GL_SCALE_BY_TWO_NV = 0x853E;
pub const GL_SCALE_BY_FOUR_NV = 0x853F;
pub const GL_SCALE_BY_ONE_HALF_NV = 0x8540;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
pub const GL_COMBINER_INPUT_NV = 0x8542;
pub const GL_COMBINER_MAPPING_NV = 0x8543;
pub const GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
pub const GL_COMBINER_MUX_SUM_NV = 0x8547;
pub const GL_COMBINER_SCALE_NV = 0x8548;
pub const GL_COMBINER_BIAS_NV = 0x8549;
pub const GL_COMBINER_AB_OUTPUT_NV = 0x854A;
pub const GL_COMBINER_CD_OUTPUT_NV = 0x854B;
pub const GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
pub const GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
pub const GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
pub const GL_COLOR_SUM_CLAMP_NV = 0x854F;
pub const GL_COMBINER0_NV = 0x8550;
pub const GL_COMBINER1_NV = 0x8551;
pub const GL_COMBINER2_NV = 0x8552;
pub const GL_COMBINER3_NV = 0x8553;
pub const GL_COMBINER4_NV = 0x8554;
pub const GL_COMBINER5_NV = 0x8555;
pub const GL_COMBINER6_NV = 0x8556;
pub const GL_COMBINER7_NV = 0x8557;
pub const GL_NV_register_combiners2 = 1;
pub const GL_PER_STAGE_CONSTANTS_NV = 0x8535;
pub const GL_NV_representative_fragment_test = 1;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
pub const GL_NV_robustness_video_memory_purge = 1;
pub const GL_PURGED_CONTEXT_RESET_NV = 0x92BB;
pub const GL_NV_sample_locations = 1;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
pub const GL_SAMPLE_LOCATION_NV = 0x8E50;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
pub const GL_NV_sample_mask_override_coverage = 1;
pub const GL_NV_scissor_exclusive = 1;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
pub const GL_NV_shader_atomic_counters = 1;
pub const GL_NV_shader_atomic_float = 1;
pub const GL_NV_shader_atomic_float64 = 1;
pub const GL_NV_shader_atomic_fp16_vector = 1;
pub const GL_NV_shader_atomic_int64 = 1;
pub const GL_NV_shader_buffer_load = 1;
pub const GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
pub const GL_GPU_ADDRESS_NV = 0x8F34;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
pub const GL_NV_shader_buffer_store = 1;
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
pub const GL_NV_shader_storage_buffer_object = 1;
pub const GL_NV_shader_subgroup_partitioned = 1;
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
pub const GL_NV_shader_texture_footprint = 1;
pub const GL_NV_shader_thread_group = 1;
pub const GL_WARP_SIZE_NV = 0x9339;
pub const GL_WARPS_PER_SM_NV = 0x933A;
pub const GL_SM_COUNT_NV = 0x933B;
pub const GL_NV_shader_thread_shuffle = 1;
pub const GL_NV_shading_rate_image = 1;
pub const GL_SHADING_RATE_IMAGE_NV = 0x9563;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
pub const GL_NV_stereo_view_rendering = 1;
pub const GL_NV_tessellation_program5 = 1;
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
pub const GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
pub const GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
pub const GL_NV_texgen_emboss = 1;
pub const GL_EMBOSS_LIGHT_NV = 0x855D;
pub const GL_EMBOSS_CONSTANT_NV = 0x855E;
pub const GL_EMBOSS_MAP_NV = 0x855F;
pub const GL_NV_texgen_reflection = 1;
pub const GL_NORMAL_MAP_NV = 0x8511;
pub const GL_REFLECTION_MAP_NV = 0x8512;
pub const GL_NV_texture_barrier = 1;
pub const GL_NV_texture_compression_vtc = 1;
pub const GL_NV_texture_env_combine4 = 1;
pub const GL_COMBINE4_NV = 0x8503;
pub const GL_SOURCE3_RGB_NV = 0x8583;
pub const GL_SOURCE3_ALPHA_NV = 0x858B;
pub const GL_OPERAND3_RGB_NV = 0x8593;
pub const GL_OPERAND3_ALPHA_NV = 0x859B;
pub const GL_NV_texture_expand_normal = 1;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
pub const GL_NV_texture_multisample = 1;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
pub const GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
pub const GL_NV_texture_rectangle = 1;
pub const GL_TEXTURE_RECTANGLE_NV = 0x84F5;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
pub const GL_NV_texture_rectangle_compressed = 1;
pub const GL_NV_texture_shader = 1;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
pub const GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
pub const GL_SHADER_CONSISTENT_NV = 0x86DD;
pub const GL_TEXTURE_SHADER_NV = 0x86DE;
pub const GL_SHADER_OPERATION_NV = 0x86DF;
pub const GL_CULL_MODES_NV = 0x86E0;
pub const GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
pub const GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
pub const GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
pub const GL_CONST_EYE_NV = 0x86E5;
pub const GL_PASS_THROUGH_NV = 0x86E6;
pub const GL_CULL_FRAGMENT_NV = 0x86E7;
pub const GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
pub const GL_DOT_PRODUCT_NV = 0x86EC;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
pub const GL_HILO_NV = 0x86F4;
pub const GL_DSDT_NV = 0x86F5;
pub const GL_DSDT_MAG_NV = 0x86F6;
pub const GL_DSDT_MAG_VIB_NV = 0x86F7;
pub const GL_HILO16_NV = 0x86F8;
pub const GL_SIGNED_HILO_NV = 0x86F9;
pub const GL_SIGNED_HILO16_NV = 0x86FA;
pub const GL_SIGNED_RGBA_NV = 0x86FB;
pub const GL_SIGNED_RGBA8_NV = 0x86FC;
pub const GL_SIGNED_RGB_NV = 0x86FE;
pub const GL_SIGNED_RGB8_NV = 0x86FF;
pub const GL_SIGNED_LUMINANCE_NV = 0x8701;
pub const GL_SIGNED_LUMINANCE8_NV = 0x8702;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
pub const GL_SIGNED_ALPHA_NV = 0x8705;
pub const GL_SIGNED_ALPHA8_NV = 0x8706;
pub const GL_SIGNED_INTENSITY_NV = 0x8707;
pub const GL_SIGNED_INTENSITY8_NV = 0x8708;
pub const GL_DSDT8_NV = 0x8709;
pub const GL_DSDT8_MAG8_NV = 0x870A;
pub const GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
pub const GL_HI_SCALE_NV = 0x870E;
pub const GL_LO_SCALE_NV = 0x870F;
pub const GL_DS_SCALE_NV = 0x8710;
pub const GL_DT_SCALE_NV = 0x8711;
pub const GL_MAGNITUDE_SCALE_NV = 0x8712;
pub const GL_VIBRANCE_SCALE_NV = 0x8713;
pub const GL_HI_BIAS_NV = 0x8714;
pub const GL_LO_BIAS_NV = 0x8715;
pub const GL_DS_BIAS_NV = 0x8716;
pub const GL_DT_BIAS_NV = 0x8717;
pub const GL_MAGNITUDE_BIAS_NV = 0x8718;
pub const GL_VIBRANCE_BIAS_NV = 0x8719;
pub const GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
pub const GL_TEXTURE_HI_SIZE_NV = 0x871B;
pub const GL_TEXTURE_LO_SIZE_NV = 0x871C;
pub const GL_TEXTURE_DS_SIZE_NV = 0x871D;
pub const GL_TEXTURE_DT_SIZE_NV = 0x871E;
pub const GL_TEXTURE_MAG_SIZE_NV = 0x871F;
pub const GL_NV_texture_shader2 = 1;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
pub const GL_NV_texture_shader3 = 1;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
pub const GL_HILO8_NV = 0x885E;
pub const GL_SIGNED_HILO8_NV = 0x885F;
pub const GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
pub const GL_NV_transform_feedback = 1;
pub const GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
pub const GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
pub const GL_TEXTURE_COORD_NV = 0x8C79;
pub const GL_CLIP_DISTANCE_NV = 0x8C7A;
pub const GL_VERTEX_ID_NV = 0x8C7B;
pub const GL_PRIMITIVE_ID_NV = 0x8C7C;
pub const GL_GENERIC_ATTRIB_NV = 0x8C7D;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
pub const GL_ACTIVE_VARYINGS_NV = 0x8C81;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
pub const GL_PRIMITIVES_GENERATED_NV = 0x8C87;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
pub const GL_RASTERIZER_DISCARD_NV = 0x8C89;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
pub const GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
pub const GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
pub const GL_LAYER_NV = 0x8DAA;
pub const GL_NEXT_BUFFER_NV = -2;
pub const GL_SKIP_COMPONENTS4_NV = -3;
pub const GL_SKIP_COMPONENTS3_NV = -4;
pub const GL_SKIP_COMPONENTS2_NV = -5;
pub const GL_SKIP_COMPONENTS1_NV = -6;
pub const GL_NV_transform_feedback2 = 1;
pub const GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
pub const GL_NV_uniform_buffer_unified_memory = 1;
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
pub const GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
pub const GL_NV_vdpau_interop = 1;
pub const GL_SURFACE_STATE_NV = 0x86EB;
pub const GL_SURFACE_REGISTERED_NV = 0x86FD;
pub const GL_SURFACE_MAPPED_NV = 0x8700;
pub const GL_WRITE_DISCARD_NV = 0x88BE;
pub const GL_NV_vdpau_interop2 = 1;
pub const GL_NV_vertex_array_range = 1;
pub const GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
pub const GL_NV_vertex_array_range2 = 1;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
pub const GL_NV_vertex_attrib_integer_64bit = 1;
pub const GL_NV_vertex_buffer_unified_memory = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
pub const GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
pub const GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
pub const GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
pub const GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
pub const GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
pub const GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
pub const GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
pub const GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
pub const GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
pub const GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
pub const GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
pub const GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
pub const GL_NV_vertex_program = 1;
pub const GL_VERTEX_PROGRAM_NV = 0x8620;
pub const GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
pub const GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
pub const GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
pub const GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
pub const GL_CURRENT_ATTRIB_NV = 0x8626;
pub const GL_PROGRAM_LENGTH_NV = 0x8627;
pub const GL_PROGRAM_STRING_NV = 0x8628;
pub const GL_MODELVIEW_PROJECTION_NV = 0x8629;
pub const GL_IDENTITY_NV = 0x862A;
pub const GL_INVERSE_NV = 0x862B;
pub const GL_TRANSPOSE_NV = 0x862C;
pub const GL_INVERSE_TRANSPOSE_NV = 0x862D;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
pub const GL_MAX_TRACK_MATRICES_NV = 0x862F;
pub const GL_MATRIX0_NV = 0x8630;
pub const GL_MATRIX1_NV = 0x8631;
pub const GL_MATRIX2_NV = 0x8632;
pub const GL_MATRIX3_NV = 0x8633;
pub const GL_MATRIX4_NV = 0x8634;
pub const GL_MATRIX5_NV = 0x8635;
pub const GL_MATRIX6_NV = 0x8636;
pub const GL_MATRIX7_NV = 0x8637;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
pub const GL_CURRENT_MATRIX_NV = 0x8641;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
pub const GL_PROGRAM_PARAMETER_NV = 0x8644;
pub const GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
pub const GL_PROGRAM_TARGET_NV = 0x8646;
pub const GL_PROGRAM_RESIDENT_NV = 0x8647;
pub const GL_TRACK_MATRIX_NV = 0x8648;
pub const GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
pub const GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
pub const GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
pub const GL_NV_vertex_program1_1 = 1;
pub const GL_NV_vertex_program2 = 1;
pub const GL_NV_vertex_program2_option = 1;
pub const GL_NV_vertex_program3 = 1;
pub const GL_NV_vertex_program4 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
pub const GL_NV_video_capture = 1;
pub const GL_VIDEO_BUFFER_NV = 0x9020;
pub const GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
pub const GL_FIELD_UPPER_NV = 0x9022;
pub const GL_FIELD_LOWER_NV = 0x9023;
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
pub const GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
pub const GL_PARTIAL_SUCCESS_NV = 0x902E;
pub const GL_SUCCESS_NV = 0x902F;
pub const GL_FAILURE_NV = 0x9030;
pub const GL_YCBYCR8_422_NV = 0x9031;
pub const GL_YCBAYCR8A_4224_NV = 0x9032;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
pub const GL_NV_viewport_array2 = 1;
pub const GL_NV_viewport_swizzle = 1;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
pub const GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
pub const GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
pub const GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
pub const GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
pub const GL_OML_interlace = 1;
pub const GL_INTERLACE_OML = 0x8980;
pub const GL_INTERLACE_READ_OML = 0x8981;
pub const GL_OML_resample = 1;
pub const GL_PACK_RESAMPLE_OML = 0x8984;
pub const GL_UNPACK_RESAMPLE_OML = 0x8985;
pub const GL_RESAMPLE_REPLICATE_OML = 0x8986;
pub const GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
pub const GL_RESAMPLE_AVERAGE_OML = 0x8988;
pub const GL_RESAMPLE_DECIMATE_OML = 0x8989;
pub const GL_OML_subsample = 1;
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
pub const GL_OVR_multiview = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
pub const GL_MAX_VIEWS_OVR = 0x9631;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
pub const GL_OVR_multiview2 = 1;
pub const GL_PGI_misc_hints = 1;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
pub const GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
pub const GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
pub const GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
pub const GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
pub const GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
pub const GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
pub const GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
pub const GL_CLIP_NEAR_HINT_PGI = 0x1A220;
pub const GL_CLIP_FAR_HINT_PGI = 0x1A221;
pub const GL_WIDE_LINE_HINT_PGI = 0x1A222;
pub const GL_BACK_NORMALS_HINT_PGI = 0x1A223;
pub const GL_PGI_vertex_hints = 1;
pub const GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
pub const GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
pub const GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
pub const GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
pub const GL_COLOR3_BIT_PGI = 0x00010000;
pub const GL_COLOR4_BIT_PGI = 0x00020000;
pub const GL_EDGEFLAG_BIT_PGI = 0x00040000;
pub const GL_INDEX_BIT_PGI = 0x00080000;
pub const GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
pub const GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
pub const GL_MAT_EMISSION_BIT_PGI = 0x00800000;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
pub const GL_MAT_SHININESS_BIT_PGI = 0x02000000;
pub const GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
pub const GL_NORMAL_BIT_PGI = 0x08000000;
pub const GL_TEXCOORD1_BIT_PGI = 0x10000000;
pub const GL_TEXCOORD2_BIT_PGI = 0x20000000;
pub const GL_TEXCOORD3_BIT_PGI = 0x40000000;
pub const GL_TEXCOORD4_BIT_PGI = 0x80000000;
pub const GL_VERTEX23_BIT_PGI = 0x00000004;
pub const GL_VERTEX4_BIT_PGI = 0x00000008;
pub const GL_REND_screen_coordinates = 1;
pub const GL_SCREEN_COORDINATES_REND = 0x8490;
pub const GL_INVERTED_SCREEN_W_REND = 0x8491;
pub const GL_S3_s3tc = 1;
pub const GL_RGB_S3TC = 0x83A0;
pub const GL_RGB4_S3TC = 0x83A1;
pub const GL_RGBA_S3TC = 0x83A2;
pub const GL_RGBA4_S3TC = 0x83A3;
pub const GL_RGBA_DXT5_S3TC = 0x83A4;
pub const GL_RGBA4_DXT5_S3TC = 0x83A5;
pub const GL_SGIS_detail_texture = 1;
pub const GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
pub const GL_LINEAR_DETAIL_SGIS = 0x8097;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
pub const GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
pub const GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
pub const GL_SGIS_fog_function = 1;
pub const GL_FOG_FUNC_SGIS = 0x812A;
pub const GL_FOG_FUNC_POINTS_SGIS = 0x812B;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
pub const GL_SGIS_generate_mipmap = 1;
pub const GL_GENERATE_MIPMAP_SGIS = 0x8191;
pub const GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
pub const GL_SGIS_multisample = 1;
pub const GL_MULTISAMPLE_SGIS = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
pub const GL_SAMPLE_MASK_SGIS = 0x80A0;
pub const GL_1PASS_SGIS = 0x80A1;
pub const GL_2PASS_0_SGIS = 0x80A2;
pub const GL_2PASS_1_SGIS = 0x80A3;
pub const GL_4PASS_0_SGIS = 0x80A4;
pub const GL_4PASS_1_SGIS = 0x80A5;
pub const GL_4PASS_2_SGIS = 0x80A6;
pub const GL_4PASS_3_SGIS = 0x80A7;
pub const GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
pub const GL_SAMPLES_SGIS = 0x80A9;
pub const GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
pub const GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
pub const GL_SAMPLE_PATTERN_SGIS = 0x80AC;
pub const GL_SGIS_pixel_texture = 1;
pub const GL_PIXEL_TEXTURE_SGIS = 0x8353;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
pub const GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
pub const GL_SGIS_point_line_texgen = 1;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
pub const GL_EYE_POINT_SGIS = 0x81F4;
pub const GL_OBJECT_POINT_SGIS = 0x81F5;
pub const GL_EYE_LINE_SGIS = 0x81F6;
pub const GL_OBJECT_LINE_SGIS = 0x81F7;
pub const GL_SGIS_point_parameters = 1;
pub const GL_POINT_SIZE_MIN_SGIS = 0x8126;
pub const GL_POINT_SIZE_MAX_SGIS = 0x8127;
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
pub const GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
pub const GL_SGIS_sharpen_texture = 1;
pub const GL_LINEAR_SHARPEN_SGIS = 0x80AD;
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
pub const GL_SGIS_texture4D = 1;
pub const GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
pub const GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
pub const GL_TEXTURE_4D_SGIS = 0x8134;
pub const GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
pub const GL_TEXTURE_4DSIZE_SGIS = 0x8136;
pub const GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
pub const GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
pub const GL_SGIS_texture_border_clamp = 1;
pub const GL_CLAMP_TO_BORDER_SGIS = 0x812D;
pub const GL_SGIS_texture_color_mask = 1;
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
pub const GL_SGIS_texture_edge_clamp = 1;
pub const GL_CLAMP_TO_EDGE_SGIS = 0x812F;
pub const GL_SGIS_texture_filter4 = 1;
pub const GL_FILTER4_SGIS = 0x8146;
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
pub const GL_SGIS_texture_lod = 1;
pub const GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
pub const GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
pub const GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
pub const GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
pub const GL_SGIS_texture_select = 1;
pub const GL_DUAL_ALPHA4_SGIS = 0x8110;
pub const GL_DUAL_ALPHA8_SGIS = 0x8111;
pub const GL_DUAL_ALPHA12_SGIS = 0x8112;
pub const GL_DUAL_ALPHA16_SGIS = 0x8113;
pub const GL_DUAL_LUMINANCE4_SGIS = 0x8114;
pub const GL_DUAL_LUMINANCE8_SGIS = 0x8115;
pub const GL_DUAL_LUMINANCE12_SGIS = 0x8116;
pub const GL_DUAL_LUMINANCE16_SGIS = 0x8117;
pub const GL_DUAL_INTENSITY4_SGIS = 0x8118;
pub const GL_DUAL_INTENSITY8_SGIS = 0x8119;
pub const GL_DUAL_INTENSITY12_SGIS = 0x811A;
pub const GL_DUAL_INTENSITY16_SGIS = 0x811B;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
pub const GL_QUAD_ALPHA4_SGIS = 0x811E;
pub const GL_QUAD_ALPHA8_SGIS = 0x811F;
pub const GL_QUAD_LUMINANCE4_SGIS = 0x8120;
pub const GL_QUAD_LUMINANCE8_SGIS = 0x8121;
pub const GL_QUAD_INTENSITY4_SGIS = 0x8122;
pub const GL_QUAD_INTENSITY8_SGIS = 0x8123;
pub const GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
pub const GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
pub const GL_SGIX_async = 1;
pub const GL_ASYNC_MARKER_SGIX = 0x8329;
pub const GL_SGIX_async_histogram = 1;
pub const GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
pub const GL_SGIX_async_pixel = 1;
pub const GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
pub const GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
pub const GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
pub const GL_SGIX_blend_alpha_minmax = 1;
pub const GL_ALPHA_MIN_SGIX = 0x8320;
pub const GL_ALPHA_MAX_SGIX = 0x8321;
pub const GL_SGIX_calligraphic_fragment = 1;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
pub const GL_SGIX_clipmap = 1;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
pub const GL_SGIX_convolution_accuracy = 1;
pub const GL_CONVOLUTION_HINT_SGIX = 0x8316;
pub const GL_SGIX_depth_pass_instrument = 1;
pub const GL_SGIX_depth_texture = 1;
pub const GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
pub const GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
pub const GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
pub const GL_SGIX_flush_raster = 1;
pub const GL_SGIX_fog_offset = 1;
pub const GL_FOG_OFFSET_SGIX = 0x8198;
pub const GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
pub const GL_SGIX_fragment_lighting = 1;
pub const GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
pub const GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
pub const GL_LIGHT_ENV_MODE_SGIX = 0x8407;
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
pub const GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
pub const GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
pub const GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
pub const GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
pub const GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
pub const GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
pub const GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
pub const GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
pub const GL_SGIX_framezoom = 1;
pub const GL_FRAMEZOOM_SGIX = 0x818B;
pub const GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
pub const GL_SGIX_igloo_interface = 1;
pub const GL_SGIX_instruments = 1;
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
pub const GL_SGIX_interlace = 1;
pub const GL_INTERLACE_SGIX = 0x8094;
pub const GL_SGIX_ir_instrument1 = 1;
pub const GL_IR_INSTRUMENT1_SGIX = 0x817F;
pub const GL_SGIX_list_priority = 1;
pub const GL_LIST_PRIORITY_SGIX = 0x8182;
pub const GL_SGIX_pixel_texture = 1;
pub const GL_PIXEL_TEX_GEN_SGIX = 0x8139;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
pub const GL_SGIX_pixel_tiles = 1;
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
pub const GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
pub const GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
pub const GL_SGIX_polynomial_ffd = 1;
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
pub const GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
pub const GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
pub const GL_DEFORMATIONS_MASK_SGIX = 0x8196;
pub const GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
pub const GL_SGIX_reference_plane = 1;
pub const GL_REFERENCE_PLANE_SGIX = 0x817D;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
pub const GL_SGIX_resample = 1;
pub const GL_PACK_RESAMPLE_SGIX = 0x842E;
pub const GL_UNPACK_RESAMPLE_SGIX = 0x842F;
pub const GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
pub const GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
pub const GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
pub const GL_SGIX_scalebias_hint = 1;
pub const GL_SCALEBIAS_HINT_SGIX = 0x8322;
pub const GL_SGIX_shadow = 1;
pub const GL_TEXTURE_COMPARE_SGIX = 0x819A;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
pub const GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
pub const GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
pub const GL_SGIX_shadow_ambient = 1;
pub const GL_SHADOW_AMBIENT_SGIX = 0x80BF;
pub const GL_SGIX_sprite = 1;
pub const GL_SPRITE_SGIX = 0x8148;
pub const GL_SPRITE_MODE_SGIX = 0x8149;
pub const GL_SPRITE_AXIS_SGIX = 0x814A;
pub const GL_SPRITE_TRANSLATION_SGIX = 0x814B;
pub const GL_SPRITE_AXIAL_SGIX = 0x814C;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
pub const GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
pub const GL_SGIX_subsample = 1;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
pub const GL_SGIX_tag_sample_buffer = 1;
pub const GL_SGIX_texture_add_env = 1;
pub const GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
pub const GL_SGIX_texture_coordinate_clamp = 1;
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
pub const GL_SGIX_texture_lod_bias = 1;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
pub const GL_SGIX_texture_multi_buffer = 1;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
pub const GL_SGIX_texture_scale_bias = 1;
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
pub const GL_SGIX_vertex_preclip = 1;
pub const GL_VERTEX_PRECLIP_SGIX = 0x83EE;
pub const GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
pub const GL_SGIX_ycrcb = 1;
pub const GL_YCRCB_422_SGIX = 0x81BB;
pub const GL_YCRCB_444_SGIX = 0x81BC;
pub const GL_SGIX_ycrcb_subsample = 1;
pub const GL_SGIX_ycrcba = 1;
pub const GL_YCRCB_SGIX = 0x8318;
pub const GL_YCRCBA_SGIX = 0x8319;
pub const GL_SGI_color_matrix = 1;
pub const GL_COLOR_MATRIX_SGI = 0x80B1;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
pub const GL_SGI_color_table = 1;
pub const GL_COLOR_TABLE_SGI = 0x80D0;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
pub const GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
pub const GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
pub const GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
pub const GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
pub const GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
pub const GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
pub const GL_SGI_texture_color_table = 1;
pub const GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
pub const GL_SUNX_constant_data = 1;
pub const GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
pub const GL_SUN_convolution_border_modes = 1;
pub const GL_WRAP_BORDER_SUN = 0x81D4;
pub const GL_SUN_global_alpha = 1;
pub const GL_GLOBAL_ALPHA_SUN = 0x81D9;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
pub const GL_SUN_mesh_array = 1;
pub const GL_QUAD_MESH_SUN = 0x8614;
pub const GL_TRIANGLE_MESH_SUN = 0x8615;
pub const GL_SUN_slice_accum = 1;
pub const GL_SLICE_ACCUM_SUN = 0x85CC;
pub const GL_SUN_triangle_list = 1;
pub const GL_RESTART_SUN = 0x0001;
pub const GL_REPLACE_MIDDLE_SUN = 0x0002;
pub const GL_REPLACE_OLDEST_SUN = 0x0003;
pub const GL_TRIANGLE_LIST_SUN = 0x81D7;
pub const GL_REPLACEMENT_CODE_SUN = 0x81D8;
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
pub const GL_R1UI_V3F_SUN = 0x85C4;
pub const GL_R1UI_C4UB_V3F_SUN = 0x85C5;
pub const GL_R1UI_C3F_V3F_SUN = 0x85C6;
pub const GL_R1UI_N3F_V3F_SUN = 0x85C7;
pub const GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
pub const GL_R1UI_T2F_V3F_SUN = 0x85C9;
pub const GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
pub const GL_SUN_vertex = 1;
pub const GL_WIN_phong_shading = 1;
pub const GL_PHONG_WIN = 0x80EA;
pub const GL_PHONG_HINT_WIN = 0x80EB;
pub const GL_WIN_specular_fog = 1;
pub const GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
pub const GL_MESA_packed_depth_stencil = 1;
pub const GL_DEPTH_STENCIL_MESA = 0x8750;
pub const GL_UNSIGNED_INT_24_8_MESA = 0x8751;
pub const GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752;
pub const GL_UNSIGNED_SHORT_15_1_MESA = 0x8753;
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754;
pub const GL_ATI_blend_equation_separate = 1;
pub const GL_ALPHA_BLEND_EQUATION_ATI = 0x883D;
pub const GL_OES_EGL_image = 1;
pub const GLFW_VERSION_MAJOR = 3;
pub const GLFW_VERSION_MINOR = 3;
pub const GLFW_VERSION_REVISION = 2;
pub const GLFW_TRUE = 1;
pub const GLFW_FALSE = 0;
pub const GLFW_RELEASE = 0;
pub const GLFW_PRESS = 1;
pub const GLFW_REPEAT = 2;
pub const GLFW_HAT_CENTERED = 0;
pub const GLFW_HAT_UP = 1;
pub const GLFW_HAT_RIGHT = 2;
pub const GLFW_HAT_DOWN = 4;
pub const GLFW_HAT_LEFT = 8;
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -1;
pub const GLFW_KEY_SPACE = 32;
pub const GLFW_KEY_APOSTROPHE = 39;
pub const GLFW_KEY_COMMA = 44;
pub const GLFW_KEY_MINUS = 45;
pub const GLFW_KEY_PERIOD = 46;
pub const GLFW_KEY_SLASH = 47;
pub const GLFW_KEY_0 = 48;
pub const GLFW_KEY_1 = 49;
pub const GLFW_KEY_2 = 50;
pub const GLFW_KEY_3 = 51;
pub const GLFW_KEY_4 = 52;
pub const GLFW_KEY_5 = 53;
pub const GLFW_KEY_6 = 54;
pub const GLFW_KEY_7 = 55;
pub const GLFW_KEY_8 = 56;
pub const GLFW_KEY_9 = 57;
pub const GLFW_KEY_SEMICOLON = 59;
pub const GLFW_KEY_EQUAL = 61;
pub const GLFW_KEY_A = 65;
pub const GLFW_KEY_B = 66;
pub const GLFW_KEY_C = 67;
pub const GLFW_KEY_D = 68;
pub const GLFW_KEY_E = 69;
pub const GLFW_KEY_F = 70;
pub const GLFW_KEY_G = 71;
pub const GLFW_KEY_H = 72;
pub const GLFW_KEY_I = 73;
pub const GLFW_KEY_J = 74;
pub const GLFW_KEY_K = 75;
pub const GLFW_KEY_L = 76;
pub const GLFW_KEY_M = 77;
pub const GLFW_KEY_N = 78;
pub const GLFW_KEY_O = 79;
pub const GLFW_KEY_P = 80;
pub const GLFW_KEY_Q = 81;
pub const GLFW_KEY_R = 82;
pub const GLFW_KEY_S = 83;
pub const GLFW_KEY_T = 84;
pub const GLFW_KEY_U = 85;
pub const GLFW_KEY_V = 86;
pub const GLFW_KEY_W = 87;
pub const GLFW_KEY_X = 88;
pub const GLFW_KEY_Y = 89;
pub const GLFW_KEY_Z = 90;
pub const GLFW_KEY_LEFT_BRACKET = 91;
pub const GLFW_KEY_BACKSLASH = 92;
pub const GLFW_KEY_RIGHT_BRACKET = 93;
pub const GLFW_KEY_GRAVE_ACCENT = 96;
pub const GLFW_KEY_WORLD_1 = 161;
pub const GLFW_KEY_WORLD_2 = 162;
pub const GLFW_KEY_ESCAPE = 256;
pub const GLFW_KEY_ENTER = 257;
pub const GLFW_KEY_TAB = 258;
pub const GLFW_KEY_BACKSPACE = 259;
pub const GLFW_KEY_INSERT = 260;
pub const GLFW_KEY_DELETE = 261;
pub const GLFW_KEY_RIGHT = 262;
pub const GLFW_KEY_LEFT = 263;
pub const GLFW_KEY_DOWN = 264;
pub const GLFW_KEY_UP = 265;
pub const GLFW_KEY_PAGE_UP = 266;
pub const GLFW_KEY_PAGE_DOWN = 267;
pub const GLFW_KEY_HOME = 268;
pub const GLFW_KEY_END = 269;
pub const GLFW_KEY_CAPS_LOCK = 280;
pub const GLFW_KEY_SCROLL_LOCK = 281;
pub const GLFW_KEY_NUM_LOCK = 282;
pub const GLFW_KEY_PRINT_SCREEN = 283;
pub const GLFW_KEY_PAUSE = 284;
pub const GLFW_KEY_F1 = 290;
pub const GLFW_KEY_F2 = 291;
pub const GLFW_KEY_F3 = 292;
pub const GLFW_KEY_F4 = 293;
pub const GLFW_KEY_F5 = 294;
pub const GLFW_KEY_F6 = 295;
pub const GLFW_KEY_F7 = 296;
pub const GLFW_KEY_F8 = 297;
pub const GLFW_KEY_F9 = 298;
pub const GLFW_KEY_F10 = 299;
pub const GLFW_KEY_F11 = 300;
pub const GLFW_KEY_F12 = 301;
pub const GLFW_KEY_F13 = 302;
pub const GLFW_KEY_F14 = 303;
pub const GLFW_KEY_F15 = 304;
pub const GLFW_KEY_F16 = 305;
pub const GLFW_KEY_F17 = 306;
pub const GLFW_KEY_F18 = 307;
pub const GLFW_KEY_F19 = 308;
pub const GLFW_KEY_F20 = 309;
pub const GLFW_KEY_F21 = 310;
pub const GLFW_KEY_F22 = 311;
pub const GLFW_KEY_F23 = 312;
pub const GLFW_KEY_F24 = 313;
pub const GLFW_KEY_F25 = 314;
pub const GLFW_KEY_KP_0 = 320;
pub const GLFW_KEY_KP_1 = 321;
pub const GLFW_KEY_KP_2 = 322;
pub const GLFW_KEY_KP_3 = 323;
pub const GLFW_KEY_KP_4 = 324;
pub const GLFW_KEY_KP_5 = 325;
pub const GLFW_KEY_KP_6 = 326;
pub const GLFW_KEY_KP_7 = 327;
pub const GLFW_KEY_KP_8 = 328;
pub const GLFW_KEY_KP_9 = 329;
pub const GLFW_KEY_KP_DECIMAL = 330;
pub const GLFW_KEY_KP_DIVIDE = 331;
pub const GLFW_KEY_KP_MULTIPLY = 332;
pub const GLFW_KEY_KP_SUBTRACT = 333;
pub const GLFW_KEY_KP_ADD = 334;
pub const GLFW_KEY_KP_ENTER = 335;
pub const GLFW_KEY_KP_EQUAL = 336;
pub const GLFW_KEY_LEFT_SHIFT = 340;
pub const GLFW_KEY_LEFT_CONTROL = 341;
pub const GLFW_KEY_LEFT_ALT = 342;
pub const GLFW_KEY_LEFT_SUPER = 343;
pub const GLFW_KEY_RIGHT_SHIFT = 344;
pub const GLFW_KEY_RIGHT_CONTROL = 345;
pub const GLFW_KEY_RIGHT_ALT = 346;
pub const GLFW_KEY_RIGHT_SUPER = 347;
pub const GLFW_KEY_MENU = 348;
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = 0x0001;
pub const GLFW_MOD_CONTROL = 0x0002;
pub const GLFW_MOD_ALT = 0x0004;
pub const GLFW_MOD_SUPER = 0x0008;
pub const GLFW_MOD_CAPS_LOCK = 0x0010;
pub const GLFW_MOD_NUM_LOCK = 0x0020;
pub const GLFW_MOUSE_BUTTON_1 = 0;
pub const GLFW_MOUSE_BUTTON_2 = 1;
pub const GLFW_MOUSE_BUTTON_3 = 2;
pub const GLFW_MOUSE_BUTTON_4 = 3;
pub const GLFW_MOUSE_BUTTON_5 = 4;
pub const GLFW_MOUSE_BUTTON_6 = 5;
pub const GLFW_MOUSE_BUTTON_7 = 6;
pub const GLFW_MOUSE_BUTTON_8 = 7;
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = 0;
pub const GLFW_JOYSTICK_2 = 1;
pub const GLFW_JOYSTICK_3 = 2;
pub const GLFW_JOYSTICK_4 = 3;
pub const GLFW_JOYSTICK_5 = 4;
pub const GLFW_JOYSTICK_6 = 5;
pub const GLFW_JOYSTICK_7 = 6;
pub const GLFW_JOYSTICK_8 = 7;
pub const GLFW_JOYSTICK_9 = 8;
pub const GLFW_JOYSTICK_10 = 9;
pub const GLFW_JOYSTICK_11 = 10;
pub const GLFW_JOYSTICK_12 = 11;
pub const GLFW_JOYSTICK_13 = 12;
pub const GLFW_JOYSTICK_14 = 13;
pub const GLFW_JOYSTICK_15 = 14;
pub const GLFW_JOYSTICK_16 = 15;
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = 0;
pub const GLFW_GAMEPAD_BUTTON_B = 1;
pub const GLFW_GAMEPAD_BUTTON_X = 2;
pub const GLFW_GAMEPAD_BUTTON_Y = 3;
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = 4;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = 5;
pub const GLFW_GAMEPAD_BUTTON_BACK = 6;
pub const GLFW_GAMEPAD_BUTTON_START = 7;
pub const GLFW_GAMEPAD_BUTTON_GUIDE = 8;
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = 9;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = 10;
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = 11;
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = 12;
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = 13;
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = 14;
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = 0;
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = 1;
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = 2;
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = 4;
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = 0;
pub const GLFW_NOT_INITIALIZED = 0x00010001;
pub const GLFW_NO_CURRENT_CONTEXT = 0x00010002;
pub const GLFW_INVALID_ENUM = 0x00010003;
pub const GLFW_INVALID_VALUE = 0x00010004;
pub const GLFW_OUT_OF_MEMORY = 0x00010005;
pub const GLFW_API_UNAVAILABLE = 0x00010006;
pub const GLFW_VERSION_UNAVAILABLE = 0x00010007;
pub const GLFW_PLATFORM_ERROR = 0x00010008;
pub const GLFW_FORMAT_UNAVAILABLE = 0x00010009;
pub const GLFW_NO_WINDOW_CONTEXT = 0x0001000A;
pub const GLFW_FOCUSED = 0x00020001;
pub const GLFW_ICONIFIED = 0x00020002;
pub const GLFW_RESIZABLE = 0x00020003;
pub const GLFW_VISIBLE = 0x00020004;
pub const GLFW_DECORATED = 0x00020005;
pub const GLFW_AUTO_ICONIFY = 0x00020006;
pub const GLFW_FLOATING = 0x00020007;
pub const GLFW_MAXIMIZED = 0x00020008;
pub const GLFW_CENTER_CURSOR = 0x00020009;
pub const GLFW_TRANSPARENT_FRAMEBUFFER = 0x0002000A;
pub const GLFW_HOVERED = 0x0002000B;
pub const GLFW_FOCUS_ON_SHOW = 0x0002000C;
pub const GLFW_RED_BITS = 0x00021001;
pub const GLFW_GREEN_BITS = 0x00021002;
pub const GLFW_BLUE_BITS = 0x00021003;
pub const GLFW_ALPHA_BITS = 0x00021004;
pub const GLFW_DEPTH_BITS = 0x00021005;
pub const GLFW_STENCIL_BITS = 0x00021006;
pub const GLFW_ACCUM_RED_BITS = 0x00021007;
pub const GLFW_ACCUM_GREEN_BITS = 0x00021008;
pub const GLFW_ACCUM_BLUE_BITS = 0x00021009;
pub const GLFW_ACCUM_ALPHA_BITS = 0x0002100A;
pub const GLFW_AUX_BUFFERS = 0x0002100B;
pub const GLFW_STEREO = 0x0002100C;
pub const GLFW_SAMPLES = 0x0002100D;
pub const GLFW_SRGB_CAPABLE = 0x0002100E;
pub const GLFW_REFRESH_RATE = 0x0002100F;
pub const GLFW_DOUBLEBUFFER = 0x00021010;
pub const GLFW_CLIENT_API = 0x00022001;
pub const GLFW_CONTEXT_VERSION_MAJOR = 0x00022002;
pub const GLFW_CONTEXT_VERSION_MINOR = 0x00022003;
pub const GLFW_CONTEXT_REVISION = 0x00022004;
pub const GLFW_CONTEXT_ROBUSTNESS = 0x00022005;
pub const GLFW_OPENGL_FORWARD_COMPAT = 0x00022006;
pub const GLFW_OPENGL_DEBUG_CONTEXT = 0x00022007;
pub const GLFW_OPENGL_PROFILE = 0x00022008;
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = 0x00022009;
pub const GLFW_CONTEXT_NO_ERROR = 0x0002200A;
pub const GLFW_CONTEXT_CREATION_API = 0x0002200B;
pub const GLFW_SCALE_TO_MONITOR = 0x0002200C;
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = 0x00023001;
pub const GLFW_COCOA_FRAME_NAME = 0x00023002;
pub const GLFW_COCOA_GRAPHICS_SWITCHING = 0x00023003;
pub const GLFW_X11_CLASS_NAME = 0x00024001;
pub const GLFW_X11_INSTANCE_NAME = 0x00024002;
pub const GLFW_NO_API = 0;
pub const GLFW_OPENGL_API = 0x00030001;
pub const GLFW_OPENGL_ES_API = 0x00030002;
pub const GLFW_NO_ROBUSTNESS = 0;
pub const GLFW_NO_RESET_NOTIFICATION = 0x00031001;
pub const GLFW_LOSE_CONTEXT_ON_RESET = 0x00031002;
pub const GLFW_OPENGL_ANY_PROFILE = 0;
pub const GLFW_OPENGL_CORE_PROFILE = 0x00032001;
pub const GLFW_OPENGL_COMPAT_PROFILE = 0x00032002;
pub const GLFW_CURSOR = 0x00033001;
pub const GLFW_STICKY_KEYS = 0x00033002;
pub const GLFW_STICKY_MOUSE_BUTTONS = 0x00033003;
pub const GLFW_LOCK_KEY_MODS = 0x00033004;
pub const GLFW_RAW_MOUSE_MOTION = 0x00033005;
pub const GLFW_CURSOR_NORMAL = 0x00034001;
pub const GLFW_CURSOR_HIDDEN = 0x00034002;
pub const GLFW_CURSOR_DISABLED = 0x00034003;
pub const GLFW_ANY_RELEASE_BEHAVIOR = 0;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = 0x00035001;
pub const GLFW_RELEASE_BEHAVIOR_NONE = 0x00035002;
pub const GLFW_NATIVE_CONTEXT_API = 0x00036001;
pub const GLFW_EGL_CONTEXT_API = 0x00036002;
pub const GLFW_OSMESA_CONTEXT_API = 0x00036003;
pub const GLFW_ARROW_CURSOR = 0x00036001;
pub const GLFW_IBEAM_CURSOR = 0x00036002;
pub const GLFW_CROSSHAIR_CURSOR = 0x00036003;
pub const GLFW_HAND_CURSOR = 0x00036004;
pub const GLFW_HRESIZE_CURSOR = 0x00036005;
pub const GLFW_VRESIZE_CURSOR = 0x00036006;
pub const GLFW_CONNECTED = 0x00040001;
pub const GLFW_DISCONNECTED = 0x00040002;
pub const GLFW_JOYSTICK_HAT_BUTTONS = 0x00050001;
pub const GLFW_COCOA_CHDIR_RESOURCES = 0x00051001;
pub const GLFW_COCOA_MENUBAR = 0x00051002;
pub const GLFW_DONT_CARE = -1;
pub const CAIRO_VERSION_MAJOR = USE_cairo_version_OR_cairo_version_string_INSTEAD;
pub const CAIRO_VERSION_MINOR = USE_cairo_version_OR_cairo_version_string_INSTEAD;
pub const CAIRO_VERSION_MICRO = USE_cairo_version_OR_cairo_version_string_INSTEAD;
pub const CAIRO_HAS_EGL_FUNCTIONS = 1;
pub const CAIRO_HAS_FC_FONT = 1;
pub const CAIRO_HAS_FT_FONT = 1;
pub const CAIRO_HAS_GLX_FUNCTIONS = 1;
pub const CAIRO_HAS_GL_SURFACE = 1;
pub const CAIRO_HAS_GOBJECT_FUNCTIONS = 1;
pub const CAIRO_HAS_IMAGE_SURFACE = 1;
pub const CAIRO_HAS_MIME_SURFACE = 1;
pub const CAIRO_HAS_OBSERVER_SURFACE = 1;
pub const CAIRO_HAS_PDF_SURFACE = 1;
pub const CAIRO_HAS_PNG_FUNCTIONS = 1;
pub const CAIRO_HAS_PS_SURFACE = 1;
pub const CAIRO_HAS_RECORDING_SURFACE = 1;
pub const CAIRO_HAS_SCRIPT_SURFACE = 1;
pub const CAIRO_HAS_SVG_SURFACE = 1;
pub const CAIRO_HAS_USER_FONT = 1;
pub const CAIRO_HAS_XCB_SHM_FUNCTIONS = 1;
pub const CAIRO_HAS_XCB_SURFACE = 1;
pub const CAIRO_HAS_XLIB_SURFACE = 1;
pub const CAIRO_HAS_XLIB_XRENDER_SURFACE = 1;
pub const CAIRO_FONT_TYPE_ATSUI = CAIRO_FONT_TYPE_QUARTZ;
pub const cairo_current_font_extents = cairo_current_font_extents_REPLACED_BY_cairo_font_extents;
pub const cairo_get_font_extents = cairo_get_font_extents_REPLACED_BY_cairo_font_extents;
pub const cairo_current_operator = cairo_current_operator_REPLACED_BY_cairo_get_operator;
pub const cairo_current_tolerance = cairo_current_tolerance_REPLACED_BY_cairo_get_tolerance;
pub const cairo_current_point = cairo_current_point_REPLACED_BY_cairo_get_current_point;
pub const cairo_current_fill_rule = cairo_current_fill_rule_REPLACED_BY_cairo_get_fill_rule;
pub const cairo_current_line_width = cairo_current_line_width_REPLACED_BY_cairo_get_line_width;
pub const cairo_current_line_cap = cairo_current_line_cap_REPLACED_BY_cairo_get_line_cap;
pub const cairo_current_line_join = cairo_current_line_join_REPLACED_BY_cairo_get_line_join;
pub const cairo_current_miter_limit = cairo_current_miter_limit_REPLACED_BY_cairo_get_miter_limit;
pub const cairo_current_matrix = cairo_current_matrix_REPLACED_BY_cairo_get_matrix;
pub const cairo_current_target_surface = cairo_current_target_surface_REPLACED_BY_cairo_get_target;
pub const cairo_get_status = cairo_get_status_REPLACED_BY_cairo_status;
pub const cairo_concat_matrix = cairo_concat_matrix_REPLACED_BY_cairo_transform;
pub const cairo_scale_font = cairo_scale_font_REPLACED_BY_cairo_set_font_size;
pub const cairo_select_font = cairo_select_font_REPLACED_BY_cairo_select_font_face;
pub const cairo_transform_font = cairo_transform_font_REPLACED_BY_cairo_set_font_matrix;
pub const cairo_transform_point = cairo_transform_point_REPLACED_BY_cairo_user_to_device;
pub const cairo_transform_distance = cairo_transform_distance_REPLACED_BY_cairo_user_to_device_distance;
pub const cairo_inverse_transform_point = cairo_inverse_transform_point_REPLACED_BY_cairo_device_to_user;
pub const cairo_inverse_transform_distance = cairo_inverse_transform_distance_REPLACED_BY_cairo_device_to_user_distance;
pub const cairo_init_clip = cairo_init_clip_REPLACED_BY_cairo_reset_clip;
pub const cairo_surface_create_for_image = cairo_surface_create_for_image_REPLACED_BY_cairo_image_surface_create_for_data;
pub const cairo_default_matrix = cairo_default_matrix_REPLACED_BY_cairo_identity_matrix;
pub const cairo_matrix_set_affine = cairo_matrix_set_affine_REPLACED_BY_cairo_matrix_init;
pub const cairo_matrix_set_identity = cairo_matrix_set_identity_REPLACED_BY_cairo_matrix_init_identity;
pub const cairo_pattern_add_color_stop = cairo_pattern_add_color_stop_REPLACED_BY_cairo_pattern_add_color_stop_rgba;
pub const cairo_set_rgb_color = cairo_set_rgb_color_REPLACED_BY_cairo_set_source_rgb;
pub const cairo_set_pattern = cairo_set_pattern_REPLACED_BY_cairo_set_source;
pub const cairo_xlib_surface_create_for_pixmap_with_visual = cairo_xlib_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xlib_surface_create;
pub const cairo_xlib_surface_create_for_window_with_visual = cairo_xlib_surface_create_for_window_with_visual_REPLACED_BY_cairo_xlib_surface_create;
pub const cairo_xcb_surface_create_for_pixmap_with_visual = cairo_xcb_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xcb_surface_create;
pub const cairo_xcb_surface_create_for_window_with_visual = cairo_xcb_surface_create_for_window_with_visual_REPLACED_BY_cairo_xcb_surface_create;
pub const cairo_ps_surface_set_dpi = cairo_ps_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution;
pub const cairo_pdf_surface_set_dpi = cairo_pdf_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution;
pub const cairo_svg_surface_set_dpi = cairo_svg_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution;
pub const cairo_atsui_font_face_create_for_atsu_font_id = cairo_atsui_font_face_create_for_atsu_font_id_REPLACED_BY_cairo_quartz_font_face_create_for_atsu_font_id;
pub const cairo_current_path = cairo_current_path_DEPRECATED_BY_cairo_copy_path;
pub const cairo_current_path_flat = cairo_current_path_flat_DEPRECATED_BY_cairo_copy_path_flat;
pub const cairo_get_path = cairo_get_path_DEPRECATED_BY_cairo_copy_path;
pub const cairo_get_path_flat = cairo_get_path_flat_DEPRECATED_BY_cairo_get_path_flat;
pub const cairo_set_alpha = cairo_set_alpha_DEPRECATED_BY_cairo_set_source_rgba_OR_cairo_paint_with_alpha;
pub const cairo_show_surface = cairo_show_surface_DEPRECATED_BY_cairo_set_source_surface_AND_cairo_paint;
pub const cairo_copy = cairo_copy_DEPRECATED_BY_cairo_create_AND_MANY_INDIVIDUAL_FUNCTIONS;
pub const cairo_surface_set_repeat = cairo_surface_set_repeat_DEPRECATED_BY_cairo_pattern_set_extend;
pub const cairo_surface_set_matrix = cairo_surface_set_matrix_DEPRECATED_BY_cairo_pattern_set_matrix;
pub const cairo_surface_get_matrix = cairo_surface_get_matrix_DEPRECATED_BY_cairo_pattern_get_matrix;
pub const cairo_surface_set_filter = cairo_surface_set_filter_DEPRECATED_BY_cairo_pattern_set_filter;
pub const cairo_surface_get_filter = cairo_surface_get_filter_DEPRECATED_BY_cairo_pattern_get_filter;
pub const cairo_matrix_create = cairo_matrix_create_DEPRECATED_BY_cairo_matrix_t;
pub const cairo_matrix_destroy = cairo_matrix_destroy_DEPRECATED_BY_cairo_matrix_t;
pub const cairo_matrix_copy = cairo_matrix_copy_DEPRECATED_BY_cairo_matrix_t;
pub const cairo_matrix_get_affine = cairo_matrix_get_affine_DEPRECATED_BY_cairo_matrix_t;
pub const cairo_set_target_surface = cairo_set_target_surface_DEPRECATED_BY_cairo_create;
pub const cairo_set_target_image = cairo_set_target_image_DEPRECATED_BY_cairo_image_surface_create_for_data;
pub const cairo_set_target_pdf = cairo_set_target_pdf_DEPRECATED_BY_cairo_pdf_surface_create;
pub const cairo_set_target_png = cairo_set_target_png_DEPRECATED_BY_cairo_surface_write_to_png;
pub const cairo_set_target_ps = cairo_set_target_ps_DEPRECATED_BY_cairo_ps_surface_create;
pub const cairo_set_target_quartz = cairo_set_target_quartz_DEPRECATED_BY_cairo_quartz_surface_create;
pub const cairo_set_target_win32 = cairo_set_target_win32_DEPRECATED_BY_cairo_win32_surface_create;
pub const cairo_set_target_xcb = cairo_set_target_xcb_DEPRECATED_BY_cairo_xcb_surface_create;
pub const cairo_set_target_drawable = cairo_set_target_drawable_DEPRECATED_BY_cairo_xlib_surface_create;
pub const cairo_get_status_string = cairo_get_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string;
pub const cairo_status_string = cairo_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string;
pub inline fn CAIRO_VERSION_ENCODE(major: anytype, minor: anytype, micro: anytype) @TypeOf(((major * 10000) + (minor * 100)) + (micro * 1)) {
    return ((major * 10000) + (minor * 100)) + (micro * 1);
}
pub const CAIRO_VERSION = CAIRO_VERSION_ENCODE(CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
pub inline fn CAIRO_VERSION_STRINGIZE(major: anytype, minor: anytype, micro: anytype) @TypeOf(CAIRO_VERSION_STRINGIZE_(major, minor, micro)) {
    return CAIRO_VERSION_STRINGIZE_(major, minor, micro);
}
pub const CAIRO_VERSION_STRING = CAIRO_VERSION_STRINGIZE(CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
pub const CAIRO_TAG_DEST = "cairo.dest";
pub const CAIRO_TAG_LINK = "Link";
pub const CAIRO_MIME_TYPE_JPEG = "image/jpeg";
pub const CAIRO_MIME_TYPE_PNG = "image/png";
pub const CAIRO_MIME_TYPE_JP2 = "image/jp2";
pub const CAIRO_MIME_TYPE_URI = "text/x-uri";
pub const CAIRO_MIME_TYPE_UNIQUE_ID = "application/x-cairo.uuid";
pub const CAIRO_MIME_TYPE_JBIG2 = "application/x-cairo.jbig2";
pub const CAIRO_MIME_TYPE_JBIG2_GLOBAL = "application/x-cairo.jbig2-global";
pub const CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID = "application/x-cairo.jbig2-global-id";
pub const CAIRO_MIME_TYPE_CCITT_FAX = "image/g3fax";
pub const CAIRO_MIME_TYPE_CCITT_FAX_PARAMS = "application/x-cairo.ccitt.params";
pub const CAIRO_MIME_TYPE_EPS = "application/postscript";
pub const CAIRO_MIME_TYPE_EPS_PARAMS = "application/x-cairo.eps.params";
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
pub const _cairo = struct__cairo;
pub const _cairo_surface = struct__cairo_surface;
pub const _cairo_device = struct__cairo_device;
pub const _cairo_matrix = struct__cairo_matrix;
pub const _cairo_pattern = struct__cairo_pattern;
pub const _cairo_user_data_key = struct__cairo_user_data_key;
pub const _cairo_status = enum__cairo_status;
pub const _cairo_content = enum__cairo_content;
pub const _cairo_format = enum__cairo_format;
pub const _cairo_rectangle_int = struct__cairo_rectangle_int;
pub const _cairo_operator = enum__cairo_operator;
pub const _cairo_antialias = enum__cairo_antialias;
pub const _cairo_fill_rule = enum__cairo_fill_rule;
pub const _cairo_line_cap = enum__cairo_line_cap;
pub const _cairo_line_join = enum__cairo_line_join;
pub const _cairo_rectangle = struct__cairo_rectangle;
pub const _cairo_rectangle_list = struct__cairo_rectangle_list;
pub const _cairo_scaled_font = struct__cairo_scaled_font;
pub const _cairo_font_face = struct__cairo_font_face;
pub const _cairo_text_cluster_flags = enum__cairo_text_cluster_flags;
pub const _cairo_font_slant = enum__cairo_font_slant;
pub const _cairo_font_weight = enum__cairo_font_weight;
pub const _cairo_subpixel_order = enum__cairo_subpixel_order;
pub const _cairo_hint_style = enum__cairo_hint_style;
pub const _cairo_hint_metrics = enum__cairo_hint_metrics;
pub const _cairo_font_options = struct__cairo_font_options;
pub const _cairo_font_type = enum__cairo_font_type;
pub const _cairo_path_data_type = enum__cairo_path_data_type;
pub const _cairo_path_data_t = union__cairo_path_data_t;
pub const cairo_path = struct_cairo_path;
pub const _cairo_device_type = enum__cairo_device_type;
pub const _cairo_surface_type = enum__cairo_surface_type;
pub const _cairo_pattern_type = enum__cairo_pattern_type;
pub const _cairo_extend = enum__cairo_extend;
pub const _cairo_filter = enum__cairo_filter;
pub const _cairo_region = struct__cairo_region;
pub const _cairo_region_overlap = enum__cairo_region_overlap;
