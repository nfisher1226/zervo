pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
const struct_unnamed_1 = extern struct {
    __val: [2]c_int,
};
pub const __fsid_t = struct_unnamed_1;
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*c_void;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const __gwchar_t = c_int;
const struct_unnamed_2 = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const imaxdiv_t = struct_unnamed_2;
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub fn strtoimax(noalias arg___nptr: [*c]const u8, noalias arg___endptr: [*c][*c]u8, arg___base: c_int) callconv(.C) intmax_t {
    var __nptr = arg___nptr;
    var __endptr = arg___endptr;
    var __base = arg___base;
    return __strtol_internal(__nptr, __endptr, __base, @as(c_int, 0));
}
pub fn strtoumax(noalias arg___nptr: [*c]const u8, noalias arg___endptr: [*c][*c]u8, arg___base: c_int) callconv(.C) uintmax_t {
    var __nptr = arg___nptr;
    var __endptr = arg___endptr;
    var __base = arg___base;
    return __strtoul_internal(__nptr, __endptr, __base, @as(c_int, 0));
}
pub fn wcstoimax(noalias arg___nptr: [*c]const __gwchar_t, noalias arg___endptr: [*c][*c]__gwchar_t, arg___base: c_int) callconv(.C) intmax_t {
    var __nptr = arg___nptr;
    var __endptr = arg___endptr;
    var __base = arg___base;
    return __wcstol_internal(__nptr, __endptr, __base, @as(c_int, 0));
}
pub fn wcstoumax(noalias arg___nptr: [*c]const __gwchar_t, noalias arg___endptr: [*c][*c]__gwchar_t, arg___base: c_int) callconv(.C) uintmax_t {
    var __nptr = arg___nptr;
    var __endptr = arg___endptr;
    var __base = arg___base;
    return __wcstoul_internal(__nptr, __endptr, __base, @as(c_int, 0));
}
pub extern fn __strtol_internal(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int, __group: c_int) c_long;
pub extern fn __strtoul_internal(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int, __group: c_int) c_ulong;
pub extern fn __wcstol_internal(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int, __group: c_int) c_long;
pub extern fn __wcstoul_internal(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int, __group: c_int) c_ulong;
pub const wchar_t = c_int;
pub const _Float32 = f32;
pub const _Float64 = f64;
pub const _Float32x = f64;
pub const _Float64x = c_longdouble;
const struct_unnamed_3 = extern struct {
    quot: c_int,
    rem: c_int,
};
pub const div_t = struct_unnamed_3;
const struct_unnamed_4 = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const ldiv_t = struct_unnamed_4;
const struct_unnamed_5 = extern struct {
    quot: c_longlong,
    rem: c_longlong,
};
pub const lldiv_t = struct_unnamed_5;
pub extern fn __ctype_get_mb_cur_max() usize;
pub fn atof(arg___nptr: [*c]const u8) callconv(.C) f64 {
    var __nptr = arg___nptr;
    return strtod(__nptr, @ptrCast([*c][*c]u8, @alignCast(@alignOf([*c]u8), (@intToPtr(?*c_void, @as(c_int, 0))))));
}
pub fn atoi(arg___nptr: [*c]const u8) callconv(.C) c_int {
    var __nptr = arg___nptr;
    return @bitCast(c_int, @truncate(c_int, strtol(__nptr, @ptrCast([*c][*c]u8, @alignCast(@alignOf([*c]u8), (@intToPtr(?*c_void, @as(c_int, 0))))), @as(c_int, 10))));
}
pub fn atol(arg___nptr: [*c]const u8) callconv(.C) c_long {
    var __nptr = arg___nptr;
    return strtol(__nptr, @ptrCast([*c][*c]u8, @alignCast(@alignOf([*c]u8), (@intToPtr(?*c_void, @as(c_int, 0))))), @as(c_int, 10));
}
pub fn atoll(arg___nptr: [*c]const u8) callconv(.C) c_longlong {
    var __nptr = arg___nptr;
    return strtoll(__nptr, @ptrCast([*c][*c]u8, @alignCast(@alignOf([*c]u8), (@intToPtr(?*c_void, @as(c_int, 0))))), @as(c_int, 10));
}
pub extern fn strtod(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f64;
pub extern fn strtof(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f32;
pub extern fn strtold(__nptr: [*c]const u8, __endptr: [*c][*c]u8) c_longdouble;
pub extern fn strtol(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn strtoll(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn l64a(__n: c_long) [*c]u8;
pub extern fn a64l(__s: [*c]const u8) c_long;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const off_t = __off_t;
pub const pid_t = __pid_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const clock_t = __clock_t;
pub const clockid_t = __clockid_t;
pub const time_t = __time_t;
pub const timer_t = __timer_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.C) __uint16_t {
    var __bsx = arg___bsx;
    return (@bitCast(__uint16_t, @truncate(c_short, (((@bitCast(c_int, @as(c_uint, (__bsx))) >> @intCast(@import("std").math.Log2Int(c_int), 8)) & @as(c_int, 255)) | ((@bitCast(c_int, @as(c_uint, (__bsx))) & @as(c_int, 255)) << @intCast(@import("std").math.Log2Int(c_int), 8))))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.C) __uint32_t {
    var __bsx = arg___bsx;
    return ((((((__bsx) & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | (((__bsx) & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | (((__bsx) & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | (((__bsx) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24)));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.C) __uint64_t {
    var __bsx = arg___bsx;
    return @bitCast(__uint64_t, @truncate(c_ulong, (((((((((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, (__bsx))) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56)))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.C) __uint16_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.C) __uint32_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.C) __uint64_t {
    var __x = arg___x;
    return __x;
}
const struct_unnamed_6 = extern struct {
    __val: [16]c_ulong,
};
pub const __sigset_t = struct_unnamed_6;
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
const struct_unnamed_7 = extern struct {
    __fds_bits: [16]__fd_mask,
};
pub const fd_set = struct_unnamed_7;
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list,
    __next: [*c]struct___pthread_internal_list,
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist,
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_short,
    __elision: c_short,
    __list: __pthread_list_t,
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint,
    __writers: c_uint,
    __wrphase_futex: c_uint,
    __writers_futex: c_uint,
    __pad3: c_uint,
    __pad4: c_uint,
    __cur_writer: c_int,
    __shared: c_int,
    __rwelision: i8,
    __pad1: [7]u8,
    __pad2: c_ulong,
    __flags: c_uint,
};
const struct_unnamed_9 = extern struct {
    __low: c_uint,
    __high: c_uint,
};
const union_unnamed_8 = extern union {
    __wseq: c_ulonglong,
    __wseq32: struct_unnamed_9,
};
const struct_unnamed_11 = extern struct {
    __low: c_uint,
    __high: c_uint,
};
const union_unnamed_10 = extern union {
    __g1_start: c_ulonglong,
    __g1_start32: struct_unnamed_11,
};
pub const struct___pthread_cond_s = extern struct {
    unnamed_0: union_unnamed_8,
    unnamed_1: union_unnamed_10,
    __g_refs: [2]c_uint,
    __g_size: [2]c_uint,
    __g1_orig_size: c_uint,
    __wrefs: c_uint,
    __g_signals: [2]c_uint,
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
const struct_unnamed_12 = extern struct {
    __data: c_int,
};
pub const __once_flag = struct_unnamed_12;
pub const pthread_t = c_ulong;
const union_unnamed_13 = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_mutexattr_t = union_unnamed_13;
const union_unnamed_14 = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = union_unnamed_14;
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
const union_unnamed_15 = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_mutex_t = union_unnamed_15;
const union_unnamed_16 = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_cond_t = union_unnamed_16;
const union_unnamed_17 = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlock_t = union_unnamed_17;
const union_unnamed_18 = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = union_unnamed_18;
pub const pthread_spinlock_t = c_int;
const union_unnamed_19 = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrier_t = union_unnamed_19;
const union_unnamed_20 = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_barrierattr_t = union_unnamed_20;
pub extern fn random() c_long;
pub extern fn srandom(__seed: c_uint) void;
pub extern fn initstate(__seed: c_uint, __statebuf: [*c]u8, __statelen: usize) [*c]u8;
pub extern fn setstate(__statebuf: [*c]u8) [*c]u8;
pub const struct_random_data = extern struct {
    fptr: [*c]i32,
    rptr: [*c]i32,
    state: [*c]i32,
    rand_type: c_int,
    rand_deg: c_int,
    rand_sep: c_int,
    end_ptr: [*c]i32,
};
pub extern fn random_r(noalias __buf: [*c]struct_random_data, noalias __result: [*c]i32) c_int;
pub extern fn srandom_r(__seed: c_uint, __buf: [*c]struct_random_data) c_int;
pub extern fn initstate_r(__seed: c_uint, noalias __statebuf: [*c]u8, __statelen: usize, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn setstate_r(noalias __statebuf: [*c]u8, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn rand() c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn erand48(__xsubi: [*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn srand48(__seedval: c_long) void;
pub extern fn seed48(__seed16v: [*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48(__param: [*c]c_ushort) void;
pub const struct_drand48_data = extern struct {
    __x: [3]c_ushort,
    __old_x: [3]c_ushort,
    __c: c_ushort,
    __init: c_ushort,
    __a: c_ulonglong,
};
pub extern fn drand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn erand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn lrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn nrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn mrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn jrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn srand48_r(__seedval: c_long, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn seed48_r(__seed16v: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn lcong48_r(__param: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn malloc(__size: c_ulong) ?*c_void;
pub extern fn calloc(__nmemb: c_ulong, __size: c_ulong) ?*c_void;
pub extern fn realloc(__ptr: ?*c_void, __size: c_ulong) ?*c_void;
pub extern fn reallocarray(__ptr: ?*c_void, __nmemb: usize, __size: usize) ?*c_void;
pub extern fn free(__ptr: ?*c_void) void;
pub extern fn alloca(__size: c_ulong) ?*c_void;
pub extern fn valloc(__size: usize) ?*c_void;
pub extern fn posix_memalign(__memptr: [*c]?*c_void, __alignment: usize, __size: usize) c_int;
pub extern fn aligned_alloc(__alignment: usize, __size: usize) ?*c_void;
pub extern fn abort() noreturn;
pub extern fn atexit(__func: ?fn () callconv(.C) void) c_int;
pub extern fn at_quick_exit(__func: ?fn () callconv(.C) void) c_int;
pub extern fn on_exit(__func: ?fn (c_int, ?*c_void) callconv(.C) void, __arg: ?*c_void) c_int;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn quick_exit(__status: c_int) noreturn;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn getenv(__name: [*c]const u8) [*c]u8;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __replace: c_int) c_int;
pub extern fn unsetenv(__name: [*c]const u8) c_int;
pub extern fn clearenv() c_int;
pub extern fn mktemp(__template: [*c]u8) [*c]u8;
pub extern fn mkstemp(__template: [*c]u8) c_int;
pub extern fn mkstemps(__template: [*c]u8, __suffixlen: c_int) c_int;
pub extern fn mkdtemp(__template: [*c]u8) [*c]u8;
pub extern fn system(__command: [*c]const u8) c_int;
pub extern fn realpath(noalias __name: [*c]const u8, noalias __resolved: [*c]u8) [*c]u8;
pub const __compar_fn_t = ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int;
pub fn bsearch(arg___key: ?*const c_void, arg___base: ?*const c_void, arg___nmemb: usize, arg___size: usize, arg___compar: __compar_fn_t) callconv(.C) ?*c_void {
    var __key = arg___key;
    var __base = arg___base;
    var __nmemb = arg___nmemb;
    var __size = arg___size;
    var __compar = arg___compar;
    var __l: usize = undefined;
    var __u: usize = undefined;
    var __idx: usize = undefined;
    var __p: ?*const c_void = undefined;
    var __comparison: c_int = undefined;
    __l = @bitCast(usize, @as(c_long, @as(c_int, 0)));
    __u = __nmemb;
    while (__l < __u) {
        __idx = ((__l +% __u) / @bitCast(c_ulong, @as(c_long, @as(c_int, 2))));
        __p = @intToPtr(?*c_void, @ptrToInt(((@ptrCast([*c]const u8, @alignCast(@alignOf(u8), __base))) + (__idx *% __size))));
        __comparison = (__compar).?(__key, __p);
        if (__comparison < @as(c_int, 0)) __u = __idx else if (__comparison > @as(c_int, 0)) __l = (__idx +% @bitCast(c_ulong, @as(c_long, @as(c_int, 1)))) else return @intToPtr(?*c_void, @ptrToInt(__p));
    }
    return (@intToPtr(?*c_void, @as(c_int, 0)));
}
pub extern fn qsort(__base: ?*c_void, __nmemb: usize, __size: usize, __compar: __compar_fn_t) void;
pub extern fn abs(__x: c_int) c_int;
pub extern fn labs(__x: c_long) c_long;
pub extern fn llabs(__x: c_longlong) c_longlong;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn ecvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn fcvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn gcvt(__value: f64, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn qecvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qfcvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qgcvt(__value: c_longdouble, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn ecvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn fcvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qecvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qfcvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) c_int;
pub extern fn wctomb(__s: [*c]u8, __wchar: wchar_t) c_int;
pub extern fn mbstowcs(noalias __pwcs: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) usize;
pub extern fn wcstombs(noalias __s: [*c]u8, noalias __pwcs: [*c]const wchar_t, __n: usize) usize;
pub extern fn rpmatch(__response: [*c]const u8) c_int;
pub extern fn getsubopt(noalias __optionp: [*c][*c]u8, noalias __tokens: [*c]const [*c]u8, noalias __valuep: [*c][*c]u8) c_int;
pub extern fn getloadavg(__loadavg: [*c]f64, __nelem: c_int) c_int;
pub const struct_tm = extern struct {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: [*c]const u8,
};
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec,
    it_value: struct_timespec,
};
pub const struct_sigevent = opaque {};
pub const struct___locale_data = opaque {};
pub const struct___locale_struct = extern struct {
    __locales: [13]?*struct___locale_data,
    __ctype_b: [*c]const c_ushort,
    __ctype_tolower: [*c]const c_int,
    __ctype_toupper: [*c]const c_int,
    __names: [13][*c]const u8,
};
pub const __locale_t = [*c]struct___locale_struct;
pub const locale_t = __locale_t;
pub extern fn clock() clock_t;
pub extern fn time(__timer: [*c]time_t) time_t;
pub extern fn difftime(__time1: time_t, __time0: time_t) f64;
pub extern fn mktime(__tp: [*c]struct_tm) time_t;
pub extern fn strftime(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm) usize;
pub extern fn strftime_l(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm, __loc: locale_t) usize;
pub extern fn gmtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn localtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn gmtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn asctime(__tp: [*c]const struct_tm) [*c]u8;
pub extern fn ctime(__timer: [*c]const time_t) [*c]u8;
pub extern fn asctime_r(noalias __tp: [*c]const struct_tm, noalias __buf: [*c]u8) [*c]u8;
pub extern fn ctime_r(noalias __timer: [*c]const time_t, noalias __buf: [*c]u8) [*c]u8;
pub extern var __tzname: [2][*c]u8;
pub extern var __daylight: c_int;
pub extern var __timezone: c_long;
pub extern var tzname: [2][*c]u8;
pub extern fn tzset() void;
pub extern var daylight: c_int;
pub extern var timezone: c_long;
pub extern fn timegm(__tp: [*c]struct_tm) time_t;
pub extern fn timelocal(__tp: [*c]struct_tm) time_t;
pub extern fn dysize(__year: c_int) c_int;
pub extern fn nanosleep(__requested_time: [*c]const struct_timespec, __remaining: [*c]struct_timespec) c_int;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int, __req: [*c]const struct_timespec, __rem: [*c]struct_timespec) c_int;
pub extern fn clock_getcpuclockid(__pid: pid_t, __clock_id: [*c]clockid_t) c_int;
pub extern fn timer_create(__clock_id: clockid_t, noalias __evp: ?*struct_sigevent, noalias __timerid: [*c]timer_t) c_int;
pub extern fn timer_delete(__timerid: timer_t) c_int;
pub extern fn timer_settime(__timerid: timer_t, __flags: c_int, noalias __value: [*c]const struct_itimerspec, noalias __ovalue: [*c]struct_itimerspec) c_int;
pub extern fn timer_gettime(__timerid: timer_t, __value: [*c]struct_itimerspec) c_int;
pub extern fn timer_getoverrun(__timerid: timer_t) c_int;
pub extern fn timespec_get(__ts: [*c]struct_timespec, __base: c_int) c_int;
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
const union_unnamed_22 = extern union {
    __wch: c_uint,
    __wchb: [4]u8,
};
const struct_unnamed_21 = extern struct {
    __count: c_int,
    __value: union_unnamed_22,
};
pub const __mbstate_t = struct_unnamed_21;
pub const struct__G_fpos_t = extern struct {
    __pos: __off_t,
    __state: __mbstate_t,
};
pub const __fpos_t = struct__G_fpos_t;
pub const struct__G_fpos64_t = extern struct {
    __pos: __off64_t,
    __state: __mbstate_t,
};
pub const __fpos64_t = struct__G_fpos64_t;
pub const struct__IO_marker = opaque {};
pub const struct__IO_codecvt = opaque {};
pub const struct__IO_wide_data = opaque {};
pub const struct__IO_FILE = extern struct {
    _flags: c_int,
    _IO_read_ptr: [*c]u8,
    _IO_read_end: [*c]u8,
    _IO_read_base: [*c]u8,
    _IO_write_base: [*c]u8,
    _IO_write_ptr: [*c]u8,
    _IO_write_end: [*c]u8,
    _IO_buf_base: [*c]u8,
    _IO_buf_end: [*c]u8,
    _IO_save_base: [*c]u8,
    _IO_backup_base: [*c]u8,
    _IO_save_end: [*c]u8,
    _markers: ?*struct__IO_marker,
    _chain: [*c]struct__IO_FILE,
    _fileno: c_int,
    _flags2: c_int,
    _old_offset: __off_t,
    _cur_column: c_ushort,
    _vtable_offset: i8,
    _shortbuf: [1]u8,
    _lock: ?*_IO_lock_t,
    _offset: __off64_t,
    _codecvt: ?*struct__IO_codecvt,
    _wide_data: ?*struct__IO_wide_data,
    _freeres_list: [*c]struct__IO_FILE,
    _freeres_buf: ?*c_void,
    __pad5: usize,
    _mode: c_int,
    _unused2: [20]u8,
};
pub const __FILE = struct__IO_FILE;
pub const FILE = struct__IO_FILE;
pub const _IO_lock_t = c_void;
pub const fpos_t = __fpos_t;
pub extern var stdin: [*c]FILE;
pub extern var stdout: [*c]FILE;
pub extern var stderr: [*c]FILE;
pub extern fn remove(__filename: [*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn renameat(__oldfd: c_int, __old: [*c]const u8, __newfd: c_int, __new: [*c]const u8) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam(__s: [*c]u8) [*c]u8;
pub extern fn tmpnam_r(__s: [*c]u8) [*c]u8;
pub extern fn tempnam(__dir: [*c]const u8, __pfx: [*c]const u8) [*c]u8;
pub extern fn fclose(__stream: [*c]FILE) c_int;
pub extern fn fflush(__stream: [*c]FILE) c_int;
pub extern fn fflush_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fopen(__filename: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn freopen(noalias __filename: [*c]const u8, noalias __modes: [*c]const u8, noalias __stream: [*c]FILE) [*c]FILE;
pub extern fn fdopen(__fd: c_int, __modes: [*c]const u8) [*c]FILE;
pub extern fn fmemopen(__s: ?*c_void, __len: usize, __modes: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufloc: [*c][*c]u8, __sizeloc: [*c]usize) [*c]FILE;
pub extern fn setbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8) void;
pub extern fn setvbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __modes: c_int, __n: usize) c_int;
pub extern fn setbuffer(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __size: usize) void;
pub extern fn setlinebuf(__stream: [*c]FILE) void;
pub extern fn fprintf(__stream: [*c]FILE, __format: [*c]const u8, ...) c_int;
pub extern fn printf(__format: [*c]const u8, ...) c_int;
pub extern fn sprintf(__s: [*c]u8, __format: [*c]const u8, ...) c_int;
pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*c_void,
    reg_save_area: ?*c_void,
};
pub extern fn vfprintf(__s: [*c]FILE, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub fn vprintf(arg___fmt: [*c]const u8, arg___arg: [*c]struct___va_list_tag) callconv(.C) c_int {
    var __fmt = arg___fmt;
    var __arg = arg___arg;
    return vfprintf(stdout, __fmt, __arg);
}
pub extern fn vsprintf(__s: [*c]u8, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn snprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vsnprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vdprintf(__fd: c_int, noalias __fmt: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn dprintf(__fd: c_int, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, ...) c_int;
pub extern fn scanf(noalias __format: [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __s: [*c]FILE, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vsscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn fgetc(__stream: [*c]FILE) c_int;
pub extern fn getc(__stream: [*c]FILE) c_int;
pub fn getchar() callconv(.C) c_int {
    return getc(stdin);
} // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const getc_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:66:1
// /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const getchar_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:73:1
// /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const fgetc_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:56:1
pub extern fn fputc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc(__c: c_int, __stream: [*c]FILE) c_int;
pub fn putchar(arg___c: c_int) callconv(.C) c_int {
    var __c = arg___c;
    return putc(__c, stdout);
} // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const fputc_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:91:1
// /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const putc_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:101:1
// /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:402:33: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const putchar_unlocked = @compileError("unable to translate function"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/stdio.h:108:1
pub extern fn getw(__stream: [*c]FILE) c_int;
pub extern fn putw(__w: c_int, __stream: [*c]FILE) c_int;
pub extern fn fgets(noalias __s: [*c]u8, __n: c_int, noalias __stream: [*c]FILE) [*c]u8;
pub extern fn __getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getline(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn fputs(noalias __s: [*c]const u8, noalias __stream: [*c]FILE) c_int;
pub extern fn puts(__s: [*c]const u8) c_int;
pub extern fn ungetc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*c_void, __size: c_ulong, __n: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn fwrite(__ptr: ?*const c_void, __size: c_ulong, __n: c_ulong, __s: [*c]FILE) c_ulong;
pub extern fn fread_unlocked(noalias __ptr: ?*c_void, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias __ptr: ?*const c_void, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fseek(__stream: [*c]FILE, __off: c_long, __whence: c_int) c_int;
pub extern fn ftell(__stream: [*c]FILE) c_long;
pub extern fn rewind(__stream: [*c]FILE) void;
pub extern fn fseeko(__stream: [*c]FILE, __off: __off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) __off_t;
pub extern fn fgetpos(noalias __stream: [*c]FILE, noalias __pos: [*c]fpos_t) c_int;
pub extern fn fsetpos(__stream: [*c]FILE, __pos: [*c]const fpos_t) c_int;
pub extern fn clearerr(__stream: [*c]FILE) void;
pub extern fn feof(__stream: [*c]FILE) c_int;
pub extern fn ferror(__stream: [*c]FILE) c_int;
pub extern fn clearerr_unlocked(__stream: [*c]FILE) void;
pub fn feof_unlocked(arg___stream: [*c]FILE) callconv(.C) c_int {
    var __stream = arg___stream;
    return (((__stream).*._flags & @as(c_int, 16)) != @as(c_int, 0));
}
pub fn ferror_unlocked(arg___stream: [*c]FILE) callconv(.C) c_int {
    var __stream = arg___stream;
    return (((__stream).*._flags & @as(c_int, 32)) != @as(c_int, 0));
}
pub extern fn perror(__s: [*c]const u8) void;
pub extern fn fileno(__stream: [*c]FILE) c_int;
pub extern fn fileno_unlocked(__stream: [*c]FILE) c_int;
pub extern fn popen(__command: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn pclose(__stream: [*c]FILE) c_int;
pub extern fn ctermid(__s: [*c]u8) [*c]u8;
pub extern fn flockfile(__stream: [*c]FILE) void;
pub extern fn ftrylockfile(__stream: [*c]FILE) c_int;
pub extern fn funlockfile(__stream: [*c]FILE) void;
pub extern fn __uflow([*c]FILE) c_int;
pub extern fn __overflow([*c]FILE, c_int) c_int;
pub const struct_stack_st = opaque {};
pub const OPENSSL_STACK = struct_stack_st;
pub const OPENSSL_sk_compfunc = ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int;
pub const OPENSSL_sk_freefunc = ?fn (?*c_void) callconv(.C) void;
pub const OPENSSL_sk_copyfunc = ?fn (?*const c_void) callconv(.C) ?*c_void;
pub extern fn OPENSSL_sk_num(?*const OPENSSL_STACK) c_int;
pub extern fn OPENSSL_sk_value(?*const OPENSSL_STACK, c_int) ?*c_void;
pub extern fn OPENSSL_sk_set(st: ?*OPENSSL_STACK, i: c_int, data: ?*const c_void) ?*c_void;
pub extern fn OPENSSL_sk_new(cmp: OPENSSL_sk_compfunc) ?*OPENSSL_STACK;
pub extern fn OPENSSL_sk_new_null() ?*OPENSSL_STACK;
pub extern fn OPENSSL_sk_new_reserve(c: OPENSSL_sk_compfunc, n: c_int) ?*OPENSSL_STACK;
pub extern fn OPENSSL_sk_reserve(st: ?*OPENSSL_STACK, n: c_int) c_int;
pub extern fn OPENSSL_sk_free(?*OPENSSL_STACK) void;
pub extern fn OPENSSL_sk_pop_free(st: ?*OPENSSL_STACK, func: ?fn (?*c_void) callconv(.C) void) void;
pub extern fn OPENSSL_sk_deep_copy(?*const OPENSSL_STACK, c: OPENSSL_sk_copyfunc, f: OPENSSL_sk_freefunc) ?*OPENSSL_STACK;
pub extern fn OPENSSL_sk_insert(sk: ?*OPENSSL_STACK, data: ?*const c_void, where: c_int) c_int;
pub extern fn OPENSSL_sk_delete(st: ?*OPENSSL_STACK, loc: c_int) ?*c_void;
pub extern fn OPENSSL_sk_delete_ptr(st: ?*OPENSSL_STACK, p: ?*const c_void) ?*c_void;
pub extern fn OPENSSL_sk_find(st: ?*OPENSSL_STACK, data: ?*const c_void) c_int;
pub extern fn OPENSSL_sk_find_ex(st: ?*OPENSSL_STACK, data: ?*const c_void) c_int;
pub extern fn OPENSSL_sk_push(st: ?*OPENSSL_STACK, data: ?*const c_void) c_int;
pub extern fn OPENSSL_sk_unshift(st: ?*OPENSSL_STACK, data: ?*const c_void) c_int;
pub extern fn OPENSSL_sk_shift(st: ?*OPENSSL_STACK) ?*c_void;
pub extern fn OPENSSL_sk_pop(st: ?*OPENSSL_STACK) ?*c_void;
pub extern fn OPENSSL_sk_zero(st: ?*OPENSSL_STACK) void;
pub extern fn OPENSSL_sk_set_cmp_func(sk: ?*OPENSSL_STACK, cmp: OPENSSL_sk_compfunc) OPENSSL_sk_compfunc;
pub extern fn OPENSSL_sk_dup(st: ?*const OPENSSL_STACK) ?*OPENSSL_STACK;
pub extern fn OPENSSL_sk_sort(st: ?*OPENSSL_STACK) void;
pub extern fn OPENSSL_sk_is_sorted(st: ?*const OPENSSL_STACK) c_int;
pub const OPENSSL_STRING = [*c]u8;
pub const OPENSSL_CSTRING = [*c]const u8;
pub const struct_stack_st_OPENSSL_STRING = opaque {};
pub const sk_OPENSSL_STRING_compfunc = ?fn ([*c]const [*c]const u8, [*c]const [*c]const u8) callconv(.C) c_int;
pub const sk_OPENSSL_STRING_freefunc = ?fn ([*c]u8) callconv(.C) void;
pub const sk_OPENSSL_STRING_copyfunc = ?fn ([*c]const u8) callconv(.C) [*c]u8;
pub fn sk_OPENSSL_STRING_num(arg_sk: ?*const struct_stack_st_OPENSSL_STRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_STRING_value(arg_sk: ?*const struct_stack_st_OPENSSL_STRING, arg_idx: c_int) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_OPENSSL_STRING_new(arg_compare: sk_OPENSSL_STRING_compfunc) callconv(.C) ?*struct_stack_st_OPENSSL_STRING {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_OPENSSL_STRING, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_OPENSSL_STRING_new_null() callconv(.C) ?*struct_stack_st_OPENSSL_STRING {
    return @ptrCast(?*struct_stack_st_OPENSSL_STRING, OPENSSL_sk_new_null());
}
pub fn sk_OPENSSL_STRING_new_reserve(arg_compare: sk_OPENSSL_STRING_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_OPENSSL_STRING {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_OPENSSL_STRING, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_OPENSSL_STRING_reserve(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_OPENSSL_STRING_free(arg_sk: ?*struct_stack_st_OPENSSL_STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_STRING_zero(arg_sk: ?*struct_stack_st_OPENSSL_STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_STRING_delete(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_i: c_int) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_OPENSSL_STRING_delete_ptr(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_OPENSSL_STRING_push(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_STRING_unshift(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_STRING_pop(arg_sk: ?*struct_stack_st_OPENSSL_STRING) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_OPENSSL_STRING_shift(arg_sk: ?*struct_stack_st_OPENSSL_STRING) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_OPENSSL_STRING_pop_free(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_freefunc: sk_OPENSSL_STRING_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_OPENSSL_STRING_insert(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_OPENSSL_STRING_set(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_idx: c_int, arg_ptr: [*c]u8) callconv(.C) [*c]u8 {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]u8, @alignCast(@alignOf(u8), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_OPENSSL_STRING_find(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_STRING_find_ex(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_ptr: [*c]u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_STRING_sort(arg_sk: ?*struct_stack_st_OPENSSL_STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_STRING_is_sorted(arg_sk: ?*const struct_stack_st_OPENSSL_STRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_STRING_dup(arg_sk: ?*const struct_stack_st_OPENSSL_STRING) callconv(.C) ?*struct_stack_st_OPENSSL_STRING {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_OPENSSL_STRING, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_OPENSSL_STRING_deep_copy(arg_sk: ?*const struct_stack_st_OPENSSL_STRING, arg_copyfunc: sk_OPENSSL_STRING_copyfunc, arg_freefunc: sk_OPENSSL_STRING_freefunc) callconv(.C) ?*struct_stack_st_OPENSSL_STRING {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_OPENSSL_STRING, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_OPENSSL_STRING_set_cmp_func(arg_sk: ?*struct_stack_st_OPENSSL_STRING, arg_compare: sk_OPENSSL_STRING_compfunc) callconv(.C) sk_OPENSSL_STRING_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_OPENSSL_STRING_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const u8, [*c]const [*c]const u8) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_OPENSSL_CSTRING = opaque {};
pub const sk_OPENSSL_CSTRING_compfunc = ?fn ([*c]const [*c]const u8, [*c]const [*c]const u8) callconv(.C) c_int;
pub const sk_OPENSSL_CSTRING_freefunc = ?fn ([*c]u8) callconv(.C) void;
pub const sk_OPENSSL_CSTRING_copyfunc = ?fn ([*c]const u8) callconv(.C) [*c]u8;
pub fn sk_OPENSSL_CSTRING_num(arg_sk: ?*const struct_stack_st_OPENSSL_CSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_CSTRING_value(arg_sk: ?*const struct_stack_st_OPENSSL_CSTRING, arg_idx: c_int) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_OPENSSL_CSTRING_new(arg_compare: sk_OPENSSL_CSTRING_compfunc) callconv(.C) ?*struct_stack_st_OPENSSL_CSTRING {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_OPENSSL_CSTRING, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_OPENSSL_CSTRING_new_null() callconv(.C) ?*struct_stack_st_OPENSSL_CSTRING {
    return @ptrCast(?*struct_stack_st_OPENSSL_CSTRING, OPENSSL_sk_new_null());
}
pub fn sk_OPENSSL_CSTRING_new_reserve(arg_compare: sk_OPENSSL_CSTRING_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_OPENSSL_CSTRING {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_OPENSSL_CSTRING, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_OPENSSL_CSTRING_reserve(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_OPENSSL_CSTRING_free(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_CSTRING_zero(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_CSTRING_delete(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_i: c_int) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_OPENSSL_CSTRING_delete_ptr(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_OPENSSL_CSTRING_push(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_CSTRING_unshift(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_CSTRING_pop(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_OPENSSL_CSTRING_shift(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_OPENSSL_CSTRING_pop_free(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_freefunc: sk_OPENSSL_CSTRING_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_OPENSSL_CSTRING_insert(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_OPENSSL_CSTRING_set(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_idx: c_int, arg_ptr: [*c]const u8) callconv(.C) [*c]const u8 {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]const u8, @alignCast(@alignOf(u8), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_OPENSSL_CSTRING_find(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_CSTRING_find_ex(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_ptr: [*c]const u8) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_CSTRING_sort(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_CSTRING_is_sorted(arg_sk: ?*const struct_stack_st_OPENSSL_CSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_CSTRING_dup(arg_sk: ?*const struct_stack_st_OPENSSL_CSTRING) callconv(.C) ?*struct_stack_st_OPENSSL_CSTRING {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_OPENSSL_CSTRING, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_OPENSSL_CSTRING_deep_copy(arg_sk: ?*const struct_stack_st_OPENSSL_CSTRING, arg_copyfunc: sk_OPENSSL_CSTRING_copyfunc, arg_freefunc: sk_OPENSSL_CSTRING_freefunc) callconv(.C) ?*struct_stack_st_OPENSSL_CSTRING {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_OPENSSL_CSTRING, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_OPENSSL_CSTRING_set_cmp_func(arg_sk: ?*struct_stack_st_OPENSSL_CSTRING, arg_compare: sk_OPENSSL_CSTRING_compfunc) callconv(.C) sk_OPENSSL_CSTRING_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_OPENSSL_CSTRING_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const u8, [*c]const [*c]const u8) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const OPENSSL_BLOCK = ?*c_void;
pub const struct_stack_st_OPENSSL_BLOCK = opaque {};
pub const sk_OPENSSL_BLOCK_compfunc = ?fn ([*c]const ?*const c_void, [*c]const ?*const c_void) callconv(.C) c_int;
pub const sk_OPENSSL_BLOCK_freefunc = ?fn (?*c_void) callconv(.C) void;
pub const sk_OPENSSL_BLOCK_copyfunc = ?fn (?*const c_void) callconv(.C) ?*c_void;
pub fn sk_OPENSSL_BLOCK_num(arg_sk: ?*const struct_stack_st_OPENSSL_BLOCK) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_value(arg_sk: ?*const struct_stack_st_OPENSSL_BLOCK, arg_idx: c_int) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var idx = arg_idx;
    return OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx);
}
pub fn sk_OPENSSL_BLOCK_new(arg_compare: sk_OPENSSL_BLOCK_compfunc) callconv(.C) ?*struct_stack_st_OPENSSL_BLOCK {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_OPENSSL_BLOCK, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_OPENSSL_BLOCK_new_null() callconv(.C) ?*struct_stack_st_OPENSSL_BLOCK {
    return @ptrCast(?*struct_stack_st_OPENSSL_BLOCK, OPENSSL_sk_new_null());
}
pub fn sk_OPENSSL_BLOCK_new_reserve(arg_compare: sk_OPENSSL_BLOCK_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_OPENSSL_BLOCK {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_OPENSSL_BLOCK, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_OPENSSL_BLOCK_reserve(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_OPENSSL_BLOCK_free(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_zero(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_delete(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_i: c_int) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var i = arg_i;
    return OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i);
}
pub fn sk_OPENSSL_BLOCK_delete_ptr(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_push(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_unshift(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_pop(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK) callconv(.C) ?*c_void {
    var sk = arg_sk;
    return OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_shift(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK) callconv(.C) ?*c_void {
    var sk = arg_sk;
    return OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_pop_free(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_freefunc: sk_OPENSSL_BLOCK_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_OPENSSL_BLOCK_insert(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_OPENSSL_BLOCK_set(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_idx: c_int, arg_ptr: ?*c_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_find(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_find_ex(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_OPENSSL_BLOCK_sort(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_is_sorted(arg_sk: ?*const struct_stack_st_OPENSSL_BLOCK) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_OPENSSL_BLOCK_dup(arg_sk: ?*const struct_stack_st_OPENSSL_BLOCK) callconv(.C) ?*struct_stack_st_OPENSSL_BLOCK {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_OPENSSL_BLOCK, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_OPENSSL_BLOCK_deep_copy(arg_sk: ?*const struct_stack_st_OPENSSL_BLOCK, arg_copyfunc: sk_OPENSSL_BLOCK_copyfunc, arg_freefunc: sk_OPENSSL_BLOCK_freefunc) callconv(.C) ?*struct_stack_st_OPENSSL_BLOCK {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_OPENSSL_BLOCK, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_OPENSSL_BLOCK_set_cmp_func(arg_sk: ?*struct_stack_st_OPENSSL_BLOCK, arg_compare: sk_OPENSSL_BLOCK_compfunc) callconv(.C) sk_OPENSSL_BLOCK_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_OPENSSL_BLOCK_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const c_void, [*c]const ?*const c_void) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_asn1_string_st = extern struct {
    length: c_int,
    type: c_int,
    data: [*c]u8,
    flags: c_long,
};
pub const ASN1_INTEGER = struct_asn1_string_st;
pub const ASN1_ENUMERATED = struct_asn1_string_st;
pub const ASN1_BIT_STRING = struct_asn1_string_st;
pub const ASN1_OCTET_STRING = struct_asn1_string_st;
pub const ASN1_PRINTABLESTRING = struct_asn1_string_st;
pub const ASN1_T61STRING = struct_asn1_string_st;
pub const ASN1_IA5STRING = struct_asn1_string_st;
pub const ASN1_GENERALSTRING = struct_asn1_string_st;
pub const ASN1_UNIVERSALSTRING = struct_asn1_string_st;
pub const ASN1_BMPSTRING = struct_asn1_string_st;
pub const ASN1_UTCTIME = struct_asn1_string_st;
pub const ASN1_TIME = struct_asn1_string_st;
pub const ASN1_GENERALIZEDTIME = struct_asn1_string_st;
pub const ASN1_VISIBLESTRING = struct_asn1_string_st;
pub const ASN1_UTF8STRING = struct_asn1_string_st;
pub const ASN1_STRING = struct_asn1_string_st;
pub const ASN1_BOOLEAN = c_int;
pub const ASN1_NULL = c_int;
pub const struct_asn1_object_st = opaque {};
pub const ASN1_OBJECT = struct_asn1_object_st;
pub const struct_ASN1_ITEM_st = opaque {};
pub const ASN1_ITEM = struct_ASN1_ITEM_st;
pub const struct_asn1_pctx_st = opaque {};
pub const ASN1_PCTX = struct_asn1_pctx_st;
pub const struct_asn1_sctx_st = opaque {};
pub const ASN1_SCTX = struct_asn1_sctx_st;
pub const struct_dane_st = opaque {};
pub const struct_bio_st = opaque {};
pub const BIO = struct_bio_st;
pub const struct_bignum_st = opaque {};
pub const BIGNUM = struct_bignum_st;
pub const struct_bignum_ctx = opaque {};
pub const BN_CTX = struct_bignum_ctx;
pub const struct_bn_blinding_st = opaque {};
pub const BN_BLINDING = struct_bn_blinding_st;
pub const struct_bn_mont_ctx_st = opaque {};
pub const BN_MONT_CTX = struct_bn_mont_ctx_st;
pub const struct_bn_recp_ctx_st = opaque {};
pub const BN_RECP_CTX = struct_bn_recp_ctx_st;
pub const struct_bn_gencb_st = opaque {};
pub const BN_GENCB = struct_bn_gencb_st;
pub const struct_buf_mem_st = extern struct {
    length: usize,
    data: [*c]u8,
    max: usize,
    flags: c_ulong,
};
pub const BUF_MEM = struct_buf_mem_st;
pub const struct_evp_cipher_st = opaque {};
pub const EVP_CIPHER = struct_evp_cipher_st;
pub const struct_evp_cipher_ctx_st = opaque {};
pub const EVP_CIPHER_CTX = struct_evp_cipher_ctx_st;
pub const struct_evp_md_st = opaque {};
pub const EVP_MD = struct_evp_md_st;
pub const struct_evp_md_ctx_st = opaque {};
pub const EVP_MD_CTX = struct_evp_md_ctx_st;
pub const struct_evp_pkey_st = opaque {};
pub const EVP_PKEY = struct_evp_pkey_st;
pub const struct_evp_pkey_asn1_method_st = opaque {};
pub const EVP_PKEY_ASN1_METHOD = struct_evp_pkey_asn1_method_st;
pub const struct_evp_pkey_method_st = opaque {};
pub const EVP_PKEY_METHOD = struct_evp_pkey_method_st;
pub const struct_evp_pkey_ctx_st = opaque {};
pub const EVP_PKEY_CTX = struct_evp_pkey_ctx_st;
pub const struct_evp_Encode_Ctx_st = opaque {};
pub const EVP_ENCODE_CTX = struct_evp_Encode_Ctx_st;
pub const struct_hmac_ctx_st = opaque {};
pub const HMAC_CTX = struct_hmac_ctx_st;
pub const struct_dh_st = opaque {};
pub const DH = struct_dh_st;
pub const struct_dh_method = opaque {};
pub const DH_METHOD = struct_dh_method;
pub const struct_dsa_st = opaque {};
pub const DSA = struct_dsa_st;
pub const struct_dsa_method = opaque {};
pub const DSA_METHOD = struct_dsa_method;
pub const struct_rsa_st = opaque {};
pub const RSA = struct_rsa_st;
pub const struct_rsa_meth_st = opaque {};
pub const RSA_METHOD = struct_rsa_meth_st;
pub const struct_rsa_pss_params_st = extern struct {
    hashAlgorithm: [*c]X509_ALGOR,
    maskGenAlgorithm: [*c]X509_ALGOR,
    saltLength: [*c]ASN1_INTEGER,
    trailerField: [*c]ASN1_INTEGER,
    maskHash: [*c]X509_ALGOR,
};
pub const RSA_PSS_PARAMS = struct_rsa_pss_params_st;
pub const struct_ec_key_st = opaque {};
pub const EC_KEY = struct_ec_key_st;
pub const struct_ec_key_method_st = opaque {};
pub const EC_KEY_METHOD = struct_ec_key_method_st;
pub const struct_rand_meth_st = opaque {};
pub const RAND_METHOD = struct_rand_meth_st;
pub const struct_rand_drbg_st = opaque {};
pub const RAND_DRBG = struct_rand_drbg_st;
pub const struct_ssl_dane_st = opaque {};
pub const SSL_DANE = struct_ssl_dane_st;
pub const struct_x509_st = opaque {};
pub const X509 = struct_x509_st;
pub const struct_X509_algor_st = extern struct {
    algorithm: ?*ASN1_OBJECT,
    parameter: [*c]ASN1_TYPE,
};
pub const X509_ALGOR = struct_X509_algor_st;
pub const struct_X509_crl_st = opaque {};
pub const X509_CRL = struct_X509_crl_st;
pub const struct_x509_crl_method_st = opaque {};
pub const X509_CRL_METHOD = struct_x509_crl_method_st;
pub const struct_x509_revoked_st = opaque {};
pub const X509_REVOKED = struct_x509_revoked_st;
pub const struct_X509_name_st = opaque {};
pub const X509_NAME = struct_X509_name_st;
pub const struct_X509_pubkey_st = opaque {};
pub const X509_PUBKEY = struct_X509_pubkey_st;
pub const struct_x509_store_st = opaque {};
pub const X509_STORE = struct_x509_store_st;
pub const struct_x509_store_ctx_st = opaque {};
pub const X509_STORE_CTX = struct_x509_store_ctx_st;
pub const struct_x509_object_st = opaque {};
pub const X509_OBJECT = struct_x509_object_st;
pub const struct_x509_lookup_st = opaque {};
pub const X509_LOOKUP = struct_x509_lookup_st;
pub const struct_x509_lookup_method_st = opaque {};
pub const X509_LOOKUP_METHOD = struct_x509_lookup_method_st;
pub const struct_X509_VERIFY_PARAM_st = opaque {};
pub const X509_VERIFY_PARAM = struct_X509_VERIFY_PARAM_st;
pub const struct_x509_sig_info_st = opaque {};
pub const X509_SIG_INFO = struct_x509_sig_info_st;
pub const struct_pkcs8_priv_key_info_st = opaque {};
pub const PKCS8_PRIV_KEY_INFO = struct_pkcs8_priv_key_info_st;
pub const struct_v3_ext_ctx = opaque {};
pub const X509V3_CTX = struct_v3_ext_ctx;
pub const struct_conf_st = opaque {};
pub const CONF = struct_conf_st;
pub const struct_ossl_init_settings_st = opaque {};
pub const OPENSSL_INIT_SETTINGS = struct_ossl_init_settings_st;
pub const struct_ui_st = opaque {};
pub const UI = struct_ui_st;
pub const struct_ui_method_st = opaque {};
pub const UI_METHOD = struct_ui_method_st;
pub const struct_engine_st = opaque {};
pub const ENGINE = struct_engine_st;
pub const struct_ssl_st = opaque {};
pub const SSL = struct_ssl_st;
pub const struct_ssl_ctx_st = opaque {};
pub const SSL_CTX = struct_ssl_ctx_st;
pub const struct_comp_ctx_st = opaque {};
pub const COMP_CTX = struct_comp_ctx_st;
pub const struct_comp_method_st = opaque {};
pub const COMP_METHOD = struct_comp_method_st;
pub const struct_X509_POLICY_NODE_st = opaque {};
pub const X509_POLICY_NODE = struct_X509_POLICY_NODE_st;
pub const struct_X509_POLICY_LEVEL_st = opaque {};
pub const X509_POLICY_LEVEL = struct_X509_POLICY_LEVEL_st;
pub const struct_X509_POLICY_TREE_st = opaque {};
pub const X509_POLICY_TREE = struct_X509_POLICY_TREE_st;
pub const struct_X509_POLICY_CACHE_st = opaque {};
pub const X509_POLICY_CACHE = struct_X509_POLICY_CACHE_st;
pub const struct_AUTHORITY_KEYID_st = opaque {};
pub const AUTHORITY_KEYID = struct_AUTHORITY_KEYID_st;
pub const struct_DIST_POINT_st = opaque {};
pub const DIST_POINT = struct_DIST_POINT_st;
pub const struct_ISSUING_DIST_POINT_st = opaque {};
pub const ISSUING_DIST_POINT = struct_ISSUING_DIST_POINT_st;
pub const struct_NAME_CONSTRAINTS_st = opaque {};
pub const NAME_CONSTRAINTS = struct_NAME_CONSTRAINTS_st;
pub const struct_stack_st_void = opaque {};
pub const struct_crypto_ex_data_st = extern struct {
    sk: ?*struct_stack_st_void,
};
pub const CRYPTO_EX_DATA = struct_crypto_ex_data_st;
pub const struct_ocsp_req_ctx_st = opaque {};
pub const OCSP_REQ_CTX = struct_ocsp_req_ctx_st;
pub const struct_ocsp_response_st = opaque {};
pub const OCSP_RESPONSE = struct_ocsp_response_st;
pub const struct_ocsp_responder_id_st = opaque {};
pub const OCSP_RESPID = struct_ocsp_responder_id_st;
pub const struct_sct_st = opaque {};
pub const SCT = struct_sct_st;
pub const struct_sct_ctx_st = opaque {};
pub const SCT_CTX = struct_sct_ctx_st;
pub const struct_ctlog_st = opaque {};
pub const CTLOG = struct_ctlog_st;
pub const struct_ctlog_store_st = opaque {};
pub const CTLOG_STORE = struct_ctlog_store_st;
pub const struct_ct_policy_eval_ctx_st = opaque {};
pub const CT_POLICY_EVAL_CTX = struct_ct_policy_eval_ctx_st;
pub const struct_ossl_store_info_st = opaque {};
pub const OSSL_STORE_INFO = struct_ossl_store_info_st;
pub const struct_ossl_store_search_st = opaque {};
pub const OSSL_STORE_SEARCH = struct_ossl_store_search_st;
pub const ossl_intmax_t = intmax_t;
pub const ossl_uintmax_t = uintmax_t;
pub extern fn ERR_load_CRYPTO_strings() c_int;
const struct_unnamed_23 = extern struct {
    dummy: c_int,
};
pub const CRYPTO_dynlock = struct_unnamed_23;
pub const CRYPTO_RWLOCK = c_void;
pub extern fn CRYPTO_THREAD_lock_new() ?*CRYPTO_RWLOCK;
pub extern fn CRYPTO_THREAD_read_lock(lock: ?*CRYPTO_RWLOCK) c_int;
pub extern fn CRYPTO_THREAD_write_lock(lock: ?*CRYPTO_RWLOCK) c_int;
pub extern fn CRYPTO_THREAD_unlock(lock: ?*CRYPTO_RWLOCK) c_int;
pub extern fn CRYPTO_THREAD_lock_free(lock: ?*CRYPTO_RWLOCK) void;
pub extern fn CRYPTO_atomic_add(val: [*c]c_int, amount: c_int, ret: [*c]c_int, lock: ?*CRYPTO_RWLOCK) c_int;
pub const sk_void_compfunc = ?fn ([*c]const ?*const c_void, [*c]const ?*const c_void) callconv(.C) c_int;
pub const sk_void_freefunc = ?fn (?*c_void) callconv(.C) void;
pub const sk_void_copyfunc = ?fn (?*const c_void) callconv(.C) ?*c_void;
pub fn sk_void_num(arg_sk: ?*const struct_stack_st_void) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_void_value(arg_sk: ?*const struct_stack_st_void, arg_idx: c_int) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var idx = arg_idx;
    return OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx);
}
pub fn sk_void_new(arg_compare: sk_void_compfunc) callconv(.C) ?*struct_stack_st_void {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_void, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_void_new_null() callconv(.C) ?*struct_stack_st_void {
    return @ptrCast(?*struct_stack_st_void, OPENSSL_sk_new_null());
}
pub fn sk_void_new_reserve(arg_compare: sk_void_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_void {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_void, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_void_reserve(arg_sk: ?*struct_stack_st_void, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_void_free(arg_sk: ?*struct_stack_st_void) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_void_zero(arg_sk: ?*struct_stack_st_void) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_void_delete(arg_sk: ?*struct_stack_st_void, arg_i: c_int) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var i = arg_i;
    return OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i);
}
pub fn sk_void_delete_ptr(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_push(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_unshift(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_pop(arg_sk: ?*struct_stack_st_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    return OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_void_shift(arg_sk: ?*struct_stack_st_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    return OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_void_pop_free(arg_sk: ?*struct_stack_st_void, arg_freefunc: sk_void_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_void_insert(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_void_set(arg_sk: ?*struct_stack_st_void, arg_idx: c_int, arg_ptr: ?*c_void) callconv(.C) ?*c_void {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_find(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_find_ex(arg_sk: ?*struct_stack_st_void, arg_ptr: ?*c_void) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_void_sort(arg_sk: ?*struct_stack_st_void) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_void_is_sorted(arg_sk: ?*const struct_stack_st_void) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_void_dup(arg_sk: ?*const struct_stack_st_void) callconv(.C) ?*struct_stack_st_void {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_void, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_void_deep_copy(arg_sk: ?*const struct_stack_st_void, arg_copyfunc: sk_void_copyfunc, arg_freefunc: sk_void_freefunc) callconv(.C) ?*struct_stack_st_void {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_void, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_void_set_cmp_func(arg_sk: ?*struct_stack_st_void, arg_compare: sk_void_compfunc) callconv(.C) sk_void_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_void_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const c_void, [*c]const ?*const c_void) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn CRYPTO_mem_ctrl(mode: c_int) c_int;
pub extern fn OPENSSL_strlcpy(dst: [*c]u8, src: [*c]const u8, siz: usize) usize;
pub extern fn OPENSSL_strlcat(dst: [*c]u8, src: [*c]const u8, siz: usize) usize;
pub extern fn OPENSSL_strnlen(str: [*c]const u8, maxlen: usize) usize;
pub extern fn OPENSSL_buf2hexstr(buffer: [*c]const u8, len: c_long) [*c]u8;
pub extern fn OPENSSL_hexstr2buf(str: [*c]const u8, len: [*c]c_long) [*c]u8;
pub extern fn OPENSSL_hexchar2int(c: u8) c_int;
pub extern fn OpenSSL_version_num() c_ulong;
pub extern fn OpenSSL_version(type: c_int) [*c]const u8;
pub extern fn OPENSSL_issetugid() c_int;
pub const CRYPTO_EX_new = fn (?*c_void, ?*c_void, [*c]CRYPTO_EX_DATA, c_int, c_long, ?*c_void) callconv(.C) void;
pub const CRYPTO_EX_free = fn (?*c_void, ?*c_void, [*c]CRYPTO_EX_DATA, c_int, c_long, ?*c_void) callconv(.C) void;
pub const CRYPTO_EX_dup = fn ([*c]CRYPTO_EX_DATA, [*c]const CRYPTO_EX_DATA, ?*c_void, c_int, c_long, ?*c_void) callconv(.C) c_int;
pub extern fn CRYPTO_get_ex_new_index(class_index: c_int, argl: c_long, argp: ?*c_void, new_func: ?CRYPTO_EX_new, dup_func: ?CRYPTO_EX_dup, free_func: ?CRYPTO_EX_free) c_int;
pub extern fn CRYPTO_free_ex_index(class_index: c_int, idx: c_int) c_int;
pub extern fn CRYPTO_new_ex_data(class_index: c_int, obj: ?*c_void, ad: [*c]CRYPTO_EX_DATA) c_int;
pub extern fn CRYPTO_dup_ex_data(class_index: c_int, to: [*c]CRYPTO_EX_DATA, from: [*c]const CRYPTO_EX_DATA) c_int;
pub extern fn CRYPTO_free_ex_data(class_index: c_int, obj: ?*c_void, ad: [*c]CRYPTO_EX_DATA) void;
pub extern fn CRYPTO_set_ex_data(ad: [*c]CRYPTO_EX_DATA, idx: c_int, val: ?*c_void) c_int;
pub extern fn CRYPTO_get_ex_data(ad: [*c]const CRYPTO_EX_DATA, idx: c_int) ?*c_void;
pub const struct_crypto_threadid_st = extern struct {
    dummy: c_int,
};
pub const CRYPTO_THREADID = struct_crypto_threadid_st;
pub extern fn CRYPTO_set_mem_functions(m: ?fn (usize, [*c]const u8, c_int) callconv(.C) ?*c_void, r: ?fn (?*c_void, usize, [*c]const u8, c_int) callconv(.C) ?*c_void, f: ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) void) c_int;
pub extern fn CRYPTO_set_mem_debug(flag: c_int) c_int;
pub extern fn CRYPTO_get_mem_functions(m: [*c]?fn (usize, [*c]const u8, c_int) callconv(.C) ?*c_void, r: [*c]?fn (?*c_void, usize, [*c]const u8, c_int) callconv(.C) ?*c_void, f: [*c]?fn (?*c_void, [*c]const u8, c_int) callconv(.C) void) void;
pub extern fn CRYPTO_malloc(num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_zalloc(num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_memdup(str: ?*const c_void, siz: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_strdup(str: [*c]const u8, file: [*c]const u8, line: c_int) [*c]u8;
pub extern fn CRYPTO_strndup(str: [*c]const u8, s: usize, file: [*c]const u8, line: c_int) [*c]u8;
pub extern fn CRYPTO_free(ptr: ?*c_void, file: [*c]const u8, line: c_int) void;
pub extern fn CRYPTO_clear_free(ptr: ?*c_void, num: usize, file: [*c]const u8, line: c_int) void;
pub extern fn CRYPTO_realloc(addr: ?*c_void, num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_clear_realloc(addr: ?*c_void, old_num: usize, num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_secure_malloc_init(sz: usize, minsize: c_int) c_int;
pub extern fn CRYPTO_secure_malloc_done() c_int;
pub extern fn CRYPTO_secure_malloc(num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_secure_zalloc(num: usize, file: [*c]const u8, line: c_int) ?*c_void;
pub extern fn CRYPTO_secure_free(ptr: ?*c_void, file: [*c]const u8, line: c_int) void;
pub extern fn CRYPTO_secure_clear_free(ptr: ?*c_void, num: usize, file: [*c]const u8, line: c_int) void;
pub extern fn CRYPTO_secure_allocated(ptr: ?*const c_void) c_int;
pub extern fn CRYPTO_secure_malloc_initialized() c_int;
pub extern fn CRYPTO_secure_actual_size(ptr: ?*c_void) usize;
pub extern fn CRYPTO_secure_used() usize;
pub extern fn OPENSSL_cleanse(ptr: ?*c_void, len: usize) void;
pub extern fn OPENSSL_die(assertion: [*c]const u8, file: [*c]const u8, line: c_int) void;
pub extern fn OPENSSL_isservice() c_int;
pub extern fn FIPS_mode() c_int;
pub extern fn FIPS_mode_set(r: c_int) c_int;
pub extern fn OPENSSL_init() void;
pub extern fn OPENSSL_fork_prepare() void;
pub extern fn OPENSSL_fork_parent() void;
pub extern fn OPENSSL_fork_child() void;
pub extern fn OPENSSL_gmtime(timer: [*c]const time_t, result: [*c]struct_tm) [*c]struct_tm;
pub extern fn OPENSSL_gmtime_adj(tm: [*c]struct_tm, offset_day: c_int, offset_sec: c_long) c_int;
pub extern fn OPENSSL_gmtime_diff(pday: [*c]c_int, psec: [*c]c_int, from: [*c]const struct_tm, to: [*c]const struct_tm) c_int;
pub extern fn CRYPTO_memcmp(in_a: ?*const c_void, in_b: ?*const c_void, len: usize) c_int;
pub extern fn OPENSSL_cleanup() void;
pub extern fn OPENSSL_init_crypto(opts: u64, settings: ?*const OPENSSL_INIT_SETTINGS) c_int;
pub extern fn OPENSSL_atexit(handler: ?fn () callconv(.C) void) c_int;
pub extern fn OPENSSL_thread_stop() void;
pub extern fn OPENSSL_INIT_new() ?*OPENSSL_INIT_SETTINGS;
pub extern fn OPENSSL_INIT_set_config_filename(settings: ?*OPENSSL_INIT_SETTINGS, config_filename: [*c]const u8) c_int;
pub extern fn OPENSSL_INIT_set_config_file_flags(settings: ?*OPENSSL_INIT_SETTINGS, flags: c_ulong) void;
pub extern fn OPENSSL_INIT_set_config_appname(settings: ?*OPENSSL_INIT_SETTINGS, config_appname: [*c]const u8) c_int;
pub extern fn OPENSSL_INIT_free(settings: ?*OPENSSL_INIT_SETTINGS) void;
pub const struct_sched_param = extern struct {
    sched_priority: c_int,
};
pub const __cpu_mask = c_ulong;
const struct_unnamed_24 = extern struct {
    __bits: [16]__cpu_mask,
};
pub const cpu_set_t = struct_unnamed_24;
pub extern fn __sched_cpucount(__setsize: usize, __setp: [*c]const cpu_set_t) c_int;
pub extern fn __sched_cpualloc(__count: usize) [*c]cpu_set_t;
pub extern fn __sched_cpufree(__set: [*c]cpu_set_t) void;
pub extern fn sched_setparam(__pid: __pid_t, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getparam(__pid: __pid_t, __param: [*c]struct_sched_param) c_int;
pub extern fn sched_setscheduler(__pid: __pid_t, __policy: c_int, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getscheduler(__pid: __pid_t) c_int;
pub extern fn sched_yield() c_int;
pub extern fn sched_get_priority_max(__algorithm: c_int) c_int;
pub extern fn sched_get_priority_min(__algorithm: c_int) c_int;
pub extern fn sched_rr_get_interval(__pid: __pid_t, __t: [*c]struct_timespec) c_int;
pub const __jmp_buf = [8]c_long;
pub const PTHREAD_CREATE_JOINABLE = @enumToInt(enum_unnamed_25.PTHREAD_CREATE_JOINABLE);
pub const PTHREAD_CREATE_DETACHED = @enumToInt(enum_unnamed_25.PTHREAD_CREATE_DETACHED);
const enum_unnamed_25 = extern enum(c_int) {
    PTHREAD_CREATE_JOINABLE,
    PTHREAD_CREATE_DETACHED,
    _,
};
pub const PTHREAD_MUTEX_TIMED_NP = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_TIMED_NP);
pub const PTHREAD_MUTEX_RECURSIVE_NP = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_RECURSIVE_NP);
pub const PTHREAD_MUTEX_ERRORCHECK_NP = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_ERRORCHECK_NP);
pub const PTHREAD_MUTEX_ADAPTIVE_NP = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_ADAPTIVE_NP);
pub const PTHREAD_MUTEX_NORMAL = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_NORMAL);
pub const PTHREAD_MUTEX_RECURSIVE = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_RECURSIVE);
pub const PTHREAD_MUTEX_ERRORCHECK = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_ERRORCHECK);
pub const PTHREAD_MUTEX_DEFAULT = @enumToInt(enum_unnamed_26.PTHREAD_MUTEX_DEFAULT);
const enum_unnamed_26 = extern enum(c_int) {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0,
    _,
};
pub const PTHREAD_MUTEX_STALLED = @enumToInt(enum_unnamed_27.PTHREAD_MUTEX_STALLED);
pub const PTHREAD_MUTEX_STALLED_NP = @enumToInt(enum_unnamed_27.PTHREAD_MUTEX_STALLED_NP);
pub const PTHREAD_MUTEX_ROBUST = @enumToInt(enum_unnamed_27.PTHREAD_MUTEX_ROBUST);
pub const PTHREAD_MUTEX_ROBUST_NP = @enumToInt(enum_unnamed_27.PTHREAD_MUTEX_ROBUST_NP);
const enum_unnamed_27 = extern enum(c_int) {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1,
    _,
};
pub const PTHREAD_PRIO_NONE = @enumToInt(enum_unnamed_28.PTHREAD_PRIO_NONE);
pub const PTHREAD_PRIO_INHERIT = @enumToInt(enum_unnamed_28.PTHREAD_PRIO_INHERIT);
pub const PTHREAD_PRIO_PROTECT = @enumToInt(enum_unnamed_28.PTHREAD_PRIO_PROTECT);
const enum_unnamed_28 = extern enum(c_int) {
    PTHREAD_PRIO_NONE,
    PTHREAD_PRIO_INHERIT,
    PTHREAD_PRIO_PROTECT,
    _,
};
pub const PTHREAD_RWLOCK_PREFER_READER_NP = @enumToInt(enum_unnamed_29.PTHREAD_RWLOCK_PREFER_READER_NP);
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP = @enumToInt(enum_unnamed_29.PTHREAD_RWLOCK_PREFER_WRITER_NP);
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = @enumToInt(enum_unnamed_29.PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);
pub const PTHREAD_RWLOCK_DEFAULT_NP = @enumToInt(enum_unnamed_29.PTHREAD_RWLOCK_DEFAULT_NP);
const enum_unnamed_29 = extern enum(c_int) {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0,
    _,
};
pub const PTHREAD_INHERIT_SCHED = @enumToInt(enum_unnamed_30.PTHREAD_INHERIT_SCHED);
pub const PTHREAD_EXPLICIT_SCHED = @enumToInt(enum_unnamed_30.PTHREAD_EXPLICIT_SCHED);
const enum_unnamed_30 = extern enum(c_int) {
    PTHREAD_INHERIT_SCHED,
    PTHREAD_EXPLICIT_SCHED,
    _,
};
pub const PTHREAD_SCOPE_SYSTEM = @enumToInt(enum_unnamed_31.PTHREAD_SCOPE_SYSTEM);
pub const PTHREAD_SCOPE_PROCESS = @enumToInt(enum_unnamed_31.PTHREAD_SCOPE_PROCESS);
const enum_unnamed_31 = extern enum(c_int) {
    PTHREAD_SCOPE_SYSTEM,
    PTHREAD_SCOPE_PROCESS,
    _,
};
pub const PTHREAD_PROCESS_PRIVATE = @enumToInt(enum_unnamed_32.PTHREAD_PROCESS_PRIVATE);
pub const PTHREAD_PROCESS_SHARED = @enumToInt(enum_unnamed_32.PTHREAD_PROCESS_SHARED);
const enum_unnamed_32 = extern enum(c_int) {
    PTHREAD_PROCESS_PRIVATE,
    PTHREAD_PROCESS_SHARED,
    _,
};
pub const struct__pthread_cleanup_buffer = extern struct {
    __routine: ?fn (?*c_void) callconv(.C) void,
    __arg: ?*c_void,
    __canceltype: c_int,
    __prev: [*c]struct__pthread_cleanup_buffer,
};
pub const PTHREAD_CANCEL_ENABLE = @enumToInt(enum_unnamed_33.PTHREAD_CANCEL_ENABLE);
pub const PTHREAD_CANCEL_DISABLE = @enumToInt(enum_unnamed_33.PTHREAD_CANCEL_DISABLE);
const enum_unnamed_33 = extern enum(c_int) {
    PTHREAD_CANCEL_ENABLE,
    PTHREAD_CANCEL_DISABLE,
    _,
};
pub const PTHREAD_CANCEL_DEFERRED = @enumToInt(enum_unnamed_34.PTHREAD_CANCEL_DEFERRED);
pub const PTHREAD_CANCEL_ASYNCHRONOUS = @enumToInt(enum_unnamed_34.PTHREAD_CANCEL_ASYNCHRONOUS);
const enum_unnamed_34 = extern enum(c_int) {
    PTHREAD_CANCEL_DEFERRED,
    PTHREAD_CANCEL_ASYNCHRONOUS,
    _,
};
pub extern fn pthread_create(noalias __newthread: [*c]pthread_t, noalias __attr: [*c]const pthread_attr_t, __start_routine: ?fn (?*c_void) callconv(.C) ?*c_void, noalias __arg: ?*c_void) c_int;
pub extern fn pthread_exit(__retval: ?*c_void) noreturn;
pub extern fn pthread_join(__th: pthread_t, __thread_return: [*c]?*c_void) c_int;
pub extern fn pthread_detach(__th: pthread_t) c_int;
pub extern fn pthread_self() pthread_t;
pub fn pthread_equal(arg___thread1: pthread_t, arg___thread2: pthread_t) callconv(.C) c_int {
    var __thread1 = arg___thread1;
    var __thread2 = arg___thread2;
    return (__thread1 == __thread2);
}
pub extern fn pthread_attr_init(__attr: [*c]pthread_attr_t) c_int;
pub extern fn pthread_attr_destroy(__attr: [*c]pthread_attr_t) c_int;
pub extern fn pthread_attr_getdetachstate(__attr: [*c]const pthread_attr_t, __detachstate: [*c]c_int) c_int;
pub extern fn pthread_attr_setdetachstate(__attr: [*c]pthread_attr_t, __detachstate: c_int) c_int;
pub extern fn pthread_attr_getguardsize(__attr: [*c]const pthread_attr_t, __guardsize: [*c]usize) c_int;
pub extern fn pthread_attr_setguardsize(__attr: [*c]pthread_attr_t, __guardsize: usize) c_int;
pub extern fn pthread_attr_getschedparam(noalias __attr: [*c]const pthread_attr_t, noalias __param: [*c]struct_sched_param) c_int;
pub extern fn pthread_attr_setschedparam(noalias __attr: [*c]pthread_attr_t, noalias __param: [*c]const struct_sched_param) c_int;
pub extern fn pthread_attr_getschedpolicy(noalias __attr: [*c]const pthread_attr_t, noalias __policy: [*c]c_int) c_int;
pub extern fn pthread_attr_setschedpolicy(__attr: [*c]pthread_attr_t, __policy: c_int) c_int;
pub extern fn pthread_attr_getinheritsched(noalias __attr: [*c]const pthread_attr_t, noalias __inherit: [*c]c_int) c_int;
pub extern fn pthread_attr_setinheritsched(__attr: [*c]pthread_attr_t, __inherit: c_int) c_int;
pub extern fn pthread_attr_getscope(noalias __attr: [*c]const pthread_attr_t, noalias __scope: [*c]c_int) c_int;
pub extern fn pthread_attr_setscope(__attr: [*c]pthread_attr_t, __scope: c_int) c_int;
pub extern fn pthread_attr_getstackaddr(noalias __attr: [*c]const pthread_attr_t, noalias __stackaddr: [*c]?*c_void) c_int;
pub extern fn pthread_attr_setstackaddr(__attr: [*c]pthread_attr_t, __stackaddr: ?*c_void) c_int;
pub extern fn pthread_attr_getstacksize(noalias __attr: [*c]const pthread_attr_t, noalias __stacksize: [*c]usize) c_int;
pub extern fn pthread_attr_setstacksize(__attr: [*c]pthread_attr_t, __stacksize: usize) c_int;
pub extern fn pthread_attr_getstack(noalias __attr: [*c]const pthread_attr_t, noalias __stackaddr: [*c]?*c_void, noalias __stacksize: [*c]usize) c_int;
pub extern fn pthread_attr_setstack(__attr: [*c]pthread_attr_t, __stackaddr: ?*c_void, __stacksize: usize) c_int;
pub extern fn pthread_setschedparam(__target_thread: pthread_t, __policy: c_int, __param: [*c]const struct_sched_param) c_int;
pub extern fn pthread_getschedparam(__target_thread: pthread_t, noalias __policy: [*c]c_int, noalias __param: [*c]struct_sched_param) c_int;
pub extern fn pthread_setschedprio(__target_thread: pthread_t, __prio: c_int) c_int;
pub extern fn pthread_once(__once_control: [*c]pthread_once_t, __init_routine: ?fn () callconv(.C) void) c_int;
pub extern fn pthread_setcancelstate(__state: c_int, __oldstate: [*c]c_int) c_int;
pub extern fn pthread_setcanceltype(__type: c_int, __oldtype: [*c]c_int) c_int;
pub extern fn pthread_cancel(__th: pthread_t) c_int;
pub extern fn pthread_testcancel() void;
const struct_unnamed_36 = extern struct {
    __cancel_jmp_buf: __jmp_buf,
    __mask_was_saved: c_int,
};
const struct_unnamed_35 = extern struct {
    __cancel_jmp_buf: [1]struct_unnamed_36,
    __pad: [4]?*c_void,
};
pub const __pthread_unwind_buf_t = struct_unnamed_35;
pub const struct___pthread_cleanup_frame = extern struct {
    __cancel_routine: ?fn (?*c_void) callconv(.C) void,
    __cancel_arg: ?*c_void,
    __do_it: c_int,
    __cancel_type: c_int,
};
pub extern fn __pthread_register_cancel(__buf: [*c]__pthread_unwind_buf_t) void;
pub extern fn __pthread_unregister_cancel(__buf: [*c]__pthread_unwind_buf_t) void;
pub extern fn __pthread_unwind_next(__buf: [*c]__pthread_unwind_buf_t) noreturn;
pub const struct___jmp_buf_tag = opaque {};
pub extern fn __sigsetjmp(__env: ?*struct___jmp_buf_tag, __savemask: c_int) c_int;
pub extern fn pthread_mutex_init(__mutex: [*c]pthread_mutex_t, __mutexattr: [*c]const pthread_mutexattr_t) c_int;
pub extern fn pthread_mutex_destroy(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_trylock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_lock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_timedlock(noalias __mutex: [*c]pthread_mutex_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_mutex_unlock(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutex_getprioceiling(noalias __mutex: [*c]const pthread_mutex_t, noalias __prioceiling: [*c]c_int) c_int;
pub extern fn pthread_mutex_setprioceiling(noalias __mutex: [*c]pthread_mutex_t, __prioceiling: c_int, noalias __old_ceiling: [*c]c_int) c_int;
pub extern fn pthread_mutex_consistent(__mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_mutexattr_init(__attr: [*c]pthread_mutexattr_t) c_int;
pub extern fn pthread_mutexattr_destroy(__attr: [*c]pthread_mutexattr_t) c_int;
pub extern fn pthread_mutexattr_getpshared(noalias __attr: [*c]const pthread_mutexattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setpshared(__attr: [*c]pthread_mutexattr_t, __pshared: c_int) c_int;
pub extern fn pthread_mutexattr_gettype(noalias __attr: [*c]const pthread_mutexattr_t, noalias __kind: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_settype(__attr: [*c]pthread_mutexattr_t, __kind: c_int) c_int;
pub extern fn pthread_mutexattr_getprotocol(noalias __attr: [*c]const pthread_mutexattr_t, noalias __protocol: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setprotocol(__attr: [*c]pthread_mutexattr_t, __protocol: c_int) c_int;
pub extern fn pthread_mutexattr_getprioceiling(noalias __attr: [*c]const pthread_mutexattr_t, noalias __prioceiling: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setprioceiling(__attr: [*c]pthread_mutexattr_t, __prioceiling: c_int) c_int;
pub extern fn pthread_mutexattr_getrobust(__attr: [*c]const pthread_mutexattr_t, __robustness: [*c]c_int) c_int;
pub extern fn pthread_mutexattr_setrobust(__attr: [*c]pthread_mutexattr_t, __robustness: c_int) c_int;
pub extern fn pthread_rwlock_init(noalias __rwlock: [*c]pthread_rwlock_t, noalias __attr: [*c]const pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlock_destroy(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_rdlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_tryrdlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_timedrdlock(noalias __rwlock: [*c]pthread_rwlock_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_rwlock_wrlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_trywrlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlock_timedwrlock(noalias __rwlock: [*c]pthread_rwlock_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_rwlock_unlock(__rwlock: [*c]pthread_rwlock_t) c_int;
pub extern fn pthread_rwlockattr_init(__attr: [*c]pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlockattr_destroy(__attr: [*c]pthread_rwlockattr_t) c_int;
pub extern fn pthread_rwlockattr_getpshared(noalias __attr: [*c]const pthread_rwlockattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_rwlockattr_setpshared(__attr: [*c]pthread_rwlockattr_t, __pshared: c_int) c_int;
pub extern fn pthread_rwlockattr_getkind_np(noalias __attr: [*c]const pthread_rwlockattr_t, noalias __pref: [*c]c_int) c_int;
pub extern fn pthread_rwlockattr_setkind_np(__attr: [*c]pthread_rwlockattr_t, __pref: c_int) c_int;
pub extern fn pthread_cond_init(noalias __cond: [*c]pthread_cond_t, noalias __cond_attr: [*c]const pthread_condattr_t) c_int;
pub extern fn pthread_cond_destroy(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_signal(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_broadcast(__cond: [*c]pthread_cond_t) c_int;
pub extern fn pthread_cond_wait(noalias __cond: [*c]pthread_cond_t, noalias __mutex: [*c]pthread_mutex_t) c_int;
pub extern fn pthread_cond_timedwait(noalias __cond: [*c]pthread_cond_t, noalias __mutex: [*c]pthread_mutex_t, noalias __abstime: [*c]const struct_timespec) c_int;
pub extern fn pthread_condattr_init(__attr: [*c]pthread_condattr_t) c_int;
pub extern fn pthread_condattr_destroy(__attr: [*c]pthread_condattr_t) c_int;
pub extern fn pthread_condattr_getpshared(noalias __attr: [*c]const pthread_condattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_condattr_setpshared(__attr: [*c]pthread_condattr_t, __pshared: c_int) c_int;
pub extern fn pthread_condattr_getclock(noalias __attr: [*c]const pthread_condattr_t, noalias __clock_id: [*c]__clockid_t) c_int;
pub extern fn pthread_condattr_setclock(__attr: [*c]pthread_condattr_t, __clock_id: __clockid_t) c_int;
pub extern fn pthread_spin_init(__lock: [*c]volatile pthread_spinlock_t, __pshared: c_int) c_int;
pub extern fn pthread_spin_destroy(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_lock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_trylock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_spin_unlock(__lock: [*c]volatile pthread_spinlock_t) c_int;
pub extern fn pthread_barrier_init(noalias __barrier: [*c]pthread_barrier_t, noalias __attr: [*c]const pthread_barrierattr_t, __count: c_uint) c_int;
pub extern fn pthread_barrier_destroy(__barrier: [*c]pthread_barrier_t) c_int;
pub extern fn pthread_barrier_wait(__barrier: [*c]pthread_barrier_t) c_int;
pub extern fn pthread_barrierattr_init(__attr: [*c]pthread_barrierattr_t) c_int;
pub extern fn pthread_barrierattr_destroy(__attr: [*c]pthread_barrierattr_t) c_int;
pub extern fn pthread_barrierattr_getpshared(noalias __attr: [*c]const pthread_barrierattr_t, noalias __pshared: [*c]c_int) c_int;
pub extern fn pthread_barrierattr_setpshared(__attr: [*c]pthread_barrierattr_t, __pshared: c_int) c_int;
pub extern fn pthread_key_create(__key: [*c]pthread_key_t, __destr_function: ?fn (?*c_void) callconv(.C) void) c_int;
pub extern fn pthread_key_delete(__key: pthread_key_t) c_int;
pub extern fn pthread_getspecific(__key: pthread_key_t) ?*c_void;
pub extern fn pthread_setspecific(__key: pthread_key_t, __pointer: ?*const c_void) c_int;
pub extern fn pthread_getcpuclockid(__thread_id: pthread_t, __clock_id: [*c]__clockid_t) c_int;
pub extern fn pthread_atfork(__prepare: ?fn () callconv(.C) void, __parent: ?fn () callconv(.C) void, __child: ?fn () callconv(.C) void) c_int;
pub const CRYPTO_ONCE = pthread_once_t;
pub const CRYPTO_THREAD_LOCAL = pthread_key_t;
pub const CRYPTO_THREAD_ID = pthread_t;
pub extern fn CRYPTO_THREAD_run_once(once: [*c]CRYPTO_ONCE, init: ?fn () callconv(.C) void) c_int;
pub extern fn CRYPTO_THREAD_init_local(key: [*c]CRYPTO_THREAD_LOCAL, cleanup: ?fn (?*c_void) callconv(.C) void) c_int;
pub extern fn CRYPTO_THREAD_get_local(key: [*c]CRYPTO_THREAD_LOCAL) ?*c_void;
pub extern fn CRYPTO_THREAD_set_local(key: [*c]CRYPTO_THREAD_LOCAL, val: ?*c_void) c_int;
pub extern fn CRYPTO_THREAD_cleanup_local(key: [*c]CRYPTO_THREAD_LOCAL) c_int;
pub extern fn CRYPTO_THREAD_get_current_id() CRYPTO_THREAD_ID;
pub extern fn CRYPTO_THREAD_compare_id(a: CRYPTO_THREAD_ID, b: CRYPTO_THREAD_ID) c_int;
pub extern fn ERR_load_COMP_strings() c_int;
pub extern fn COMP_CTX_new(meth: ?*COMP_METHOD) ?*COMP_CTX;
pub extern fn COMP_CTX_get_method(ctx: ?*const COMP_CTX) ?*const COMP_METHOD;
pub extern fn COMP_CTX_get_type(comp: ?*const COMP_CTX) c_int;
pub extern fn COMP_get_type(meth: ?*const COMP_METHOD) c_int;
pub extern fn COMP_get_name(meth: ?*const COMP_METHOD) [*c]const u8;
pub extern fn COMP_CTX_free(ctx: ?*COMP_CTX) void;
pub extern fn COMP_compress_block(ctx: ?*COMP_CTX, out: [*c]u8, olen: c_int, in: [*c]u8, ilen: c_int) c_int;
pub extern fn COMP_expand_block(ctx: ?*COMP_CTX, out: [*c]u8, olen: c_int, in: [*c]u8, ilen: c_int) c_int;
pub extern fn COMP_zlib() ?*COMP_METHOD;
pub extern fn ERR_load_BIO_strings() c_int;
pub const union_bio_addr_st = opaque {};
pub const BIO_ADDR = union_bio_addr_st;
pub const struct_bio_addrinfo_st = opaque {};
pub const BIO_ADDRINFO = struct_bio_addrinfo_st;
pub extern fn BIO_get_new_index() c_int;
pub extern fn BIO_set_flags(b: ?*BIO, flags: c_int) void;
pub extern fn BIO_test_flags(b: ?*const BIO, flags: c_int) c_int;
pub extern fn BIO_clear_flags(b: ?*BIO, flags: c_int) void;
pub const BIO_callback_fn = ?fn (?*BIO, c_int, [*c]const u8, c_int, c_long, c_long) callconv(.C) c_long;
pub const BIO_callback_fn_ex = ?fn (?*BIO, c_int, [*c]const u8, usize, c_int, c_long, c_int, [*c]usize) callconv(.C) c_long;
pub extern fn BIO_get_callback(b: ?*const BIO) BIO_callback_fn;
pub extern fn BIO_set_callback(b: ?*BIO, callback: BIO_callback_fn) void;
pub extern fn BIO_get_callback_ex(b: ?*const BIO) BIO_callback_fn_ex;
pub extern fn BIO_set_callback_ex(b: ?*BIO, callback: BIO_callback_fn_ex) void;
pub extern fn BIO_get_callback_arg(b: ?*const BIO) [*c]u8;
pub extern fn BIO_set_callback_arg(b: ?*BIO, arg: [*c]u8) void;
pub const struct_bio_method_st = opaque {};
pub const BIO_METHOD = struct_bio_method_st;
pub extern fn BIO_method_name(b: ?*const BIO) [*c]const u8;
pub extern fn BIO_method_type(b: ?*const BIO) c_int;
pub const BIO_info_cb = fn (?*BIO, c_int, c_int) callconv(.C) c_int;
pub const bio_info_cb = BIO_info_cb;
pub const struct_stack_st_BIO = opaque {};
pub const sk_BIO_compfunc = ?fn ([*c]const ?*const BIO, [*c]const ?*const BIO) callconv(.C) c_int;
pub const sk_BIO_freefunc = ?fn (?*BIO) callconv(.C) void;
pub const sk_BIO_copyfunc = ?fn (?*const BIO) callconv(.C) ?*BIO;
pub fn sk_BIO_num(arg_sk: ?*const struct_stack_st_BIO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_BIO_value(arg_sk: ?*const struct_stack_st_BIO, arg_idx: c_int) callconv(.C) ?*BIO {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*BIO, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_BIO_new(arg_compare: sk_BIO_compfunc) callconv(.C) ?*struct_stack_st_BIO {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_BIO, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_BIO_new_null() callconv(.C) ?*struct_stack_st_BIO {
    return @ptrCast(?*struct_stack_st_BIO, OPENSSL_sk_new_null());
}
pub fn sk_BIO_new_reserve(arg_compare: sk_BIO_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_BIO {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_BIO, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_BIO_reserve(arg_sk: ?*struct_stack_st_BIO, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_BIO_free(arg_sk: ?*struct_stack_st_BIO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_BIO_zero(arg_sk: ?*struct_stack_st_BIO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_BIO_delete(arg_sk: ?*struct_stack_st_BIO, arg_i: c_int) callconv(.C) ?*BIO {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*BIO, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_BIO_delete_ptr(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO) callconv(.C) ?*BIO {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*BIO, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_BIO_push(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_BIO_unshift(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_BIO_pop(arg_sk: ?*struct_stack_st_BIO) callconv(.C) ?*BIO {
    var sk = arg_sk;
    return @ptrCast(?*BIO, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_BIO_shift(arg_sk: ?*struct_stack_st_BIO) callconv(.C) ?*BIO {
    var sk = arg_sk;
    return @ptrCast(?*BIO, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_BIO_pop_free(arg_sk: ?*struct_stack_st_BIO, arg_freefunc: sk_BIO_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_BIO_insert(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_BIO_set(arg_sk: ?*struct_stack_st_BIO, arg_idx: c_int, arg_ptr: ?*BIO) callconv(.C) ?*BIO {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*BIO, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_BIO_find(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_BIO_find_ex(arg_sk: ?*struct_stack_st_BIO, arg_ptr: ?*BIO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_BIO_sort(arg_sk: ?*struct_stack_st_BIO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_BIO_is_sorted(arg_sk: ?*const struct_stack_st_BIO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_BIO_dup(arg_sk: ?*const struct_stack_st_BIO) callconv(.C) ?*struct_stack_st_BIO {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_BIO, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_BIO_deep_copy(arg_sk: ?*const struct_stack_st_BIO, arg_copyfunc: sk_BIO_copyfunc, arg_freefunc: sk_BIO_freefunc) callconv(.C) ?*struct_stack_st_BIO {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_BIO, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_BIO_set_cmp_func(arg_sk: ?*struct_stack_st_BIO, arg_compare: sk_BIO_compfunc) callconv(.C) sk_BIO_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_BIO_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const BIO, [*c]const ?*const BIO) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const asn1_ps_func = fn (?*BIO, [*c][*c]u8, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub extern fn BIO_ctrl_pending(b: ?*BIO) usize;
pub extern fn BIO_ctrl_wpending(b: ?*BIO) usize;
pub extern fn BIO_ctrl_get_write_guarantee(b: ?*BIO) usize;
pub extern fn BIO_ctrl_get_read_request(b: ?*BIO) usize;
pub extern fn BIO_ctrl_reset_read_request(b: ?*BIO) c_int;
pub extern fn BIO_set_ex_data(bio: ?*BIO, idx: c_int, data: ?*c_void) c_int;
pub extern fn BIO_get_ex_data(bio: ?*BIO, idx: c_int) ?*c_void;
pub extern fn BIO_number_read(bio: ?*BIO) u64;
pub extern fn BIO_number_written(bio: ?*BIO) u64;
pub extern fn BIO_asn1_set_prefix(b: ?*BIO, prefix: ?asn1_ps_func, prefix_free: ?asn1_ps_func) c_int;
pub extern fn BIO_asn1_get_prefix(b: ?*BIO, pprefix: [*c]?asn1_ps_func, pprefix_free: [*c]?asn1_ps_func) c_int;
pub extern fn BIO_asn1_set_suffix(b: ?*BIO, suffix: ?asn1_ps_func, suffix_free: ?asn1_ps_func) c_int;
pub extern fn BIO_asn1_get_suffix(b: ?*BIO, psuffix: [*c]?asn1_ps_func, psuffix_free: [*c]?asn1_ps_func) c_int;
pub extern fn BIO_s_file() ?*const BIO_METHOD;
pub extern fn BIO_new_file(filename: [*c]const u8, mode: [*c]const u8) ?*BIO;
pub extern fn BIO_new_fp(stream: [*c]FILE, close_flag: c_int) ?*BIO;
pub extern fn BIO_new(type: ?*const BIO_METHOD) ?*BIO;
pub extern fn BIO_free(a: ?*BIO) c_int;
pub extern fn BIO_set_data(a: ?*BIO, ptr: ?*c_void) void;
pub extern fn BIO_get_data(a: ?*BIO) ?*c_void;
pub extern fn BIO_set_init(a: ?*BIO, init: c_int) void;
pub extern fn BIO_get_init(a: ?*BIO) c_int;
pub extern fn BIO_set_shutdown(a: ?*BIO, shut: c_int) void;
pub extern fn BIO_get_shutdown(a: ?*BIO) c_int;
pub extern fn BIO_vfree(a: ?*BIO) void;
pub extern fn BIO_up_ref(a: ?*BIO) c_int;
pub extern fn BIO_read(b: ?*BIO, data: ?*c_void, dlen: c_int) c_int;
pub extern fn BIO_read_ex(b: ?*BIO, data: ?*c_void, dlen: usize, readbytes: [*c]usize) c_int;
pub extern fn BIO_gets(bp: ?*BIO, buf: [*c]u8, size: c_int) c_int;
pub extern fn BIO_write(b: ?*BIO, data: ?*const c_void, dlen: c_int) c_int;
pub extern fn BIO_write_ex(b: ?*BIO, data: ?*const c_void, dlen: usize, written: [*c]usize) c_int;
pub extern fn BIO_puts(bp: ?*BIO, buf: [*c]const u8) c_int;
pub extern fn BIO_indent(b: ?*BIO, indent: c_int, max: c_int) c_int;
pub extern fn BIO_ctrl(bp: ?*BIO, cmd: c_int, larg: c_long, parg: ?*c_void) c_long;
pub extern fn BIO_callback_ctrl(b: ?*BIO, cmd: c_int, fp: ?BIO_info_cb) c_long;
pub extern fn BIO_ptr_ctrl(bp: ?*BIO, cmd: c_int, larg: c_long) ?*c_void;
pub extern fn BIO_int_ctrl(bp: ?*BIO, cmd: c_int, larg: c_long, iarg: c_int) c_long;
pub extern fn BIO_push(b: ?*BIO, append: ?*BIO) ?*BIO;
pub extern fn BIO_pop(b: ?*BIO) ?*BIO;
pub extern fn BIO_free_all(a: ?*BIO) void;
pub extern fn BIO_find_type(b: ?*BIO, bio_type: c_int) ?*BIO;
pub extern fn BIO_next(b: ?*BIO) ?*BIO;
pub extern fn BIO_set_next(b: ?*BIO, next: ?*BIO) void;
pub extern fn BIO_get_retry_BIO(bio: ?*BIO, reason: [*c]c_int) ?*BIO;
pub extern fn BIO_get_retry_reason(bio: ?*BIO) c_int;
pub extern fn BIO_set_retry_reason(bio: ?*BIO, reason: c_int) void;
pub extern fn BIO_dup_chain(in: ?*BIO) ?*BIO;
pub extern fn BIO_nread0(bio: ?*BIO, buf: [*c][*c]u8) c_int;
pub extern fn BIO_nread(bio: ?*BIO, buf: [*c][*c]u8, num: c_int) c_int;
pub extern fn BIO_nwrite0(bio: ?*BIO, buf: [*c][*c]u8) c_int;
pub extern fn BIO_nwrite(bio: ?*BIO, buf: [*c][*c]u8, num: c_int) c_int;
pub extern fn BIO_debug_callback(bio: ?*BIO, cmd: c_int, argp: [*c]const u8, argi: c_int, argl: c_long, ret: c_long) c_long;
pub extern fn BIO_s_mem() ?*const BIO_METHOD;
pub extern fn BIO_s_secmem() ?*const BIO_METHOD;
pub extern fn BIO_new_mem_buf(buf: ?*const c_void, len: c_int) ?*BIO;
pub extern fn BIO_s_socket() ?*const BIO_METHOD;
pub extern fn BIO_s_connect() ?*const BIO_METHOD;
pub extern fn BIO_s_accept() ?*const BIO_METHOD;
pub extern fn BIO_s_fd() ?*const BIO_METHOD;
pub extern fn BIO_s_log() ?*const BIO_METHOD;
pub extern fn BIO_s_bio() ?*const BIO_METHOD;
pub extern fn BIO_s_null() ?*const BIO_METHOD;
pub extern fn BIO_f_null() ?*const BIO_METHOD;
pub extern fn BIO_f_buffer() ?*const BIO_METHOD;
pub extern fn BIO_f_linebuffer() ?*const BIO_METHOD;
pub extern fn BIO_f_nbio_test() ?*const BIO_METHOD;
pub extern fn BIO_s_datagram() ?*const BIO_METHOD;
pub extern fn BIO_dgram_non_fatal_error(@"error": c_int) c_int;
pub extern fn BIO_new_dgram(fd: c_int, close_flag: c_int) ?*BIO;
pub extern fn BIO_sock_should_retry(i: c_int) c_int;
pub extern fn BIO_sock_non_fatal_error(@"error": c_int) c_int;
pub extern fn BIO_fd_should_retry(i: c_int) c_int;
pub extern fn BIO_fd_non_fatal_error(@"error": c_int) c_int;
pub extern fn BIO_dump_cb(cb: ?fn (?*const c_void, usize, ?*c_void) callconv(.C) c_int, u: ?*c_void, s: [*c]const u8, len: c_int) c_int;
pub extern fn BIO_dump_indent_cb(cb: ?fn (?*const c_void, usize, ?*c_void) callconv(.C) c_int, u: ?*c_void, s: [*c]const u8, len: c_int, indent: c_int) c_int;
pub extern fn BIO_dump(b: ?*BIO, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn BIO_dump_indent(b: ?*BIO, bytes: [*c]const u8, len: c_int, indent: c_int) c_int;
pub extern fn BIO_dump_fp(fp: [*c]FILE, s: [*c]const u8, len: c_int) c_int;
pub extern fn BIO_dump_indent_fp(fp: [*c]FILE, s: [*c]const u8, len: c_int, indent: c_int) c_int;
pub extern fn BIO_hex_string(out: ?*BIO, indent: c_int, width: c_int, data: [*c]u8, datalen: c_int) c_int;
pub extern fn BIO_ADDR_new() ?*BIO_ADDR;
pub extern fn BIO_ADDR_rawmake(ap: ?*BIO_ADDR, family: c_int, where: ?*const c_void, wherelen: usize, port: c_ushort) c_int;
pub extern fn BIO_ADDR_free(?*BIO_ADDR) void;
pub extern fn BIO_ADDR_clear(ap: ?*BIO_ADDR) void;
pub extern fn BIO_ADDR_family(ap: ?*const BIO_ADDR) c_int;
pub extern fn BIO_ADDR_rawaddress(ap: ?*const BIO_ADDR, p: ?*c_void, l: [*c]usize) c_int;
pub extern fn BIO_ADDR_rawport(ap: ?*const BIO_ADDR) c_ushort;
pub extern fn BIO_ADDR_hostname_string(ap: ?*const BIO_ADDR, numeric: c_int) [*c]u8;
pub extern fn BIO_ADDR_service_string(ap: ?*const BIO_ADDR, numeric: c_int) [*c]u8;
pub extern fn BIO_ADDR_path_string(ap: ?*const BIO_ADDR) [*c]u8;
pub extern fn BIO_ADDRINFO_next(bai: ?*const BIO_ADDRINFO) ?*const BIO_ADDRINFO;
pub extern fn BIO_ADDRINFO_family(bai: ?*const BIO_ADDRINFO) c_int;
pub extern fn BIO_ADDRINFO_socktype(bai: ?*const BIO_ADDRINFO) c_int;
pub extern fn BIO_ADDRINFO_protocol(bai: ?*const BIO_ADDRINFO) c_int;
pub extern fn BIO_ADDRINFO_address(bai: ?*const BIO_ADDRINFO) ?*const BIO_ADDR;
pub extern fn BIO_ADDRINFO_free(bai: ?*BIO_ADDRINFO) void;
pub const BIO_PARSE_PRIO_HOST = @enumToInt(enum_BIO_hostserv_priorities.BIO_PARSE_PRIO_HOST);
pub const BIO_PARSE_PRIO_SERV = @enumToInt(enum_BIO_hostserv_priorities.BIO_PARSE_PRIO_SERV);
pub const enum_BIO_hostserv_priorities = extern enum(c_int) {
    BIO_PARSE_PRIO_HOST,
    BIO_PARSE_PRIO_SERV,
    _,
};
pub extern fn BIO_parse_hostserv(hostserv: [*c]const u8, host: [*c][*c]u8, service: [*c][*c]u8, hostserv_prio: enum_BIO_hostserv_priorities) c_int;
pub const BIO_LOOKUP_CLIENT = @enumToInt(enum_BIO_lookup_type.BIO_LOOKUP_CLIENT);
pub const BIO_LOOKUP_SERVER = @enumToInt(enum_BIO_lookup_type.BIO_LOOKUP_SERVER);
pub const enum_BIO_lookup_type = extern enum(c_int) {
    BIO_LOOKUP_CLIENT,
    BIO_LOOKUP_SERVER,
    _,
};
pub extern fn BIO_lookup(host: [*c]const u8, service: [*c]const u8, lookup_type: enum_BIO_lookup_type, family: c_int, socktype: c_int, res: [*c]?*BIO_ADDRINFO) c_int;
pub extern fn BIO_lookup_ex(host: [*c]const u8, service: [*c]const u8, lookup_type: c_int, family: c_int, socktype: c_int, protocol: c_int, res: [*c]?*BIO_ADDRINFO) c_int;
pub extern fn BIO_sock_error(sock: c_int) c_int;
pub extern fn BIO_socket_ioctl(fd: c_int, type: c_long, arg: ?*c_void) c_int;
pub extern fn BIO_socket_nbio(fd: c_int, mode: c_int) c_int;
pub extern fn BIO_sock_init() c_int;
pub extern fn BIO_set_tcp_ndelay(sock: c_int, turn_on: c_int) c_int;
pub const struct_hostent = opaque {};
pub extern fn BIO_gethostbyname(name: [*c]const u8) ?*struct_hostent;
pub extern fn BIO_get_port(str: [*c]const u8, port_ptr: [*c]c_ushort) c_int;
pub extern fn BIO_get_host_ip(str: [*c]const u8, ip: [*c]u8) c_int;
pub extern fn BIO_get_accept_socket(host_port: [*c]u8, mode: c_int) c_int;
pub extern fn BIO_accept(sock: c_int, ip_port: [*c][*c]u8) c_int;
pub const union_BIO_sock_info_u = extern union {
    addr: ?*BIO_ADDR,
};
pub const BIO_SOCK_INFO_ADDRESS = @enumToInt(enum_BIO_sock_info_type.BIO_SOCK_INFO_ADDRESS);
pub const enum_BIO_sock_info_type = extern enum(c_int) {
    BIO_SOCK_INFO_ADDRESS,
    _,
};
pub extern fn BIO_sock_info(sock: c_int, type: enum_BIO_sock_info_type, info: [*c]union_BIO_sock_info_u) c_int;
pub extern fn BIO_socket(domain: c_int, socktype: c_int, protocol: c_int, options: c_int) c_int;
pub extern fn BIO_connect(sock: c_int, addr: ?*const BIO_ADDR, options: c_int) c_int;
pub extern fn BIO_bind(sock: c_int, addr: ?*const BIO_ADDR, options: c_int) c_int;
pub extern fn BIO_listen(sock: c_int, addr: ?*const BIO_ADDR, options: c_int) c_int;
pub extern fn BIO_accept_ex(accept_sock: c_int, addr: ?*BIO_ADDR, options: c_int) c_int;
pub extern fn BIO_closesocket(sock: c_int) c_int;
pub extern fn BIO_new_socket(sock: c_int, close_flag: c_int) ?*BIO;
pub extern fn BIO_new_connect(host_port: [*c]const u8) ?*BIO;
pub extern fn BIO_new_accept(host_port: [*c]const u8) ?*BIO;
pub extern fn BIO_new_fd(fd: c_int, close_flag: c_int) ?*BIO;
pub extern fn BIO_new_bio_pair(bio1: [*c]?*BIO, writebuf1: usize, bio2: [*c]?*BIO, writebuf2: usize) c_int;
pub extern fn BIO_copy_next_retry(b: ?*BIO) void;
pub extern fn BIO_printf(bio: ?*BIO, format: [*c]const u8, ...) c_int;
pub extern fn BIO_vprintf(bio: ?*BIO, format: [*c]const u8, args: [*c]struct___va_list_tag) c_int;
pub extern fn BIO_snprintf(buf: [*c]u8, n: usize, format: [*c]const u8, ...) c_int;
pub extern fn BIO_vsnprintf(buf: [*c]u8, n: usize, format: [*c]const u8, args: [*c]struct___va_list_tag) c_int;
pub extern fn BIO_meth_new(type: c_int, name: [*c]const u8) ?*BIO_METHOD;
pub extern fn BIO_meth_free(biom: ?*BIO_METHOD) void;
pub extern fn BIO_meth_get_write(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]const u8, c_int) callconv(.C) c_int;
pub extern fn BIO_meth_get_write_ex(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]const u8, usize, [*c]usize) callconv(.C) c_int;
pub extern fn BIO_meth_set_write(biom: ?*BIO_METHOD, write: ?fn (?*BIO, [*c]const u8, c_int) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_set_write_ex(biom: ?*BIO_METHOD, bwrite: ?fn (?*BIO, [*c]const u8, usize, [*c]usize) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_read(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]u8, c_int) callconv(.C) c_int;
pub extern fn BIO_meth_get_read_ex(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]u8, usize, [*c]usize) callconv(.C) c_int;
pub extern fn BIO_meth_set_read(biom: ?*BIO_METHOD, read: ?fn (?*BIO, [*c]u8, c_int) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_set_read_ex(biom: ?*BIO_METHOD, bread: ?fn (?*BIO, [*c]u8, usize, [*c]usize) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_puts(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]const u8) callconv(.C) c_int;
pub extern fn BIO_meth_set_puts(biom: ?*BIO_METHOD, puts: ?fn (?*BIO, [*c]const u8) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_gets(biom: ?*const BIO_METHOD) ?fn (?*BIO, [*c]u8, c_int) callconv(.C) c_int;
pub extern fn BIO_meth_set_gets(biom: ?*BIO_METHOD, gets: ?fn (?*BIO, [*c]u8, c_int) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_ctrl(biom: ?*const BIO_METHOD) ?fn (?*BIO, c_int, c_long, ?*c_void) callconv(.C) c_long;
pub extern fn BIO_meth_set_ctrl(biom: ?*BIO_METHOD, ctrl: ?fn (?*BIO, c_int, c_long, ?*c_void) callconv(.C) c_long) c_int;
pub extern fn BIO_meth_get_create(bion: ?*const BIO_METHOD) ?fn (?*BIO) callconv(.C) c_int;
pub extern fn BIO_meth_set_create(biom: ?*BIO_METHOD, create: ?fn (?*BIO) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_destroy(biom: ?*const BIO_METHOD) ?fn (?*BIO) callconv(.C) c_int;
pub extern fn BIO_meth_set_destroy(biom: ?*BIO_METHOD, destroy: ?fn (?*BIO) callconv(.C) c_int) c_int;
pub extern fn BIO_meth_get_callback_ctrl(biom: ?*const BIO_METHOD) ?fn (?*BIO, c_int, ?BIO_info_cb) callconv(.C) c_long;
pub extern fn BIO_meth_set_callback_ctrl(biom: ?*BIO_METHOD, callback_ctrl: ?fn (?*BIO, c_int, ?BIO_info_cb) callconv(.C) c_long) c_int;
pub extern fn ERR_load_BUF_strings() c_int;
pub const ptrdiff_t = c_long;
const struct_unnamed_37 = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const max_align_t = struct_unnamed_37;
pub extern fn BUF_MEM_new() [*c]BUF_MEM;
pub extern fn BUF_MEM_new_ex(flags: c_ulong) [*c]BUF_MEM;
pub extern fn BUF_MEM_free(a: [*c]BUF_MEM) void;
pub extern fn BUF_MEM_grow(str: [*c]BUF_MEM, len: usize) usize;
pub extern fn BUF_MEM_grow_clean(str: [*c]BUF_MEM, len: usize) usize;
pub extern fn BUF_reverse(out: [*c]u8, in: [*c]const u8, siz: usize) void;
pub extern fn ERR_load_EVP_strings() c_int;
pub extern fn ERR_load_ASN1_strings() c_int;
pub extern fn ERR_load_BN_strings() c_int;
pub extern fn BN_set_flags(b: ?*BIGNUM, n: c_int) void;
pub extern fn BN_get_flags(b: ?*const BIGNUM, n: c_int) c_int;
pub extern fn BN_with_flags(dest: ?*BIGNUM, b: ?*const BIGNUM, flags: c_int) void;
pub extern fn BN_GENCB_call(cb: ?*BN_GENCB, a: c_int, b: c_int) c_int;
pub extern fn BN_GENCB_new() ?*BN_GENCB;
pub extern fn BN_GENCB_free(cb: ?*BN_GENCB) void;
pub extern fn BN_GENCB_set_old(gencb: ?*BN_GENCB, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, cb_arg: ?*c_void) void;
pub extern fn BN_GENCB_set(gencb: ?*BN_GENCB, callback: ?fn (c_int, c_int, ?*BN_GENCB) callconv(.C) c_int, cb_arg: ?*c_void) void;
pub extern fn BN_GENCB_get_arg(cb: ?*BN_GENCB) ?*c_void;
pub extern fn BN_abs_is_word(a: ?*const BIGNUM, w: c_ulong) c_int;
pub extern fn BN_is_zero(a: ?*const BIGNUM) c_int;
pub extern fn BN_is_one(a: ?*const BIGNUM) c_int;
pub extern fn BN_is_word(a: ?*const BIGNUM, w: c_ulong) c_int;
pub extern fn BN_is_odd(a: ?*const BIGNUM) c_int;
pub extern fn BN_zero_ex(a: ?*BIGNUM) void;
pub extern fn BN_value_one() ?*const BIGNUM;
pub extern fn BN_options() [*c]u8;
pub extern fn BN_CTX_new() ?*BN_CTX;
pub extern fn BN_CTX_secure_new() ?*BN_CTX;
pub extern fn BN_CTX_free(c: ?*BN_CTX) void;
pub extern fn BN_CTX_start(ctx: ?*BN_CTX) void;
pub extern fn BN_CTX_get(ctx: ?*BN_CTX) ?*BIGNUM;
pub extern fn BN_CTX_end(ctx: ?*BN_CTX) void;
pub extern fn BN_rand(rnd: ?*BIGNUM, bits: c_int, top: c_int, bottom: c_int) c_int;
pub extern fn BN_priv_rand(rnd: ?*BIGNUM, bits: c_int, top: c_int, bottom: c_int) c_int;
pub extern fn BN_rand_range(rnd: ?*BIGNUM, range: ?*const BIGNUM) c_int;
pub extern fn BN_priv_rand_range(rnd: ?*BIGNUM, range: ?*const BIGNUM) c_int;
pub extern fn BN_pseudo_rand(rnd: ?*BIGNUM, bits: c_int, top: c_int, bottom: c_int) c_int;
pub extern fn BN_pseudo_rand_range(rnd: ?*BIGNUM, range: ?*const BIGNUM) c_int;
pub extern fn BN_num_bits(a: ?*const BIGNUM) c_int;
pub extern fn BN_num_bits_word(l: c_ulong) c_int;
pub extern fn BN_security_bits(L: c_int, N: c_int) c_int;
pub extern fn BN_new() ?*BIGNUM;
pub extern fn BN_secure_new() ?*BIGNUM;
pub extern fn BN_clear_free(a: ?*BIGNUM) void;
pub extern fn BN_copy(a: ?*BIGNUM, b: ?*const BIGNUM) ?*BIGNUM;
pub extern fn BN_swap(a: ?*BIGNUM, b: ?*BIGNUM) void;
pub extern fn BN_bin2bn(s: [*c]const u8, len: c_int, ret: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_bn2bin(a: ?*const BIGNUM, to: [*c]u8) c_int;
pub extern fn BN_bn2binpad(a: ?*const BIGNUM, to: [*c]u8, tolen: c_int) c_int;
pub extern fn BN_lebin2bn(s: [*c]const u8, len: c_int, ret: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_bn2lebinpad(a: ?*const BIGNUM, to: [*c]u8, tolen: c_int) c_int;
pub extern fn BN_mpi2bn(s: [*c]const u8, len: c_int, ret: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_bn2mpi(a: ?*const BIGNUM, to: [*c]u8) c_int;
pub extern fn BN_sub(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_usub(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_uadd(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_add(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_mul(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_sqr(r: ?*BIGNUM, a: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_set_negative(b: ?*BIGNUM, n: c_int) void;
pub extern fn BN_is_negative(b: ?*const BIGNUM) c_int;
pub extern fn BN_div(dv: ?*BIGNUM, rem: ?*BIGNUM, m: ?*const BIGNUM, d: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_nnmod(r: ?*BIGNUM, m: ?*const BIGNUM, d: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_add(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_add_quick(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, m: ?*const BIGNUM) c_int;
pub extern fn BN_mod_sub(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_sub_quick(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, m: ?*const BIGNUM) c_int;
pub extern fn BN_mod_mul(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_sqr(r: ?*BIGNUM, a: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_lshift1(r: ?*BIGNUM, a: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_lshift1_quick(r: ?*BIGNUM, a: ?*const BIGNUM, m: ?*const BIGNUM) c_int;
pub extern fn BN_mod_lshift(r: ?*BIGNUM, a: ?*const BIGNUM, n: c_int, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_lshift_quick(r: ?*BIGNUM, a: ?*const BIGNUM, n: c_int, m: ?*const BIGNUM) c_int;
pub extern fn BN_mod_word(a: ?*const BIGNUM, w: c_ulong) c_ulong;
pub extern fn BN_div_word(a: ?*BIGNUM, w: c_ulong) c_ulong;
pub extern fn BN_mul_word(a: ?*BIGNUM, w: c_ulong) c_int;
pub extern fn BN_add_word(a: ?*BIGNUM, w: c_ulong) c_int;
pub extern fn BN_sub_word(a: ?*BIGNUM, w: c_ulong) c_int;
pub extern fn BN_set_word(a: ?*BIGNUM, w: c_ulong) c_int;
pub extern fn BN_get_word(a: ?*const BIGNUM) c_ulong;
pub extern fn BN_cmp(a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_free(a: ?*BIGNUM) void;
pub extern fn BN_is_bit_set(a: ?*const BIGNUM, n: c_int) c_int;
pub extern fn BN_lshift(r: ?*BIGNUM, a: ?*const BIGNUM, n: c_int) c_int;
pub extern fn BN_lshift1(r: ?*BIGNUM, a: ?*const BIGNUM) c_int;
pub extern fn BN_exp(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_exp(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_exp_mont(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX, m_ctx: ?*BN_MONT_CTX) c_int;
pub extern fn BN_mod_exp_mont_consttime(rr: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX, in_mont: ?*BN_MONT_CTX) c_int;
pub extern fn BN_mod_exp_mont_word(r: ?*BIGNUM, a: c_ulong, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX, m_ctx: ?*BN_MONT_CTX) c_int;
pub extern fn BN_mod_exp2_mont(r: ?*BIGNUM, a1: ?*const BIGNUM, p1: ?*const BIGNUM, a2: ?*const BIGNUM, p2: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX, m_ctx: ?*BN_MONT_CTX) c_int;
pub extern fn BN_mod_exp_simple(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mask_bits(a: ?*BIGNUM, n: c_int) c_int;
pub extern fn BN_print_fp(fp: [*c]FILE, a: ?*const BIGNUM) c_int;
pub extern fn BN_print(bio: ?*BIO, a: ?*const BIGNUM) c_int;
pub extern fn BN_reciprocal(r: ?*BIGNUM, m: ?*const BIGNUM, len: c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_rshift(r: ?*BIGNUM, a: ?*const BIGNUM, n: c_int) c_int;
pub extern fn BN_rshift1(r: ?*BIGNUM, a: ?*const BIGNUM) c_int;
pub extern fn BN_clear(a: ?*BIGNUM) void;
pub extern fn BN_dup(a: ?*const BIGNUM) ?*BIGNUM;
pub extern fn BN_ucmp(a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_set_bit(a: ?*BIGNUM, n: c_int) c_int;
pub extern fn BN_clear_bit(a: ?*BIGNUM, n: c_int) c_int;
pub extern fn BN_bn2hex(a: ?*const BIGNUM) [*c]u8;
pub extern fn BN_bn2dec(a: ?*const BIGNUM) [*c]u8;
pub extern fn BN_hex2bn(a: [*c]?*BIGNUM, str: [*c]const u8) c_int;
pub extern fn BN_dec2bn(a: [*c]?*BIGNUM, str: [*c]const u8) c_int;
pub extern fn BN_asc2bn(a: [*c]?*BIGNUM, str: [*c]const u8) c_int;
pub extern fn BN_gcd(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_kronecker(a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_inverse(ret: ?*BIGNUM, a: ?*const BIGNUM, n: ?*const BIGNUM, ctx: ?*BN_CTX) ?*BIGNUM;
pub extern fn BN_mod_sqrt(ret: ?*BIGNUM, a: ?*const BIGNUM, n: ?*const BIGNUM, ctx: ?*BN_CTX) ?*BIGNUM;
pub extern fn BN_consttime_swap(swap: c_ulong, a: ?*BIGNUM, b: ?*BIGNUM, nwords: c_int) void;
pub extern fn BN_generate_prime(ret: ?*BIGNUM, bits: c_int, safe: c_int, add: ?*const BIGNUM, rem: ?*const BIGNUM, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, cb_arg: ?*c_void) ?*BIGNUM;
pub extern fn BN_is_prime(p: ?*const BIGNUM, nchecks: c_int, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, ctx: ?*BN_CTX, cb_arg: ?*c_void) c_int;
pub extern fn BN_is_prime_fasttest(p: ?*const BIGNUM, nchecks: c_int, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, ctx: ?*BN_CTX, cb_arg: ?*c_void, do_trial_division: c_int) c_int;
pub extern fn BN_generate_prime_ex(ret: ?*BIGNUM, bits: c_int, safe: c_int, add: ?*const BIGNUM, rem: ?*const BIGNUM, cb: ?*BN_GENCB) c_int;
pub extern fn BN_is_prime_ex(p: ?*const BIGNUM, nchecks: c_int, ctx: ?*BN_CTX, cb: ?*BN_GENCB) c_int;
pub extern fn BN_is_prime_fasttest_ex(p: ?*const BIGNUM, nchecks: c_int, ctx: ?*BN_CTX, do_trial_division: c_int, cb: ?*BN_GENCB) c_int;
pub extern fn BN_X931_generate_Xpq(Xp: ?*BIGNUM, Xq: ?*BIGNUM, nbits: c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_X931_derive_prime_ex(p: ?*BIGNUM, p1: ?*BIGNUM, p2: ?*BIGNUM, Xp: ?*const BIGNUM, Xp1: ?*const BIGNUM, Xp2: ?*const BIGNUM, e: ?*const BIGNUM, ctx: ?*BN_CTX, cb: ?*BN_GENCB) c_int;
pub extern fn BN_X931_generate_prime_ex(p: ?*BIGNUM, p1: ?*BIGNUM, p2: ?*BIGNUM, Xp1: ?*BIGNUM, Xp2: ?*BIGNUM, Xp: ?*const BIGNUM, e: ?*const BIGNUM, ctx: ?*BN_CTX, cb: ?*BN_GENCB) c_int;
pub extern fn BN_MONT_CTX_new() ?*BN_MONT_CTX;
pub extern fn BN_mod_mul_montgomery(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, mont: ?*BN_MONT_CTX, ctx: ?*BN_CTX) c_int;
pub extern fn BN_to_montgomery(r: ?*BIGNUM, a: ?*const BIGNUM, mont: ?*BN_MONT_CTX, ctx: ?*BN_CTX) c_int;
pub extern fn BN_from_montgomery(r: ?*BIGNUM, a: ?*const BIGNUM, mont: ?*BN_MONT_CTX, ctx: ?*BN_CTX) c_int;
pub extern fn BN_MONT_CTX_free(mont: ?*BN_MONT_CTX) void;
pub extern fn BN_MONT_CTX_set(mont: ?*BN_MONT_CTX, mod: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_MONT_CTX_copy(to: ?*BN_MONT_CTX, from: ?*BN_MONT_CTX) ?*BN_MONT_CTX;
pub extern fn BN_MONT_CTX_set_locked(pmont: [*c]?*BN_MONT_CTX, lock: ?*CRYPTO_RWLOCK, mod: ?*const BIGNUM, ctx: ?*BN_CTX) ?*BN_MONT_CTX;
pub extern fn BN_BLINDING_new(A: ?*const BIGNUM, Ai: ?*const BIGNUM, mod: ?*BIGNUM) ?*BN_BLINDING;
pub extern fn BN_BLINDING_free(b: ?*BN_BLINDING) void;
pub extern fn BN_BLINDING_update(b: ?*BN_BLINDING, ctx: ?*BN_CTX) c_int;
pub extern fn BN_BLINDING_convert(n: ?*BIGNUM, b: ?*BN_BLINDING, ctx: ?*BN_CTX) c_int;
pub extern fn BN_BLINDING_invert(n: ?*BIGNUM, b: ?*BN_BLINDING, ctx: ?*BN_CTX) c_int;
pub extern fn BN_BLINDING_convert_ex(n: ?*BIGNUM, r: ?*BIGNUM, b: ?*BN_BLINDING, ?*BN_CTX) c_int;
pub extern fn BN_BLINDING_invert_ex(n: ?*BIGNUM, r: ?*const BIGNUM, b: ?*BN_BLINDING, ?*BN_CTX) c_int;
pub extern fn BN_BLINDING_is_current_thread(b: ?*BN_BLINDING) c_int;
pub extern fn BN_BLINDING_set_current_thread(b: ?*BN_BLINDING) void;
pub extern fn BN_BLINDING_lock(b: ?*BN_BLINDING) c_int;
pub extern fn BN_BLINDING_unlock(b: ?*BN_BLINDING) c_int;
pub extern fn BN_BLINDING_get_flags(?*const BN_BLINDING) c_ulong;
pub extern fn BN_BLINDING_set_flags(?*BN_BLINDING, c_ulong) void;
pub extern fn BN_BLINDING_create_param(b: ?*BN_BLINDING, e: ?*const BIGNUM, m: ?*BIGNUM, ctx: ?*BN_CTX, bn_mod_exp: ?fn (?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int, m_ctx: ?*BN_MONT_CTX) ?*BN_BLINDING;
pub extern fn BN_set_params(mul: c_int, high: c_int, low: c_int, mont: c_int) void;
pub extern fn BN_get_params(which: c_int) c_int;
pub extern fn BN_RECP_CTX_new() ?*BN_RECP_CTX;
pub extern fn BN_RECP_CTX_free(recp: ?*BN_RECP_CTX) void;
pub extern fn BN_RECP_CTX_set(recp: ?*BN_RECP_CTX, rdiv: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_mul_reciprocal(r: ?*BIGNUM, x: ?*const BIGNUM, y: ?*const BIGNUM, recp: ?*BN_RECP_CTX, ctx: ?*BN_CTX) c_int;
pub extern fn BN_mod_exp_recp(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_div_recp(dv: ?*BIGNUM, rem: ?*BIGNUM, m: ?*const BIGNUM, recp: ?*BN_RECP_CTX, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_add(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM) c_int;
pub extern fn BN_GF2m_mod(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM) c_int;
pub extern fn BN_GF2m_mod_mul(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_sqr(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_inv(r: ?*BIGNUM, b: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_div(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_exp(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_sqrt(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_solve_quad(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_arr(r: ?*BIGNUM, a: ?*const BIGNUM, p: [*c]const c_int) c_int;
pub extern fn BN_GF2m_mod_mul_arr(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_sqr_arr(r: ?*BIGNUM, a: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_inv_arr(r: ?*BIGNUM, b: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_div_arr(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_exp_arr(r: ?*BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_sqrt_arr(r: ?*BIGNUM, a: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_mod_solve_quad_arr(r: ?*BIGNUM, a: ?*const BIGNUM, p: [*c]const c_int, ctx: ?*BN_CTX) c_int;
pub extern fn BN_GF2m_poly2arr(a: ?*const BIGNUM, p: [*c]c_int, max: c_int) c_int;
pub extern fn BN_GF2m_arr2poly(p: [*c]const c_int, a: ?*BIGNUM) c_int;
pub extern fn BN_nist_mod_192(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_nist_mod_224(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_nist_mod_256(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_nist_mod_384(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_nist_mod_521(r: ?*BIGNUM, a: ?*const BIGNUM, p: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn BN_get0_nist_prime_192() ?*const BIGNUM;
pub extern fn BN_get0_nist_prime_224() ?*const BIGNUM;
pub extern fn BN_get0_nist_prime_256() ?*const BIGNUM;
pub extern fn BN_get0_nist_prime_384() ?*const BIGNUM;
pub extern fn BN_get0_nist_prime_521() ?*const BIGNUM;
pub extern fn BN_nist_mod_func(p: ?*const BIGNUM) ?fn (?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX) callconv(.C) c_int;
pub extern fn BN_generate_dsa_nonce(out: ?*BIGNUM, range: ?*const BIGNUM, priv: ?*const BIGNUM, message: [*c]const u8, message_len: usize, ctx: ?*BN_CTX) c_int;
pub extern fn BN_get_rfc2409_prime_768(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc2409_prime_1024(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_1536(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_2048(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_3072(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_4096(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_6144(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_get_rfc3526_prime_8192(bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn BN_bntest_rand(rnd: ?*BIGNUM, bits: c_int, top: c_int, bottom: c_int) c_int;
pub const struct_stack_st_X509_ALGOR = opaque {};
pub const sk_X509_ALGOR_compfunc = ?fn ([*c]const [*c]const X509_ALGOR, [*c]const [*c]const X509_ALGOR) callconv(.C) c_int;
pub const sk_X509_ALGOR_freefunc = ?fn ([*c]X509_ALGOR) callconv(.C) void;
pub const sk_X509_ALGOR_copyfunc = ?fn ([*c]const X509_ALGOR) callconv(.C) [*c]X509_ALGOR;
pub fn sk_X509_ALGOR_num(arg_sk: ?*const struct_stack_st_X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_ALGOR_value(arg_sk: ?*const struct_stack_st_X509_ALGOR, arg_idx: c_int) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_X509_ALGOR_new(arg_compare: sk_X509_ALGOR_compfunc) callconv(.C) ?*struct_stack_st_X509_ALGOR {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_ALGOR, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_ALGOR_new_null() callconv(.C) ?*struct_stack_st_X509_ALGOR {
    return @ptrCast(?*struct_stack_st_X509_ALGOR, OPENSSL_sk_new_null());
}
pub fn sk_X509_ALGOR_new_reserve(arg_compare: sk_X509_ALGOR_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_ALGOR {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_ALGOR, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_ALGOR_reserve(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_ALGOR_free(arg_sk: ?*struct_stack_st_X509_ALGOR) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ALGOR_zero(arg_sk: ?*struct_stack_st_X509_ALGOR) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ALGOR_delete(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_i: c_int) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_X509_ALGOR_delete_ptr(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_ALGOR_push(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ALGOR_unshift(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ALGOR_pop(arg_sk: ?*struct_stack_st_X509_ALGOR) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_ALGOR_shift(arg_sk: ?*struct_stack_st_X509_ALGOR) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_ALGOR_pop_free(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_freefunc: sk_X509_ALGOR_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_ALGOR_insert(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_ALGOR_set(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_idx: c_int, arg_ptr: [*c]X509_ALGOR) callconv(.C) [*c]X509_ALGOR {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_ALGOR, @alignCast(@alignOf(X509_ALGOR), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_ALGOR_find(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ALGOR_find_ex(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_ptr: [*c]X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ALGOR_sort(arg_sk: ?*struct_stack_st_X509_ALGOR) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ALGOR_is_sorted(arg_sk: ?*const struct_stack_st_X509_ALGOR) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_ALGOR_dup(arg_sk: ?*const struct_stack_st_X509_ALGOR) callconv(.C) ?*struct_stack_st_X509_ALGOR {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_ALGOR, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_ALGOR_deep_copy(arg_sk: ?*const struct_stack_st_X509_ALGOR, arg_copyfunc: sk_X509_ALGOR_copyfunc, arg_freefunc: sk_X509_ALGOR_freefunc) callconv(.C) ?*struct_stack_st_X509_ALGOR {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_ALGOR, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_ALGOR_set_cmp_func(arg_sk: ?*struct_stack_st_X509_ALGOR, arg_compare: sk_X509_ALGOR_compfunc) callconv(.C) sk_X509_ALGOR_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_ALGOR_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const X509_ALGOR, [*c]const [*c]const X509_ALGOR) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_ASN1_ENCODING_st = extern struct {
    enc: [*c]u8,
    len: c_long,
    modified: c_int,
};
pub const ASN1_ENCODING = struct_ASN1_ENCODING_st;
pub const struct_asn1_string_table_st = extern struct {
    nid: c_int,
    minsize: c_long,
    maxsize: c_long,
    mask: c_ulong,
    flags: c_ulong,
};
pub const ASN1_STRING_TABLE = struct_asn1_string_table_st;
pub const struct_stack_st_ASN1_STRING_TABLE = opaque {};
pub const sk_ASN1_STRING_TABLE_compfunc = ?fn ([*c]const [*c]const ASN1_STRING_TABLE, [*c]const [*c]const ASN1_STRING_TABLE) callconv(.C) c_int;
pub const sk_ASN1_STRING_TABLE_freefunc = ?fn ([*c]ASN1_STRING_TABLE) callconv(.C) void;
pub const sk_ASN1_STRING_TABLE_copyfunc = ?fn ([*c]const ASN1_STRING_TABLE) callconv(.C) [*c]ASN1_STRING_TABLE;
pub fn sk_ASN1_STRING_TABLE_num(arg_sk: ?*const struct_stack_st_ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_STRING_TABLE_value(arg_sk: ?*const struct_stack_st_ASN1_STRING_TABLE, arg_idx: c_int) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_ASN1_STRING_TABLE_new(arg_compare: sk_ASN1_STRING_TABLE_compfunc) callconv(.C) ?*struct_stack_st_ASN1_STRING_TABLE {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_STRING_TABLE, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_STRING_TABLE_new_null() callconv(.C) ?*struct_stack_st_ASN1_STRING_TABLE {
    return @ptrCast(?*struct_stack_st_ASN1_STRING_TABLE, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_STRING_TABLE_new_reserve(arg_compare: sk_ASN1_STRING_TABLE_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_STRING_TABLE {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_STRING_TABLE, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_STRING_TABLE_reserve(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_STRING_TABLE_free(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_STRING_TABLE_zero(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_STRING_TABLE_delete(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_i: c_int) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_ASN1_STRING_TABLE_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_STRING_TABLE_push(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_STRING_TABLE_unshift(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_STRING_TABLE_pop(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_STRING_TABLE_shift(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_STRING_TABLE_pop_free(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_freefunc: sk_ASN1_STRING_TABLE_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_STRING_TABLE_insert(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_STRING_TABLE_set(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_idx: c_int, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) [*c]ASN1_STRING_TABLE {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_STRING_TABLE, @alignCast(@alignOf(ASN1_STRING_TABLE), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_STRING_TABLE_find(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_STRING_TABLE_find_ex(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_ptr: [*c]ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_STRING_TABLE_sort(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_STRING_TABLE_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_STRING_TABLE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_STRING_TABLE_dup(arg_sk: ?*const struct_stack_st_ASN1_STRING_TABLE) callconv(.C) ?*struct_stack_st_ASN1_STRING_TABLE {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_STRING_TABLE, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_STRING_TABLE_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_STRING_TABLE, arg_copyfunc: sk_ASN1_STRING_TABLE_copyfunc, arg_freefunc: sk_ASN1_STRING_TABLE_freefunc) callconv(.C) ?*struct_stack_st_ASN1_STRING_TABLE {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_STRING_TABLE, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_STRING_TABLE_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_STRING_TABLE, arg_compare: sk_ASN1_STRING_TABLE_compfunc) callconv(.C) sk_ASN1_STRING_TABLE_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_STRING_TABLE_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const ASN1_STRING_TABLE, [*c]const [*c]const ASN1_STRING_TABLE) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_ASN1_TEMPLATE_st = opaque {};
pub const ASN1_TEMPLATE = struct_ASN1_TEMPLATE_st;
pub const struct_ASN1_TLC_st = opaque {};
pub const ASN1_TLC = struct_ASN1_TLC_st;
pub const struct_ASN1_VALUE_st = opaque {};
pub const ASN1_VALUE = struct_ASN1_VALUE_st;
pub const d2i_of_void = fn ([*c]?*c_void, [*c][*c]const u8, c_long) callconv(.C) ?*c_void;
pub const i2d_of_void = fn (?*c_void, [*c][*c]u8) callconv(.C) c_int;
pub const ASN1_ITEM_EXP = ASN1_ITEM;
pub const struct_stack_st_ASN1_INTEGER = opaque {};
pub const sk_ASN1_INTEGER_compfunc = ?fn ([*c]const [*c]const ASN1_INTEGER, [*c]const [*c]const ASN1_INTEGER) callconv(.C) c_int;
pub const sk_ASN1_INTEGER_freefunc = ?fn ([*c]ASN1_INTEGER) callconv(.C) void;
pub const sk_ASN1_INTEGER_copyfunc = ?fn ([*c]const ASN1_INTEGER) callconv(.C) [*c]ASN1_INTEGER;
pub fn sk_ASN1_INTEGER_num(arg_sk: ?*const struct_stack_st_ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_INTEGER_value(arg_sk: ?*const struct_stack_st_ASN1_INTEGER, arg_idx: c_int) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_ASN1_INTEGER_new(arg_compare: sk_ASN1_INTEGER_compfunc) callconv(.C) ?*struct_stack_st_ASN1_INTEGER {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_INTEGER, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_INTEGER_new_null() callconv(.C) ?*struct_stack_st_ASN1_INTEGER {
    return @ptrCast(?*struct_stack_st_ASN1_INTEGER, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_INTEGER_new_reserve(arg_compare: sk_ASN1_INTEGER_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_INTEGER {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_INTEGER, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_INTEGER_reserve(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_INTEGER_free(arg_sk: ?*struct_stack_st_ASN1_INTEGER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_INTEGER_zero(arg_sk: ?*struct_stack_st_ASN1_INTEGER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_INTEGER_delete(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_i: c_int) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_ASN1_INTEGER_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_INTEGER_push(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_INTEGER_unshift(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_INTEGER_pop(arg_sk: ?*struct_stack_st_ASN1_INTEGER) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_INTEGER_shift(arg_sk: ?*struct_stack_st_ASN1_INTEGER) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_INTEGER_pop_free(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_freefunc: sk_ASN1_INTEGER_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_INTEGER_insert(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_INTEGER_set(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_idx: c_int, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) [*c]ASN1_INTEGER {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_INTEGER, @alignCast(@alignOf(ASN1_INTEGER), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_INTEGER_find(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_INTEGER_find_ex(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_ptr: [*c]ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_INTEGER_sort(arg_sk: ?*struct_stack_st_ASN1_INTEGER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_INTEGER_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_INTEGER) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_INTEGER_dup(arg_sk: ?*const struct_stack_st_ASN1_INTEGER) callconv(.C) ?*struct_stack_st_ASN1_INTEGER {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_INTEGER, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_INTEGER_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_INTEGER, arg_copyfunc: sk_ASN1_INTEGER_copyfunc, arg_freefunc: sk_ASN1_INTEGER_freefunc) callconv(.C) ?*struct_stack_st_ASN1_INTEGER {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_INTEGER, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_INTEGER_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_INTEGER, arg_compare: sk_ASN1_INTEGER_compfunc) callconv(.C) sk_ASN1_INTEGER_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_INTEGER_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const ASN1_INTEGER, [*c]const [*c]const ASN1_INTEGER) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_ASN1_GENERALSTRING = opaque {};
pub const sk_ASN1_GENERALSTRING_compfunc = ?fn ([*c]const [*c]const ASN1_GENERALSTRING, [*c]const [*c]const ASN1_GENERALSTRING) callconv(.C) c_int;
pub const sk_ASN1_GENERALSTRING_freefunc = ?fn ([*c]ASN1_GENERALSTRING) callconv(.C) void;
pub const sk_ASN1_GENERALSTRING_copyfunc = ?fn ([*c]const ASN1_GENERALSTRING) callconv(.C) [*c]ASN1_GENERALSTRING;
pub fn sk_ASN1_GENERALSTRING_num(arg_sk: ?*const struct_stack_st_ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_GENERALSTRING_value(arg_sk: ?*const struct_stack_st_ASN1_GENERALSTRING, arg_idx: c_int) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_ASN1_GENERALSTRING_new(arg_compare: sk_ASN1_GENERALSTRING_compfunc) callconv(.C) ?*struct_stack_st_ASN1_GENERALSTRING {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_GENERALSTRING, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_GENERALSTRING_new_null() callconv(.C) ?*struct_stack_st_ASN1_GENERALSTRING {
    return @ptrCast(?*struct_stack_st_ASN1_GENERALSTRING, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_GENERALSTRING_new_reserve(arg_compare: sk_ASN1_GENERALSTRING_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_GENERALSTRING {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_GENERALSTRING, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_GENERALSTRING_reserve(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_GENERALSTRING_free(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_GENERALSTRING_zero(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_GENERALSTRING_delete(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_i: c_int) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_ASN1_GENERALSTRING_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_GENERALSTRING_push(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_GENERALSTRING_unshift(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_GENERALSTRING_pop(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_GENERALSTRING_shift(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_GENERALSTRING_pop_free(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_freefunc: sk_ASN1_GENERALSTRING_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_GENERALSTRING_insert(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_GENERALSTRING_set(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_idx: c_int, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) [*c]ASN1_GENERALSTRING {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_GENERALSTRING, @alignCast(@alignOf(ASN1_GENERALSTRING), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_GENERALSTRING_find(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_GENERALSTRING_find_ex(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_ptr: [*c]ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_GENERALSTRING_sort(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_GENERALSTRING_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_GENERALSTRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_GENERALSTRING_dup(arg_sk: ?*const struct_stack_st_ASN1_GENERALSTRING) callconv(.C) ?*struct_stack_st_ASN1_GENERALSTRING {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_GENERALSTRING, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_GENERALSTRING_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_GENERALSTRING, arg_copyfunc: sk_ASN1_GENERALSTRING_copyfunc, arg_freefunc: sk_ASN1_GENERALSTRING_freefunc) callconv(.C) ?*struct_stack_st_ASN1_GENERALSTRING {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_GENERALSTRING, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_GENERALSTRING_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_GENERALSTRING, arg_compare: sk_ASN1_GENERALSTRING_compfunc) callconv(.C) sk_ASN1_GENERALSTRING_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_GENERALSTRING_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const ASN1_GENERALSTRING, [*c]const [*c]const ASN1_GENERALSTRING) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_ASN1_UTF8STRING = opaque {};
pub const sk_ASN1_UTF8STRING_compfunc = ?fn ([*c]const [*c]const ASN1_UTF8STRING, [*c]const [*c]const ASN1_UTF8STRING) callconv(.C) c_int;
pub const sk_ASN1_UTF8STRING_freefunc = ?fn ([*c]ASN1_UTF8STRING) callconv(.C) void;
pub const sk_ASN1_UTF8STRING_copyfunc = ?fn ([*c]const ASN1_UTF8STRING) callconv(.C) [*c]ASN1_UTF8STRING;
pub fn sk_ASN1_UTF8STRING_num(arg_sk: ?*const struct_stack_st_ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_UTF8STRING_value(arg_sk: ?*const struct_stack_st_ASN1_UTF8STRING, arg_idx: c_int) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_ASN1_UTF8STRING_new(arg_compare: sk_ASN1_UTF8STRING_compfunc) callconv(.C) ?*struct_stack_st_ASN1_UTF8STRING {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_UTF8STRING, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_UTF8STRING_new_null() callconv(.C) ?*struct_stack_st_ASN1_UTF8STRING {
    return @ptrCast(?*struct_stack_st_ASN1_UTF8STRING, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_UTF8STRING_new_reserve(arg_compare: sk_ASN1_UTF8STRING_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_UTF8STRING {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_UTF8STRING, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_UTF8STRING_reserve(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_UTF8STRING_free(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_UTF8STRING_zero(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_UTF8STRING_delete(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_i: c_int) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_ASN1_UTF8STRING_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_UTF8STRING_push(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_UTF8STRING_unshift(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_UTF8STRING_pop(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_UTF8STRING_shift(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_UTF8STRING_pop_free(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_freefunc: sk_ASN1_UTF8STRING_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_UTF8STRING_insert(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_UTF8STRING_set(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_idx: c_int, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) [*c]ASN1_UTF8STRING {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_UTF8STRING, @alignCast(@alignOf(ASN1_UTF8STRING), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_UTF8STRING_find(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_UTF8STRING_find_ex(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_ptr: [*c]ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_UTF8STRING_sort(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_UTF8STRING_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_UTF8STRING) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_UTF8STRING_dup(arg_sk: ?*const struct_stack_st_ASN1_UTF8STRING) callconv(.C) ?*struct_stack_st_ASN1_UTF8STRING {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_UTF8STRING, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_UTF8STRING_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_UTF8STRING, arg_copyfunc: sk_ASN1_UTF8STRING_copyfunc, arg_freefunc: sk_ASN1_UTF8STRING_freefunc) callconv(.C) ?*struct_stack_st_ASN1_UTF8STRING {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_UTF8STRING, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_UTF8STRING_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_UTF8STRING, arg_compare: sk_ASN1_UTF8STRING_compfunc) callconv(.C) sk_ASN1_UTF8STRING_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_UTF8STRING_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const ASN1_UTF8STRING, [*c]const [*c]const ASN1_UTF8STRING) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
const union_unnamed_38 = extern union {
    ptr: [*c]u8,
    boolean: ASN1_BOOLEAN,
    asn1_string: [*c]ASN1_STRING,
    object: ?*ASN1_OBJECT,
    integer: [*c]ASN1_INTEGER,
    enumerated: [*c]ASN1_ENUMERATED,
    bit_string: [*c]ASN1_BIT_STRING,
    octet_string: [*c]ASN1_OCTET_STRING,
    printablestring: [*c]ASN1_PRINTABLESTRING,
    t61string: [*c]ASN1_T61STRING,
    ia5string: [*c]ASN1_IA5STRING,
    generalstring: [*c]ASN1_GENERALSTRING,
    bmpstring: [*c]ASN1_BMPSTRING,
    universalstring: [*c]ASN1_UNIVERSALSTRING,
    utctime: [*c]ASN1_UTCTIME,
    generalizedtime: [*c]ASN1_GENERALIZEDTIME,
    visiblestring: [*c]ASN1_VISIBLESTRING,
    utf8string: [*c]ASN1_UTF8STRING,
    set: [*c]ASN1_STRING,
    sequence: [*c]ASN1_STRING,
    asn1_value: ?*ASN1_VALUE,
};
pub const struct_asn1_type_st = extern struct {
    type: c_int,
    value: union_unnamed_38,
};
pub const ASN1_TYPE = struct_asn1_type_st;
pub const struct_stack_st_ASN1_TYPE = opaque {};
pub const sk_ASN1_TYPE_compfunc = ?fn ([*c]const [*c]const ASN1_TYPE, [*c]const [*c]const ASN1_TYPE) callconv(.C) c_int;
pub const sk_ASN1_TYPE_freefunc = ?fn ([*c]ASN1_TYPE) callconv(.C) void;
pub const sk_ASN1_TYPE_copyfunc = ?fn ([*c]const ASN1_TYPE) callconv(.C) [*c]ASN1_TYPE;
pub fn sk_ASN1_TYPE_num(arg_sk: ?*const struct_stack_st_ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_TYPE_value(arg_sk: ?*const struct_stack_st_ASN1_TYPE, arg_idx: c_int) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_ASN1_TYPE_new(arg_compare: sk_ASN1_TYPE_compfunc) callconv(.C) ?*struct_stack_st_ASN1_TYPE {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_TYPE, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_TYPE_new_null() callconv(.C) ?*struct_stack_st_ASN1_TYPE {
    return @ptrCast(?*struct_stack_st_ASN1_TYPE, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_TYPE_new_reserve(arg_compare: sk_ASN1_TYPE_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_TYPE {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_TYPE, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_TYPE_reserve(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_TYPE_free(arg_sk: ?*struct_stack_st_ASN1_TYPE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_TYPE_zero(arg_sk: ?*struct_stack_st_ASN1_TYPE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_TYPE_delete(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_i: c_int) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_ASN1_TYPE_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_TYPE_push(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_TYPE_unshift(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_TYPE_pop(arg_sk: ?*struct_stack_st_ASN1_TYPE) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_TYPE_shift(arg_sk: ?*struct_stack_st_ASN1_TYPE) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_ASN1_TYPE_pop_free(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_freefunc: sk_ASN1_TYPE_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_TYPE_insert(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_TYPE_set(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_idx: c_int, arg_ptr: [*c]ASN1_TYPE) callconv(.C) [*c]ASN1_TYPE {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]ASN1_TYPE, @alignCast(@alignOf(ASN1_TYPE), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_ASN1_TYPE_find(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_TYPE_find_ex(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_ptr: [*c]ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_TYPE_sort(arg_sk: ?*struct_stack_st_ASN1_TYPE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_TYPE_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_TYPE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_TYPE_dup(arg_sk: ?*const struct_stack_st_ASN1_TYPE) callconv(.C) ?*struct_stack_st_ASN1_TYPE {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_TYPE, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_TYPE_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_TYPE, arg_copyfunc: sk_ASN1_TYPE_copyfunc, arg_freefunc: sk_ASN1_TYPE_freefunc) callconv(.C) ?*struct_stack_st_ASN1_TYPE {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_TYPE, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_TYPE_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_TYPE, arg_compare: sk_ASN1_TYPE_compfunc) callconv(.C) sk_ASN1_TYPE_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_TYPE_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const ASN1_TYPE, [*c]const [*c]const ASN1_TYPE) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const ASN1_SEQUENCE_ANY = struct_stack_st_ASN1_TYPE;
pub extern fn d2i_ASN1_SEQUENCE_ANY(a: [*c]?*ASN1_SEQUENCE_ANY, in: [*c][*c]const u8, len: c_long) ?*ASN1_SEQUENCE_ANY;
pub extern fn i2d_ASN1_SEQUENCE_ANY(a: ?*const ASN1_SEQUENCE_ANY, out: [*c][*c]u8) c_int;
pub extern const ASN1_SEQUENCE_ANY_it: ASN1_ITEM;
pub extern fn d2i_ASN1_SET_ANY(a: [*c]?*ASN1_SEQUENCE_ANY, in: [*c][*c]const u8, len: c_long) ?*ASN1_SEQUENCE_ANY;
pub extern fn i2d_ASN1_SET_ANY(a: ?*const ASN1_SEQUENCE_ANY, out: [*c][*c]u8) c_int;
pub extern const ASN1_SET_ANY_it: ASN1_ITEM;
pub const struct_BIT_STRING_BITNAME_st = extern struct {
    bitnum: c_int,
    lname: [*c]const u8,
    sname: [*c]const u8,
};
pub const BIT_STRING_BITNAME = struct_BIT_STRING_BITNAME_st;
pub extern fn ASN1_TYPE_new() [*c]ASN1_TYPE;
pub extern fn ASN1_TYPE_free(a: [*c]ASN1_TYPE) void;
pub extern fn d2i_ASN1_TYPE(a: [*c][*c]ASN1_TYPE, in: [*c][*c]const u8, len: c_long) [*c]ASN1_TYPE;
pub extern fn i2d_ASN1_TYPE(a: [*c]ASN1_TYPE, out: [*c][*c]u8) c_int;
pub extern const ASN1_ANY_it: ASN1_ITEM;
pub extern fn ASN1_TYPE_get(a: [*c]const ASN1_TYPE) c_int;
pub extern fn ASN1_TYPE_set(a: [*c]ASN1_TYPE, type: c_int, value: ?*c_void) void;
pub extern fn ASN1_TYPE_set1(a: [*c]ASN1_TYPE, type: c_int, value: ?*const c_void) c_int;
pub extern fn ASN1_TYPE_cmp(a: [*c]const ASN1_TYPE, b: [*c]const ASN1_TYPE) c_int;
pub extern fn ASN1_TYPE_pack_sequence(it: ?*const ASN1_ITEM, s: ?*c_void, t: [*c][*c]ASN1_TYPE) [*c]ASN1_TYPE;
pub extern fn ASN1_TYPE_unpack_sequence(it: ?*const ASN1_ITEM, t: [*c]const ASN1_TYPE) ?*c_void;
pub extern fn ASN1_OBJECT_new() ?*ASN1_OBJECT;
pub extern fn ASN1_OBJECT_free(a: ?*ASN1_OBJECT) void;
pub extern fn i2d_ASN1_OBJECT(a: ?*const ASN1_OBJECT, pp: [*c][*c]u8) c_int;
pub extern fn d2i_ASN1_OBJECT(a: [*c]?*ASN1_OBJECT, pp: [*c][*c]const u8, length: c_long) ?*ASN1_OBJECT;
pub extern const ASN1_OBJECT_it: ASN1_ITEM;
pub const struct_stack_st_ASN1_OBJECT = opaque {};
pub const sk_ASN1_OBJECT_compfunc = ?fn ([*c]const ?*const ASN1_OBJECT, [*c]const ?*const ASN1_OBJECT) callconv(.C) c_int;
pub const sk_ASN1_OBJECT_freefunc = ?fn (?*ASN1_OBJECT) callconv(.C) void;
pub const sk_ASN1_OBJECT_copyfunc = ?fn (?*const ASN1_OBJECT) callconv(.C) ?*ASN1_OBJECT;
pub fn sk_ASN1_OBJECT_num(arg_sk: ?*const struct_stack_st_ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_OBJECT_value(arg_sk: ?*const struct_stack_st_ASN1_OBJECT, arg_idx: c_int) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_ASN1_OBJECT_new(arg_compare: sk_ASN1_OBJECT_compfunc) callconv(.C) ?*struct_stack_st_ASN1_OBJECT {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_ASN1_OBJECT, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_ASN1_OBJECT_new_null() callconv(.C) ?*struct_stack_st_ASN1_OBJECT {
    return @ptrCast(?*struct_stack_st_ASN1_OBJECT, OPENSSL_sk_new_null());
}
pub fn sk_ASN1_OBJECT_new_reserve(arg_compare: sk_ASN1_OBJECT_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_ASN1_OBJECT {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_ASN1_OBJECT, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_ASN1_OBJECT_reserve(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_ASN1_OBJECT_free(arg_sk: ?*struct_stack_st_ASN1_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_OBJECT_zero(arg_sk: ?*struct_stack_st_ASN1_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_OBJECT_delete(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_i: c_int) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_ASN1_OBJECT_delete_ptr(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_ASN1_OBJECT_push(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_OBJECT_unshift(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_OBJECT_pop(arg_sk: ?*struct_stack_st_ASN1_OBJECT) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_OBJECT_shift(arg_sk: ?*struct_stack_st_ASN1_OBJECT) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_OBJECT_pop_free(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_freefunc: sk_ASN1_OBJECT_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_ASN1_OBJECT_insert(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_ASN1_OBJECT_set(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_idx: c_int, arg_ptr: ?*ASN1_OBJECT) callconv(.C) ?*ASN1_OBJECT {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*ASN1_OBJECT, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_ASN1_OBJECT_find(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_OBJECT_find_ex(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_ptr: ?*ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_ASN1_OBJECT_sort(arg_sk: ?*struct_stack_st_ASN1_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_ASN1_OBJECT_is_sorted(arg_sk: ?*const struct_stack_st_ASN1_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_ASN1_OBJECT_dup(arg_sk: ?*const struct_stack_st_ASN1_OBJECT) callconv(.C) ?*struct_stack_st_ASN1_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_ASN1_OBJECT, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_ASN1_OBJECT_deep_copy(arg_sk: ?*const struct_stack_st_ASN1_OBJECT, arg_copyfunc: sk_ASN1_OBJECT_copyfunc, arg_freefunc: sk_ASN1_OBJECT_freefunc) callconv(.C) ?*struct_stack_st_ASN1_OBJECT {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_ASN1_OBJECT, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_ASN1_OBJECT_set_cmp_func(arg_sk: ?*struct_stack_st_ASN1_OBJECT, arg_compare: sk_ASN1_OBJECT_compfunc) callconv(.C) sk_ASN1_OBJECT_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_ASN1_OBJECT_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const ASN1_OBJECT, [*c]const ?*const ASN1_OBJECT) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn ASN1_STRING_new() [*c]ASN1_STRING;
pub extern fn ASN1_STRING_free(a: [*c]ASN1_STRING) void;
pub extern fn ASN1_STRING_clear_free(a: [*c]ASN1_STRING) void;
pub extern fn ASN1_STRING_copy(dst: [*c]ASN1_STRING, str: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_STRING_dup(a: [*c]const ASN1_STRING) [*c]ASN1_STRING;
pub extern fn ASN1_STRING_type_new(type: c_int) [*c]ASN1_STRING;
pub extern fn ASN1_STRING_cmp(a: [*c]const ASN1_STRING, b: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_STRING_set(str: [*c]ASN1_STRING, data: ?*const c_void, len: c_int) c_int;
pub extern fn ASN1_STRING_set0(str: [*c]ASN1_STRING, data: ?*c_void, len: c_int) void;
pub extern fn ASN1_STRING_length(x: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_STRING_length_set(x: [*c]ASN1_STRING, n: c_int) void;
pub extern fn ASN1_STRING_type(x: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_STRING_data(x: [*c]ASN1_STRING) [*c]u8;
pub extern fn ASN1_STRING_get0_data(x: [*c]const ASN1_STRING) [*c]const u8;
pub extern fn ASN1_BIT_STRING_new() [*c]ASN1_BIT_STRING;
pub extern fn ASN1_BIT_STRING_free(a: [*c]ASN1_BIT_STRING) void;
pub extern fn d2i_ASN1_BIT_STRING(a: [*c][*c]ASN1_BIT_STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_BIT_STRING;
pub extern fn i2d_ASN1_BIT_STRING(a: [*c]ASN1_BIT_STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_BIT_STRING_it: ASN1_ITEM;
pub extern fn ASN1_BIT_STRING_set(a: [*c]ASN1_BIT_STRING, d: [*c]u8, length: c_int) c_int;
pub extern fn ASN1_BIT_STRING_set_bit(a: [*c]ASN1_BIT_STRING, n: c_int, value: c_int) c_int;
pub extern fn ASN1_BIT_STRING_get_bit(a: [*c]const ASN1_BIT_STRING, n: c_int) c_int;
pub extern fn ASN1_BIT_STRING_check(a: [*c]const ASN1_BIT_STRING, flags: [*c]const u8, flags_len: c_int) c_int;
pub extern fn ASN1_BIT_STRING_name_print(out: ?*BIO, bs: [*c]ASN1_BIT_STRING, tbl: [*c]BIT_STRING_BITNAME, indent: c_int) c_int;
pub extern fn ASN1_BIT_STRING_num_asc(name: [*c]const u8, tbl: [*c]BIT_STRING_BITNAME) c_int;
pub extern fn ASN1_BIT_STRING_set_asc(bs: [*c]ASN1_BIT_STRING, name: [*c]const u8, value: c_int, tbl: [*c]BIT_STRING_BITNAME) c_int;
pub extern fn ASN1_INTEGER_new() [*c]ASN1_INTEGER;
pub extern fn ASN1_INTEGER_free(a: [*c]ASN1_INTEGER) void;
pub extern fn d2i_ASN1_INTEGER(a: [*c][*c]ASN1_INTEGER, in: [*c][*c]const u8, len: c_long) [*c]ASN1_INTEGER;
pub extern fn i2d_ASN1_INTEGER(a: [*c]ASN1_INTEGER, out: [*c][*c]u8) c_int;
pub extern const ASN1_INTEGER_it: ASN1_ITEM;
pub extern fn d2i_ASN1_UINTEGER(a: [*c][*c]ASN1_INTEGER, pp: [*c][*c]const u8, length: c_long) [*c]ASN1_INTEGER;
pub extern fn ASN1_INTEGER_dup(x: [*c]const ASN1_INTEGER) [*c]ASN1_INTEGER;
pub extern fn ASN1_INTEGER_cmp(x: [*c]const ASN1_INTEGER, y: [*c]const ASN1_INTEGER) c_int;
pub extern fn ASN1_ENUMERATED_new() [*c]ASN1_ENUMERATED;
pub extern fn ASN1_ENUMERATED_free(a: [*c]ASN1_ENUMERATED) void;
pub extern fn d2i_ASN1_ENUMERATED(a: [*c][*c]ASN1_ENUMERATED, in: [*c][*c]const u8, len: c_long) [*c]ASN1_ENUMERATED;
pub extern fn i2d_ASN1_ENUMERATED(a: [*c]ASN1_ENUMERATED, out: [*c][*c]u8) c_int;
pub extern const ASN1_ENUMERATED_it: ASN1_ITEM;
pub extern fn ASN1_UTCTIME_check(a: [*c]const ASN1_UTCTIME) c_int;
pub extern fn ASN1_UTCTIME_set(s: [*c]ASN1_UTCTIME, t: time_t) [*c]ASN1_UTCTIME;
pub extern fn ASN1_UTCTIME_adj(s: [*c]ASN1_UTCTIME, t: time_t, offset_day: c_int, offset_sec: c_long) [*c]ASN1_UTCTIME;
pub extern fn ASN1_UTCTIME_set_string(s: [*c]ASN1_UTCTIME, str: [*c]const u8) c_int;
pub extern fn ASN1_UTCTIME_cmp_time_t(s: [*c]const ASN1_UTCTIME, t: time_t) c_int;
pub extern fn ASN1_GENERALIZEDTIME_check(a: [*c]const ASN1_GENERALIZEDTIME) c_int;
pub extern fn ASN1_GENERALIZEDTIME_set(s: [*c]ASN1_GENERALIZEDTIME, t: time_t) [*c]ASN1_GENERALIZEDTIME;
pub extern fn ASN1_GENERALIZEDTIME_adj(s: [*c]ASN1_GENERALIZEDTIME, t: time_t, offset_day: c_int, offset_sec: c_long) [*c]ASN1_GENERALIZEDTIME;
pub extern fn ASN1_GENERALIZEDTIME_set_string(s: [*c]ASN1_GENERALIZEDTIME, str: [*c]const u8) c_int;
pub extern fn ASN1_TIME_diff(pday: [*c]c_int, psec: [*c]c_int, from: [*c]const ASN1_TIME, to: [*c]const ASN1_TIME) c_int;
pub extern fn ASN1_OCTET_STRING_new() [*c]ASN1_OCTET_STRING;
pub extern fn ASN1_OCTET_STRING_free(a: [*c]ASN1_OCTET_STRING) void;
pub extern fn d2i_ASN1_OCTET_STRING(a: [*c][*c]ASN1_OCTET_STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_OCTET_STRING;
pub extern fn i2d_ASN1_OCTET_STRING(a: [*c]ASN1_OCTET_STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_OCTET_STRING_it: ASN1_ITEM;
pub extern fn ASN1_OCTET_STRING_dup(a: [*c]const ASN1_OCTET_STRING) [*c]ASN1_OCTET_STRING;
pub extern fn ASN1_OCTET_STRING_cmp(a: [*c]const ASN1_OCTET_STRING, b: [*c]const ASN1_OCTET_STRING) c_int;
pub extern fn ASN1_OCTET_STRING_set(str: [*c]ASN1_OCTET_STRING, data: [*c]const u8, len: c_int) c_int;
pub extern fn ASN1_VISIBLESTRING_new() [*c]ASN1_VISIBLESTRING;
pub extern fn ASN1_VISIBLESTRING_free(a: [*c]ASN1_VISIBLESTRING) void;
pub extern fn d2i_ASN1_VISIBLESTRING(a: [*c][*c]ASN1_VISIBLESTRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_VISIBLESTRING;
pub extern fn i2d_ASN1_VISIBLESTRING(a: [*c]ASN1_VISIBLESTRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_VISIBLESTRING_it: ASN1_ITEM;
pub extern fn ASN1_UNIVERSALSTRING_new() [*c]ASN1_UNIVERSALSTRING;
pub extern fn ASN1_UNIVERSALSTRING_free(a: [*c]ASN1_UNIVERSALSTRING) void;
pub extern fn d2i_ASN1_UNIVERSALSTRING(a: [*c][*c]ASN1_UNIVERSALSTRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_UNIVERSALSTRING;
pub extern fn i2d_ASN1_UNIVERSALSTRING(a: [*c]ASN1_UNIVERSALSTRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_UNIVERSALSTRING_it: ASN1_ITEM;
pub extern fn ASN1_UTF8STRING_new() [*c]ASN1_UTF8STRING;
pub extern fn ASN1_UTF8STRING_free(a: [*c]ASN1_UTF8STRING) void;
pub extern fn d2i_ASN1_UTF8STRING(a: [*c][*c]ASN1_UTF8STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_UTF8STRING;
pub extern fn i2d_ASN1_UTF8STRING(a: [*c]ASN1_UTF8STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_UTF8STRING_it: ASN1_ITEM;
pub extern fn ASN1_NULL_new() [*c]ASN1_NULL;
pub extern fn ASN1_NULL_free(a: [*c]ASN1_NULL) void;
pub extern fn d2i_ASN1_NULL(a: [*c][*c]ASN1_NULL, in: [*c][*c]const u8, len: c_long) [*c]ASN1_NULL;
pub extern fn i2d_ASN1_NULL(a: [*c]ASN1_NULL, out: [*c][*c]u8) c_int;
pub extern const ASN1_NULL_it: ASN1_ITEM;
pub extern fn ASN1_BMPSTRING_new() [*c]ASN1_BMPSTRING;
pub extern fn ASN1_BMPSTRING_free(a: [*c]ASN1_BMPSTRING) void;
pub extern fn d2i_ASN1_BMPSTRING(a: [*c][*c]ASN1_BMPSTRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_BMPSTRING;
pub extern fn i2d_ASN1_BMPSTRING(a: [*c]ASN1_BMPSTRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_BMPSTRING_it: ASN1_ITEM;
pub extern fn UTF8_getc(str: [*c]const u8, len: c_int, val: [*c]c_ulong) c_int;
pub extern fn UTF8_putc(str: [*c]u8, len: c_int, value: c_ulong) c_int;
pub extern fn ASN1_PRINTABLE_new() [*c]ASN1_STRING;
pub extern fn ASN1_PRINTABLE_free(a: [*c]ASN1_STRING) void;
pub extern fn d2i_ASN1_PRINTABLE(a: [*c][*c]ASN1_STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_STRING;
pub extern fn i2d_ASN1_PRINTABLE(a: [*c]ASN1_STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_PRINTABLE_it: ASN1_ITEM;
pub extern fn DIRECTORYSTRING_new() [*c]ASN1_STRING;
pub extern fn DIRECTORYSTRING_free(a: [*c]ASN1_STRING) void;
pub extern fn d2i_DIRECTORYSTRING(a: [*c][*c]ASN1_STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_STRING;
pub extern fn i2d_DIRECTORYSTRING(a: [*c]ASN1_STRING, out: [*c][*c]u8) c_int;
pub extern const DIRECTORYSTRING_it: ASN1_ITEM;
pub extern fn DISPLAYTEXT_new() [*c]ASN1_STRING;
pub extern fn DISPLAYTEXT_free(a: [*c]ASN1_STRING) void;
pub extern fn d2i_DISPLAYTEXT(a: [*c][*c]ASN1_STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_STRING;
pub extern fn i2d_DISPLAYTEXT(a: [*c]ASN1_STRING, out: [*c][*c]u8) c_int;
pub extern const DISPLAYTEXT_it: ASN1_ITEM;
pub extern fn ASN1_PRINTABLESTRING_new() [*c]ASN1_PRINTABLESTRING;
pub extern fn ASN1_PRINTABLESTRING_free(a: [*c]ASN1_PRINTABLESTRING) void;
pub extern fn d2i_ASN1_PRINTABLESTRING(a: [*c][*c]ASN1_PRINTABLESTRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_PRINTABLESTRING;
pub extern fn i2d_ASN1_PRINTABLESTRING(a: [*c]ASN1_PRINTABLESTRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_PRINTABLESTRING_it: ASN1_ITEM;
pub extern fn ASN1_T61STRING_new() [*c]ASN1_T61STRING;
pub extern fn ASN1_T61STRING_free(a: [*c]ASN1_T61STRING) void;
pub extern fn d2i_ASN1_T61STRING(a: [*c][*c]ASN1_T61STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_T61STRING;
pub extern fn i2d_ASN1_T61STRING(a: [*c]ASN1_T61STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_T61STRING_it: ASN1_ITEM;
pub extern fn ASN1_IA5STRING_new() [*c]ASN1_IA5STRING;
pub extern fn ASN1_IA5STRING_free(a: [*c]ASN1_IA5STRING) void;
pub extern fn d2i_ASN1_IA5STRING(a: [*c][*c]ASN1_IA5STRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_IA5STRING;
pub extern fn i2d_ASN1_IA5STRING(a: [*c]ASN1_IA5STRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_IA5STRING_it: ASN1_ITEM;
pub extern fn ASN1_GENERALSTRING_new() [*c]ASN1_GENERALSTRING;
pub extern fn ASN1_GENERALSTRING_free(a: [*c]ASN1_GENERALSTRING) void;
pub extern fn d2i_ASN1_GENERALSTRING(a: [*c][*c]ASN1_GENERALSTRING, in: [*c][*c]const u8, len: c_long) [*c]ASN1_GENERALSTRING;
pub extern fn i2d_ASN1_GENERALSTRING(a: [*c]ASN1_GENERALSTRING, out: [*c][*c]u8) c_int;
pub extern const ASN1_GENERALSTRING_it: ASN1_ITEM;
pub extern fn ASN1_UTCTIME_new() [*c]ASN1_UTCTIME;
pub extern fn ASN1_UTCTIME_free(a: [*c]ASN1_UTCTIME) void;
pub extern fn d2i_ASN1_UTCTIME(a: [*c][*c]ASN1_UTCTIME, in: [*c][*c]const u8, len: c_long) [*c]ASN1_UTCTIME;
pub extern fn i2d_ASN1_UTCTIME(a: [*c]ASN1_UTCTIME, out: [*c][*c]u8) c_int;
pub extern const ASN1_UTCTIME_it: ASN1_ITEM;
pub extern fn ASN1_GENERALIZEDTIME_new() [*c]ASN1_GENERALIZEDTIME;
pub extern fn ASN1_GENERALIZEDTIME_free(a: [*c]ASN1_GENERALIZEDTIME) void;
pub extern fn d2i_ASN1_GENERALIZEDTIME(a: [*c][*c]ASN1_GENERALIZEDTIME, in: [*c][*c]const u8, len: c_long) [*c]ASN1_GENERALIZEDTIME;
pub extern fn i2d_ASN1_GENERALIZEDTIME(a: [*c]ASN1_GENERALIZEDTIME, out: [*c][*c]u8) c_int;
pub extern const ASN1_GENERALIZEDTIME_it: ASN1_ITEM;
pub extern fn ASN1_TIME_new() [*c]ASN1_TIME;
pub extern fn ASN1_TIME_free(a: [*c]ASN1_TIME) void;
pub extern fn d2i_ASN1_TIME(a: [*c][*c]ASN1_TIME, in: [*c][*c]const u8, len: c_long) [*c]ASN1_TIME;
pub extern fn i2d_ASN1_TIME(a: [*c]ASN1_TIME, out: [*c][*c]u8) c_int;
pub extern const ASN1_TIME_it: ASN1_ITEM;
pub extern const ASN1_OCTET_STRING_NDEF_it: ASN1_ITEM;
pub extern fn ASN1_TIME_set(s: [*c]ASN1_TIME, t: time_t) [*c]ASN1_TIME;
pub extern fn ASN1_TIME_adj(s: [*c]ASN1_TIME, t: time_t, offset_day: c_int, offset_sec: c_long) [*c]ASN1_TIME;
pub extern fn ASN1_TIME_check(t: [*c]const ASN1_TIME) c_int;
pub extern fn ASN1_TIME_to_generalizedtime(t: [*c]const ASN1_TIME, out: [*c][*c]ASN1_GENERALIZEDTIME) [*c]ASN1_GENERALIZEDTIME;
pub extern fn ASN1_TIME_set_string(s: [*c]ASN1_TIME, str: [*c]const u8) c_int;
pub extern fn ASN1_TIME_set_string_X509(s: [*c]ASN1_TIME, str: [*c]const u8) c_int;
pub extern fn ASN1_TIME_to_tm(s: [*c]const ASN1_TIME, tm: [*c]struct_tm) c_int;
pub extern fn ASN1_TIME_normalize(s: [*c]ASN1_TIME) c_int;
pub extern fn ASN1_TIME_cmp_time_t(s: [*c]const ASN1_TIME, t: time_t) c_int;
pub extern fn ASN1_TIME_compare(a: [*c]const ASN1_TIME, b: [*c]const ASN1_TIME) c_int;
pub extern fn i2a_ASN1_INTEGER(bp: ?*BIO, a: [*c]const ASN1_INTEGER) c_int;
pub extern fn a2i_ASN1_INTEGER(bp: ?*BIO, bs: [*c]ASN1_INTEGER, buf: [*c]u8, size: c_int) c_int;
pub extern fn i2a_ASN1_ENUMERATED(bp: ?*BIO, a: [*c]const ASN1_ENUMERATED) c_int;
pub extern fn a2i_ASN1_ENUMERATED(bp: ?*BIO, bs: [*c]ASN1_ENUMERATED, buf: [*c]u8, size: c_int) c_int;
pub extern fn i2a_ASN1_OBJECT(bp: ?*BIO, a: ?*const ASN1_OBJECT) c_int;
pub extern fn a2i_ASN1_STRING(bp: ?*BIO, bs: [*c]ASN1_STRING, buf: [*c]u8, size: c_int) c_int;
pub extern fn i2a_ASN1_STRING(bp: ?*BIO, a: [*c]const ASN1_STRING, type: c_int) c_int;
pub extern fn i2t_ASN1_OBJECT(buf: [*c]u8, buf_len: c_int, a: ?*const ASN1_OBJECT) c_int;
pub extern fn a2d_ASN1_OBJECT(out: [*c]u8, olen: c_int, buf: [*c]const u8, num: c_int) c_int;
pub extern fn ASN1_OBJECT_create(nid: c_int, data: [*c]u8, len: c_int, sn: [*c]const u8, ln: [*c]const u8) ?*ASN1_OBJECT;
pub extern fn ASN1_INTEGER_get_int64(pr: [*c]i64, a: [*c]const ASN1_INTEGER) c_int;
pub extern fn ASN1_INTEGER_set_int64(a: [*c]ASN1_INTEGER, r: i64) c_int;
pub extern fn ASN1_INTEGER_get_uint64(pr: [*c]u64, a: [*c]const ASN1_INTEGER) c_int;
pub extern fn ASN1_INTEGER_set_uint64(a: [*c]ASN1_INTEGER, r: u64) c_int;
pub extern fn ASN1_INTEGER_set(a: [*c]ASN1_INTEGER, v: c_long) c_int;
pub extern fn ASN1_INTEGER_get(a: [*c]const ASN1_INTEGER) c_long;
pub extern fn BN_to_ASN1_INTEGER(bn: ?*const BIGNUM, ai: [*c]ASN1_INTEGER) [*c]ASN1_INTEGER;
pub extern fn ASN1_INTEGER_to_BN(ai: [*c]const ASN1_INTEGER, bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn ASN1_ENUMERATED_get_int64(pr: [*c]i64, a: [*c]const ASN1_ENUMERATED) c_int;
pub extern fn ASN1_ENUMERATED_set_int64(a: [*c]ASN1_ENUMERATED, r: i64) c_int;
pub extern fn ASN1_ENUMERATED_set(a: [*c]ASN1_ENUMERATED, v: c_long) c_int;
pub extern fn ASN1_ENUMERATED_get(a: [*c]const ASN1_ENUMERATED) c_long;
pub extern fn BN_to_ASN1_ENUMERATED(bn: ?*const BIGNUM, ai: [*c]ASN1_ENUMERATED) [*c]ASN1_ENUMERATED;
pub extern fn ASN1_ENUMERATED_to_BN(ai: [*c]const ASN1_ENUMERATED, bn: ?*BIGNUM) ?*BIGNUM;
pub extern fn ASN1_PRINTABLE_type(s: [*c]const u8, max: c_int) c_int;
pub extern fn ASN1_tag2bit(tag: c_int) c_ulong;
pub extern fn ASN1_get_object(pp: [*c][*c]const u8, plength: [*c]c_long, ptag: [*c]c_int, pclass: [*c]c_int, omax: c_long) c_int;
pub extern fn ASN1_check_infinite_end(p: [*c][*c]u8, len: c_long) c_int;
pub extern fn ASN1_const_check_infinite_end(p: [*c][*c]const u8, len: c_long) c_int;
pub extern fn ASN1_put_object(pp: [*c][*c]u8, constructed: c_int, length: c_int, tag: c_int, xclass: c_int) void;
pub extern fn ASN1_put_eoc(pp: [*c][*c]u8) c_int;
pub extern fn ASN1_object_size(constructed: c_int, length: c_int, tag: c_int) c_int;
pub extern fn ASN1_dup(i2d: ?i2d_of_void, d2i: ?d2i_of_void, x: ?*c_void) ?*c_void;
pub extern fn ASN1_item_dup(it: ?*const ASN1_ITEM, x: ?*c_void) ?*c_void;
pub extern fn ASN1_d2i_fp(xnew: ?fn () callconv(.C) ?*c_void, d2i: ?d2i_of_void, in: [*c]FILE, x: [*c]?*c_void) ?*c_void;
pub extern fn ASN1_item_d2i_fp(it: ?*const ASN1_ITEM, in: [*c]FILE, x: ?*c_void) ?*c_void;
pub extern fn ASN1_i2d_fp(i2d: ?i2d_of_void, out: [*c]FILE, x: ?*c_void) c_int;
pub extern fn ASN1_item_i2d_fp(it: ?*const ASN1_ITEM, out: [*c]FILE, x: ?*c_void) c_int;
pub extern fn ASN1_STRING_print_ex_fp(fp: [*c]FILE, str: [*c]const ASN1_STRING, flags: c_ulong) c_int;
pub extern fn ASN1_STRING_to_UTF8(out: [*c][*c]u8, in: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_d2i_bio(xnew: ?fn () callconv(.C) ?*c_void, d2i: ?d2i_of_void, in: ?*BIO, x: [*c]?*c_void) ?*c_void;
pub extern fn ASN1_item_d2i_bio(it: ?*const ASN1_ITEM, in: ?*BIO, x: ?*c_void) ?*c_void;
pub extern fn ASN1_i2d_bio(i2d: ?i2d_of_void, out: ?*BIO, x: [*c]u8) c_int;
pub extern fn ASN1_item_i2d_bio(it: ?*const ASN1_ITEM, out: ?*BIO, x: ?*c_void) c_int;
pub extern fn ASN1_UTCTIME_print(fp: ?*BIO, a: [*c]const ASN1_UTCTIME) c_int;
pub extern fn ASN1_GENERALIZEDTIME_print(fp: ?*BIO, a: [*c]const ASN1_GENERALIZEDTIME) c_int;
pub extern fn ASN1_TIME_print(fp: ?*BIO, a: [*c]const ASN1_TIME) c_int;
pub extern fn ASN1_STRING_print(bp: ?*BIO, v: [*c]const ASN1_STRING) c_int;
pub extern fn ASN1_STRING_print_ex(out: ?*BIO, str: [*c]const ASN1_STRING, flags: c_ulong) c_int;
pub extern fn ASN1_buf_print(bp: ?*BIO, buf: [*c]const u8, buflen: usize, off: c_int) c_int;
pub extern fn ASN1_bn_print(bp: ?*BIO, number: [*c]const u8, num: ?*const BIGNUM, buf: [*c]u8, off: c_int) c_int;
pub extern fn ASN1_parse(bp: ?*BIO, pp: [*c]const u8, len: c_long, indent: c_int) c_int;
pub extern fn ASN1_parse_dump(bp: ?*BIO, pp: [*c]const u8, len: c_long, indent: c_int, dump: c_int) c_int;
pub extern fn ASN1_tag2str(tag: c_int) [*c]const u8;
pub extern fn ASN1_UNIVERSALSTRING_to_string(s: [*c]ASN1_UNIVERSALSTRING) c_int;
pub extern fn ASN1_TYPE_set_octetstring(a: [*c]ASN1_TYPE, data: [*c]u8, len: c_int) c_int;
pub extern fn ASN1_TYPE_get_octetstring(a: [*c]const ASN1_TYPE, data: [*c]u8, max_len: c_int) c_int;
pub extern fn ASN1_TYPE_set_int_octetstring(a: [*c]ASN1_TYPE, num: c_long, data: [*c]u8, len: c_int) c_int;
pub extern fn ASN1_TYPE_get_int_octetstring(a: [*c]const ASN1_TYPE, num: [*c]c_long, data: [*c]u8, max_len: c_int) c_int;
pub extern fn ASN1_item_unpack(oct: [*c]const ASN1_STRING, it: ?*const ASN1_ITEM) ?*c_void;
pub extern fn ASN1_item_pack(obj: ?*c_void, it: ?*const ASN1_ITEM, oct: [*c][*c]ASN1_OCTET_STRING) [*c]ASN1_STRING;
pub extern fn ASN1_STRING_set_default_mask(mask: c_ulong) void;
pub extern fn ASN1_STRING_set_default_mask_asc(p: [*c]const u8) c_int;
pub extern fn ASN1_STRING_get_default_mask() c_ulong;
pub extern fn ASN1_mbstring_copy(out: [*c][*c]ASN1_STRING, in: [*c]const u8, len: c_int, inform: c_int, mask: c_ulong) c_int;
pub extern fn ASN1_mbstring_ncopy(out: [*c][*c]ASN1_STRING, in: [*c]const u8, len: c_int, inform: c_int, mask: c_ulong, minsize: c_long, maxsize: c_long) c_int;
pub extern fn ASN1_STRING_set_by_NID(out: [*c][*c]ASN1_STRING, in: [*c]const u8, inlen: c_int, inform: c_int, nid: c_int) [*c]ASN1_STRING;
pub extern fn ASN1_STRING_TABLE_get(nid: c_int) [*c]ASN1_STRING_TABLE;
pub extern fn ASN1_STRING_TABLE_add(c_int, c_long, c_long, c_ulong, c_ulong) c_int;
pub extern fn ASN1_STRING_TABLE_cleanup() void;
pub extern fn ASN1_item_new(it: ?*const ASN1_ITEM) ?*ASN1_VALUE;
pub extern fn ASN1_item_free(val: ?*ASN1_VALUE, it: ?*const ASN1_ITEM) void;
pub extern fn ASN1_item_d2i(val: [*c]?*ASN1_VALUE, in: [*c][*c]const u8, len: c_long, it: ?*const ASN1_ITEM) ?*ASN1_VALUE;
pub extern fn ASN1_item_i2d(val: ?*ASN1_VALUE, out: [*c][*c]u8, it: ?*const ASN1_ITEM) c_int;
pub extern fn ASN1_item_ndef_i2d(val: ?*ASN1_VALUE, out: [*c][*c]u8, it: ?*const ASN1_ITEM) c_int;
pub extern fn ASN1_add_oid_module() void;
pub extern fn ASN1_add_stable_module() void;
pub extern fn ASN1_generate_nconf(str: [*c]const u8, nconf: ?*CONF) [*c]ASN1_TYPE;
pub extern fn ASN1_generate_v3(str: [*c]const u8, cnf: ?*X509V3_CTX) [*c]ASN1_TYPE;
pub extern fn ASN1_str2mask(str: [*c]const u8, pmask: [*c]c_ulong) c_int;
pub extern fn ASN1_item_print(out: ?*BIO, ifld: ?*ASN1_VALUE, indent: c_int, it: ?*const ASN1_ITEM, pctx: ?*const ASN1_PCTX) c_int;
pub extern fn ASN1_PCTX_new() ?*ASN1_PCTX;
pub extern fn ASN1_PCTX_free(p: ?*ASN1_PCTX) void;
pub extern fn ASN1_PCTX_get_flags(p: ?*const ASN1_PCTX) c_ulong;
pub extern fn ASN1_PCTX_set_flags(p: ?*ASN1_PCTX, flags: c_ulong) void;
pub extern fn ASN1_PCTX_get_nm_flags(p: ?*const ASN1_PCTX) c_ulong;
pub extern fn ASN1_PCTX_set_nm_flags(p: ?*ASN1_PCTX, flags: c_ulong) void;
pub extern fn ASN1_PCTX_get_cert_flags(p: ?*const ASN1_PCTX) c_ulong;
pub extern fn ASN1_PCTX_set_cert_flags(p: ?*ASN1_PCTX, flags: c_ulong) void;
pub extern fn ASN1_PCTX_get_oid_flags(p: ?*const ASN1_PCTX) c_ulong;
pub extern fn ASN1_PCTX_set_oid_flags(p: ?*ASN1_PCTX, flags: c_ulong) void;
pub extern fn ASN1_PCTX_get_str_flags(p: ?*const ASN1_PCTX) c_ulong;
pub extern fn ASN1_PCTX_set_str_flags(p: ?*ASN1_PCTX, flags: c_ulong) void;
pub extern fn ASN1_SCTX_new(scan_cb: ?fn (?*ASN1_SCTX) callconv(.C) c_int) ?*ASN1_SCTX;
pub extern fn ASN1_SCTX_free(p: ?*ASN1_SCTX) void;
pub extern fn ASN1_SCTX_get_item(p: ?*ASN1_SCTX) ?*const ASN1_ITEM;
pub extern fn ASN1_SCTX_get_template(p: ?*ASN1_SCTX) ?*const ASN1_TEMPLATE;
pub extern fn ASN1_SCTX_get_flags(p: ?*ASN1_SCTX) c_ulong;
pub extern fn ASN1_SCTX_set_app_data(p: ?*ASN1_SCTX, data: ?*c_void) void;
pub extern fn ASN1_SCTX_get_app_data(p: ?*ASN1_SCTX) ?*c_void;
pub extern fn BIO_f_asn1() ?*const BIO_METHOD;
pub extern fn BIO_new_NDEF(out: ?*BIO, val: ?*ASN1_VALUE, it: ?*const ASN1_ITEM) ?*BIO;
pub extern fn i2d_ASN1_bio_stream(out: ?*BIO, val: ?*ASN1_VALUE, in: ?*BIO, flags: c_int, it: ?*const ASN1_ITEM) c_int;
pub extern fn PEM_write_bio_ASN1_stream(out: ?*BIO, val: ?*ASN1_VALUE, in: ?*BIO, flags: c_int, hdr: [*c]const u8, it: ?*const ASN1_ITEM) c_int;
pub extern fn SMIME_write_ASN1(bio: ?*BIO, val: ?*ASN1_VALUE, data: ?*BIO, flags: c_int, ctype_nid: c_int, econt_nid: c_int, mdalgs: ?*struct_stack_st_X509_ALGOR, it: ?*const ASN1_ITEM) c_int;
pub extern fn SMIME_read_ASN1(bio: ?*BIO, bcont: [*c]?*BIO, it: ?*const ASN1_ITEM) ?*ASN1_VALUE;
pub extern fn SMIME_crlf_copy(in: ?*BIO, out: ?*BIO, flags: c_int) c_int;
pub extern fn SMIME_text(in: ?*BIO, out: ?*BIO) c_int;
pub extern fn ASN1_ITEM_lookup(name: [*c]const u8) ?*const ASN1_ITEM;
pub extern fn ASN1_ITEM_get(i: usize) ?*const ASN1_ITEM;
pub extern fn ERR_load_OBJ_strings() c_int;
pub const struct_obj_name_st = extern struct {
    type: c_int,
    alias: c_int,
    name: [*c]const u8,
    data: [*c]const u8,
};
pub const OBJ_NAME = struct_obj_name_st;
pub extern fn OBJ_NAME_init() c_int;
pub extern fn OBJ_NAME_new_index(hash_func: ?fn ([*c]const u8) callconv(.C) c_ulong, cmp_func: ?fn ([*c]const u8, [*c]const u8) callconv(.C) c_int, free_func: ?fn ([*c]const u8, c_int, [*c]const u8) callconv(.C) void) c_int;
pub extern fn OBJ_NAME_get(name: [*c]const u8, type: c_int) [*c]const u8;
pub extern fn OBJ_NAME_add(name: [*c]const u8, type: c_int, data: [*c]const u8) c_int;
pub extern fn OBJ_NAME_remove(name: [*c]const u8, type: c_int) c_int;
pub extern fn OBJ_NAME_cleanup(type: c_int) void;
pub extern fn OBJ_NAME_do_all(type: c_int, @"fn": ?fn ([*c]const OBJ_NAME, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn OBJ_NAME_do_all_sorted(type: c_int, @"fn": ?fn ([*c]const OBJ_NAME, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn OBJ_dup(o: ?*const ASN1_OBJECT) ?*ASN1_OBJECT;
pub extern fn OBJ_nid2obj(n: c_int) ?*ASN1_OBJECT;
pub extern fn OBJ_nid2ln(n: c_int) [*c]const u8;
pub extern fn OBJ_nid2sn(n: c_int) [*c]const u8;
pub extern fn OBJ_obj2nid(o: ?*const ASN1_OBJECT) c_int;
pub extern fn OBJ_txt2obj(s: [*c]const u8, no_name: c_int) ?*ASN1_OBJECT;
pub extern fn OBJ_obj2txt(buf: [*c]u8, buf_len: c_int, a: ?*const ASN1_OBJECT, no_name: c_int) c_int;
pub extern fn OBJ_txt2nid(s: [*c]const u8) c_int;
pub extern fn OBJ_ln2nid(s: [*c]const u8) c_int;
pub extern fn OBJ_sn2nid(s: [*c]const u8) c_int;
pub extern fn OBJ_cmp(a: ?*const ASN1_OBJECT, b: ?*const ASN1_OBJECT) c_int;
pub extern fn OBJ_bsearch_(key: ?*const c_void, base: ?*const c_void, num: c_int, size: c_int, cmp: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) ?*const c_void;
pub extern fn OBJ_bsearch_ex_(key: ?*const c_void, base: ?*const c_void, num: c_int, size: c_int, cmp: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int, flags: c_int) ?*const c_void;
pub extern fn OBJ_new_nid(num: c_int) c_int;
pub extern fn OBJ_add_object(obj: ?*const ASN1_OBJECT) c_int;
pub extern fn OBJ_create(oid: [*c]const u8, sn: [*c]const u8, ln: [*c]const u8) c_int;
pub extern fn OBJ_create_objects(in: ?*BIO) c_int;
pub extern fn OBJ_length(obj: ?*const ASN1_OBJECT) usize;
pub extern fn OBJ_get0_data(obj: ?*const ASN1_OBJECT) [*c]const u8;
pub extern fn OBJ_find_sigid_algs(signid: c_int, pdig_nid: [*c]c_int, ppkey_nid: [*c]c_int) c_int;
pub extern fn OBJ_find_sigid_by_algs(psignid: [*c]c_int, dig_nid: c_int, pkey_nid: c_int) c_int;
pub extern fn OBJ_add_sigid(signid: c_int, dig_id: c_int, pkey_id: c_int) c_int;
pub extern fn OBJ_sigid_free() void;
pub extern fn EVP_MD_meth_new(md_type: c_int, pkey_type: c_int) ?*EVP_MD;
pub extern fn EVP_MD_meth_dup(md: ?*const EVP_MD) ?*EVP_MD;
pub extern fn EVP_MD_meth_free(md: ?*EVP_MD) void;
pub extern fn EVP_MD_meth_set_input_blocksize(md: ?*EVP_MD, blocksize: c_int) c_int;
pub extern fn EVP_MD_meth_set_result_size(md: ?*EVP_MD, resultsize: c_int) c_int;
pub extern fn EVP_MD_meth_set_app_datasize(md: ?*EVP_MD, datasize: c_int) c_int;
pub extern fn EVP_MD_meth_set_flags(md: ?*EVP_MD, flags: c_ulong) c_int;
pub extern fn EVP_MD_meth_set_init(md: ?*EVP_MD, init: ?fn (?*EVP_MD_CTX) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_set_update(md: ?*EVP_MD, update: ?fn (?*EVP_MD_CTX, ?*const c_void, usize) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_set_final(md: ?*EVP_MD, final: ?fn (?*EVP_MD_CTX, [*c]u8) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_set_copy(md: ?*EVP_MD, copy: ?fn (?*EVP_MD_CTX, ?*const EVP_MD_CTX) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_set_cleanup(md: ?*EVP_MD, cleanup: ?fn (?*EVP_MD_CTX) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_set_ctrl(md: ?*EVP_MD, ctrl: ?fn (?*EVP_MD_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int) c_int;
pub extern fn EVP_MD_meth_get_input_blocksize(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_meth_get_result_size(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_meth_get_app_datasize(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_meth_get_flags(md: ?*const EVP_MD) c_ulong;
pub extern fn EVP_MD_meth_get_init(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX) callconv(.C) c_int;
pub extern fn EVP_MD_meth_get_update(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX, ?*const c_void, usize) callconv(.C) c_int;
pub extern fn EVP_MD_meth_get_final(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX, [*c]u8) callconv(.C) c_int;
pub extern fn EVP_MD_meth_get_copy(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX, ?*const EVP_MD_CTX) callconv(.C) c_int;
pub extern fn EVP_MD_meth_get_cleanup(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX) callconv(.C) c_int;
pub extern fn EVP_MD_meth_get_ctrl(md: ?*const EVP_MD) ?fn (?*EVP_MD_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_new(cipher_type: c_int, block_size: c_int, key_len: c_int) ?*EVP_CIPHER;
pub extern fn EVP_CIPHER_meth_dup(cipher: ?*const EVP_CIPHER) ?*EVP_CIPHER;
pub extern fn EVP_CIPHER_meth_free(cipher: ?*EVP_CIPHER) void;
pub extern fn EVP_CIPHER_meth_set_iv_length(cipher: ?*EVP_CIPHER, iv_len: c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_flags(cipher: ?*EVP_CIPHER, flags: c_ulong) c_int;
pub extern fn EVP_CIPHER_meth_set_impl_ctx_size(cipher: ?*EVP_CIPHER, ctx_size: c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_init(cipher: ?*EVP_CIPHER, init: ?fn (?*EVP_CIPHER_CTX, [*c]const u8, [*c]const u8, c_int) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_do_cipher(cipher: ?*EVP_CIPHER, do_cipher: ?fn (?*EVP_CIPHER_CTX, [*c]u8, [*c]const u8, usize) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_cleanup(cipher: ?*EVP_CIPHER, cleanup: ?fn (?*EVP_CIPHER_CTX) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_set_asn1_params(cipher: ?*EVP_CIPHER, set_asn1_parameters: ?fn (?*EVP_CIPHER_CTX, [*c]ASN1_TYPE) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_get_asn1_params(cipher: ?*EVP_CIPHER, get_asn1_parameters: ?fn (?*EVP_CIPHER_CTX, [*c]ASN1_TYPE) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_set_ctrl(cipher: ?*EVP_CIPHER, ctrl: ?fn (?*EVP_CIPHER_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int) c_int;
pub extern fn EVP_CIPHER_meth_get_init(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX, [*c]const u8, [*c]const u8, c_int) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_get_do_cipher(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX, [*c]u8, [*c]const u8, usize) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_get_cleanup(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_get_set_asn1_params(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX, [*c]ASN1_TYPE) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_get_get_asn1_params(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX, [*c]ASN1_TYPE) callconv(.C) c_int;
pub extern fn EVP_CIPHER_meth_get_ctrl(cipher: ?*const EVP_CIPHER) ?fn (?*EVP_CIPHER_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int;
const struct_unnamed_39 = extern struct {
    out: [*c]u8,
    inp: [*c]const u8,
    len: usize,
    interleave: c_uint,
};
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM = struct_unnamed_39;
pub const struct_evp_cipher_info_st = extern struct {
    cipher: ?*const EVP_CIPHER,
    iv: [16]u8,
};
pub const EVP_CIPHER_INFO = struct_evp_cipher_info_st;
pub const EVP_PBE_KEYGEN = fn (?*EVP_CIPHER_CTX, [*c]const u8, c_int, [*c]ASN1_TYPE, ?*const EVP_CIPHER, ?*const EVP_MD, c_int) callconv(.C) c_int;
pub extern fn EVP_MD_type(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_pkey_type(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_size(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_block_size(md: ?*const EVP_MD) c_int;
pub extern fn EVP_MD_flags(md: ?*const EVP_MD) c_ulong;
pub extern fn EVP_MD_CTX_md(ctx: ?*const EVP_MD_CTX) ?*const EVP_MD;
pub extern fn EVP_MD_CTX_update_fn(ctx: ?*EVP_MD_CTX) ?fn (?*EVP_MD_CTX, ?*const c_void, usize) callconv(.C) c_int;
pub extern fn EVP_MD_CTX_set_update_fn(ctx: ?*EVP_MD_CTX, update: ?fn (?*EVP_MD_CTX, ?*const c_void, usize) callconv(.C) c_int) void;
pub extern fn EVP_MD_CTX_pkey_ctx(ctx: ?*const EVP_MD_CTX) ?*EVP_PKEY_CTX;
pub extern fn EVP_MD_CTX_set_pkey_ctx(ctx: ?*EVP_MD_CTX, pctx: ?*EVP_PKEY_CTX) void;
pub extern fn EVP_MD_CTX_md_data(ctx: ?*const EVP_MD_CTX) ?*c_void;
pub extern fn EVP_CIPHER_nid(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_block_size(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_impl_ctx_size(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_key_length(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_iv_length(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_flags(cipher: ?*const EVP_CIPHER) c_ulong;
pub extern fn EVP_CIPHER_CTX_cipher(ctx: ?*const EVP_CIPHER_CTX) ?*const EVP_CIPHER;
pub extern fn EVP_CIPHER_CTX_encrypting(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_nid(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_block_size(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_key_length(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_iv_length(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_iv(ctx: ?*const EVP_CIPHER_CTX) [*c]const u8;
pub extern fn EVP_CIPHER_CTX_original_iv(ctx: ?*const EVP_CIPHER_CTX) [*c]const u8;
pub extern fn EVP_CIPHER_CTX_iv_noconst(ctx: ?*EVP_CIPHER_CTX) [*c]u8;
pub extern fn EVP_CIPHER_CTX_buf_noconst(ctx: ?*EVP_CIPHER_CTX) [*c]u8;
pub extern fn EVP_CIPHER_CTX_num(ctx: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_set_num(ctx: ?*EVP_CIPHER_CTX, num: c_int) void;
pub extern fn EVP_CIPHER_CTX_copy(out: ?*EVP_CIPHER_CTX, in: ?*const EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_get_app_data(ctx: ?*const EVP_CIPHER_CTX) ?*c_void;
pub extern fn EVP_CIPHER_CTX_set_app_data(ctx: ?*EVP_CIPHER_CTX, data: ?*c_void) void;
pub extern fn EVP_CIPHER_CTX_get_cipher_data(ctx: ?*const EVP_CIPHER_CTX) ?*c_void;
pub extern fn EVP_CIPHER_CTX_set_cipher_data(ctx: ?*EVP_CIPHER_CTX, cipher_data: ?*c_void) ?*c_void;
pub extern fn EVP_Cipher(c: ?*EVP_CIPHER_CTX, out: [*c]u8, in: [*c]const u8, inl: c_uint) c_int;
pub extern fn EVP_MD_CTX_ctrl(ctx: ?*EVP_MD_CTX, cmd: c_int, p1: c_int, p2: ?*c_void) c_int;
pub extern fn EVP_MD_CTX_new() ?*EVP_MD_CTX;
pub extern fn EVP_MD_CTX_reset(ctx: ?*EVP_MD_CTX) c_int;
pub extern fn EVP_MD_CTX_free(ctx: ?*EVP_MD_CTX) void;
pub extern fn EVP_MD_CTX_copy_ex(out: ?*EVP_MD_CTX, in: ?*const EVP_MD_CTX) c_int;
pub extern fn EVP_MD_CTX_set_flags(ctx: ?*EVP_MD_CTX, flags: c_int) void;
pub extern fn EVP_MD_CTX_clear_flags(ctx: ?*EVP_MD_CTX, flags: c_int) void;
pub extern fn EVP_MD_CTX_test_flags(ctx: ?*const EVP_MD_CTX, flags: c_int) c_int;
pub extern fn EVP_DigestInit_ex(ctx: ?*EVP_MD_CTX, type: ?*const EVP_MD, impl: ?*ENGINE) c_int;
pub extern fn EVP_DigestUpdate(ctx: ?*EVP_MD_CTX, d: ?*const c_void, cnt: usize) c_int;
pub extern fn EVP_DigestFinal_ex(ctx: ?*EVP_MD_CTX, md: [*c]u8, s: [*c]c_uint) c_int;
pub extern fn EVP_Digest(data: ?*const c_void, count: usize, md: [*c]u8, size: [*c]c_uint, type: ?*const EVP_MD, impl: ?*ENGINE) c_int;
pub extern fn EVP_MD_CTX_copy(out: ?*EVP_MD_CTX, in: ?*const EVP_MD_CTX) c_int;
pub extern fn EVP_DigestInit(ctx: ?*EVP_MD_CTX, type: ?*const EVP_MD) c_int;
pub extern fn EVP_DigestFinal(ctx: ?*EVP_MD_CTX, md: [*c]u8, s: [*c]c_uint) c_int;
pub extern fn EVP_DigestFinalXOF(ctx: ?*EVP_MD_CTX, md: [*c]u8, len: usize) c_int;
pub extern fn EVP_read_pw_string(buf: [*c]u8, length: c_int, prompt: [*c]const u8, verify: c_int) c_int;
pub extern fn EVP_read_pw_string_min(buf: [*c]u8, minlen: c_int, maxlen: c_int, prompt: [*c]const u8, verify: c_int) c_int;
pub extern fn EVP_set_pw_prompt(prompt: [*c]const u8) void;
pub extern fn EVP_get_pw_prompt() [*c]u8;
pub extern fn EVP_BytesToKey(type: ?*const EVP_CIPHER, md: ?*const EVP_MD, salt: [*c]const u8, data: [*c]const u8, datal: c_int, count: c_int, key: [*c]u8, iv: [*c]u8) c_int;
pub extern fn EVP_CIPHER_CTX_set_flags(ctx: ?*EVP_CIPHER_CTX, flags: c_int) void;
pub extern fn EVP_CIPHER_CTX_clear_flags(ctx: ?*EVP_CIPHER_CTX, flags: c_int) void;
pub extern fn EVP_CIPHER_CTX_test_flags(ctx: ?*const EVP_CIPHER_CTX, flags: c_int) c_int;
pub extern fn EVP_EncryptInit(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, key: [*c]const u8, iv: [*c]const u8) c_int;
pub extern fn EVP_EncryptInit_ex(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, impl: ?*ENGINE, key: [*c]const u8, iv: [*c]const u8) c_int;
pub extern fn EVP_EncryptUpdate(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int, in: [*c]const u8, inl: c_int) c_int;
pub extern fn EVP_EncryptFinal_ex(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_EncryptFinal(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_DecryptInit(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, key: [*c]const u8, iv: [*c]const u8) c_int;
pub extern fn EVP_DecryptInit_ex(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, impl: ?*ENGINE, key: [*c]const u8, iv: [*c]const u8) c_int;
pub extern fn EVP_DecryptUpdate(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int, in: [*c]const u8, inl: c_int) c_int;
pub extern fn EVP_DecryptFinal(ctx: ?*EVP_CIPHER_CTX, outm: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_DecryptFinal_ex(ctx: ?*EVP_CIPHER_CTX, outm: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_CipherInit(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, key: [*c]const u8, iv: [*c]const u8, enc: c_int) c_int;
pub extern fn EVP_CipherInit_ex(ctx: ?*EVP_CIPHER_CTX, cipher: ?*const EVP_CIPHER, impl: ?*ENGINE, key: [*c]const u8, iv: [*c]const u8, enc: c_int) c_int;
pub extern fn EVP_CipherUpdate(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int, in: [*c]const u8, inl: c_int) c_int;
pub extern fn EVP_CipherFinal(ctx: ?*EVP_CIPHER_CTX, outm: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_CipherFinal_ex(ctx: ?*EVP_CIPHER_CTX, outm: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_SignFinal(ctx: ?*EVP_MD_CTX, md: [*c]u8, s: [*c]c_uint, pkey: ?*EVP_PKEY) c_int;
pub extern fn EVP_DigestSign(ctx: ?*EVP_MD_CTX, sigret: [*c]u8, siglen: [*c]usize, tbs: [*c]const u8, tbslen: usize) c_int;
pub extern fn EVP_VerifyFinal(ctx: ?*EVP_MD_CTX, sigbuf: [*c]const u8, siglen: c_uint, pkey: ?*EVP_PKEY) c_int;
pub extern fn EVP_DigestVerify(ctx: ?*EVP_MD_CTX, sigret: [*c]const u8, siglen: usize, tbs: [*c]const u8, tbslen: usize) c_int;
pub extern fn EVP_DigestSignInit(ctx: ?*EVP_MD_CTX, pctx: [*c]?*EVP_PKEY_CTX, type: ?*const EVP_MD, e: ?*ENGINE, pkey: ?*EVP_PKEY) c_int;
pub extern fn EVP_DigestSignFinal(ctx: ?*EVP_MD_CTX, sigret: [*c]u8, siglen: [*c]usize) c_int;
pub extern fn EVP_DigestVerifyInit(ctx: ?*EVP_MD_CTX, pctx: [*c]?*EVP_PKEY_CTX, type: ?*const EVP_MD, e: ?*ENGINE, pkey: ?*EVP_PKEY) c_int;
pub extern fn EVP_DigestVerifyFinal(ctx: ?*EVP_MD_CTX, sig: [*c]const u8, siglen: usize) c_int;
pub extern fn EVP_OpenInit(ctx: ?*EVP_CIPHER_CTX, type: ?*const EVP_CIPHER, ek: [*c]const u8, ekl: c_int, iv: [*c]const u8, priv: ?*EVP_PKEY) c_int;
pub extern fn EVP_OpenFinal(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_SealInit(ctx: ?*EVP_CIPHER_CTX, type: ?*const EVP_CIPHER, ek: [*c][*c]u8, ekl: [*c]c_int, iv: [*c]u8, pubk: [*c]?*EVP_PKEY, npubk: c_int) c_int;
pub extern fn EVP_SealFinal(ctx: ?*EVP_CIPHER_CTX, out: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_ENCODE_CTX_new() ?*EVP_ENCODE_CTX;
pub extern fn EVP_ENCODE_CTX_free(ctx: ?*EVP_ENCODE_CTX) void;
pub extern fn EVP_ENCODE_CTX_copy(dctx: ?*EVP_ENCODE_CTX, sctx: ?*EVP_ENCODE_CTX) c_int;
pub extern fn EVP_ENCODE_CTX_num(ctx: ?*EVP_ENCODE_CTX) c_int;
pub extern fn EVP_EncodeInit(ctx: ?*EVP_ENCODE_CTX) void;
pub extern fn EVP_EncodeUpdate(ctx: ?*EVP_ENCODE_CTX, out: [*c]u8, outl: [*c]c_int, in: [*c]const u8, inl: c_int) c_int;
pub extern fn EVP_EncodeFinal(ctx: ?*EVP_ENCODE_CTX, out: [*c]u8, outl: [*c]c_int) void;
pub extern fn EVP_EncodeBlock(t: [*c]u8, f: [*c]const u8, n: c_int) c_int;
pub extern fn EVP_DecodeInit(ctx: ?*EVP_ENCODE_CTX) void;
pub extern fn EVP_DecodeUpdate(ctx: ?*EVP_ENCODE_CTX, out: [*c]u8, outl: [*c]c_int, in: [*c]const u8, inl: c_int) c_int;
pub extern fn EVP_DecodeFinal(ctx: ?*EVP_ENCODE_CTX, out: [*c]u8, outl: [*c]c_int) c_int;
pub extern fn EVP_DecodeBlock(t: [*c]u8, f: [*c]const u8, n: c_int) c_int;
pub extern fn EVP_CIPHER_CTX_new() ?*EVP_CIPHER_CTX;
pub extern fn EVP_CIPHER_CTX_reset(c: ?*EVP_CIPHER_CTX) c_int;
pub extern fn EVP_CIPHER_CTX_free(c: ?*EVP_CIPHER_CTX) void;
pub extern fn EVP_CIPHER_CTX_set_key_length(x: ?*EVP_CIPHER_CTX, keylen: c_int) c_int;
pub extern fn EVP_CIPHER_CTX_set_padding(c: ?*EVP_CIPHER_CTX, pad: c_int) c_int;
pub extern fn EVP_CIPHER_CTX_ctrl(ctx: ?*EVP_CIPHER_CTX, type: c_int, arg: c_int, ptr: ?*c_void) c_int;
pub extern fn EVP_CIPHER_CTX_rand_key(ctx: ?*EVP_CIPHER_CTX, key: [*c]u8) c_int;
pub extern fn BIO_f_md() ?*const BIO_METHOD;
pub extern fn BIO_f_base64() ?*const BIO_METHOD;
pub extern fn BIO_f_cipher() ?*const BIO_METHOD;
pub extern fn BIO_f_reliable() ?*const BIO_METHOD;
pub extern fn BIO_set_cipher(b: ?*BIO, c: ?*const EVP_CIPHER, k: [*c]const u8, i: [*c]const u8, enc: c_int) c_int;
pub extern fn EVP_md_null() ?*const EVP_MD;
pub extern fn EVP_md4() ?*const EVP_MD;
pub extern fn EVP_md5() ?*const EVP_MD;
pub extern fn EVP_md5_sha1() ?*const EVP_MD;
pub extern fn EVP_blake2b512() ?*const EVP_MD;
pub extern fn EVP_blake2s256() ?*const EVP_MD;
pub extern fn EVP_sha1() ?*const EVP_MD;
pub extern fn EVP_sha224() ?*const EVP_MD;
pub extern fn EVP_sha256() ?*const EVP_MD;
pub extern fn EVP_sha384() ?*const EVP_MD;
pub extern fn EVP_sha512() ?*const EVP_MD;
pub extern fn EVP_sha512_224() ?*const EVP_MD;
pub extern fn EVP_sha512_256() ?*const EVP_MD;
pub extern fn EVP_sha3_224() ?*const EVP_MD;
pub extern fn EVP_sha3_256() ?*const EVP_MD;
pub extern fn EVP_sha3_384() ?*const EVP_MD;
pub extern fn EVP_sha3_512() ?*const EVP_MD;
pub extern fn EVP_shake128() ?*const EVP_MD;
pub extern fn EVP_shake256() ?*const EVP_MD;
pub extern fn EVP_ripemd160() ?*const EVP_MD;
pub extern fn EVP_whirlpool() ?*const EVP_MD;
pub extern fn EVP_sm3() ?*const EVP_MD;
pub extern fn EVP_enc_null() ?*const EVP_CIPHER;
pub extern fn EVP_des_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_des_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_des_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_des_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_des_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_des_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_desx_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_des_ede3_wrap() ?*const EVP_CIPHER;
pub extern fn EVP_rc4() ?*const EVP_CIPHER;
pub extern fn EVP_rc4_40() ?*const EVP_CIPHER;
pub extern fn EVP_rc4_hmac_md5() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_40_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_64_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_rc2_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_bf_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_bf_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_bf_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_bf_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_cast5_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_cast5_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_cast5_cfb64() ?*const EVP_CIPHER;
pub extern fn EVP_cast5_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_xts() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_wrap() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_wrap_pad() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_ocb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_wrap() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_wrap_pad() ?*const EVP_CIPHER;
pub extern fn EVP_aes_192_ocb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_xts() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_wrap() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_wrap_pad() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_ocb() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cbc_hmac_sha1() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cbc_hmac_sha1() ?*const EVP_CIPHER;
pub extern fn EVP_aes_128_cbc_hmac_sha256() ?*const EVP_CIPHER;
pub extern fn EVP_aes_256_cbc_hmac_sha256() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aria_128_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aria_192_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_gcm() ?*const EVP_CIPHER;
pub extern fn EVP_aria_256_ccm() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_128_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_192_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_cfb1() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_cfb8() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_camellia_256_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_chacha20() ?*const EVP_CIPHER;
pub extern fn EVP_chacha20_poly1305() ?*const EVP_CIPHER;
pub extern fn EVP_seed_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_seed_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_seed_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_seed_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_sm4_ecb() ?*const EVP_CIPHER;
pub extern fn EVP_sm4_cbc() ?*const EVP_CIPHER;
pub extern fn EVP_sm4_cfb128() ?*const EVP_CIPHER;
pub extern fn EVP_sm4_ofb() ?*const EVP_CIPHER;
pub extern fn EVP_sm4_ctr() ?*const EVP_CIPHER;
pub extern fn EVP_add_cipher(cipher: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_add_digest(digest: ?*const EVP_MD) c_int;
pub extern fn EVP_get_cipherbyname(name: [*c]const u8) ?*const EVP_CIPHER;
pub extern fn EVP_get_digestbyname(name: [*c]const u8) ?*const EVP_MD;
pub extern fn EVP_CIPHER_do_all(@"fn": ?fn (?*const EVP_CIPHER, [*c]const u8, [*c]const u8, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn EVP_CIPHER_do_all_sorted(@"fn": ?fn (?*const EVP_CIPHER, [*c]const u8, [*c]const u8, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn EVP_MD_do_all(@"fn": ?fn (?*const EVP_MD, [*c]const u8, [*c]const u8, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn EVP_MD_do_all_sorted(@"fn": ?fn (?*const EVP_MD, [*c]const u8, [*c]const u8, ?*c_void) callconv(.C) void, arg: ?*c_void) void;
pub extern fn EVP_PKEY_decrypt_old(dec_key: [*c]u8, enc_key: [*c]const u8, enc_key_len: c_int, private_key: ?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_encrypt_old(enc_key: [*c]u8, key: [*c]const u8, key_len: c_int, pub_key: ?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_type(type: c_int) c_int;
pub extern fn EVP_PKEY_id(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_base_id(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_bits(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_security_bits(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_size(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_set_type(pkey: ?*EVP_PKEY, type: c_int) c_int;
pub extern fn EVP_PKEY_set_type_str(pkey: ?*EVP_PKEY, str: [*c]const u8, len: c_int) c_int;
pub extern fn EVP_PKEY_set_alias_type(pkey: ?*EVP_PKEY, type: c_int) c_int;
pub extern fn EVP_PKEY_set1_engine(pkey: ?*EVP_PKEY, e: ?*ENGINE) c_int;
pub extern fn EVP_PKEY_get0_engine(pkey: ?*const EVP_PKEY) ?*ENGINE;
pub extern fn EVP_PKEY_assign(pkey: ?*EVP_PKEY, type: c_int, key: ?*c_void) c_int;
pub extern fn EVP_PKEY_get0(pkey: ?*const EVP_PKEY) ?*c_void;
pub extern fn EVP_PKEY_get0_hmac(pkey: ?*const EVP_PKEY, len: [*c]usize) [*c]const u8;
pub extern fn EVP_PKEY_get0_poly1305(pkey: ?*const EVP_PKEY, len: [*c]usize) [*c]const u8;
pub extern fn EVP_PKEY_get0_siphash(pkey: ?*const EVP_PKEY, len: [*c]usize) [*c]const u8;
pub extern fn EVP_PKEY_set1_RSA(pkey: ?*EVP_PKEY, key: ?*struct_rsa_st) c_int;
pub extern fn EVP_PKEY_get0_RSA(pkey: ?*EVP_PKEY) ?*struct_rsa_st;
pub extern fn EVP_PKEY_get1_RSA(pkey: ?*EVP_PKEY) ?*struct_rsa_st;
pub extern fn EVP_PKEY_set1_DSA(pkey: ?*EVP_PKEY, key: ?*struct_dsa_st) c_int;
pub extern fn EVP_PKEY_get0_DSA(pkey: ?*EVP_PKEY) ?*struct_dsa_st;
pub extern fn EVP_PKEY_get1_DSA(pkey: ?*EVP_PKEY) ?*struct_dsa_st;
pub extern fn EVP_PKEY_set1_DH(pkey: ?*EVP_PKEY, key: ?*struct_dh_st) c_int;
pub extern fn EVP_PKEY_get0_DH(pkey: ?*EVP_PKEY) ?*struct_dh_st;
pub extern fn EVP_PKEY_get1_DH(pkey: ?*EVP_PKEY) ?*struct_dh_st;
pub extern fn EVP_PKEY_set1_EC_KEY(pkey: ?*EVP_PKEY, key: ?*struct_ec_key_st) c_int;
pub extern fn EVP_PKEY_get0_EC_KEY(pkey: ?*EVP_PKEY) ?*struct_ec_key_st;
pub extern fn EVP_PKEY_get1_EC_KEY(pkey: ?*EVP_PKEY) ?*struct_ec_key_st;
pub extern fn EVP_PKEY_new() ?*EVP_PKEY;
pub extern fn EVP_PKEY_up_ref(pkey: ?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_free(pkey: ?*EVP_PKEY) void;
pub extern fn d2i_PublicKey(type: c_int, a: [*c]?*EVP_PKEY, pp: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn i2d_PublicKey(a: ?*EVP_PKEY, pp: [*c][*c]u8) c_int;
pub extern fn d2i_PrivateKey(type: c_int, a: [*c]?*EVP_PKEY, pp: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn d2i_AutoPrivateKey(a: [*c]?*EVP_PKEY, pp: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn i2d_PrivateKey(a: ?*EVP_PKEY, pp: [*c][*c]u8) c_int;
pub extern fn EVP_PKEY_copy_parameters(to: ?*EVP_PKEY, from: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_missing_parameters(pkey: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_save_parameters(pkey: ?*EVP_PKEY, mode: c_int) c_int;
pub extern fn EVP_PKEY_cmp_parameters(a: ?*const EVP_PKEY, b: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_cmp(a: ?*const EVP_PKEY, b: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_print_public(out: ?*BIO, pkey: ?*const EVP_PKEY, indent: c_int, pctx: ?*ASN1_PCTX) c_int;
pub extern fn EVP_PKEY_print_private(out: ?*BIO, pkey: ?*const EVP_PKEY, indent: c_int, pctx: ?*ASN1_PCTX) c_int;
pub extern fn EVP_PKEY_print_params(out: ?*BIO, pkey: ?*const EVP_PKEY, indent: c_int, pctx: ?*ASN1_PCTX) c_int;
pub extern fn EVP_PKEY_get_default_digest_nid(pkey: ?*EVP_PKEY, pnid: [*c]c_int) c_int;
pub extern fn EVP_PKEY_set1_tls_encodedpoint(pkey: ?*EVP_PKEY, pt: [*c]const u8, ptlen: usize) c_int;
pub extern fn EVP_PKEY_get1_tls_encodedpoint(pkey: ?*EVP_PKEY, ppt: [*c][*c]u8) usize;
pub extern fn EVP_CIPHER_type(ctx: ?*const EVP_CIPHER) c_int;
pub extern fn EVP_CIPHER_param_to_asn1(c: ?*EVP_CIPHER_CTX, type: [*c]ASN1_TYPE) c_int;
pub extern fn EVP_CIPHER_asn1_to_param(c: ?*EVP_CIPHER_CTX, type: [*c]ASN1_TYPE) c_int;
pub extern fn EVP_CIPHER_set_asn1_iv(c: ?*EVP_CIPHER_CTX, type: [*c]ASN1_TYPE) c_int;
pub extern fn EVP_CIPHER_get_asn1_iv(c: ?*EVP_CIPHER_CTX, type: [*c]ASN1_TYPE) c_int;
pub extern fn PKCS5_PBE_keyivgen(ctx: ?*EVP_CIPHER_CTX, pass: [*c]const u8, passlen: c_int, param: [*c]ASN1_TYPE, cipher: ?*const EVP_CIPHER, md: ?*const EVP_MD, en_de: c_int) c_int;
pub extern fn PKCS5_PBKDF2_HMAC_SHA1(pass: [*c]const u8, passlen: c_int, salt: [*c]const u8, saltlen: c_int, iter: c_int, keylen: c_int, out: [*c]u8) c_int;
pub extern fn PKCS5_PBKDF2_HMAC(pass: [*c]const u8, passlen: c_int, salt: [*c]const u8, saltlen: c_int, iter: c_int, digest: ?*const EVP_MD, keylen: c_int, out: [*c]u8) c_int;
pub extern fn PKCS5_v2_PBE_keyivgen(ctx: ?*EVP_CIPHER_CTX, pass: [*c]const u8, passlen: c_int, param: [*c]ASN1_TYPE, cipher: ?*const EVP_CIPHER, md: ?*const EVP_MD, en_de: c_int) c_int;
pub extern fn EVP_PBE_scrypt(pass: [*c]const u8, passlen: usize, salt: [*c]const u8, saltlen: usize, N: u64, r: u64, p: u64, maxmem: u64, key: [*c]u8, keylen: usize) c_int;
pub extern fn PKCS5_v2_scrypt_keyivgen(ctx: ?*EVP_CIPHER_CTX, pass: [*c]const u8, passlen: c_int, param: [*c]ASN1_TYPE, c: ?*const EVP_CIPHER, md: ?*const EVP_MD, en_de: c_int) c_int;
pub extern fn PKCS5_PBE_add() void;
pub extern fn EVP_PBE_CipherInit(pbe_obj: ?*ASN1_OBJECT, pass: [*c]const u8, passlen: c_int, param: [*c]ASN1_TYPE, ctx: ?*EVP_CIPHER_CTX, en_de: c_int) c_int;
pub extern fn EVP_PBE_alg_add_type(pbe_type: c_int, pbe_nid: c_int, cipher_nid: c_int, md_nid: c_int, keygen: ?EVP_PBE_KEYGEN) c_int;
pub extern fn EVP_PBE_alg_add(nid: c_int, cipher: ?*const EVP_CIPHER, md: ?*const EVP_MD, keygen: ?EVP_PBE_KEYGEN) c_int;
pub extern fn EVP_PBE_find(type: c_int, pbe_nid: c_int, pcnid: [*c]c_int, pmnid: [*c]c_int, pkeygen: [*c]?EVP_PBE_KEYGEN) c_int;
pub extern fn EVP_PBE_cleanup() void;
pub extern fn EVP_PBE_get(ptype: [*c]c_int, ppbe_nid: [*c]c_int, num: usize) c_int;
pub extern fn EVP_PKEY_asn1_get_count() c_int;
pub extern fn EVP_PKEY_asn1_get0(idx: c_int) ?*const EVP_PKEY_ASN1_METHOD;
pub extern fn EVP_PKEY_asn1_find(pe: [*c]?*ENGINE, type: c_int) ?*const EVP_PKEY_ASN1_METHOD;
pub extern fn EVP_PKEY_asn1_find_str(pe: [*c]?*ENGINE, str: [*c]const u8, len: c_int) ?*const EVP_PKEY_ASN1_METHOD;
pub extern fn EVP_PKEY_asn1_add0(ameth: ?*const EVP_PKEY_ASN1_METHOD) c_int;
pub extern fn EVP_PKEY_asn1_add_alias(to: c_int, from: c_int) c_int;
pub extern fn EVP_PKEY_asn1_get0_info(ppkey_id: [*c]c_int, pkey_base_id: [*c]c_int, ppkey_flags: [*c]c_int, pinfo: [*c][*c]const u8, ppem_str: [*c][*c]const u8, ameth: ?*const EVP_PKEY_ASN1_METHOD) c_int;
pub extern fn EVP_PKEY_get0_asn1(pkey: ?*const EVP_PKEY) ?*const EVP_PKEY_ASN1_METHOD;
pub extern fn EVP_PKEY_asn1_new(id: c_int, flags: c_int, pem_str: [*c]const u8, info: [*c]const u8) ?*EVP_PKEY_ASN1_METHOD;
pub extern fn EVP_PKEY_asn1_copy(dst: ?*EVP_PKEY_ASN1_METHOD, src: ?*const EVP_PKEY_ASN1_METHOD) void;
pub extern fn EVP_PKEY_asn1_free(ameth: ?*EVP_PKEY_ASN1_METHOD) void;
pub extern fn EVP_PKEY_asn1_set_public(ameth: ?*EVP_PKEY_ASN1_METHOD, pub_decode: ?fn (?*EVP_PKEY, ?*X509_PUBKEY) callconv(.C) c_int, pub_encode: ?fn (?*X509_PUBKEY, ?*const EVP_PKEY) callconv(.C) c_int, pub_cmp: ?fn (?*const EVP_PKEY, ?*const EVP_PKEY) callconv(.C) c_int, pub_print: ?fn (?*BIO, ?*const EVP_PKEY, c_int, ?*ASN1_PCTX) callconv(.C) c_int, pkey_size: ?fn (?*const EVP_PKEY) callconv(.C) c_int, pkey_bits: ?fn (?*const EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_private(ameth: ?*EVP_PKEY_ASN1_METHOD, priv_decode: ?fn (?*EVP_PKEY, ?*const PKCS8_PRIV_KEY_INFO) callconv(.C) c_int, priv_encode: ?fn (?*PKCS8_PRIV_KEY_INFO, ?*const EVP_PKEY) callconv(.C) c_int, priv_print: ?fn (?*BIO, ?*const EVP_PKEY, c_int, ?*ASN1_PCTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_param(ameth: ?*EVP_PKEY_ASN1_METHOD, param_decode: ?fn (?*EVP_PKEY, [*c][*c]const u8, c_int) callconv(.C) c_int, param_encode: ?fn (?*const EVP_PKEY, [*c][*c]u8) callconv(.C) c_int, param_missing: ?fn (?*const EVP_PKEY) callconv(.C) c_int, param_copy: ?fn (?*EVP_PKEY, ?*const EVP_PKEY) callconv(.C) c_int, param_cmp: ?fn (?*const EVP_PKEY, ?*const EVP_PKEY) callconv(.C) c_int, param_print: ?fn (?*BIO, ?*const EVP_PKEY, c_int, ?*ASN1_PCTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_free(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_free: ?fn (?*EVP_PKEY) callconv(.C) void) void;
pub extern fn EVP_PKEY_asn1_set_ctrl(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_ctrl: ?fn (?*EVP_PKEY, c_int, c_long, ?*c_void) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_item(ameth: ?*EVP_PKEY_ASN1_METHOD, item_verify: ?fn (?*EVP_MD_CTX, ?*const ASN1_ITEM, ?*c_void, [*c]X509_ALGOR, [*c]ASN1_BIT_STRING, ?*EVP_PKEY) callconv(.C) c_int, item_sign: ?fn (?*EVP_MD_CTX, ?*const ASN1_ITEM, ?*c_void, [*c]X509_ALGOR, [*c]X509_ALGOR, [*c]ASN1_BIT_STRING) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_siginf(ameth: ?*EVP_PKEY_ASN1_METHOD, siginf_set: ?fn (?*X509_SIG_INFO, [*c]const X509_ALGOR, [*c]const ASN1_STRING) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_check(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_check: ?fn (?*const EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_public_check(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_pub_check: ?fn (?*const EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_param_check(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_param_check: ?fn (?*const EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_set_priv_key(ameth: ?*EVP_PKEY_ASN1_METHOD, set_priv_key: ?fn (?*EVP_PKEY, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_set_pub_key(ameth: ?*EVP_PKEY_ASN1_METHOD, set_pub_key: ?fn (?*EVP_PKEY, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_get_priv_key(ameth: ?*EVP_PKEY_ASN1_METHOD, get_priv_key: ?fn (?*const EVP_PKEY, [*c]u8, [*c]usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_get_pub_key(ameth: ?*EVP_PKEY_ASN1_METHOD, get_pub_key: ?fn (?*const EVP_PKEY, [*c]u8, [*c]usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_asn1_set_security_bits(ameth: ?*EVP_PKEY_ASN1_METHOD, pkey_security_bits: ?fn (?*const EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_find(type: c_int) ?*const EVP_PKEY_METHOD;
pub extern fn EVP_PKEY_meth_new(id: c_int, flags: c_int) ?*EVP_PKEY_METHOD;
pub extern fn EVP_PKEY_meth_get0_info(ppkey_id: [*c]c_int, pflags: [*c]c_int, meth: ?*const EVP_PKEY_METHOD) void;
pub extern fn EVP_PKEY_meth_copy(dst: ?*EVP_PKEY_METHOD, src: ?*const EVP_PKEY_METHOD) void;
pub extern fn EVP_PKEY_meth_free(pmeth: ?*EVP_PKEY_METHOD) void;
pub extern fn EVP_PKEY_meth_add0(pmeth: ?*const EVP_PKEY_METHOD) c_int;
pub extern fn EVP_PKEY_meth_remove(pmeth: ?*const EVP_PKEY_METHOD) c_int;
pub extern fn EVP_PKEY_meth_get_count() usize;
pub extern fn EVP_PKEY_meth_get0(idx: usize) ?*const EVP_PKEY_METHOD;
pub extern fn EVP_PKEY_CTX_new(pkey: ?*EVP_PKEY, e: ?*ENGINE) ?*EVP_PKEY_CTX;
pub extern fn EVP_PKEY_CTX_new_id(id: c_int, e: ?*ENGINE) ?*EVP_PKEY_CTX;
pub extern fn EVP_PKEY_CTX_dup(ctx: ?*EVP_PKEY_CTX) ?*EVP_PKEY_CTX;
pub extern fn EVP_PKEY_CTX_free(ctx: ?*EVP_PKEY_CTX) void;
pub extern fn EVP_PKEY_CTX_ctrl(ctx: ?*EVP_PKEY_CTX, keytype: c_int, optype: c_int, cmd: c_int, p1: c_int, p2: ?*c_void) c_int;
pub extern fn EVP_PKEY_CTX_ctrl_str(ctx: ?*EVP_PKEY_CTX, type: [*c]const u8, value: [*c]const u8) c_int;
pub extern fn EVP_PKEY_CTX_ctrl_uint64(ctx: ?*EVP_PKEY_CTX, keytype: c_int, optype: c_int, cmd: c_int, value: u64) c_int;
pub extern fn EVP_PKEY_CTX_str2ctrl(ctx: ?*EVP_PKEY_CTX, cmd: c_int, str: [*c]const u8) c_int;
pub extern fn EVP_PKEY_CTX_hex2ctrl(ctx: ?*EVP_PKEY_CTX, cmd: c_int, hex: [*c]const u8) c_int;
pub extern fn EVP_PKEY_CTX_md(ctx: ?*EVP_PKEY_CTX, optype: c_int, cmd: c_int, md: [*c]const u8) c_int;
pub extern fn EVP_PKEY_CTX_get_operation(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_CTX_set0_keygen_info(ctx: ?*EVP_PKEY_CTX, dat: [*c]c_int, datlen: c_int) void;
pub extern fn EVP_PKEY_new_mac_key(type: c_int, e: ?*ENGINE, key: [*c]const u8, keylen: c_int) ?*EVP_PKEY;
pub extern fn EVP_PKEY_new_raw_private_key(type: c_int, e: ?*ENGINE, priv: [*c]const u8, len: usize) ?*EVP_PKEY;
pub extern fn EVP_PKEY_new_raw_public_key(type: c_int, e: ?*ENGINE, @"pub": [*c]const u8, len: usize) ?*EVP_PKEY;
pub extern fn EVP_PKEY_get_raw_private_key(pkey: ?*const EVP_PKEY, priv: [*c]u8, len: [*c]usize) c_int;
pub extern fn EVP_PKEY_get_raw_public_key(pkey: ?*const EVP_PKEY, @"pub": [*c]u8, len: [*c]usize) c_int;
pub extern fn EVP_PKEY_new_CMAC_key(e: ?*ENGINE, priv: [*c]const u8, len: usize, cipher: ?*const EVP_CIPHER) ?*EVP_PKEY;
pub extern fn EVP_PKEY_CTX_set_data(ctx: ?*EVP_PKEY_CTX, data: ?*c_void) void;
pub extern fn EVP_PKEY_CTX_get_data(ctx: ?*EVP_PKEY_CTX) ?*c_void;
pub extern fn EVP_PKEY_CTX_get0_pkey(ctx: ?*EVP_PKEY_CTX) ?*EVP_PKEY;
pub extern fn EVP_PKEY_CTX_get0_peerkey(ctx: ?*EVP_PKEY_CTX) ?*EVP_PKEY;
pub extern fn EVP_PKEY_CTX_set_app_data(ctx: ?*EVP_PKEY_CTX, data: ?*c_void) void;
pub extern fn EVP_PKEY_CTX_get_app_data(ctx: ?*EVP_PKEY_CTX) ?*c_void;
pub extern fn EVP_PKEY_sign_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_sign(ctx: ?*EVP_PKEY_CTX, sig: [*c]u8, siglen: [*c]usize, tbs: [*c]const u8, tbslen: usize) c_int;
pub extern fn EVP_PKEY_verify_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_verify(ctx: ?*EVP_PKEY_CTX, sig: [*c]const u8, siglen: usize, tbs: [*c]const u8, tbslen: usize) c_int;
pub extern fn EVP_PKEY_verify_recover_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_verify_recover(ctx: ?*EVP_PKEY_CTX, rout: [*c]u8, routlen: [*c]usize, sig: [*c]const u8, siglen: usize) c_int;
pub extern fn EVP_PKEY_encrypt_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_encrypt(ctx: ?*EVP_PKEY_CTX, out: [*c]u8, outlen: [*c]usize, in: [*c]const u8, inlen: usize) c_int;
pub extern fn EVP_PKEY_decrypt_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_decrypt(ctx: ?*EVP_PKEY_CTX, out: [*c]u8, outlen: [*c]usize, in: [*c]const u8, inlen: usize) c_int;
pub extern fn EVP_PKEY_derive_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_derive_set_peer(ctx: ?*EVP_PKEY_CTX, peer: ?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_derive(ctx: ?*EVP_PKEY_CTX, key: [*c]u8, keylen: [*c]usize) c_int;
pub const EVP_PKEY_gen_cb = fn (?*EVP_PKEY_CTX) callconv(.C) c_int;
pub extern fn EVP_PKEY_paramgen_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_paramgen(ctx: ?*EVP_PKEY_CTX, ppkey: [*c]?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_keygen_init(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_keygen(ctx: ?*EVP_PKEY_CTX, ppkey: [*c]?*EVP_PKEY) c_int;
pub extern fn EVP_PKEY_check(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_public_check(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_param_check(ctx: ?*EVP_PKEY_CTX) c_int;
pub extern fn EVP_PKEY_CTX_set_cb(ctx: ?*EVP_PKEY_CTX, cb: ?EVP_PKEY_gen_cb) void;
pub extern fn EVP_PKEY_CTX_get_cb(ctx: ?*EVP_PKEY_CTX) ?EVP_PKEY_gen_cb;
pub extern fn EVP_PKEY_CTX_get_keygen_info(ctx: ?*EVP_PKEY_CTX, idx: c_int) c_int;
pub extern fn EVP_PKEY_meth_set_init(pmeth: ?*EVP_PKEY_METHOD, init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_copy(pmeth: ?*EVP_PKEY_METHOD, copy: ?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_cleanup(pmeth: ?*EVP_PKEY_METHOD, cleanup: ?fn (?*EVP_PKEY_CTX) callconv(.C) void) void;
pub extern fn EVP_PKEY_meth_set_paramgen(pmeth: ?*EVP_PKEY_METHOD, paramgen_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, paramgen: ?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_keygen(pmeth: ?*EVP_PKEY_METHOD, keygen_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, keygen: ?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_sign(pmeth: ?*EVP_PKEY_METHOD, sign_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, sign: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_verify(pmeth: ?*EVP_PKEY_METHOD, verify_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, verify: ?fn (?*EVP_PKEY_CTX, [*c]const u8, usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_verify_recover(pmeth: ?*EVP_PKEY_METHOD, verify_recover_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, verify_recover: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_signctx(pmeth: ?*EVP_PKEY_METHOD, signctx_init: ?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int, signctx: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_verifyctx(pmeth: ?*EVP_PKEY_METHOD, verifyctx_init: ?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int, verifyctx: ?fn (?*EVP_PKEY_CTX, [*c]const u8, c_int, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_encrypt(pmeth: ?*EVP_PKEY_METHOD, encrypt_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, encryptfn: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_decrypt(pmeth: ?*EVP_PKEY_METHOD, decrypt_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, decrypt: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_derive(pmeth: ?*EVP_PKEY_METHOD, derive_init: ?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, derive: ?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_ctrl(pmeth: ?*EVP_PKEY_METHOD, ctrl: ?fn (?*EVP_PKEY_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int, ctrl_str: ?fn (?*EVP_PKEY_CTX, [*c]const u8, [*c]const u8) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_digestsign(pmeth: ?*EVP_PKEY_METHOD, digestsign: ?fn (?*EVP_MD_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_digestverify(pmeth: ?*EVP_PKEY_METHOD, digestverify: ?fn (?*EVP_MD_CTX, [*c]const u8, usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_check(pmeth: ?*EVP_PKEY_METHOD, check: ?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_public_check(pmeth: ?*EVP_PKEY_METHOD, check: ?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_param_check(pmeth: ?*EVP_PKEY_METHOD, check: ?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_set_digest_custom(pmeth: ?*EVP_PKEY_METHOD, digest_custom: ?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_init(pmeth: ?*const EVP_PKEY_METHOD, pinit: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_copy(pmeth: ?*const EVP_PKEY_METHOD, pcopy: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_cleanup(pmeth: ?*const EVP_PKEY_METHOD, pcleanup: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) void) void;
pub extern fn EVP_PKEY_meth_get_paramgen(pmeth: ?*const EVP_PKEY_METHOD, pparamgen_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pparamgen: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_keygen(pmeth: ?*const EVP_PKEY_METHOD, pkeygen_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pkeygen: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_sign(pmeth: ?*const EVP_PKEY_METHOD, psign_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, psign: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_verify(pmeth: ?*const EVP_PKEY_METHOD, pverify_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pverify: [*c]?fn (?*EVP_PKEY_CTX, [*c]const u8, usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_verify_recover(pmeth: ?*const EVP_PKEY_METHOD, pverify_recover_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pverify_recover: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_signctx(pmeth: ?*const EVP_PKEY_METHOD, psignctx_init: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int, psignctx: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_verifyctx(pmeth: ?*const EVP_PKEY_METHOD, pverifyctx_init: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int, pverifyctx: [*c]?fn (?*EVP_PKEY_CTX, [*c]const u8, c_int, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_encrypt(pmeth: ?*const EVP_PKEY_METHOD, pencrypt_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pencryptfn: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_decrypt(pmeth: ?*const EVP_PKEY_METHOD, pdecrypt_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pdecrypt: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_derive(pmeth: ?*const EVP_PKEY_METHOD, pderive_init: [*c]?fn (?*EVP_PKEY_CTX) callconv(.C) c_int, pderive: [*c]?fn (?*EVP_PKEY_CTX, [*c]u8, [*c]usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_ctrl(pmeth: ?*const EVP_PKEY_METHOD, pctrl: [*c]?fn (?*EVP_PKEY_CTX, c_int, c_int, ?*c_void) callconv(.C) c_int, pctrl_str: [*c]?fn (?*EVP_PKEY_CTX, [*c]const u8, [*c]const u8) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_digestsign(pmeth: ?*EVP_PKEY_METHOD, digestsign: [*c]?fn (?*EVP_MD_CTX, [*c]u8, [*c]usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_digestverify(pmeth: ?*EVP_PKEY_METHOD, digestverify: [*c]?fn (?*EVP_MD_CTX, [*c]const u8, usize, [*c]const u8, usize) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_check(pmeth: ?*const EVP_PKEY_METHOD, pcheck: [*c]?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_public_check(pmeth: ?*const EVP_PKEY_METHOD, pcheck: [*c]?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_param_check(pmeth: ?*const EVP_PKEY_METHOD, pcheck: [*c]?fn (?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn EVP_PKEY_meth_get_digest_custom(pmeth: ?*EVP_PKEY_METHOD, pdigest_custom: [*c]?fn (?*EVP_PKEY_CTX, ?*EVP_MD_CTX) callconv(.C) c_int) void;
pub extern fn EVP_add_alg_module() void;
pub extern fn ERR_load_EC_strings() c_int;
pub const POINT_CONVERSION_COMPRESSED = @enumToInt(enum_unnamed_40.POINT_CONVERSION_COMPRESSED);
pub const POINT_CONVERSION_UNCOMPRESSED = @enumToInt(enum_unnamed_40.POINT_CONVERSION_UNCOMPRESSED);
pub const POINT_CONVERSION_HYBRID = @enumToInt(enum_unnamed_40.POINT_CONVERSION_HYBRID);
const enum_unnamed_40 = extern enum(c_int) {
    POINT_CONVERSION_COMPRESSED = 2,
    POINT_CONVERSION_UNCOMPRESSED = 4,
    POINT_CONVERSION_HYBRID = 6,
    _,
};
pub const point_conversion_form_t = enum_unnamed_40;
pub const struct_ec_method_st = opaque {};
pub const EC_METHOD = struct_ec_method_st;
pub const struct_ec_group_st = opaque {};
pub const EC_GROUP = struct_ec_group_st;
pub const struct_ec_point_st = opaque {};
pub const EC_POINT = struct_ec_point_st;
pub const struct_ecpk_parameters_st = opaque {};
pub const ECPKPARAMETERS = struct_ecpk_parameters_st;
pub const struct_ec_parameters_st = opaque {};
pub const ECPARAMETERS = struct_ec_parameters_st;
pub extern fn EC_GFp_simple_method() ?*const EC_METHOD;
pub extern fn EC_GFp_mont_method() ?*const EC_METHOD;
pub extern fn EC_GFp_nist_method() ?*const EC_METHOD;
pub extern fn EC_GFp_nistp224_method() ?*const EC_METHOD;
pub extern fn EC_GFp_nistp256_method() ?*const EC_METHOD;
pub extern fn EC_GFp_nistp521_method() ?*const EC_METHOD;
pub extern fn EC_GF2m_simple_method() ?*const EC_METHOD;
pub extern fn EC_GROUP_new(meth: ?*const EC_METHOD) ?*EC_GROUP;
pub extern fn EC_GROUP_free(group: ?*EC_GROUP) void;
pub extern fn EC_GROUP_clear_free(group: ?*EC_GROUP) void;
pub extern fn EC_GROUP_copy(dst: ?*EC_GROUP, src: ?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_dup(src: ?*const EC_GROUP) ?*EC_GROUP;
pub extern fn EC_GROUP_method_of(group: ?*const EC_GROUP) ?*const EC_METHOD;
pub extern fn EC_METHOD_get_field_type(meth: ?*const EC_METHOD) c_int;
pub extern fn EC_GROUP_set_generator(group: ?*EC_GROUP, generator: ?*const EC_POINT, order: ?*const BIGNUM, cofactor: ?*const BIGNUM) c_int;
pub extern fn EC_GROUP_get0_generator(group: ?*const EC_GROUP) ?*const EC_POINT;
pub extern fn EC_GROUP_get_mont_data(group: ?*const EC_GROUP) ?*BN_MONT_CTX;
pub extern fn EC_GROUP_get_order(group: ?*const EC_GROUP, order: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get0_order(group: ?*const EC_GROUP) ?*const BIGNUM;
pub extern fn EC_GROUP_order_bits(group: ?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_get_cofactor(group: ?*const EC_GROUP, cofactor: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get0_cofactor(group: ?*const EC_GROUP) ?*const BIGNUM;
pub extern fn EC_GROUP_set_curve_name(group: ?*EC_GROUP, nid: c_int) void;
pub extern fn EC_GROUP_get_curve_name(group: ?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_set_asn1_flag(group: ?*EC_GROUP, flag: c_int) void;
pub extern fn EC_GROUP_get_asn1_flag(group: ?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_set_point_conversion_form(group: ?*EC_GROUP, form: point_conversion_form_t) void;
pub extern fn EC_GROUP_get_point_conversion_form(?*const EC_GROUP) point_conversion_form_t;
pub extern fn EC_GROUP_get0_seed(x: ?*const EC_GROUP) [*c]u8;
pub extern fn EC_GROUP_get_seed_len(?*const EC_GROUP) usize;
pub extern fn EC_GROUP_set_seed(?*EC_GROUP, [*c]const u8, len: usize) usize;
pub extern fn EC_GROUP_set_curve(group: ?*EC_GROUP, p: ?*const BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get_curve(group: ?*const EC_GROUP, p: ?*BIGNUM, a: ?*BIGNUM, b: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_set_curve_GFp(group: ?*EC_GROUP, p: ?*const BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get_curve_GFp(group: ?*const EC_GROUP, p: ?*BIGNUM, a: ?*BIGNUM, b: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_set_curve_GF2m(group: ?*EC_GROUP, p: ?*const BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get_curve_GF2m(group: ?*const EC_GROUP, p: ?*BIGNUM, a: ?*BIGNUM, b: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_get_degree(group: ?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_check(group: ?*const EC_GROUP, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_check_discriminant(group: ?*const EC_GROUP, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_cmp(a: ?*const EC_GROUP, b: ?*const EC_GROUP, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_new_curve_GFp(p: ?*const BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) ?*EC_GROUP;
pub extern fn EC_GROUP_new_curve_GF2m(p: ?*const BIGNUM, a: ?*const BIGNUM, b: ?*const BIGNUM, ctx: ?*BN_CTX) ?*EC_GROUP;
pub extern fn EC_GROUP_new_by_curve_name(nid: c_int) ?*EC_GROUP;
pub extern fn EC_GROUP_new_from_ecparameters(params: ?*const ECPARAMETERS) ?*EC_GROUP;
pub extern fn EC_GROUP_get_ecparameters(group: ?*const EC_GROUP, params: ?*ECPARAMETERS) ?*ECPARAMETERS;
pub extern fn EC_GROUP_new_from_ecpkparameters(params: ?*const ECPKPARAMETERS) ?*EC_GROUP;
pub extern fn EC_GROUP_get_ecpkparameters(group: ?*const EC_GROUP, params: ?*ECPKPARAMETERS) ?*ECPKPARAMETERS;
const struct_unnamed_41 = extern struct {
    nid: c_int,
    comment: [*c]const u8,
};
pub const EC_builtin_curve = struct_unnamed_41;
pub extern fn EC_get_builtin_curves(r: [*c]EC_builtin_curve, nitems: usize) usize;
pub extern fn EC_curve_nid2nist(nid: c_int) [*c]const u8;
pub extern fn EC_curve_nist2nid(name: [*c]const u8) c_int;
pub extern fn EC_POINT_new(group: ?*const EC_GROUP) ?*EC_POINT;
pub extern fn EC_POINT_free(point: ?*EC_POINT) void;
pub extern fn EC_POINT_clear_free(point: ?*EC_POINT) void;
pub extern fn EC_POINT_copy(dst: ?*EC_POINT, src: ?*const EC_POINT) c_int;
pub extern fn EC_POINT_dup(src: ?*const EC_POINT, group: ?*const EC_GROUP) ?*EC_POINT;
pub extern fn EC_POINT_method_of(point: ?*const EC_POINT) ?*const EC_METHOD;
pub extern fn EC_POINT_set_to_infinity(group: ?*const EC_GROUP, point: ?*EC_POINT) c_int;
pub extern fn EC_POINT_set_Jprojective_coordinates_GFp(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y: ?*const BIGNUM, z: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_get_Jprojective_coordinates_GFp(group: ?*const EC_GROUP, p: ?*const EC_POINT, x: ?*BIGNUM, y: ?*BIGNUM, z: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_affine_coordinates(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_get_affine_coordinates(group: ?*const EC_GROUP, p: ?*const EC_POINT, x: ?*BIGNUM, y: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_affine_coordinates_GFp(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_get_affine_coordinates_GFp(group: ?*const EC_GROUP, p: ?*const EC_POINT, x: ?*BIGNUM, y: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_compressed_coordinates(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y_bit: c_int, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_compressed_coordinates_GFp(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y_bit: c_int, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_affine_coordinates_GF2m(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_get_affine_coordinates_GF2m(group: ?*const EC_GROUP, p: ?*const EC_POINT, x: ?*BIGNUM, y: ?*BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_set_compressed_coordinates_GF2m(group: ?*const EC_GROUP, p: ?*EC_POINT, x: ?*const BIGNUM, y_bit: c_int, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_point2oct(group: ?*const EC_GROUP, p: ?*const EC_POINT, form: point_conversion_form_t, buf: [*c]u8, len: usize, ctx: ?*BN_CTX) usize;
pub extern fn EC_POINT_oct2point(group: ?*const EC_GROUP, p: ?*EC_POINT, buf: [*c]const u8, len: usize, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_point2buf(group: ?*const EC_GROUP, point: ?*const EC_POINT, form: point_conversion_form_t, pbuf: [*c][*c]u8, ctx: ?*BN_CTX) usize;
pub extern fn EC_POINT_point2bn(?*const EC_GROUP, ?*const EC_POINT, form: point_conversion_form_t, ?*BIGNUM, ?*BN_CTX) ?*BIGNUM;
pub extern fn EC_POINT_bn2point(?*const EC_GROUP, ?*const BIGNUM, ?*EC_POINT, ?*BN_CTX) ?*EC_POINT;
pub extern fn EC_POINT_point2hex(?*const EC_GROUP, ?*const EC_POINT, form: point_conversion_form_t, ?*BN_CTX) [*c]u8;
pub extern fn EC_POINT_hex2point(?*const EC_GROUP, [*c]const u8, ?*EC_POINT, ?*BN_CTX) ?*EC_POINT;
pub extern fn EC_POINT_add(group: ?*const EC_GROUP, r: ?*EC_POINT, a: ?*const EC_POINT, b: ?*const EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_dbl(group: ?*const EC_GROUP, r: ?*EC_POINT, a: ?*const EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_invert(group: ?*const EC_GROUP, a: ?*EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_is_at_infinity(group: ?*const EC_GROUP, p: ?*const EC_POINT) c_int;
pub extern fn EC_POINT_is_on_curve(group: ?*const EC_GROUP, point: ?*const EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_cmp(group: ?*const EC_GROUP, a: ?*const EC_POINT, b: ?*const EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_make_affine(group: ?*const EC_GROUP, point: ?*EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINTs_make_affine(group: ?*const EC_GROUP, num: usize, points: [*c]?*EC_POINT, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINTs_mul(group: ?*const EC_GROUP, r: ?*EC_POINT, n: ?*const BIGNUM, num: usize, p: [*c]?*const EC_POINT, m: [*c]?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_POINT_mul(group: ?*const EC_GROUP, r: ?*EC_POINT, n: ?*const BIGNUM, q: ?*const EC_POINT, m: ?*const BIGNUM, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_precompute_mult(group: ?*EC_GROUP, ctx: ?*BN_CTX) c_int;
pub extern fn EC_GROUP_have_precompute_mult(group: ?*const EC_GROUP) c_int;
pub extern const ECPKPARAMETERS_it: ASN1_ITEM;
pub extern fn ECPKPARAMETERS_new() ?*ECPKPARAMETERS;
pub extern fn ECPKPARAMETERS_free(a: ?*ECPKPARAMETERS) void;
pub extern const ECPARAMETERS_it: ASN1_ITEM;
pub extern fn ECPARAMETERS_new() ?*ECPARAMETERS;
pub extern fn ECPARAMETERS_free(a: ?*ECPARAMETERS) void;
pub extern fn EC_GROUP_get_basis_type(?*const EC_GROUP) c_int;
pub extern fn EC_GROUP_get_trinomial_basis(?*const EC_GROUP, k: [*c]c_uint) c_int;
pub extern fn EC_GROUP_get_pentanomial_basis(?*const EC_GROUP, k1: [*c]c_uint, k2: [*c]c_uint, k3: [*c]c_uint) c_int;
pub extern fn d2i_ECPKParameters([*c]?*EC_GROUP, in: [*c][*c]const u8, len: c_long) ?*EC_GROUP;
pub extern fn i2d_ECPKParameters(?*const EC_GROUP, out: [*c][*c]u8) c_int;
pub extern fn ECPKParameters_print(bp: ?*BIO, x: ?*const EC_GROUP, off: c_int) c_int;
pub extern fn ECPKParameters_print_fp(fp: [*c]FILE, x: ?*const EC_GROUP, off: c_int) c_int;
pub extern fn EC_KEY_new() ?*EC_KEY;
pub extern fn EC_KEY_get_flags(key: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_set_flags(key: ?*EC_KEY, flags: c_int) void;
pub extern fn EC_KEY_clear_flags(key: ?*EC_KEY, flags: c_int) void;
pub extern fn EC_KEY_new_by_curve_name(nid: c_int) ?*EC_KEY;
pub extern fn EC_KEY_free(key: ?*EC_KEY) void;
pub extern fn EC_KEY_copy(dst: ?*EC_KEY, src: ?*const EC_KEY) ?*EC_KEY;
pub extern fn EC_KEY_dup(src: ?*const EC_KEY) ?*EC_KEY;
pub extern fn EC_KEY_up_ref(key: ?*EC_KEY) c_int;
pub extern fn EC_KEY_get0_engine(eckey: ?*const EC_KEY) ?*ENGINE;
pub extern fn EC_KEY_get0_group(key: ?*const EC_KEY) ?*const EC_GROUP;
pub extern fn EC_KEY_set_group(key: ?*EC_KEY, group: ?*const EC_GROUP) c_int;
pub extern fn EC_KEY_get0_private_key(key: ?*const EC_KEY) ?*const BIGNUM;
pub extern fn EC_KEY_set_private_key(key: ?*EC_KEY, prv: ?*const BIGNUM) c_int;
pub extern fn EC_KEY_get0_public_key(key: ?*const EC_KEY) ?*const EC_POINT;
pub extern fn EC_KEY_set_public_key(key: ?*EC_KEY, @"pub": ?*const EC_POINT) c_int;
pub extern fn EC_KEY_get_enc_flags(key: ?*const EC_KEY) c_uint;
pub extern fn EC_KEY_set_enc_flags(eckey: ?*EC_KEY, flags: c_uint) void;
pub extern fn EC_KEY_get_conv_form(key: ?*const EC_KEY) point_conversion_form_t;
pub extern fn EC_KEY_set_conv_form(eckey: ?*EC_KEY, cform: point_conversion_form_t) void;
pub extern fn EC_KEY_set_ex_data(key: ?*EC_KEY, idx: c_int, arg: ?*c_void) c_int;
pub extern fn EC_KEY_get_ex_data(key: ?*const EC_KEY, idx: c_int) ?*c_void;
pub extern fn EC_KEY_set_asn1_flag(eckey: ?*EC_KEY, asn1_flag: c_int) void;
pub extern fn EC_KEY_precompute_mult(key: ?*EC_KEY, ctx: ?*BN_CTX) c_int;
pub extern fn EC_KEY_generate_key(key: ?*EC_KEY) c_int;
pub extern fn EC_KEY_check_key(key: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_can_sign(eckey: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_set_public_key_affine_coordinates(key: ?*EC_KEY, x: ?*BIGNUM, y: ?*BIGNUM) c_int;
pub extern fn EC_KEY_key2buf(key: ?*const EC_KEY, form: point_conversion_form_t, pbuf: [*c][*c]u8, ctx: ?*BN_CTX) usize;
pub extern fn EC_KEY_oct2key(key: ?*EC_KEY, buf: [*c]const u8, len: usize, ctx: ?*BN_CTX) c_int;
pub extern fn EC_KEY_oct2priv(key: ?*EC_KEY, buf: [*c]const u8, len: usize) c_int;
pub extern fn EC_KEY_priv2oct(key: ?*const EC_KEY, buf: [*c]u8, len: usize) usize;
pub extern fn EC_KEY_priv2buf(eckey: ?*const EC_KEY, pbuf: [*c][*c]u8) usize;
pub extern fn d2i_ECPrivateKey(key: [*c]?*EC_KEY, in: [*c][*c]const u8, len: c_long) ?*EC_KEY;
pub extern fn i2d_ECPrivateKey(key: ?*EC_KEY, out: [*c][*c]u8) c_int;
pub extern fn d2i_ECParameters(key: [*c]?*EC_KEY, in: [*c][*c]const u8, len: c_long) ?*EC_KEY;
pub extern fn i2d_ECParameters(key: ?*EC_KEY, out: [*c][*c]u8) c_int;
pub extern fn o2i_ECPublicKey(key: [*c]?*EC_KEY, in: [*c][*c]const u8, len: c_long) ?*EC_KEY;
pub extern fn i2o_ECPublicKey(key: ?*const EC_KEY, out: [*c][*c]u8) c_int;
pub extern fn ECParameters_print(bp: ?*BIO, key: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_print(bp: ?*BIO, key: ?*const EC_KEY, off: c_int) c_int;
pub extern fn ECParameters_print_fp(fp: [*c]FILE, key: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_print_fp(fp: [*c]FILE, key: ?*const EC_KEY, off: c_int) c_int;
pub extern fn EC_KEY_OpenSSL() ?*const EC_KEY_METHOD;
pub extern fn EC_KEY_get_default_method() ?*const EC_KEY_METHOD;
pub extern fn EC_KEY_set_default_method(meth: ?*const EC_KEY_METHOD) void;
pub extern fn EC_KEY_get_method(key: ?*const EC_KEY) ?*const EC_KEY_METHOD;
pub extern fn EC_KEY_set_method(key: ?*EC_KEY, meth: ?*const EC_KEY_METHOD) c_int;
pub extern fn EC_KEY_new_method(engine: ?*ENGINE) ?*EC_KEY;
pub extern fn ECDH_KDF_X9_62(out: [*c]u8, outlen: usize, Z: [*c]const u8, Zlen: usize, sinfo: [*c]const u8, sinfolen: usize, md: ?*const EVP_MD) c_int;
pub extern fn ECDH_compute_key(out: ?*c_void, outlen: usize, pub_key: ?*const EC_POINT, ecdh: ?*const EC_KEY, KDF: ?fn (?*const c_void, usize, ?*c_void, [*c]usize) callconv(.C) ?*c_void) c_int;
pub const struct_ECDSA_SIG_st = opaque {};
pub const ECDSA_SIG = struct_ECDSA_SIG_st;
pub extern fn ECDSA_SIG_new() ?*ECDSA_SIG;
pub extern fn ECDSA_SIG_free(sig: ?*ECDSA_SIG) void;
pub extern fn i2d_ECDSA_SIG(sig: ?*const ECDSA_SIG, pp: [*c][*c]u8) c_int;
pub extern fn d2i_ECDSA_SIG(sig: [*c]?*ECDSA_SIG, pp: [*c][*c]const u8, len: c_long) ?*ECDSA_SIG;
pub extern fn ECDSA_SIG_get0(sig: ?*const ECDSA_SIG, pr: [*c]?*const BIGNUM, ps: [*c]?*const BIGNUM) void;
pub extern fn ECDSA_SIG_get0_r(sig: ?*const ECDSA_SIG) ?*const BIGNUM;
pub extern fn ECDSA_SIG_get0_s(sig: ?*const ECDSA_SIG) ?*const BIGNUM;
pub extern fn ECDSA_SIG_set0(sig: ?*ECDSA_SIG, r: ?*BIGNUM, s: ?*BIGNUM) c_int;
pub extern fn ECDSA_do_sign(dgst: [*c]const u8, dgst_len: c_int, eckey: ?*EC_KEY) ?*ECDSA_SIG;
pub extern fn ECDSA_do_sign_ex(dgst: [*c]const u8, dgstlen: c_int, kinv: ?*const BIGNUM, rp: ?*const BIGNUM, eckey: ?*EC_KEY) ?*ECDSA_SIG;
pub extern fn ECDSA_do_verify(dgst: [*c]const u8, dgst_len: c_int, sig: ?*const ECDSA_SIG, eckey: ?*EC_KEY) c_int;
pub extern fn ECDSA_sign_setup(eckey: ?*EC_KEY, ctx: ?*BN_CTX, kinv: [*c]?*BIGNUM, rp: [*c]?*BIGNUM) c_int;
pub extern fn ECDSA_sign(type: c_int, dgst: [*c]const u8, dgstlen: c_int, sig: [*c]u8, siglen: [*c]c_uint, eckey: ?*EC_KEY) c_int;
pub extern fn ECDSA_sign_ex(type: c_int, dgst: [*c]const u8, dgstlen: c_int, sig: [*c]u8, siglen: [*c]c_uint, kinv: ?*const BIGNUM, rp: ?*const BIGNUM, eckey: ?*EC_KEY) c_int;
pub extern fn ECDSA_verify(type: c_int, dgst: [*c]const u8, dgstlen: c_int, sig: [*c]const u8, siglen: c_int, eckey: ?*EC_KEY) c_int;
pub extern fn ECDSA_size(eckey: ?*const EC_KEY) c_int;
pub extern fn EC_KEY_METHOD_new(meth: ?*const EC_KEY_METHOD) ?*EC_KEY_METHOD;
pub extern fn EC_KEY_METHOD_free(meth: ?*EC_KEY_METHOD) void;
pub extern fn EC_KEY_METHOD_set_init(meth: ?*EC_KEY_METHOD, init: ?fn (?*EC_KEY) callconv(.C) c_int, finish: ?fn (?*EC_KEY) callconv(.C) void, copy: ?fn (?*EC_KEY, ?*const EC_KEY) callconv(.C) c_int, set_group: ?fn (?*EC_KEY, ?*const EC_GROUP) callconv(.C) c_int, set_private: ?fn (?*EC_KEY, ?*const BIGNUM) callconv(.C) c_int, set_public: ?fn (?*EC_KEY, ?*const EC_POINT) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_set_keygen(meth: ?*EC_KEY_METHOD, keygen: ?fn (?*EC_KEY) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_set_compute_key(meth: ?*EC_KEY_METHOD, ckey: ?fn ([*c][*c]u8, [*c]usize, ?*const EC_POINT, ?*const EC_KEY) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_set_sign(meth: ?*EC_KEY_METHOD, sign: ?fn (c_int, [*c]const u8, c_int, [*c]u8, [*c]c_uint, ?*const BIGNUM, ?*const BIGNUM, ?*EC_KEY) callconv(.C) c_int, sign_setup: ?fn (?*EC_KEY, ?*BN_CTX, [*c]?*BIGNUM, [*c]?*BIGNUM) callconv(.C) c_int, sign_sig: ?fn ([*c]const u8, c_int, ?*const BIGNUM, ?*const BIGNUM, ?*EC_KEY) callconv(.C) ?*ECDSA_SIG) void;
pub extern fn EC_KEY_METHOD_set_verify(meth: ?*EC_KEY_METHOD, verify: ?fn (c_int, [*c]const u8, c_int, [*c]const u8, c_int, ?*EC_KEY) callconv(.C) c_int, verify_sig: ?fn ([*c]const u8, c_int, ?*const ECDSA_SIG, ?*EC_KEY) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_get_init(meth: ?*const EC_KEY_METHOD, pinit: [*c]?fn (?*EC_KEY) callconv(.C) c_int, pfinish: [*c]?fn (?*EC_KEY) callconv(.C) void, pcopy: [*c]?fn (?*EC_KEY, ?*const EC_KEY) callconv(.C) c_int, pset_group: [*c]?fn (?*EC_KEY, ?*const EC_GROUP) callconv(.C) c_int, pset_private: [*c]?fn (?*EC_KEY, ?*const BIGNUM) callconv(.C) c_int, pset_public: [*c]?fn (?*EC_KEY, ?*const EC_POINT) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_get_keygen(meth: ?*const EC_KEY_METHOD, pkeygen: [*c]?fn (?*EC_KEY) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_get_compute_key(meth: ?*const EC_KEY_METHOD, pck: [*c]?fn ([*c][*c]u8, [*c]usize, ?*const EC_POINT, ?*const EC_KEY) callconv(.C) c_int) void;
pub extern fn EC_KEY_METHOD_get_sign(meth: ?*const EC_KEY_METHOD, psign: [*c]?fn (c_int, [*c]const u8, c_int, [*c]u8, [*c]c_uint, ?*const BIGNUM, ?*const BIGNUM, ?*EC_KEY) callconv(.C) c_int, psign_setup: [*c]?fn (?*EC_KEY, ?*BN_CTX, [*c]?*BIGNUM, [*c]?*BIGNUM) callconv(.C) c_int, psign_sig: [*c]?fn ([*c]const u8, c_int, ?*const BIGNUM, ?*const BIGNUM, ?*EC_KEY) callconv(.C) ?*ECDSA_SIG) void;
pub extern fn EC_KEY_METHOD_get_verify(meth: ?*const EC_KEY_METHOD, pverify: [*c]?fn (c_int, [*c]const u8, c_int, [*c]const u8, c_int, ?*EC_KEY) callconv(.C) c_int, pverify_sig: [*c]?fn ([*c]const u8, c_int, ?*const ECDSA_SIG, ?*EC_KEY) callconv(.C) c_int) void;
pub extern fn ERR_load_RSA_strings() c_int;
pub extern fn RSA_new() ?*RSA;
pub extern fn RSA_new_method(engine: ?*ENGINE) ?*RSA;
pub extern fn RSA_bits(rsa: ?*const RSA) c_int;
pub extern fn RSA_size(rsa: ?*const RSA) c_int;
pub extern fn RSA_security_bits(rsa: ?*const RSA) c_int;
pub extern fn RSA_set0_key(r: ?*RSA, n: ?*BIGNUM, e: ?*BIGNUM, d: ?*BIGNUM) c_int;
pub extern fn RSA_set0_factors(r: ?*RSA, p: ?*BIGNUM, q: ?*BIGNUM) c_int;
pub extern fn RSA_set0_crt_params(r: ?*RSA, dmp1: ?*BIGNUM, dmq1: ?*BIGNUM, iqmp: ?*BIGNUM) c_int;
pub extern fn RSA_set0_multi_prime_params(r: ?*RSA, primes: [*c]?*BIGNUM, exps: [*c]?*BIGNUM, coeffs: [*c]?*BIGNUM, pnum: c_int) c_int;
pub extern fn RSA_get0_key(r: ?*const RSA, n: [*c]?*const BIGNUM, e: [*c]?*const BIGNUM, d: [*c]?*const BIGNUM) void;
pub extern fn RSA_get0_factors(r: ?*const RSA, p: [*c]?*const BIGNUM, q: [*c]?*const BIGNUM) void;
pub extern fn RSA_get_multi_prime_extra_count(r: ?*const RSA) c_int;
pub extern fn RSA_get0_multi_prime_factors(r: ?*const RSA, primes: [*c]?*const BIGNUM) c_int;
pub extern fn RSA_get0_crt_params(r: ?*const RSA, dmp1: [*c]?*const BIGNUM, dmq1: [*c]?*const BIGNUM, iqmp: [*c]?*const BIGNUM) void;
pub extern fn RSA_get0_multi_prime_crt_params(r: ?*const RSA, exps: [*c]?*const BIGNUM, coeffs: [*c]?*const BIGNUM) c_int;
pub extern fn RSA_get0_n(d: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_e(d: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_d(d: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_p(d: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_q(d: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_dmp1(r: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_dmq1(r: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_iqmp(r: ?*const RSA) ?*const BIGNUM;
pub extern fn RSA_get0_pss_params(r: ?*const RSA) [*c]const RSA_PSS_PARAMS;
pub extern fn RSA_clear_flags(r: ?*RSA, flags: c_int) void;
pub extern fn RSA_test_flags(r: ?*const RSA, flags: c_int) c_int;
pub extern fn RSA_set_flags(r: ?*RSA, flags: c_int) void;
pub extern fn RSA_get_version(r: ?*RSA) c_int;
pub extern fn RSA_get0_engine(r: ?*const RSA) ?*ENGINE;
pub extern fn RSA_generate_key(bits: c_int, e: c_ulong, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, cb_arg: ?*c_void) ?*RSA;
pub extern fn RSA_generate_key_ex(rsa: ?*RSA, bits: c_int, e: ?*BIGNUM, cb: ?*BN_GENCB) c_int;
pub extern fn RSA_generate_multi_prime_key(rsa: ?*RSA, bits: c_int, primes: c_int, e: ?*BIGNUM, cb: ?*BN_GENCB) c_int;
pub extern fn RSA_X931_derive_ex(rsa: ?*RSA, p1: ?*BIGNUM, p2: ?*BIGNUM, q1: ?*BIGNUM, q2: ?*BIGNUM, Xp1: ?*const BIGNUM, Xp2: ?*const BIGNUM, Xp: ?*const BIGNUM, Xq1: ?*const BIGNUM, Xq2: ?*const BIGNUM, Xq: ?*const BIGNUM, e: ?*const BIGNUM, cb: ?*BN_GENCB) c_int;
pub extern fn RSA_X931_generate_key_ex(rsa: ?*RSA, bits: c_int, e: ?*const BIGNUM, cb: ?*BN_GENCB) c_int;
pub extern fn RSA_check_key(?*const RSA) c_int;
pub extern fn RSA_check_key_ex(?*const RSA, cb: ?*BN_GENCB) c_int;
pub extern fn RSA_public_encrypt(flen: c_int, from: [*c]const u8, to: [*c]u8, rsa: ?*RSA, padding: c_int) c_int;
pub extern fn RSA_private_encrypt(flen: c_int, from: [*c]const u8, to: [*c]u8, rsa: ?*RSA, padding: c_int) c_int;
pub extern fn RSA_public_decrypt(flen: c_int, from: [*c]const u8, to: [*c]u8, rsa: ?*RSA, padding: c_int) c_int;
pub extern fn RSA_private_decrypt(flen: c_int, from: [*c]const u8, to: [*c]u8, rsa: ?*RSA, padding: c_int) c_int;
pub extern fn RSA_free(r: ?*RSA) void;
pub extern fn RSA_up_ref(r: ?*RSA) c_int;
pub extern fn RSA_flags(r: ?*const RSA) c_int;
pub extern fn RSA_set_default_method(meth: ?*const RSA_METHOD) void;
pub extern fn RSA_get_default_method() ?*const RSA_METHOD;
pub extern fn RSA_null_method() ?*const RSA_METHOD;
pub extern fn RSA_get_method(rsa: ?*const RSA) ?*const RSA_METHOD;
pub extern fn RSA_set_method(rsa: ?*RSA, meth: ?*const RSA_METHOD) c_int;
pub extern fn RSA_PKCS1_OpenSSL() ?*const RSA_METHOD;
pub extern fn RSA_pkey_ctx_ctrl(ctx: ?*EVP_PKEY_CTX, optype: c_int, cmd: c_int, p1: c_int, p2: ?*c_void) c_int;
pub extern fn d2i_RSAPublicKey(a: [*c]?*RSA, in: [*c][*c]const u8, len: c_long) ?*RSA;
pub extern fn i2d_RSAPublicKey(a: ?*const RSA, out: [*c][*c]u8) c_int;
pub extern const RSAPublicKey_it: ASN1_ITEM;
pub extern fn d2i_RSAPrivateKey(a: [*c]?*RSA, in: [*c][*c]const u8, len: c_long) ?*RSA;
pub extern fn i2d_RSAPrivateKey(a: ?*const RSA, out: [*c][*c]u8) c_int;
pub extern const RSAPrivateKey_it: ASN1_ITEM;
pub extern fn RSA_PSS_PARAMS_new() [*c]RSA_PSS_PARAMS;
pub extern fn RSA_PSS_PARAMS_free(a: [*c]RSA_PSS_PARAMS) void;
pub extern fn d2i_RSA_PSS_PARAMS(a: [*c][*c]RSA_PSS_PARAMS, in: [*c][*c]const u8, len: c_long) [*c]RSA_PSS_PARAMS;
pub extern fn i2d_RSA_PSS_PARAMS(a: [*c]RSA_PSS_PARAMS, out: [*c][*c]u8) c_int;
pub extern const RSA_PSS_PARAMS_it: ASN1_ITEM;
pub const struct_rsa_oaep_params_st = extern struct {
    hashFunc: [*c]X509_ALGOR,
    maskGenFunc: [*c]X509_ALGOR,
    pSourceFunc: [*c]X509_ALGOR,
    maskHash: [*c]X509_ALGOR,
};
pub const RSA_OAEP_PARAMS = struct_rsa_oaep_params_st;
pub extern fn RSA_OAEP_PARAMS_new() [*c]RSA_OAEP_PARAMS;
pub extern fn RSA_OAEP_PARAMS_free(a: [*c]RSA_OAEP_PARAMS) void;
pub extern fn d2i_RSA_OAEP_PARAMS(a: [*c][*c]RSA_OAEP_PARAMS, in: [*c][*c]const u8, len: c_long) [*c]RSA_OAEP_PARAMS;
pub extern fn i2d_RSA_OAEP_PARAMS(a: [*c]RSA_OAEP_PARAMS, out: [*c][*c]u8) c_int;
pub extern const RSA_OAEP_PARAMS_it: ASN1_ITEM;
pub extern fn RSA_print_fp(fp: [*c]FILE, r: ?*const RSA, offset: c_int) c_int;
pub extern fn RSA_print(bp: ?*BIO, r: ?*const RSA, offset: c_int) c_int;
pub extern fn RSA_sign(type: c_int, m: [*c]const u8, m_length: c_uint, sigret: [*c]u8, siglen: [*c]c_uint, rsa: ?*RSA) c_int;
pub extern fn RSA_verify(type: c_int, m: [*c]const u8, m_length: c_uint, sigbuf: [*c]const u8, siglen: c_uint, rsa: ?*RSA) c_int;
pub extern fn RSA_sign_ASN1_OCTET_STRING(type: c_int, m: [*c]const u8, m_length: c_uint, sigret: [*c]u8, siglen: [*c]c_uint, rsa: ?*RSA) c_int;
pub extern fn RSA_verify_ASN1_OCTET_STRING(type: c_int, m: [*c]const u8, m_length: c_uint, sigbuf: [*c]u8, siglen: c_uint, rsa: ?*RSA) c_int;
pub extern fn RSA_blinding_on(rsa: ?*RSA, ctx: ?*BN_CTX) c_int;
pub extern fn RSA_blinding_off(rsa: ?*RSA) void;
pub extern fn RSA_setup_blinding(rsa: ?*RSA, ctx: ?*BN_CTX) ?*BN_BLINDING;
pub extern fn RSA_padding_add_PKCS1_type_1(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int) c_int;
pub extern fn RSA_padding_check_PKCS1_type_1(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int) c_int;
pub extern fn RSA_padding_add_PKCS1_type_2(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int) c_int;
pub extern fn RSA_padding_check_PKCS1_type_2(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int) c_int;
pub extern fn PKCS1_MGF1(mask: [*c]u8, len: c_long, seed: [*c]const u8, seedlen: c_long, dgst: ?*const EVP_MD) c_int;
pub extern fn RSA_padding_add_PKCS1_OAEP(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, p: [*c]const u8, pl: c_int) c_int;
pub extern fn RSA_padding_check_PKCS1_OAEP(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int, p: [*c]const u8, pl: c_int) c_int;
pub extern fn RSA_padding_add_PKCS1_OAEP_mgf1(to: [*c]u8, tlen: c_int, from: [*c]const u8, flen: c_int, param: [*c]const u8, plen: c_int, md: ?*const EVP_MD, mgf1md: ?*const EVP_MD) c_int;
pub extern fn RSA_padding_check_PKCS1_OAEP_mgf1(to: [*c]u8, tlen: c_int, from: [*c]const u8, flen: c_int, num: c_int, param: [*c]const u8, plen: c_int, md: ?*const EVP_MD, mgf1md: ?*const EVP_MD) c_int;
pub extern fn RSA_padding_add_SSLv23(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int) c_int;
pub extern fn RSA_padding_check_SSLv23(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int) c_int;
pub extern fn RSA_padding_add_none(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int) c_int;
pub extern fn RSA_padding_check_none(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int) c_int;
pub extern fn RSA_padding_add_X931(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int) c_int;
pub extern fn RSA_padding_check_X931(to: [*c]u8, tlen: c_int, f: [*c]const u8, fl: c_int, rsa_len: c_int) c_int;
pub extern fn RSA_X931_hash_id(nid: c_int) c_int;
pub extern fn RSA_verify_PKCS1_PSS(rsa: ?*RSA, mHash: [*c]const u8, Hash: ?*const EVP_MD, EM: [*c]const u8, sLen: c_int) c_int;
pub extern fn RSA_padding_add_PKCS1_PSS(rsa: ?*RSA, EM: [*c]u8, mHash: [*c]const u8, Hash: ?*const EVP_MD, sLen: c_int) c_int;
pub extern fn RSA_verify_PKCS1_PSS_mgf1(rsa: ?*RSA, mHash: [*c]const u8, Hash: ?*const EVP_MD, mgf1Hash: ?*const EVP_MD, EM: [*c]const u8, sLen: c_int) c_int;
pub extern fn RSA_padding_add_PKCS1_PSS_mgf1(rsa: ?*RSA, EM: [*c]u8, mHash: [*c]const u8, Hash: ?*const EVP_MD, mgf1Hash: ?*const EVP_MD, sLen: c_int) c_int;
pub extern fn RSA_set_ex_data(r: ?*RSA, idx: c_int, arg: ?*c_void) c_int;
pub extern fn RSA_get_ex_data(r: ?*const RSA, idx: c_int) ?*c_void;
pub extern fn RSAPublicKey_dup(rsa: ?*RSA) ?*RSA;
pub extern fn RSAPrivateKey_dup(rsa: ?*RSA) ?*RSA;
pub extern fn RSA_meth_new(name: [*c]const u8, flags: c_int) ?*RSA_METHOD;
pub extern fn RSA_meth_free(meth: ?*RSA_METHOD) void;
pub extern fn RSA_meth_dup(meth: ?*const RSA_METHOD) ?*RSA_METHOD;
pub extern fn RSA_meth_get0_name(meth: ?*const RSA_METHOD) [*c]const u8;
pub extern fn RSA_meth_set1_name(meth: ?*RSA_METHOD, name: [*c]const u8) c_int;
pub extern fn RSA_meth_get_flags(meth: ?*const RSA_METHOD) c_int;
pub extern fn RSA_meth_set_flags(meth: ?*RSA_METHOD, flags: c_int) c_int;
pub extern fn RSA_meth_get0_app_data(meth: ?*const RSA_METHOD) ?*c_void;
pub extern fn RSA_meth_set0_app_data(meth: ?*RSA_METHOD, app_data: ?*c_void) c_int;
pub extern fn RSA_meth_get_pub_enc(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int;
pub extern fn RSA_meth_set_pub_enc(rsa: ?*RSA_METHOD, pub_enc: ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_pub_dec(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int;
pub extern fn RSA_meth_set_pub_dec(rsa: ?*RSA_METHOD, pub_dec: ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_priv_enc(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int;
pub extern fn RSA_meth_set_priv_enc(rsa: ?*RSA_METHOD, priv_enc: ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_priv_dec(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int;
pub extern fn RSA_meth_set_priv_dec(rsa: ?*RSA_METHOD, priv_dec: ?fn (c_int, [*c]const u8, [*c]u8, ?*RSA, c_int) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_mod_exp(meth: ?*const RSA_METHOD) ?fn (?*BIGNUM, ?*const BIGNUM, ?*RSA, ?*BN_CTX) callconv(.C) c_int;
pub extern fn RSA_meth_set_mod_exp(rsa: ?*RSA_METHOD, mod_exp: ?fn (?*BIGNUM, ?*const BIGNUM, ?*RSA, ?*BN_CTX) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_bn_mod_exp(meth: ?*const RSA_METHOD) ?fn (?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int;
pub extern fn RSA_meth_set_bn_mod_exp(rsa: ?*RSA_METHOD, bn_mod_exp: ?fn (?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_init(meth: ?*const RSA_METHOD) ?fn (?*RSA) callconv(.C) c_int;
pub extern fn RSA_meth_set_init(rsa: ?*RSA_METHOD, init: ?fn (?*RSA) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_finish(meth: ?*const RSA_METHOD) ?fn (?*RSA) callconv(.C) c_int;
pub extern fn RSA_meth_set_finish(rsa: ?*RSA_METHOD, finish: ?fn (?*RSA) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_sign(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, c_uint, [*c]u8, [*c]c_uint, ?*const RSA) callconv(.C) c_int;
pub extern fn RSA_meth_set_sign(rsa: ?*RSA_METHOD, sign: ?fn (c_int, [*c]const u8, c_uint, [*c]u8, [*c]c_uint, ?*const RSA) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_verify(meth: ?*const RSA_METHOD) ?fn (c_int, [*c]const u8, c_uint, [*c]const u8, c_uint, ?*const RSA) callconv(.C) c_int;
pub extern fn RSA_meth_set_verify(rsa: ?*RSA_METHOD, verify: ?fn (c_int, [*c]const u8, c_uint, [*c]const u8, c_uint, ?*const RSA) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_keygen(meth: ?*const RSA_METHOD) ?fn (?*RSA, c_int, ?*BIGNUM, ?*BN_GENCB) callconv(.C) c_int;
pub extern fn RSA_meth_set_keygen(rsa: ?*RSA_METHOD, keygen: ?fn (?*RSA, c_int, ?*BIGNUM, ?*BN_GENCB) callconv(.C) c_int) c_int;
pub extern fn RSA_meth_get_multi_prime_keygen(meth: ?*const RSA_METHOD) ?fn (?*RSA, c_int, c_int, ?*BIGNUM, ?*BN_GENCB) callconv(.C) c_int;
pub extern fn RSA_meth_set_multi_prime_keygen(meth: ?*RSA_METHOD, keygen: ?fn (?*RSA, c_int, c_int, ?*BIGNUM, ?*BN_GENCB) callconv(.C) c_int) c_int;
pub extern fn ERR_load_DH_strings() c_int;
pub extern const DHparams_it: ASN1_ITEM;
pub extern fn DHparams_dup(?*DH) ?*DH;
pub extern fn DH_OpenSSL() ?*const DH_METHOD;
pub extern fn DH_set_default_method(meth: ?*const DH_METHOD) void;
pub extern fn DH_get_default_method() ?*const DH_METHOD;
pub extern fn DH_set_method(dh: ?*DH, meth: ?*const DH_METHOD) c_int;
pub extern fn DH_new_method(engine: ?*ENGINE) ?*DH;
pub extern fn DH_new() ?*DH;
pub extern fn DH_free(dh: ?*DH) void;
pub extern fn DH_up_ref(dh: ?*DH) c_int;
pub extern fn DH_bits(dh: ?*const DH) c_int;
pub extern fn DH_size(dh: ?*const DH) c_int;
pub extern fn DH_security_bits(dh: ?*const DH) c_int;
pub extern fn DH_set_ex_data(d: ?*DH, idx: c_int, arg: ?*c_void) c_int;
pub extern fn DH_get_ex_data(d: ?*DH, idx: c_int) ?*c_void;
pub extern fn DH_generate_parameters(prime_len: c_int, generator: c_int, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, cb_arg: ?*c_void) ?*DH;
pub extern fn DH_generate_parameters_ex(dh: ?*DH, prime_len: c_int, generator: c_int, cb: ?*BN_GENCB) c_int;
pub extern fn DH_check_params_ex(dh: ?*const DH) c_int;
pub extern fn DH_check_ex(dh: ?*const DH) c_int;
pub extern fn DH_check_pub_key_ex(dh: ?*const DH, pub_key: ?*const BIGNUM) c_int;
pub extern fn DH_check_params(dh: ?*const DH, ret: [*c]c_int) c_int;
pub extern fn DH_check(dh: ?*const DH, codes: [*c]c_int) c_int;
pub extern fn DH_check_pub_key(dh: ?*const DH, pub_key: ?*const BIGNUM, codes: [*c]c_int) c_int;
pub extern fn DH_generate_key(dh: ?*DH) c_int;
pub extern fn DH_compute_key(key: [*c]u8, pub_key: ?*const BIGNUM, dh: ?*DH) c_int;
pub extern fn DH_compute_key_padded(key: [*c]u8, pub_key: ?*const BIGNUM, dh: ?*DH) c_int;
pub extern fn d2i_DHparams(a: [*c]?*DH, pp: [*c][*c]const u8, length: c_long) ?*DH;
pub extern fn i2d_DHparams(a: ?*const DH, pp: [*c][*c]u8) c_int;
pub extern fn d2i_DHxparams(a: [*c]?*DH, pp: [*c][*c]const u8, length: c_long) ?*DH;
pub extern fn i2d_DHxparams(a: ?*const DH, pp: [*c][*c]u8) c_int;
pub extern fn DHparams_print_fp(fp: [*c]FILE, x: ?*const DH) c_int;
pub extern fn DHparams_print(bp: ?*BIO, x: ?*const DH) c_int;
pub extern fn DH_get_1024_160() ?*DH;
pub extern fn DH_get_2048_224() ?*DH;
pub extern fn DH_get_2048_256() ?*DH;
pub extern fn DH_new_by_nid(nid: c_int) ?*DH;
pub extern fn DH_get_nid(dh: ?*const DH) c_int;
pub extern fn DH_KDF_X9_42(out: [*c]u8, outlen: usize, Z: [*c]const u8, Zlen: usize, key_oid: ?*ASN1_OBJECT, ukm: [*c]const u8, ukmlen: usize, md: ?*const EVP_MD) c_int;
pub extern fn DH_get0_pqg(dh: ?*const DH, p: [*c]?*const BIGNUM, q: [*c]?*const BIGNUM, g: [*c]?*const BIGNUM) void;
pub extern fn DH_set0_pqg(dh: ?*DH, p: ?*BIGNUM, q: ?*BIGNUM, g: ?*BIGNUM) c_int;
pub extern fn DH_get0_key(dh: ?*const DH, pub_key: [*c]?*const BIGNUM, priv_key: [*c]?*const BIGNUM) void;
pub extern fn DH_set0_key(dh: ?*DH, pub_key: ?*BIGNUM, priv_key: ?*BIGNUM) c_int;
pub extern fn DH_get0_p(dh: ?*const DH) ?*const BIGNUM;
pub extern fn DH_get0_q(dh: ?*const DH) ?*const BIGNUM;
pub extern fn DH_get0_g(dh: ?*const DH) ?*const BIGNUM;
pub extern fn DH_get0_priv_key(dh: ?*const DH) ?*const BIGNUM;
pub extern fn DH_get0_pub_key(dh: ?*const DH) ?*const BIGNUM;
pub extern fn DH_clear_flags(dh: ?*DH, flags: c_int) void;
pub extern fn DH_test_flags(dh: ?*const DH, flags: c_int) c_int;
pub extern fn DH_set_flags(dh: ?*DH, flags: c_int) void;
pub extern fn DH_get0_engine(d: ?*DH) ?*ENGINE;
pub extern fn DH_get_length(dh: ?*const DH) c_long;
pub extern fn DH_set_length(dh: ?*DH, length: c_long) c_int;
pub extern fn DH_meth_new(name: [*c]const u8, flags: c_int) ?*DH_METHOD;
pub extern fn DH_meth_free(dhm: ?*DH_METHOD) void;
pub extern fn DH_meth_dup(dhm: ?*const DH_METHOD) ?*DH_METHOD;
pub extern fn DH_meth_get0_name(dhm: ?*const DH_METHOD) [*c]const u8;
pub extern fn DH_meth_set1_name(dhm: ?*DH_METHOD, name: [*c]const u8) c_int;
pub extern fn DH_meth_get_flags(dhm: ?*const DH_METHOD) c_int;
pub extern fn DH_meth_set_flags(dhm: ?*DH_METHOD, flags: c_int) c_int;
pub extern fn DH_meth_get0_app_data(dhm: ?*const DH_METHOD) ?*c_void;
pub extern fn DH_meth_set0_app_data(dhm: ?*DH_METHOD, app_data: ?*c_void) c_int;
pub extern fn DH_meth_get_generate_key(dhm: ?*const DH_METHOD) ?fn (?*DH) callconv(.C) c_int;
pub extern fn DH_meth_set_generate_key(dhm: ?*DH_METHOD, generate_key: ?fn (?*DH) callconv(.C) c_int) c_int;
pub extern fn DH_meth_get_compute_key(dhm: ?*const DH_METHOD) ?fn ([*c]u8, ?*const BIGNUM, ?*DH) callconv(.C) c_int;
pub extern fn DH_meth_set_compute_key(dhm: ?*DH_METHOD, compute_key: ?fn ([*c]u8, ?*const BIGNUM, ?*DH) callconv(.C) c_int) c_int;
pub extern fn DH_meth_get_bn_mod_exp(dhm: ?*const DH_METHOD) ?fn (?*const DH, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int;
pub extern fn DH_meth_set_bn_mod_exp(dhm: ?*DH_METHOD, bn_mod_exp: ?fn (?*const DH, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int) c_int;
pub extern fn DH_meth_get_init(dhm: ?*const DH_METHOD) ?fn (?*DH) callconv(.C) c_int;
pub extern fn DH_meth_set_init(dhm: ?*DH_METHOD, init: ?fn (?*DH) callconv(.C) c_int) c_int;
pub extern fn DH_meth_get_finish(dhm: ?*const DH_METHOD) ?fn (?*DH) callconv(.C) c_int;
pub extern fn DH_meth_set_finish(dhm: ?*DH_METHOD, finish: ?fn (?*DH) callconv(.C) c_int) c_int;
pub extern fn DH_meth_get_generate_params(dhm: ?*const DH_METHOD) ?fn (?*DH, c_int, c_int, ?*BN_GENCB) callconv(.C) c_int;
pub extern fn DH_meth_set_generate_params(dhm: ?*DH_METHOD, generate_params: ?fn (?*DH, c_int, c_int, ?*BN_GENCB) callconv(.C) c_int) c_int;
pub extern fn ERR_load_DSA_strings() c_int;
pub const struct_DSA_SIG_st = opaque {};
pub const DSA_SIG = struct_DSA_SIG_st;
pub extern fn DSAparams_dup(x: ?*DSA) ?*DSA;
pub extern fn DSA_SIG_new() ?*DSA_SIG;
pub extern fn DSA_SIG_free(a: ?*DSA_SIG) void;
pub extern fn i2d_DSA_SIG(a: ?*const DSA_SIG, pp: [*c][*c]u8) c_int;
pub extern fn d2i_DSA_SIG(v: [*c]?*DSA_SIG, pp: [*c][*c]const u8, length: c_long) ?*DSA_SIG;
pub extern fn DSA_SIG_get0(sig: ?*const DSA_SIG, pr: [*c]?*const BIGNUM, ps: [*c]?*const BIGNUM) void;
pub extern fn DSA_SIG_set0(sig: ?*DSA_SIG, r: ?*BIGNUM, s: ?*BIGNUM) c_int;
pub extern fn DSA_do_sign(dgst: [*c]const u8, dlen: c_int, dsa: ?*DSA) ?*DSA_SIG;
pub extern fn DSA_do_verify(dgst: [*c]const u8, dgst_len: c_int, sig: ?*DSA_SIG, dsa: ?*DSA) c_int;
pub extern fn DSA_OpenSSL() ?*const DSA_METHOD;
pub extern fn DSA_set_default_method(?*const DSA_METHOD) void;
pub extern fn DSA_get_default_method() ?*const DSA_METHOD;
pub extern fn DSA_set_method(dsa: ?*DSA, ?*const DSA_METHOD) c_int;
pub extern fn DSA_get_method(d: ?*DSA) ?*const DSA_METHOD;
pub extern fn DSA_new() ?*DSA;
pub extern fn DSA_new_method(engine: ?*ENGINE) ?*DSA;
pub extern fn DSA_free(r: ?*DSA) void;
pub extern fn DSA_up_ref(r: ?*DSA) c_int;
pub extern fn DSA_size(?*const DSA) c_int;
pub extern fn DSA_bits(d: ?*const DSA) c_int;
pub extern fn DSA_security_bits(d: ?*const DSA) c_int;
pub extern fn DSA_sign_setup(dsa: ?*DSA, ctx_in: ?*BN_CTX, kinvp: [*c]?*BIGNUM, rp: [*c]?*BIGNUM) c_int;
pub extern fn DSA_sign(type: c_int, dgst: [*c]const u8, dlen: c_int, sig: [*c]u8, siglen: [*c]c_uint, dsa: ?*DSA) c_int;
pub extern fn DSA_verify(type: c_int, dgst: [*c]const u8, dgst_len: c_int, sigbuf: [*c]const u8, siglen: c_int, dsa: ?*DSA) c_int;
pub extern fn DSA_set_ex_data(d: ?*DSA, idx: c_int, arg: ?*c_void) c_int;
pub extern fn DSA_get_ex_data(d: ?*DSA, idx: c_int) ?*c_void;
pub extern fn d2i_DSAPublicKey(a: [*c]?*DSA, pp: [*c][*c]const u8, length: c_long) ?*DSA;
pub extern fn d2i_DSAPrivateKey(a: [*c]?*DSA, pp: [*c][*c]const u8, length: c_long) ?*DSA;
pub extern fn d2i_DSAparams(a: [*c]?*DSA, pp: [*c][*c]const u8, length: c_long) ?*DSA;
pub extern fn DSA_generate_parameters(bits: c_int, seed: [*c]u8, seed_len: c_int, counter_ret: [*c]c_int, h_ret: [*c]c_ulong, callback: ?fn (c_int, c_int, ?*c_void) callconv(.C) void, cb_arg: ?*c_void) ?*DSA;
pub extern fn DSA_generate_parameters_ex(dsa: ?*DSA, bits: c_int, seed: [*c]const u8, seed_len: c_int, counter_ret: [*c]c_int, h_ret: [*c]c_ulong, cb: ?*BN_GENCB) c_int;
pub extern fn DSA_generate_key(a: ?*DSA) c_int;
pub extern fn i2d_DSAPublicKey(a: ?*const DSA, pp: [*c][*c]u8) c_int;
pub extern fn i2d_DSAPrivateKey(a: ?*const DSA, pp: [*c][*c]u8) c_int;
pub extern fn i2d_DSAparams(a: ?*const DSA, pp: [*c][*c]u8) c_int;
pub extern fn DSAparams_print(bp: ?*BIO, x: ?*const DSA) c_int;
pub extern fn DSA_print(bp: ?*BIO, x: ?*const DSA, off: c_int) c_int;
pub extern fn DSAparams_print_fp(fp: [*c]FILE, x: ?*const DSA) c_int;
pub extern fn DSA_print_fp(bp: [*c]FILE, x: ?*const DSA, off: c_int) c_int;
pub extern fn DSA_dup_DH(r: ?*const DSA) ?*DH;
pub extern fn DSA_get0_pqg(d: ?*const DSA, p: [*c]?*const BIGNUM, q: [*c]?*const BIGNUM, g: [*c]?*const BIGNUM) void;
pub extern fn DSA_set0_pqg(d: ?*DSA, p: ?*BIGNUM, q: ?*BIGNUM, g: ?*BIGNUM) c_int;
pub extern fn DSA_get0_key(d: ?*const DSA, pub_key: [*c]?*const BIGNUM, priv_key: [*c]?*const BIGNUM) void;
pub extern fn DSA_set0_key(d: ?*DSA, pub_key: ?*BIGNUM, priv_key: ?*BIGNUM) c_int;
pub extern fn DSA_get0_p(d: ?*const DSA) ?*const BIGNUM;
pub extern fn DSA_get0_q(d: ?*const DSA) ?*const BIGNUM;
pub extern fn DSA_get0_g(d: ?*const DSA) ?*const BIGNUM;
pub extern fn DSA_get0_pub_key(d: ?*const DSA) ?*const BIGNUM;
pub extern fn DSA_get0_priv_key(d: ?*const DSA) ?*const BIGNUM;
pub extern fn DSA_clear_flags(d: ?*DSA, flags: c_int) void;
pub extern fn DSA_test_flags(d: ?*const DSA, flags: c_int) c_int;
pub extern fn DSA_set_flags(d: ?*DSA, flags: c_int) void;
pub extern fn DSA_get0_engine(d: ?*DSA) ?*ENGINE;
pub extern fn DSA_meth_new(name: [*c]const u8, flags: c_int) ?*DSA_METHOD;
pub extern fn DSA_meth_free(dsam: ?*DSA_METHOD) void;
pub extern fn DSA_meth_dup(dsam: ?*const DSA_METHOD) ?*DSA_METHOD;
pub extern fn DSA_meth_get0_name(dsam: ?*const DSA_METHOD) [*c]const u8;
pub extern fn DSA_meth_set1_name(dsam: ?*DSA_METHOD, name: [*c]const u8) c_int;
pub extern fn DSA_meth_get_flags(dsam: ?*const DSA_METHOD) c_int;
pub extern fn DSA_meth_set_flags(dsam: ?*DSA_METHOD, flags: c_int) c_int;
pub extern fn DSA_meth_get0_app_data(dsam: ?*const DSA_METHOD) ?*c_void;
pub extern fn DSA_meth_set0_app_data(dsam: ?*DSA_METHOD, app_data: ?*c_void) c_int;
pub extern fn DSA_meth_get_sign(dsam: ?*const DSA_METHOD) ?fn ([*c]const u8, c_int, ?*DSA) callconv(.C) ?*DSA_SIG;
pub extern fn DSA_meth_set_sign(dsam: ?*DSA_METHOD, sign: ?fn ([*c]const u8, c_int, ?*DSA) callconv(.C) ?*DSA_SIG) c_int;
pub extern fn DSA_meth_get_sign_setup(dsam: ?*const DSA_METHOD) ?fn (?*DSA, ?*BN_CTX, [*c]?*BIGNUM, [*c]?*BIGNUM) callconv(.C) c_int;
pub extern fn DSA_meth_set_sign_setup(dsam: ?*DSA_METHOD, sign_setup: ?fn (?*DSA, ?*BN_CTX, [*c]?*BIGNUM, [*c]?*BIGNUM) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_verify(dsam: ?*const DSA_METHOD) ?fn ([*c]const u8, c_int, ?*DSA_SIG, ?*DSA) callconv(.C) c_int;
pub extern fn DSA_meth_set_verify(dsam: ?*DSA_METHOD, verify: ?fn ([*c]const u8, c_int, ?*DSA_SIG, ?*DSA) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_mod_exp(dsam: ?*const DSA_METHOD) ?fn (?*DSA, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int;
pub extern fn DSA_meth_set_mod_exp(dsam: ?*DSA_METHOD, mod_exp: ?fn (?*DSA, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_bn_mod_exp(dsam: ?*const DSA_METHOD) ?fn (?*DSA, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int;
pub extern fn DSA_meth_set_bn_mod_exp(dsam: ?*DSA_METHOD, bn_mod_exp: ?fn (?*DSA, ?*BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*const BIGNUM, ?*BN_CTX, ?*BN_MONT_CTX) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_init(dsam: ?*const DSA_METHOD) ?fn (?*DSA) callconv(.C) c_int;
pub extern fn DSA_meth_set_init(dsam: ?*DSA_METHOD, init: ?fn (?*DSA) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_finish(dsam: ?*const DSA_METHOD) ?fn (?*DSA) callconv(.C) c_int;
pub extern fn DSA_meth_set_finish(dsam: ?*DSA_METHOD, finish: ?fn (?*DSA) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_paramgen(dsam: ?*const DSA_METHOD) ?fn (?*DSA, c_int, [*c]const u8, c_int, [*c]c_int, [*c]c_ulong, ?*BN_GENCB) callconv(.C) c_int;
pub extern fn DSA_meth_set_paramgen(dsam: ?*DSA_METHOD, paramgen: ?fn (?*DSA, c_int, [*c]const u8, c_int, [*c]c_int, [*c]c_ulong, ?*BN_GENCB) callconv(.C) c_int) c_int;
pub extern fn DSA_meth_get_keygen(dsam: ?*const DSA_METHOD) ?fn (?*DSA) callconv(.C) c_int;
pub extern fn DSA_meth_set_keygen(dsam: ?*DSA_METHOD, keygen: ?fn (?*DSA) callconv(.C) c_int) c_int;
pub const struct_SHAstate_st = extern struct {
    h0: c_uint,
    h1: c_uint,
    h2: c_uint,
    h3: c_uint,
    h4: c_uint,
    Nl: c_uint,
    Nh: c_uint,
    data: [16]c_uint,
    num: c_uint,
};
pub const SHA_CTX = struct_SHAstate_st;
pub extern fn SHA1_Init(c: [*c]SHA_CTX) c_int;
pub extern fn SHA1_Update(c: [*c]SHA_CTX, data: ?*const c_void, len: usize) c_int;
pub extern fn SHA1_Final(md: [*c]u8, c: [*c]SHA_CTX) c_int;
pub extern fn SHA1(d: [*c]const u8, n: usize, md: [*c]u8) [*c]u8;
pub extern fn SHA1_Transform(c: [*c]SHA_CTX, data: [*c]const u8) void;
pub const struct_SHA256state_st = extern struct {
    h: [8]c_uint,
    Nl: c_uint,
    Nh: c_uint,
    data: [16]c_uint,
    num: c_uint,
    md_len: c_uint,
};
pub const SHA256_CTX = struct_SHA256state_st;
pub extern fn SHA224_Init(c: [*c]SHA256_CTX) c_int;
pub extern fn SHA224_Update(c: [*c]SHA256_CTX, data: ?*const c_void, len: usize) c_int;
pub extern fn SHA224_Final(md: [*c]u8, c: [*c]SHA256_CTX) c_int;
pub extern fn SHA224(d: [*c]const u8, n: usize, md: [*c]u8) [*c]u8;
pub extern fn SHA256_Init(c: [*c]SHA256_CTX) c_int;
pub extern fn SHA256_Update(c: [*c]SHA256_CTX, data: ?*const c_void, len: usize) c_int;
pub extern fn SHA256_Final(md: [*c]u8, c: [*c]SHA256_CTX) c_int;
pub extern fn SHA256(d: [*c]const u8, n: usize, md: [*c]u8) [*c]u8;
pub extern fn SHA256_Transform(c: [*c]SHA256_CTX, data: [*c]const u8) void;
const union_unnamed_42 = extern union {
    d: [16]c_ulonglong,
    p: [128]u8,
};
pub const struct_SHA512state_st = extern struct {
    h: [8]c_ulonglong,
    Nl: c_ulonglong,
    Nh: c_ulonglong,
    u: union_unnamed_42,
    num: c_uint,
    md_len: c_uint,
};
pub const SHA512_CTX = struct_SHA512state_st;
pub extern fn SHA384_Init(c: [*c]SHA512_CTX) c_int;
pub extern fn SHA384_Update(c: [*c]SHA512_CTX, data: ?*const c_void, len: usize) c_int;
pub extern fn SHA384_Final(md: [*c]u8, c: [*c]SHA512_CTX) c_int;
pub extern fn SHA384(d: [*c]const u8, n: usize, md: [*c]u8) [*c]u8;
pub extern fn SHA512_Init(c: [*c]SHA512_CTX) c_int;
pub extern fn SHA512_Update(c: [*c]SHA512_CTX, data: ?*const c_void, len: usize) c_int;
pub extern fn SHA512_Final(md: [*c]u8, c: [*c]SHA512_CTX) c_int;
pub extern fn SHA512(d: [*c]const u8, n: usize, md: [*c]u8) [*c]u8;
pub extern fn SHA512_Transform(c: [*c]SHA512_CTX, data: [*c]const u8) void;
pub extern fn ERR_load_X509_strings() c_int;
pub const X509_ALGORS = struct_stack_st_X509_ALGOR;
pub const struct_X509_val_st = extern struct {
    notBefore: [*c]ASN1_TIME,
    notAfter: [*c]ASN1_TIME,
};
pub const X509_VAL = struct_X509_val_st;
pub const struct_X509_sig_st = opaque {};
pub const X509_SIG = struct_X509_sig_st;
pub const struct_X509_name_entry_st = opaque {};
pub const X509_NAME_ENTRY = struct_X509_name_entry_st;
pub const struct_stack_st_X509_NAME_ENTRY = opaque {};
pub const sk_X509_NAME_ENTRY_compfunc = ?fn ([*c]const ?*const X509_NAME_ENTRY, [*c]const ?*const X509_NAME_ENTRY) callconv(.C) c_int;
pub const sk_X509_NAME_ENTRY_freefunc = ?fn (?*X509_NAME_ENTRY) callconv(.C) void;
pub const sk_X509_NAME_ENTRY_copyfunc = ?fn (?*const X509_NAME_ENTRY) callconv(.C) ?*X509_NAME_ENTRY;
pub fn sk_X509_NAME_ENTRY_num(arg_sk: ?*const struct_stack_st_X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_ENTRY_value(arg_sk: ?*const struct_stack_st_X509_NAME_ENTRY, arg_idx: c_int) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_NAME_ENTRY_new(arg_compare: sk_X509_NAME_ENTRY_compfunc) callconv(.C) ?*struct_stack_st_X509_NAME_ENTRY {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_NAME_ENTRY, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_NAME_ENTRY_new_null() callconv(.C) ?*struct_stack_st_X509_NAME_ENTRY {
    return @ptrCast(?*struct_stack_st_X509_NAME_ENTRY, OPENSSL_sk_new_null());
}
pub fn sk_X509_NAME_ENTRY_new_reserve(arg_compare: sk_X509_NAME_ENTRY_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_NAME_ENTRY {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_NAME_ENTRY, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_NAME_ENTRY_reserve(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_NAME_ENTRY_free(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_ENTRY_zero(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_ENTRY_delete(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_i: c_int) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_NAME_ENTRY_delete_ptr(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_NAME_ENTRY_push(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_ENTRY_unshift(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_ENTRY_pop(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_ENTRY_shift(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_ENTRY_pop_free(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_freefunc: sk_X509_NAME_ENTRY_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_NAME_ENTRY_insert(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_NAME_ENTRY_set(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_idx: c_int, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) ?*X509_NAME_ENTRY {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_NAME_ENTRY, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_NAME_ENTRY_find(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_ENTRY_find_ex(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_ptr: ?*X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_ENTRY_sort(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_ENTRY_is_sorted(arg_sk: ?*const struct_stack_st_X509_NAME_ENTRY) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_ENTRY_dup(arg_sk: ?*const struct_stack_st_X509_NAME_ENTRY) callconv(.C) ?*struct_stack_st_X509_NAME_ENTRY {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_NAME_ENTRY, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_ENTRY_deep_copy(arg_sk: ?*const struct_stack_st_X509_NAME_ENTRY, arg_copyfunc: sk_X509_NAME_ENTRY_copyfunc, arg_freefunc: sk_X509_NAME_ENTRY_freefunc) callconv(.C) ?*struct_stack_st_X509_NAME_ENTRY {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_NAME_ENTRY, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_NAME_ENTRY_set_cmp_func(arg_sk: ?*struct_stack_st_X509_NAME_ENTRY, arg_compare: sk_X509_NAME_ENTRY_compfunc) callconv(.C) sk_X509_NAME_ENTRY_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_NAME_ENTRY_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_NAME_ENTRY, [*c]const ?*const X509_NAME_ENTRY) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_X509_NAME = opaque {};
pub const sk_X509_NAME_compfunc = ?fn ([*c]const ?*const X509_NAME, [*c]const ?*const X509_NAME) callconv(.C) c_int;
pub const sk_X509_NAME_freefunc = ?fn (?*X509_NAME) callconv(.C) void;
pub const sk_X509_NAME_copyfunc = ?fn (?*const X509_NAME) callconv(.C) ?*X509_NAME;
pub fn sk_X509_NAME_num(arg_sk: ?*const struct_stack_st_X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_value(arg_sk: ?*const struct_stack_st_X509_NAME, arg_idx: c_int) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_NAME_new(arg_compare: sk_X509_NAME_compfunc) callconv(.C) ?*struct_stack_st_X509_NAME {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_NAME, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_NAME_new_null() callconv(.C) ?*struct_stack_st_X509_NAME {
    return @ptrCast(?*struct_stack_st_X509_NAME, OPENSSL_sk_new_null());
}
pub fn sk_X509_NAME_new_reserve(arg_compare: sk_X509_NAME_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_NAME {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_NAME, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_NAME_reserve(arg_sk: ?*struct_stack_st_X509_NAME, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_NAME_free(arg_sk: ?*struct_stack_st_X509_NAME) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_zero(arg_sk: ?*struct_stack_st_X509_NAME) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_delete(arg_sk: ?*struct_stack_st_X509_NAME, arg_i: c_int) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_NAME_delete_ptr(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_NAME_push(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_unshift(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_pop(arg_sk: ?*struct_stack_st_X509_NAME) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_shift(arg_sk: ?*struct_stack_st_X509_NAME) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_pop_free(arg_sk: ?*struct_stack_st_X509_NAME, arg_freefunc: sk_X509_NAME_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_NAME_insert(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_NAME_set(arg_sk: ?*struct_stack_st_X509_NAME, arg_idx: c_int, arg_ptr: ?*X509_NAME) callconv(.C) ?*X509_NAME {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_NAME, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_NAME_find(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_find_ex(arg_sk: ?*struct_stack_st_X509_NAME, arg_ptr: ?*X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_NAME_sort(arg_sk: ?*struct_stack_st_X509_NAME) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_is_sorted(arg_sk: ?*const struct_stack_st_X509_NAME) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_NAME_dup(arg_sk: ?*const struct_stack_st_X509_NAME) callconv(.C) ?*struct_stack_st_X509_NAME {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_NAME, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_NAME_deep_copy(arg_sk: ?*const struct_stack_st_X509_NAME, arg_copyfunc: sk_X509_NAME_copyfunc, arg_freefunc: sk_X509_NAME_freefunc) callconv(.C) ?*struct_stack_st_X509_NAME {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_NAME, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_NAME_set_cmp_func(arg_sk: ?*struct_stack_st_X509_NAME, arg_compare: sk_X509_NAME_compfunc) callconv(.C) sk_X509_NAME_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_NAME_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_NAME, [*c]const ?*const X509_NAME) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_X509_extension_st = opaque {};
pub const X509_EXTENSION = struct_X509_extension_st;
pub const struct_stack_st_X509_EXTENSION = opaque {};
pub const X509_EXTENSIONS = struct_stack_st_X509_EXTENSION;
pub const sk_X509_EXTENSION_compfunc = ?fn ([*c]const ?*const X509_EXTENSION, [*c]const ?*const X509_EXTENSION) callconv(.C) c_int;
pub const sk_X509_EXTENSION_freefunc = ?fn (?*X509_EXTENSION) callconv(.C) void;
pub const sk_X509_EXTENSION_copyfunc = ?fn (?*const X509_EXTENSION) callconv(.C) ?*X509_EXTENSION;
pub fn sk_X509_EXTENSION_num(arg_sk: ?*const struct_stack_st_X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_EXTENSION_value(arg_sk: ?*const struct_stack_st_X509_EXTENSION, arg_idx: c_int) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_EXTENSION_new(arg_compare: sk_X509_EXTENSION_compfunc) callconv(.C) ?*struct_stack_st_X509_EXTENSION {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_EXTENSION, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_EXTENSION_new_null() callconv(.C) ?*struct_stack_st_X509_EXTENSION {
    return @ptrCast(?*struct_stack_st_X509_EXTENSION, OPENSSL_sk_new_null());
}
pub fn sk_X509_EXTENSION_new_reserve(arg_compare: sk_X509_EXTENSION_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_EXTENSION {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_EXTENSION, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_EXTENSION_reserve(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_EXTENSION_free(arg_sk: ?*struct_stack_st_X509_EXTENSION) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_EXTENSION_zero(arg_sk: ?*struct_stack_st_X509_EXTENSION) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_EXTENSION_delete(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_i: c_int) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_EXTENSION_delete_ptr(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_EXTENSION_push(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_EXTENSION_unshift(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_EXTENSION_pop(arg_sk: ?*struct_stack_st_X509_EXTENSION) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_EXTENSION_shift(arg_sk: ?*struct_stack_st_X509_EXTENSION) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_EXTENSION_pop_free(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_freefunc: sk_X509_EXTENSION_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_EXTENSION_insert(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_EXTENSION_set(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_idx: c_int, arg_ptr: ?*X509_EXTENSION) callconv(.C) ?*X509_EXTENSION {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_EXTENSION, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_EXTENSION_find(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_EXTENSION_find_ex(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_ptr: ?*X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_EXTENSION_sort(arg_sk: ?*struct_stack_st_X509_EXTENSION) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_EXTENSION_is_sorted(arg_sk: ?*const struct_stack_st_X509_EXTENSION) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_EXTENSION_dup(arg_sk: ?*const struct_stack_st_X509_EXTENSION) callconv(.C) ?*struct_stack_st_X509_EXTENSION {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_EXTENSION, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_EXTENSION_deep_copy(arg_sk: ?*const struct_stack_st_X509_EXTENSION, arg_copyfunc: sk_X509_EXTENSION_copyfunc, arg_freefunc: sk_X509_EXTENSION_freefunc) callconv(.C) ?*struct_stack_st_X509_EXTENSION {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_EXTENSION, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_EXTENSION_set_cmp_func(arg_sk: ?*struct_stack_st_X509_EXTENSION, arg_compare: sk_X509_EXTENSION_compfunc) callconv(.C) sk_X509_EXTENSION_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_EXTENSION_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_EXTENSION, [*c]const ?*const X509_EXTENSION) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_x509_attributes_st = opaque {};
pub const X509_ATTRIBUTE = struct_x509_attributes_st;
pub const struct_stack_st_X509_ATTRIBUTE = opaque {};
pub const sk_X509_ATTRIBUTE_compfunc = ?fn ([*c]const ?*const X509_ATTRIBUTE, [*c]const ?*const X509_ATTRIBUTE) callconv(.C) c_int;
pub const sk_X509_ATTRIBUTE_freefunc = ?fn (?*X509_ATTRIBUTE) callconv(.C) void;
pub const sk_X509_ATTRIBUTE_copyfunc = ?fn (?*const X509_ATTRIBUTE) callconv(.C) ?*X509_ATTRIBUTE;
pub fn sk_X509_ATTRIBUTE_num(arg_sk: ?*const struct_stack_st_X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_ATTRIBUTE_value(arg_sk: ?*const struct_stack_st_X509_ATTRIBUTE, arg_idx: c_int) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_ATTRIBUTE_new(arg_compare: sk_X509_ATTRIBUTE_compfunc) callconv(.C) ?*struct_stack_st_X509_ATTRIBUTE {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_ATTRIBUTE, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_ATTRIBUTE_new_null() callconv(.C) ?*struct_stack_st_X509_ATTRIBUTE {
    return @ptrCast(?*struct_stack_st_X509_ATTRIBUTE, OPENSSL_sk_new_null());
}
pub fn sk_X509_ATTRIBUTE_new_reserve(arg_compare: sk_X509_ATTRIBUTE_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_ATTRIBUTE {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_ATTRIBUTE, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_ATTRIBUTE_reserve(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_ATTRIBUTE_free(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ATTRIBUTE_zero(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ATTRIBUTE_delete(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_i: c_int) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_ATTRIBUTE_delete_ptr(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_ATTRIBUTE_push(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ATTRIBUTE_unshift(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ATTRIBUTE_pop(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_ATTRIBUTE_shift(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_ATTRIBUTE_pop_free(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_freefunc: sk_X509_ATTRIBUTE_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_ATTRIBUTE_insert(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_ATTRIBUTE_set(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_idx: c_int, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) ?*X509_ATTRIBUTE {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_ATTRIBUTE, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_ATTRIBUTE_find(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ATTRIBUTE_find_ex(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_ptr: ?*X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_ATTRIBUTE_sort(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_ATTRIBUTE_is_sorted(arg_sk: ?*const struct_stack_st_X509_ATTRIBUTE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_ATTRIBUTE_dup(arg_sk: ?*const struct_stack_st_X509_ATTRIBUTE) callconv(.C) ?*struct_stack_st_X509_ATTRIBUTE {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_ATTRIBUTE, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_ATTRIBUTE_deep_copy(arg_sk: ?*const struct_stack_st_X509_ATTRIBUTE, arg_copyfunc: sk_X509_ATTRIBUTE_copyfunc, arg_freefunc: sk_X509_ATTRIBUTE_freefunc) callconv(.C) ?*struct_stack_st_X509_ATTRIBUTE {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_ATTRIBUTE, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_ATTRIBUTE_set_cmp_func(arg_sk: ?*struct_stack_st_X509_ATTRIBUTE, arg_compare: sk_X509_ATTRIBUTE_compfunc) callconv(.C) sk_X509_ATTRIBUTE_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_ATTRIBUTE_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_ATTRIBUTE, [*c]const ?*const X509_ATTRIBUTE) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_X509_req_info_st = opaque {};
pub const X509_REQ_INFO = struct_X509_req_info_st;
pub const struct_X509_req_st = opaque {};
pub const X509_REQ = struct_X509_req_st;
pub const struct_x509_cert_aux_st = opaque {};
pub const X509_CERT_AUX = struct_x509_cert_aux_st;
pub const struct_x509_cinf_st = opaque {};
pub const X509_CINF = struct_x509_cinf_st;
pub const struct_stack_st_X509 = opaque {};
pub const sk_X509_compfunc = ?fn ([*c]const ?*const X509, [*c]const ?*const X509) callconv(.C) c_int;
pub const sk_X509_freefunc = ?fn (?*X509) callconv(.C) void;
pub const sk_X509_copyfunc = ?fn (?*const X509) callconv(.C) ?*X509;
pub fn sk_X509_num(arg_sk: ?*const struct_stack_st_X509) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_value(arg_sk: ?*const struct_stack_st_X509, arg_idx: c_int) callconv(.C) ?*X509 {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_new(arg_compare: sk_X509_compfunc) callconv(.C) ?*struct_stack_st_X509 {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_new_null() callconv(.C) ?*struct_stack_st_X509 {
    return @ptrCast(?*struct_stack_st_X509, OPENSSL_sk_new_null());
}
pub fn sk_X509_new_reserve(arg_compare: sk_X509_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509 {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_reserve(arg_sk: ?*struct_stack_st_X509, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_free(arg_sk: ?*struct_stack_st_X509) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_zero(arg_sk: ?*struct_stack_st_X509) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_delete(arg_sk: ?*struct_stack_st_X509, arg_i: c_int) callconv(.C) ?*X509 {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_delete_ptr(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509) callconv(.C) ?*X509 {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_push(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_unshift(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_pop(arg_sk: ?*struct_stack_st_X509) callconv(.C) ?*X509 {
    var sk = arg_sk;
    return @ptrCast(?*X509, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_shift(arg_sk: ?*struct_stack_st_X509) callconv(.C) ?*X509 {
    var sk = arg_sk;
    return @ptrCast(?*X509, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_pop_free(arg_sk: ?*struct_stack_st_X509, arg_freefunc: sk_X509_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_insert(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_set(arg_sk: ?*struct_stack_st_X509, arg_idx: c_int, arg_ptr: ?*X509) callconv(.C) ?*X509 {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_find(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_find_ex(arg_sk: ?*struct_stack_st_X509, arg_ptr: ?*X509) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_sort(arg_sk: ?*struct_stack_st_X509) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_is_sorted(arg_sk: ?*const struct_stack_st_X509) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_dup(arg_sk: ?*const struct_stack_st_X509) callconv(.C) ?*struct_stack_st_X509 {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_deep_copy(arg_sk: ?*const struct_stack_st_X509, arg_copyfunc: sk_X509_copyfunc, arg_freefunc: sk_X509_freefunc) callconv(.C) ?*struct_stack_st_X509 {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_set_cmp_func(arg_sk: ?*struct_stack_st_X509, arg_compare: sk_X509_compfunc) callconv(.C) sk_X509_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509, [*c]const ?*const X509) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_x509_trust_st = extern struct {
    trust: c_int,
    flags: c_int,
    check_trust: ?fn ([*c]struct_x509_trust_st, ?*X509, c_int) callconv(.C) c_int,
    name: [*c]u8,
    arg1: c_int,
    arg2: ?*c_void,
};
pub const X509_TRUST = struct_x509_trust_st;
pub const struct_stack_st_X509_TRUST = opaque {};
pub const sk_X509_TRUST_compfunc = ?fn ([*c]const [*c]const X509_TRUST, [*c]const [*c]const X509_TRUST) callconv(.C) c_int;
pub const sk_X509_TRUST_freefunc = ?fn ([*c]X509_TRUST) callconv(.C) void;
pub const sk_X509_TRUST_copyfunc = ?fn ([*c]const X509_TRUST) callconv(.C) [*c]X509_TRUST;
pub fn sk_X509_TRUST_num(arg_sk: ?*const struct_stack_st_X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_TRUST_value(arg_sk: ?*const struct_stack_st_X509_TRUST, arg_idx: c_int) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_X509_TRUST_new(arg_compare: sk_X509_TRUST_compfunc) callconv(.C) ?*struct_stack_st_X509_TRUST {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_TRUST, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_TRUST_new_null() callconv(.C) ?*struct_stack_st_X509_TRUST {
    return @ptrCast(?*struct_stack_st_X509_TRUST, OPENSSL_sk_new_null());
}
pub fn sk_X509_TRUST_new_reserve(arg_compare: sk_X509_TRUST_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_TRUST {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_TRUST, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_TRUST_reserve(arg_sk: ?*struct_stack_st_X509_TRUST, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_TRUST_free(arg_sk: ?*struct_stack_st_X509_TRUST) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_TRUST_zero(arg_sk: ?*struct_stack_st_X509_TRUST) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_TRUST_delete(arg_sk: ?*struct_stack_st_X509_TRUST, arg_i: c_int) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_X509_TRUST_delete_ptr(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_TRUST_push(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_TRUST_unshift(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_TRUST_pop(arg_sk: ?*struct_stack_st_X509_TRUST) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_TRUST_shift(arg_sk: ?*struct_stack_st_X509_TRUST) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_TRUST_pop_free(arg_sk: ?*struct_stack_st_X509_TRUST, arg_freefunc: sk_X509_TRUST_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_TRUST_insert(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_TRUST_set(arg_sk: ?*struct_stack_st_X509_TRUST, arg_idx: c_int, arg_ptr: [*c]X509_TRUST) callconv(.C) [*c]X509_TRUST {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_TRUST, @alignCast(@alignOf(X509_TRUST), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_TRUST_find(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_TRUST_find_ex(arg_sk: ?*struct_stack_st_X509_TRUST, arg_ptr: [*c]X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_TRUST_sort(arg_sk: ?*struct_stack_st_X509_TRUST) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_TRUST_is_sorted(arg_sk: ?*const struct_stack_st_X509_TRUST) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_TRUST_dup(arg_sk: ?*const struct_stack_st_X509_TRUST) callconv(.C) ?*struct_stack_st_X509_TRUST {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_TRUST, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_TRUST_deep_copy(arg_sk: ?*const struct_stack_st_X509_TRUST, arg_copyfunc: sk_X509_TRUST_copyfunc, arg_freefunc: sk_X509_TRUST_freefunc) callconv(.C) ?*struct_stack_st_X509_TRUST {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_TRUST, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_TRUST_set_cmp_func(arg_sk: ?*struct_stack_st_X509_TRUST, arg_compare: sk_X509_TRUST_compfunc) callconv(.C) sk_X509_TRUST_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_TRUST_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const X509_TRUST, [*c]const [*c]const X509_TRUST) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_X509_REVOKED = opaque {};
pub const sk_X509_REVOKED_compfunc = ?fn ([*c]const ?*const X509_REVOKED, [*c]const ?*const X509_REVOKED) callconv(.C) c_int;
pub const sk_X509_REVOKED_freefunc = ?fn (?*X509_REVOKED) callconv(.C) void;
pub const sk_X509_REVOKED_copyfunc = ?fn (?*const X509_REVOKED) callconv(.C) ?*X509_REVOKED;
pub fn sk_X509_REVOKED_num(arg_sk: ?*const struct_stack_st_X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_REVOKED_value(arg_sk: ?*const struct_stack_st_X509_REVOKED, arg_idx: c_int) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_REVOKED_new(arg_compare: sk_X509_REVOKED_compfunc) callconv(.C) ?*struct_stack_st_X509_REVOKED {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_REVOKED, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_REVOKED_new_null() callconv(.C) ?*struct_stack_st_X509_REVOKED {
    return @ptrCast(?*struct_stack_st_X509_REVOKED, OPENSSL_sk_new_null());
}
pub fn sk_X509_REVOKED_new_reserve(arg_compare: sk_X509_REVOKED_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_REVOKED {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_REVOKED, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_REVOKED_reserve(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_REVOKED_free(arg_sk: ?*struct_stack_st_X509_REVOKED) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_REVOKED_zero(arg_sk: ?*struct_stack_st_X509_REVOKED) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_REVOKED_delete(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_i: c_int) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_REVOKED_delete_ptr(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_REVOKED_push(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_REVOKED_unshift(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_REVOKED_pop(arg_sk: ?*struct_stack_st_X509_REVOKED) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_REVOKED_shift(arg_sk: ?*struct_stack_st_X509_REVOKED) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_REVOKED_pop_free(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_freefunc: sk_X509_REVOKED_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_REVOKED_insert(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_REVOKED_set(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_idx: c_int, arg_ptr: ?*X509_REVOKED) callconv(.C) ?*X509_REVOKED {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_REVOKED, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_REVOKED_find(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_REVOKED_find_ex(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_ptr: ?*X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_REVOKED_sort(arg_sk: ?*struct_stack_st_X509_REVOKED) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_REVOKED_is_sorted(arg_sk: ?*const struct_stack_st_X509_REVOKED) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_REVOKED_dup(arg_sk: ?*const struct_stack_st_X509_REVOKED) callconv(.C) ?*struct_stack_st_X509_REVOKED {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_REVOKED, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_REVOKED_deep_copy(arg_sk: ?*const struct_stack_st_X509_REVOKED, arg_copyfunc: sk_X509_REVOKED_copyfunc, arg_freefunc: sk_X509_REVOKED_freefunc) callconv(.C) ?*struct_stack_st_X509_REVOKED {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_REVOKED, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_REVOKED_set_cmp_func(arg_sk: ?*struct_stack_st_X509_REVOKED, arg_compare: sk_X509_REVOKED_compfunc) callconv(.C) sk_X509_REVOKED_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_REVOKED_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_REVOKED, [*c]const ?*const X509_REVOKED) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_X509_crl_info_st = opaque {};
pub const X509_CRL_INFO = struct_X509_crl_info_st;
pub const struct_stack_st_X509_CRL = opaque {};
pub const sk_X509_CRL_compfunc = ?fn ([*c]const ?*const X509_CRL, [*c]const ?*const X509_CRL) callconv(.C) c_int;
pub const sk_X509_CRL_freefunc = ?fn (?*X509_CRL) callconv(.C) void;
pub const sk_X509_CRL_copyfunc = ?fn (?*const X509_CRL) callconv(.C) ?*X509_CRL;
pub fn sk_X509_CRL_num(arg_sk: ?*const struct_stack_st_X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_CRL_value(arg_sk: ?*const struct_stack_st_X509_CRL, arg_idx: c_int) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_CRL_new(arg_compare: sk_X509_CRL_compfunc) callconv(.C) ?*struct_stack_st_X509_CRL {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_CRL, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_CRL_new_null() callconv(.C) ?*struct_stack_st_X509_CRL {
    return @ptrCast(?*struct_stack_st_X509_CRL, OPENSSL_sk_new_null());
}
pub fn sk_X509_CRL_new_reserve(arg_compare: sk_X509_CRL_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_CRL {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_CRL, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_CRL_reserve(arg_sk: ?*struct_stack_st_X509_CRL, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_CRL_free(arg_sk: ?*struct_stack_st_X509_CRL) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_CRL_zero(arg_sk: ?*struct_stack_st_X509_CRL) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_CRL_delete(arg_sk: ?*struct_stack_st_X509_CRL, arg_i: c_int) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_CRL_delete_ptr(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_CRL_push(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_CRL_unshift(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_CRL_pop(arg_sk: ?*struct_stack_st_X509_CRL) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_CRL_shift(arg_sk: ?*struct_stack_st_X509_CRL) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_CRL_pop_free(arg_sk: ?*struct_stack_st_X509_CRL, arg_freefunc: sk_X509_CRL_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_CRL_insert(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_CRL_set(arg_sk: ?*struct_stack_st_X509_CRL, arg_idx: c_int, arg_ptr: ?*X509_CRL) callconv(.C) ?*X509_CRL {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_CRL, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_CRL_find(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_CRL_find_ex(arg_sk: ?*struct_stack_st_X509_CRL, arg_ptr: ?*X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_CRL_sort(arg_sk: ?*struct_stack_st_X509_CRL) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_CRL_is_sorted(arg_sk: ?*const struct_stack_st_X509_CRL) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_CRL_dup(arg_sk: ?*const struct_stack_st_X509_CRL) callconv(.C) ?*struct_stack_st_X509_CRL {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_CRL, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_CRL_deep_copy(arg_sk: ?*const struct_stack_st_X509_CRL, arg_copyfunc: sk_X509_CRL_copyfunc, arg_freefunc: sk_X509_CRL_freefunc) callconv(.C) ?*struct_stack_st_X509_CRL {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_CRL, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_CRL_set_cmp_func(arg_sk: ?*struct_stack_st_X509_CRL, arg_compare: sk_X509_CRL_compfunc) callconv(.C) sk_X509_CRL_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_CRL_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_CRL, [*c]const ?*const X509_CRL) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_private_key_st = extern struct {
    version: c_int,
    enc_algor: [*c]X509_ALGOR,
    enc_pkey: [*c]ASN1_OCTET_STRING,
    dec_pkey: ?*EVP_PKEY,
    key_length: c_int,
    key_data: [*c]u8,
    key_free: c_int,
    cipher: EVP_CIPHER_INFO,
};
pub const X509_PKEY = struct_private_key_st;
pub const struct_X509_info_st = extern struct {
    x509: ?*X509,
    crl: ?*X509_CRL,
    x_pkey: [*c]X509_PKEY,
    enc_cipher: EVP_CIPHER_INFO,
    enc_len: c_int,
    enc_data: [*c]u8,
};
pub const X509_INFO = struct_X509_info_st;
pub const struct_stack_st_X509_INFO = opaque {};
pub const sk_X509_INFO_compfunc = ?fn ([*c]const [*c]const X509_INFO, [*c]const [*c]const X509_INFO) callconv(.C) c_int;
pub const sk_X509_INFO_freefunc = ?fn ([*c]X509_INFO) callconv(.C) void;
pub const sk_X509_INFO_copyfunc = ?fn ([*c]const X509_INFO) callconv(.C) [*c]X509_INFO;
pub fn sk_X509_INFO_num(arg_sk: ?*const struct_stack_st_X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_INFO_value(arg_sk: ?*const struct_stack_st_X509_INFO, arg_idx: c_int) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_X509_INFO_new(arg_compare: sk_X509_INFO_compfunc) callconv(.C) ?*struct_stack_st_X509_INFO {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_INFO, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_INFO_new_null() callconv(.C) ?*struct_stack_st_X509_INFO {
    return @ptrCast(?*struct_stack_st_X509_INFO, OPENSSL_sk_new_null());
}
pub fn sk_X509_INFO_new_reserve(arg_compare: sk_X509_INFO_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_INFO {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_INFO, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_INFO_reserve(arg_sk: ?*struct_stack_st_X509_INFO, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_INFO_free(arg_sk: ?*struct_stack_st_X509_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_INFO_zero(arg_sk: ?*struct_stack_st_X509_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_INFO_delete(arg_sk: ?*struct_stack_st_X509_INFO, arg_i: c_int) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_X509_INFO_delete_ptr(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_INFO_push(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_INFO_unshift(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_INFO_pop(arg_sk: ?*struct_stack_st_X509_INFO) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_INFO_shift(arg_sk: ?*struct_stack_st_X509_INFO) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_X509_INFO_pop_free(arg_sk: ?*struct_stack_st_X509_INFO, arg_freefunc: sk_X509_INFO_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_INFO_insert(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_INFO_set(arg_sk: ?*struct_stack_st_X509_INFO, arg_idx: c_int, arg_ptr: [*c]X509_INFO) callconv(.C) [*c]X509_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]X509_INFO, @alignCast(@alignOf(X509_INFO), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_X509_INFO_find(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_INFO_find_ex(arg_sk: ?*struct_stack_st_X509_INFO, arg_ptr: [*c]X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_INFO_sort(arg_sk: ?*struct_stack_st_X509_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_INFO_is_sorted(arg_sk: ?*const struct_stack_st_X509_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_INFO_dup(arg_sk: ?*const struct_stack_st_X509_INFO) callconv(.C) ?*struct_stack_st_X509_INFO {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_INFO, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_INFO_deep_copy(arg_sk: ?*const struct_stack_st_X509_INFO, arg_copyfunc: sk_X509_INFO_copyfunc, arg_freefunc: sk_X509_INFO_freefunc) callconv(.C) ?*struct_stack_st_X509_INFO {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_INFO, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_INFO_set_cmp_func(arg_sk: ?*struct_stack_st_X509_INFO, arg_compare: sk_X509_INFO_compfunc) callconv(.C) sk_X509_INFO_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_INFO_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const X509_INFO, [*c]const [*c]const X509_INFO) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_Netscape_spkac_st = extern struct {
    pubkey: ?*X509_PUBKEY,
    challenge: [*c]ASN1_IA5STRING,
};
pub const NETSCAPE_SPKAC = struct_Netscape_spkac_st;
pub const struct_Netscape_spki_st = extern struct {
    spkac: [*c]NETSCAPE_SPKAC,
    sig_algor: X509_ALGOR,
    signature: [*c]ASN1_BIT_STRING,
};
pub const NETSCAPE_SPKI = struct_Netscape_spki_st;
pub const struct_Netscape_certificate_sequence = extern struct {
    type: ?*ASN1_OBJECT,
    certs: ?*struct_stack_st_X509,
};
pub const NETSCAPE_CERT_SEQUENCE = struct_Netscape_certificate_sequence;
pub const struct_PBEPARAM_st = extern struct {
    salt: [*c]ASN1_OCTET_STRING,
    iter: [*c]ASN1_INTEGER,
};
pub const PBEPARAM = struct_PBEPARAM_st;
pub const struct_PBE2PARAM_st = extern struct {
    keyfunc: [*c]X509_ALGOR,
    encryption: [*c]X509_ALGOR,
};
pub const PBE2PARAM = struct_PBE2PARAM_st;
pub const struct_PBKDF2PARAM_st = extern struct {
    salt: [*c]ASN1_TYPE,
    iter: [*c]ASN1_INTEGER,
    keylength: [*c]ASN1_INTEGER,
    prf: [*c]X509_ALGOR,
};
pub const PBKDF2PARAM = struct_PBKDF2PARAM_st;
pub const struct_SCRYPT_PARAMS_st = extern struct {
    salt: [*c]ASN1_OCTET_STRING,
    costParameter: [*c]ASN1_INTEGER,
    blockSize: [*c]ASN1_INTEGER,
    parallelizationParameter: [*c]ASN1_INTEGER,
    keyLength: [*c]ASN1_INTEGER,
};
pub const SCRYPT_PARAMS = struct_SCRYPT_PARAMS_st;
pub const struct_lhash_node_st = opaque {};
pub const OPENSSL_LH_NODE = struct_lhash_node_st;
pub const OPENSSL_LH_COMPFUNC = ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int;
pub const OPENSSL_LH_HASHFUNC = ?fn (?*const c_void) callconv(.C) c_ulong;
pub const OPENSSL_LH_DOALL_FUNC = ?fn (?*c_void) callconv(.C) void;
pub const OPENSSL_LH_DOALL_FUNCARG = ?fn (?*c_void, ?*c_void) callconv(.C) void;
pub const struct_lhash_st = opaque {};
pub const OPENSSL_LHASH = struct_lhash_st;
pub extern fn OPENSSL_LH_error(lh: ?*OPENSSL_LHASH) c_int;
pub extern fn OPENSSL_LH_new(h: OPENSSL_LH_HASHFUNC, c: OPENSSL_LH_COMPFUNC) ?*OPENSSL_LHASH;
pub extern fn OPENSSL_LH_free(lh: ?*OPENSSL_LHASH) void;
pub extern fn OPENSSL_LH_insert(lh: ?*OPENSSL_LHASH, data: ?*c_void) ?*c_void;
pub extern fn OPENSSL_LH_delete(lh: ?*OPENSSL_LHASH, data: ?*const c_void) ?*c_void;
pub extern fn OPENSSL_LH_retrieve(lh: ?*OPENSSL_LHASH, data: ?*const c_void) ?*c_void;
pub extern fn OPENSSL_LH_doall(lh: ?*OPENSSL_LHASH, func: OPENSSL_LH_DOALL_FUNC) void;
pub extern fn OPENSSL_LH_doall_arg(lh: ?*OPENSSL_LHASH, func: OPENSSL_LH_DOALL_FUNCARG, arg: ?*c_void) void;
pub extern fn OPENSSL_LH_strhash(c: [*c]const u8) c_ulong;
pub extern fn OPENSSL_LH_num_items(lh: ?*const OPENSSL_LHASH) c_ulong;
pub extern fn OPENSSL_LH_get_down_load(lh: ?*const OPENSSL_LHASH) c_ulong;
pub extern fn OPENSSL_LH_set_down_load(lh: ?*OPENSSL_LHASH, down_load: c_ulong) void;
pub extern fn OPENSSL_LH_stats(lh: ?*const OPENSSL_LHASH, fp: [*c]FILE) void;
pub extern fn OPENSSL_LH_node_stats(lh: ?*const OPENSSL_LHASH, fp: [*c]FILE) void;
pub extern fn OPENSSL_LH_node_usage_stats(lh: ?*const OPENSSL_LHASH, fp: [*c]FILE) void;
pub extern fn OPENSSL_LH_stats_bio(lh: ?*const OPENSSL_LHASH, out: ?*BIO) void;
pub extern fn OPENSSL_LH_node_stats_bio(lh: ?*const OPENSSL_LHASH, out: ?*BIO) void;
pub extern fn OPENSSL_LH_node_usage_stats_bio(lh: ?*const OPENSSL_LHASH, out: ?*BIO) void;
pub const union_lh_OPENSSL_STRING_dummy = extern union {
    d1: ?*c_void,
    d2: c_ulong,
    d3: c_int,
};
pub const struct_lhash_st_OPENSSL_STRING = extern struct {
    dummy: union_lh_OPENSSL_STRING_dummy,
};
pub fn lh_OPENSSL_STRING_new(arg_hfn: ?fn ([*c]const OPENSSL_STRING) callconv(.C) c_ulong, arg_cfn: ?fn ([*c]const OPENSSL_STRING, [*c]const OPENSSL_STRING) callconv(.C) c_int) callconv(.C) [*c]struct_lhash_st_OPENSSL_STRING {
    var hfn = arg_hfn;
    var cfn = arg_cfn;
    return @ptrCast([*c]struct_lhash_st_OPENSSL_STRING, @alignCast(@alignOf(struct_lhash_st_OPENSSL_STRING), OPENSSL_LH_new(@ptrCast(OPENSSL_LH_HASHFUNC, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) c_ulong), hfn)), @ptrCast(OPENSSL_LH_COMPFUNC, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), cfn)))));
}
pub fn lh_OPENSSL_STRING_free(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING) callconv(.C) void {
    var lh = arg_lh;
    OPENSSL_LH_free(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_STRING_insert(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING, arg_d: [*c]OPENSSL_STRING) callconv(.C) [*c]OPENSSL_STRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_STRING, @alignCast(@alignOf(OPENSSL_STRING), OPENSSL_LH_insert(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*c_void, d))));
}
pub fn lh_OPENSSL_STRING_delete(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING, arg_d: [*c]const OPENSSL_STRING) callconv(.C) [*c]OPENSSL_STRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_STRING, @alignCast(@alignOf(OPENSSL_STRING), OPENSSL_LH_delete(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_OPENSSL_STRING_retrieve(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING, arg_d: [*c]const OPENSSL_STRING) callconv(.C) [*c]OPENSSL_STRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_STRING, @alignCast(@alignOf(OPENSSL_STRING), OPENSSL_LH_retrieve(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_OPENSSL_STRING_error(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING) callconv(.C) c_int {
    var lh = arg_lh;
    return OPENSSL_LH_error(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_STRING_num_items(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_num_items(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_STRING_node_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_STRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_STRING_node_usage_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_STRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_usage_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_STRING_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_STRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_STRING_get_down_load(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_get_down_load(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_STRING_set_down_load(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING, arg_dl: c_ulong) callconv(.C) void {
    var lh = arg_lh;
    var dl = arg_dl;
    OPENSSL_LH_set_down_load(@ptrCast(?*OPENSSL_LHASH, lh), dl);
}
pub fn lh_OPENSSL_STRING_doall(arg_lh: [*c]struct_lhash_st_OPENSSL_STRING, arg_doall: ?fn ([*c]OPENSSL_STRING) callconv(.C) void) callconv(.C) void {
    var lh = arg_lh;
    var doall = arg_doall;
    OPENSSL_LH_doall(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(OPENSSL_LH_DOALL_FUNC, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), doall)));
}
pub const union_lh_OPENSSL_CSTRING_dummy = extern union {
    d1: ?*c_void,
    d2: c_ulong,
    d3: c_int,
};
pub const struct_lhash_st_OPENSSL_CSTRING = extern struct {
    dummy: union_lh_OPENSSL_CSTRING_dummy,
};
pub fn lh_OPENSSL_CSTRING_new(arg_hfn: ?fn ([*c]const OPENSSL_CSTRING) callconv(.C) c_ulong, arg_cfn: ?fn ([*c]const OPENSSL_CSTRING, [*c]const OPENSSL_CSTRING) callconv(.C) c_int) callconv(.C) [*c]struct_lhash_st_OPENSSL_CSTRING {
    var hfn = arg_hfn;
    var cfn = arg_cfn;
    return @ptrCast([*c]struct_lhash_st_OPENSSL_CSTRING, @alignCast(@alignOf(struct_lhash_st_OPENSSL_CSTRING), OPENSSL_LH_new(@ptrCast(OPENSSL_LH_HASHFUNC, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) c_ulong), hfn)), @ptrCast(OPENSSL_LH_COMPFUNC, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), cfn)))));
}
pub fn lh_OPENSSL_CSTRING_free(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING) callconv(.C) void {
    var lh = arg_lh;
    OPENSSL_LH_free(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_CSTRING_insert(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING, arg_d: [*c]OPENSSL_CSTRING) callconv(.C) [*c]OPENSSL_CSTRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_CSTRING, @alignCast(@alignOf(OPENSSL_CSTRING), OPENSSL_LH_insert(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*c_void, d))));
}
pub fn lh_OPENSSL_CSTRING_delete(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING, arg_d: [*c]const OPENSSL_CSTRING) callconv(.C) [*c]OPENSSL_CSTRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_CSTRING, @alignCast(@alignOf(OPENSSL_CSTRING), OPENSSL_LH_delete(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_OPENSSL_CSTRING_retrieve(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING, arg_d: [*c]const OPENSSL_CSTRING) callconv(.C) [*c]OPENSSL_CSTRING {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]OPENSSL_CSTRING, @alignCast(@alignOf(OPENSSL_CSTRING), OPENSSL_LH_retrieve(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_OPENSSL_CSTRING_error(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING) callconv(.C) c_int {
    var lh = arg_lh;
    return OPENSSL_LH_error(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_CSTRING_num_items(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_num_items(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_CSTRING_node_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_CSTRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_CSTRING_node_usage_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_CSTRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_usage_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_CSTRING_stats_bio(arg_lh: [*c]const struct_lhash_st_OPENSSL_CSTRING, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_OPENSSL_CSTRING_get_down_load(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_get_down_load(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_OPENSSL_CSTRING_set_down_load(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING, arg_dl: c_ulong) callconv(.C) void {
    var lh = arg_lh;
    var dl = arg_dl;
    OPENSSL_LH_set_down_load(@ptrCast(?*OPENSSL_LHASH, lh), dl);
}
pub fn lh_OPENSSL_CSTRING_doall(arg_lh: [*c]struct_lhash_st_OPENSSL_CSTRING, arg_doall: ?fn ([*c]OPENSSL_CSTRING) callconv(.C) void) callconv(.C) void {
    var lh = arg_lh;
    var doall = arg_doall;
    OPENSSL_LH_doall(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(OPENSSL_LH_DOALL_FUNC, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), doall)));
}
pub const X509_LU_NONE = @enumToInt(enum_unnamed_43.X509_LU_NONE);
pub const X509_LU_X509 = @enumToInt(enum_unnamed_43.X509_LU_X509);
pub const X509_LU_CRL = @enumToInt(enum_unnamed_43.X509_LU_CRL);
const enum_unnamed_43 = extern enum(c_int) {
    X509_LU_NONE = 0,
    X509_LU_X509 = 1,
    X509_LU_CRL = 2,
    _,
};
pub const X509_LOOKUP_TYPE = enum_unnamed_43;
pub const struct_stack_st_X509_LOOKUP = opaque {};
pub const sk_X509_LOOKUP_compfunc = ?fn ([*c]const ?*const X509_LOOKUP, [*c]const ?*const X509_LOOKUP) callconv(.C) c_int;
pub const sk_X509_LOOKUP_freefunc = ?fn (?*X509_LOOKUP) callconv(.C) void;
pub const sk_X509_LOOKUP_copyfunc = ?fn (?*const X509_LOOKUP) callconv(.C) ?*X509_LOOKUP;
pub fn sk_X509_LOOKUP_num(arg_sk: ?*const struct_stack_st_X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_LOOKUP_value(arg_sk: ?*const struct_stack_st_X509_LOOKUP, arg_idx: c_int) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_LOOKUP_new(arg_compare: sk_X509_LOOKUP_compfunc) callconv(.C) ?*struct_stack_st_X509_LOOKUP {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_LOOKUP, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_LOOKUP_new_null() callconv(.C) ?*struct_stack_st_X509_LOOKUP {
    return @ptrCast(?*struct_stack_st_X509_LOOKUP, OPENSSL_sk_new_null());
}
pub fn sk_X509_LOOKUP_new_reserve(arg_compare: sk_X509_LOOKUP_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_LOOKUP {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_LOOKUP, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_LOOKUP_reserve(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_LOOKUP_free(arg_sk: ?*struct_stack_st_X509_LOOKUP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_LOOKUP_zero(arg_sk: ?*struct_stack_st_X509_LOOKUP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_LOOKUP_delete(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_i: c_int) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_LOOKUP_delete_ptr(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_LOOKUP_push(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_LOOKUP_unshift(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_LOOKUP_pop(arg_sk: ?*struct_stack_st_X509_LOOKUP) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_LOOKUP_shift(arg_sk: ?*struct_stack_st_X509_LOOKUP) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_LOOKUP_pop_free(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_freefunc: sk_X509_LOOKUP_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_LOOKUP_insert(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_LOOKUP_set(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_idx: c_int, arg_ptr: ?*X509_LOOKUP) callconv(.C) ?*X509_LOOKUP {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_LOOKUP, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_LOOKUP_find(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_LOOKUP_find_ex(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_ptr: ?*X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_LOOKUP_sort(arg_sk: ?*struct_stack_st_X509_LOOKUP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_LOOKUP_is_sorted(arg_sk: ?*const struct_stack_st_X509_LOOKUP) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_LOOKUP_dup(arg_sk: ?*const struct_stack_st_X509_LOOKUP) callconv(.C) ?*struct_stack_st_X509_LOOKUP {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_LOOKUP, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_LOOKUP_deep_copy(arg_sk: ?*const struct_stack_st_X509_LOOKUP, arg_copyfunc: sk_X509_LOOKUP_copyfunc, arg_freefunc: sk_X509_LOOKUP_freefunc) callconv(.C) ?*struct_stack_st_X509_LOOKUP {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_LOOKUP, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_LOOKUP_set_cmp_func(arg_sk: ?*struct_stack_st_X509_LOOKUP, arg_compare: sk_X509_LOOKUP_compfunc) callconv(.C) sk_X509_LOOKUP_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_LOOKUP_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_LOOKUP, [*c]const ?*const X509_LOOKUP) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_X509_OBJECT = opaque {};
pub const sk_X509_OBJECT_compfunc = ?fn ([*c]const ?*const X509_OBJECT, [*c]const ?*const X509_OBJECT) callconv(.C) c_int;
pub const sk_X509_OBJECT_freefunc = ?fn (?*X509_OBJECT) callconv(.C) void;
pub const sk_X509_OBJECT_copyfunc = ?fn (?*const X509_OBJECT) callconv(.C) ?*X509_OBJECT;
pub fn sk_X509_OBJECT_num(arg_sk: ?*const struct_stack_st_X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_OBJECT_value(arg_sk: ?*const struct_stack_st_X509_OBJECT, arg_idx: c_int) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_OBJECT_new(arg_compare: sk_X509_OBJECT_compfunc) callconv(.C) ?*struct_stack_st_X509_OBJECT {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_OBJECT, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_OBJECT_new_null() callconv(.C) ?*struct_stack_st_X509_OBJECT {
    return @ptrCast(?*struct_stack_st_X509_OBJECT, OPENSSL_sk_new_null());
}
pub fn sk_X509_OBJECT_new_reserve(arg_compare: sk_X509_OBJECT_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_OBJECT {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_OBJECT, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_OBJECT_reserve(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_OBJECT_free(arg_sk: ?*struct_stack_st_X509_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_OBJECT_zero(arg_sk: ?*struct_stack_st_X509_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_OBJECT_delete(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_i: c_int) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_OBJECT_delete_ptr(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_OBJECT_push(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_OBJECT_unshift(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_OBJECT_pop(arg_sk: ?*struct_stack_st_X509_OBJECT) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_OBJECT_shift(arg_sk: ?*struct_stack_st_X509_OBJECT) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_OBJECT_pop_free(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_freefunc: sk_X509_OBJECT_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_OBJECT_insert(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_OBJECT_set(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_idx: c_int, arg_ptr: ?*X509_OBJECT) callconv(.C) ?*X509_OBJECT {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_OBJECT, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_OBJECT_find(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_OBJECT_find_ex(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_ptr: ?*X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_OBJECT_sort(arg_sk: ?*struct_stack_st_X509_OBJECT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_OBJECT_is_sorted(arg_sk: ?*const struct_stack_st_X509_OBJECT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_OBJECT_dup(arg_sk: ?*const struct_stack_st_X509_OBJECT) callconv(.C) ?*struct_stack_st_X509_OBJECT {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_OBJECT, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_OBJECT_deep_copy(arg_sk: ?*const struct_stack_st_X509_OBJECT, arg_copyfunc: sk_X509_OBJECT_copyfunc, arg_freefunc: sk_X509_OBJECT_freefunc) callconv(.C) ?*struct_stack_st_X509_OBJECT {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_OBJECT, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_OBJECT_set_cmp_func(arg_sk: ?*struct_stack_st_X509_OBJECT, arg_compare: sk_X509_OBJECT_compfunc) callconv(.C) sk_X509_OBJECT_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_OBJECT_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_OBJECT, [*c]const ?*const X509_OBJECT) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_X509_VERIFY_PARAM = opaque {};
pub const sk_X509_VERIFY_PARAM_compfunc = ?fn ([*c]const ?*const X509_VERIFY_PARAM, [*c]const ?*const X509_VERIFY_PARAM) callconv(.C) c_int;
pub const sk_X509_VERIFY_PARAM_freefunc = ?fn (?*X509_VERIFY_PARAM) callconv(.C) void;
pub const sk_X509_VERIFY_PARAM_copyfunc = ?fn (?*const X509_VERIFY_PARAM) callconv(.C) ?*X509_VERIFY_PARAM;
pub fn sk_X509_VERIFY_PARAM_num(arg_sk: ?*const struct_stack_st_X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_VERIFY_PARAM_value(arg_sk: ?*const struct_stack_st_X509_VERIFY_PARAM, arg_idx: c_int) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_X509_VERIFY_PARAM_new(arg_compare: sk_X509_VERIFY_PARAM_compfunc) callconv(.C) ?*struct_stack_st_X509_VERIFY_PARAM {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_X509_VERIFY_PARAM, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_X509_VERIFY_PARAM_new_null() callconv(.C) ?*struct_stack_st_X509_VERIFY_PARAM {
    return @ptrCast(?*struct_stack_st_X509_VERIFY_PARAM, OPENSSL_sk_new_null());
}
pub fn sk_X509_VERIFY_PARAM_new_reserve(arg_compare: sk_X509_VERIFY_PARAM_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_X509_VERIFY_PARAM {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_X509_VERIFY_PARAM, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_X509_VERIFY_PARAM_reserve(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_X509_VERIFY_PARAM_free(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_VERIFY_PARAM_zero(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_VERIFY_PARAM_delete(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_i: c_int) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_X509_VERIFY_PARAM_delete_ptr(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_VERIFY_PARAM_push(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_VERIFY_PARAM_unshift(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_VERIFY_PARAM_pop(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_VERIFY_PARAM_shift(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_X509_VERIFY_PARAM_pop_free(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_freefunc: sk_X509_VERIFY_PARAM_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_X509_VERIFY_PARAM_insert(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_X509_VERIFY_PARAM_set(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_idx: c_int, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) ?*X509_VERIFY_PARAM {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*X509_VERIFY_PARAM, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_X509_VERIFY_PARAM_find(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_VERIFY_PARAM_find_ex(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_ptr: ?*X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_X509_VERIFY_PARAM_sort(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_X509_VERIFY_PARAM_is_sorted(arg_sk: ?*const struct_stack_st_X509_VERIFY_PARAM) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_X509_VERIFY_PARAM_dup(arg_sk: ?*const struct_stack_st_X509_VERIFY_PARAM) callconv(.C) ?*struct_stack_st_X509_VERIFY_PARAM {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_X509_VERIFY_PARAM, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_X509_VERIFY_PARAM_deep_copy(arg_sk: ?*const struct_stack_st_X509_VERIFY_PARAM, arg_copyfunc: sk_X509_VERIFY_PARAM_copyfunc, arg_freefunc: sk_X509_VERIFY_PARAM_freefunc) callconv(.C) ?*struct_stack_st_X509_VERIFY_PARAM {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_X509_VERIFY_PARAM, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_X509_VERIFY_PARAM_set_cmp_func(arg_sk: ?*struct_stack_st_X509_VERIFY_PARAM, arg_compare: sk_X509_VERIFY_PARAM_compfunc) callconv(.C) sk_X509_VERIFY_PARAM_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_X509_VERIFY_PARAM_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const X509_VERIFY_PARAM, [*c]const ?*const X509_VERIFY_PARAM) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn X509_STORE_set_depth(store: ?*X509_STORE, depth: c_int) c_int;
pub const X509_STORE_CTX_verify_cb = ?fn (c_int, ?*X509_STORE_CTX) callconv(.C) c_int;
pub const X509_STORE_CTX_verify_fn = ?fn (?*X509_STORE_CTX) callconv(.C) c_int;
pub const X509_STORE_CTX_get_issuer_fn = ?fn ([*c]?*X509, ?*X509_STORE_CTX, ?*X509) callconv(.C) c_int;
pub const X509_STORE_CTX_check_issued_fn = ?fn (?*X509_STORE_CTX, ?*X509, ?*X509) callconv(.C) c_int;
pub const X509_STORE_CTX_check_revocation_fn = ?fn (?*X509_STORE_CTX) callconv(.C) c_int;
pub const X509_STORE_CTX_get_crl_fn = ?fn (?*X509_STORE_CTX, [*c]?*X509_CRL, ?*X509) callconv(.C) c_int;
pub const X509_STORE_CTX_check_crl_fn = ?fn (?*X509_STORE_CTX, ?*X509_CRL) callconv(.C) c_int;
pub const X509_STORE_CTX_cert_crl_fn = ?fn (?*X509_STORE_CTX, ?*X509_CRL, ?*X509) callconv(.C) c_int;
pub const X509_STORE_CTX_check_policy_fn = ?fn (?*X509_STORE_CTX) callconv(.C) c_int;
pub const X509_STORE_CTX_lookup_certs_fn = ?fn (?*X509_STORE_CTX, ?*X509_NAME) callconv(.C) ?*struct_stack_st_X509;
pub const X509_STORE_CTX_lookup_crls_fn = ?fn (?*X509_STORE_CTX, ?*X509_NAME) callconv(.C) ?*struct_stack_st_X509_CRL;
pub const X509_STORE_CTX_cleanup_fn = ?fn (?*X509_STORE_CTX) callconv(.C) c_int;
pub extern fn X509_STORE_CTX_set_depth(ctx: ?*X509_STORE_CTX, depth: c_int) void;
pub extern fn X509_OBJECT_idx_by_subject(h: ?*struct_stack_st_X509_OBJECT, type: X509_LOOKUP_TYPE, name: ?*X509_NAME) c_int;
pub extern fn X509_OBJECT_retrieve_by_subject(h: ?*struct_stack_st_X509_OBJECT, type: X509_LOOKUP_TYPE, name: ?*X509_NAME) ?*X509_OBJECT;
pub extern fn X509_OBJECT_retrieve_match(h: ?*struct_stack_st_X509_OBJECT, x: ?*X509_OBJECT) ?*X509_OBJECT;
pub extern fn X509_OBJECT_up_ref_count(a: ?*X509_OBJECT) c_int;
pub extern fn X509_OBJECT_new() ?*X509_OBJECT;
pub extern fn X509_OBJECT_free(a: ?*X509_OBJECT) void;
pub extern fn X509_OBJECT_get_type(a: ?*const X509_OBJECT) X509_LOOKUP_TYPE;
pub extern fn X509_OBJECT_get0_X509(a: ?*const X509_OBJECT) ?*X509;
pub extern fn X509_OBJECT_set1_X509(a: ?*X509_OBJECT, obj: ?*X509) c_int;
pub extern fn X509_OBJECT_get0_X509_CRL(a: ?*X509_OBJECT) ?*X509_CRL;
pub extern fn X509_OBJECT_set1_X509_CRL(a: ?*X509_OBJECT, obj: ?*X509_CRL) c_int;
pub extern fn X509_STORE_new() ?*X509_STORE;
pub extern fn X509_STORE_free(v: ?*X509_STORE) void;
pub extern fn X509_STORE_lock(ctx: ?*X509_STORE) c_int;
pub extern fn X509_STORE_unlock(ctx: ?*X509_STORE) c_int;
pub extern fn X509_STORE_up_ref(v: ?*X509_STORE) c_int;
pub extern fn X509_STORE_get0_objects(v: ?*X509_STORE) ?*struct_stack_st_X509_OBJECT;
pub extern fn X509_STORE_CTX_get1_certs(st: ?*X509_STORE_CTX, nm: ?*X509_NAME) ?*struct_stack_st_X509;
pub extern fn X509_STORE_CTX_get1_crls(st: ?*X509_STORE_CTX, nm: ?*X509_NAME) ?*struct_stack_st_X509_CRL;
pub extern fn X509_STORE_set_flags(ctx: ?*X509_STORE, flags: c_ulong) c_int;
pub extern fn X509_STORE_set_purpose(ctx: ?*X509_STORE, purpose: c_int) c_int;
pub extern fn X509_STORE_set_trust(ctx: ?*X509_STORE, trust: c_int) c_int;
pub extern fn X509_STORE_set1_param(ctx: ?*X509_STORE, pm: ?*X509_VERIFY_PARAM) c_int;
pub extern fn X509_STORE_get0_param(ctx: ?*X509_STORE) ?*X509_VERIFY_PARAM;
pub extern fn X509_STORE_set_verify(ctx: ?*X509_STORE, verify: X509_STORE_CTX_verify_fn) void;
pub extern fn X509_STORE_CTX_set_verify(ctx: ?*X509_STORE_CTX, verify: X509_STORE_CTX_verify_fn) void;
pub extern fn X509_STORE_get_verify(ctx: ?*X509_STORE) X509_STORE_CTX_verify_fn;
pub extern fn X509_STORE_set_verify_cb(ctx: ?*X509_STORE, verify_cb: X509_STORE_CTX_verify_cb) void;
pub extern fn X509_STORE_get_verify_cb(ctx: ?*X509_STORE) X509_STORE_CTX_verify_cb;
pub extern fn X509_STORE_set_get_issuer(ctx: ?*X509_STORE, get_issuer: X509_STORE_CTX_get_issuer_fn) void;
pub extern fn X509_STORE_get_get_issuer(ctx: ?*X509_STORE) X509_STORE_CTX_get_issuer_fn;
pub extern fn X509_STORE_set_check_issued(ctx: ?*X509_STORE, check_issued: X509_STORE_CTX_check_issued_fn) void;
pub extern fn X509_STORE_get_check_issued(ctx: ?*X509_STORE) X509_STORE_CTX_check_issued_fn;
pub extern fn X509_STORE_set_check_revocation(ctx: ?*X509_STORE, check_revocation: X509_STORE_CTX_check_revocation_fn) void;
pub extern fn X509_STORE_get_check_revocation(ctx: ?*X509_STORE) X509_STORE_CTX_check_revocation_fn;
pub extern fn X509_STORE_set_get_crl(ctx: ?*X509_STORE, get_crl: X509_STORE_CTX_get_crl_fn) void;
pub extern fn X509_STORE_get_get_crl(ctx: ?*X509_STORE) X509_STORE_CTX_get_crl_fn;
pub extern fn X509_STORE_set_check_crl(ctx: ?*X509_STORE, check_crl: X509_STORE_CTX_check_crl_fn) void;
pub extern fn X509_STORE_get_check_crl(ctx: ?*X509_STORE) X509_STORE_CTX_check_crl_fn;
pub extern fn X509_STORE_set_cert_crl(ctx: ?*X509_STORE, cert_crl: X509_STORE_CTX_cert_crl_fn) void;
pub extern fn X509_STORE_get_cert_crl(ctx: ?*X509_STORE) X509_STORE_CTX_cert_crl_fn;
pub extern fn X509_STORE_set_check_policy(ctx: ?*X509_STORE, check_policy: X509_STORE_CTX_check_policy_fn) void;
pub extern fn X509_STORE_get_check_policy(ctx: ?*X509_STORE) X509_STORE_CTX_check_policy_fn;
pub extern fn X509_STORE_set_lookup_certs(ctx: ?*X509_STORE, lookup_certs: X509_STORE_CTX_lookup_certs_fn) void;
pub extern fn X509_STORE_get_lookup_certs(ctx: ?*X509_STORE) X509_STORE_CTX_lookup_certs_fn;
pub extern fn X509_STORE_set_lookup_crls(ctx: ?*X509_STORE, lookup_crls: X509_STORE_CTX_lookup_crls_fn) void;
pub extern fn X509_STORE_get_lookup_crls(ctx: ?*X509_STORE) X509_STORE_CTX_lookup_crls_fn;
pub extern fn X509_STORE_set_cleanup(ctx: ?*X509_STORE, cleanup: X509_STORE_CTX_cleanup_fn) void;
pub extern fn X509_STORE_get_cleanup(ctx: ?*X509_STORE) X509_STORE_CTX_cleanup_fn;
pub extern fn X509_STORE_set_ex_data(ctx: ?*X509_STORE, idx: c_int, data: ?*c_void) c_int;
pub extern fn X509_STORE_get_ex_data(ctx: ?*X509_STORE, idx: c_int) ?*c_void;
pub extern fn X509_STORE_CTX_new() ?*X509_STORE_CTX;
pub extern fn X509_STORE_CTX_get1_issuer(issuer: [*c]?*X509, ctx: ?*X509_STORE_CTX, x: ?*X509) c_int;
pub extern fn X509_STORE_CTX_free(ctx: ?*X509_STORE_CTX) void;
pub extern fn X509_STORE_CTX_init(ctx: ?*X509_STORE_CTX, store: ?*X509_STORE, x509: ?*X509, chain: ?*struct_stack_st_X509) c_int;
pub extern fn X509_STORE_CTX_set0_trusted_stack(ctx: ?*X509_STORE_CTX, sk: ?*struct_stack_st_X509) void;
pub extern fn X509_STORE_CTX_cleanup(ctx: ?*X509_STORE_CTX) void;
pub extern fn X509_STORE_CTX_get0_store(ctx: ?*X509_STORE_CTX) ?*X509_STORE;
pub extern fn X509_STORE_CTX_get0_cert(ctx: ?*X509_STORE_CTX) ?*X509;
pub extern fn X509_STORE_CTX_get0_untrusted(ctx: ?*X509_STORE_CTX) ?*struct_stack_st_X509;
pub extern fn X509_STORE_CTX_set0_untrusted(ctx: ?*X509_STORE_CTX, sk: ?*struct_stack_st_X509) void;
pub extern fn X509_STORE_CTX_set_verify_cb(ctx: ?*X509_STORE_CTX, verify: X509_STORE_CTX_verify_cb) void;
pub extern fn X509_STORE_CTX_get_verify_cb(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_verify_cb;
pub extern fn X509_STORE_CTX_get_verify(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_verify_fn;
pub extern fn X509_STORE_CTX_get_get_issuer(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_get_issuer_fn;
pub extern fn X509_STORE_CTX_get_check_issued(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_check_issued_fn;
pub extern fn X509_STORE_CTX_get_check_revocation(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_check_revocation_fn;
pub extern fn X509_STORE_CTX_get_get_crl(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_get_crl_fn;
pub extern fn X509_STORE_CTX_get_check_crl(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_check_crl_fn;
pub extern fn X509_STORE_CTX_get_cert_crl(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_cert_crl_fn;
pub extern fn X509_STORE_CTX_get_check_policy(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_check_policy_fn;
pub extern fn X509_STORE_CTX_get_lookup_certs(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_lookup_certs_fn;
pub extern fn X509_STORE_CTX_get_lookup_crls(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_lookup_crls_fn;
pub extern fn X509_STORE_CTX_get_cleanup(ctx: ?*X509_STORE_CTX) X509_STORE_CTX_cleanup_fn;
pub extern fn X509_STORE_add_lookup(v: ?*X509_STORE, m: ?*X509_LOOKUP_METHOD) ?*X509_LOOKUP;
pub extern fn X509_LOOKUP_hash_dir() ?*X509_LOOKUP_METHOD;
pub extern fn X509_LOOKUP_file() ?*X509_LOOKUP_METHOD;
pub const X509_LOOKUP_ctrl_fn = ?fn (?*X509_LOOKUP, c_int, [*c]const u8, c_long, [*c][*c]u8) callconv(.C) c_int;
pub const X509_LOOKUP_get_by_subject_fn = ?fn (?*X509_LOOKUP, X509_LOOKUP_TYPE, ?*X509_NAME, ?*X509_OBJECT) callconv(.C) c_int;
pub const X509_LOOKUP_get_by_issuer_serial_fn = ?fn (?*X509_LOOKUP, X509_LOOKUP_TYPE, ?*X509_NAME, [*c]ASN1_INTEGER, ?*X509_OBJECT) callconv(.C) c_int;
pub const X509_LOOKUP_get_by_fingerprint_fn = ?fn (?*X509_LOOKUP, X509_LOOKUP_TYPE, [*c]const u8, c_int, ?*X509_OBJECT) callconv(.C) c_int;
pub const X509_LOOKUP_get_by_alias_fn = ?fn (?*X509_LOOKUP, X509_LOOKUP_TYPE, [*c]const u8, c_int, ?*X509_OBJECT) callconv(.C) c_int;
pub extern fn X509_LOOKUP_meth_new(name: [*c]const u8) ?*X509_LOOKUP_METHOD;
pub extern fn X509_LOOKUP_meth_free(method: ?*X509_LOOKUP_METHOD) void;
pub extern fn X509_LOOKUP_meth_set_new_item(method: ?*X509_LOOKUP_METHOD, new_item: ?fn (?*X509_LOOKUP) callconv(.C) c_int) c_int;
pub extern fn X509_LOOKUP_meth_get_new_item(method: ?*const X509_LOOKUP_METHOD) ?fn (?*X509_LOOKUP) callconv(.C) c_int;
pub extern fn X509_LOOKUP_meth_set_free(method: ?*X509_LOOKUP_METHOD, free_fn: ?fn (?*X509_LOOKUP) callconv(.C) void) c_int;
pub extern fn X509_LOOKUP_meth_get_free(method: ?*const X509_LOOKUP_METHOD) ?fn (?*X509_LOOKUP) callconv(.C) void;
pub extern fn X509_LOOKUP_meth_set_init(method: ?*X509_LOOKUP_METHOD, init: ?fn (?*X509_LOOKUP) callconv(.C) c_int) c_int;
pub extern fn X509_LOOKUP_meth_get_init(method: ?*const X509_LOOKUP_METHOD) ?fn (?*X509_LOOKUP) callconv(.C) c_int;
pub extern fn X509_LOOKUP_meth_set_shutdown(method: ?*X509_LOOKUP_METHOD, shutdown: ?fn (?*X509_LOOKUP) callconv(.C) c_int) c_int;
pub extern fn X509_LOOKUP_meth_get_shutdown(method: ?*const X509_LOOKUP_METHOD) ?fn (?*X509_LOOKUP) callconv(.C) c_int;
pub extern fn X509_LOOKUP_meth_set_ctrl(method: ?*X509_LOOKUP_METHOD, ctrl_fn: X509_LOOKUP_ctrl_fn) c_int;
pub extern fn X509_LOOKUP_meth_get_ctrl(method: ?*const X509_LOOKUP_METHOD) X509_LOOKUP_ctrl_fn;
pub extern fn X509_LOOKUP_meth_set_get_by_subject(method: ?*X509_LOOKUP_METHOD, @"fn": X509_LOOKUP_get_by_subject_fn) c_int;
pub extern fn X509_LOOKUP_meth_get_get_by_subject(method: ?*const X509_LOOKUP_METHOD) X509_LOOKUP_get_by_subject_fn;
pub extern fn X509_LOOKUP_meth_set_get_by_issuer_serial(method: ?*X509_LOOKUP_METHOD, @"fn": X509_LOOKUP_get_by_issuer_serial_fn) c_int;
pub extern fn X509_LOOKUP_meth_get_get_by_issuer_serial(method: ?*const X509_LOOKUP_METHOD) X509_LOOKUP_get_by_issuer_serial_fn;
pub extern fn X509_LOOKUP_meth_set_get_by_fingerprint(method: ?*X509_LOOKUP_METHOD, @"fn": X509_LOOKUP_get_by_fingerprint_fn) c_int;
pub extern fn X509_LOOKUP_meth_get_get_by_fingerprint(method: ?*const X509_LOOKUP_METHOD) X509_LOOKUP_get_by_fingerprint_fn;
pub extern fn X509_LOOKUP_meth_set_get_by_alias(method: ?*X509_LOOKUP_METHOD, @"fn": X509_LOOKUP_get_by_alias_fn) c_int;
pub extern fn X509_LOOKUP_meth_get_get_by_alias(method: ?*const X509_LOOKUP_METHOD) X509_LOOKUP_get_by_alias_fn;
pub extern fn X509_STORE_add_cert(ctx: ?*X509_STORE, x: ?*X509) c_int;
pub extern fn X509_STORE_add_crl(ctx: ?*X509_STORE, x: ?*X509_CRL) c_int;
pub extern fn X509_STORE_CTX_get_by_subject(vs: ?*X509_STORE_CTX, type: X509_LOOKUP_TYPE, name: ?*X509_NAME, ret: ?*X509_OBJECT) c_int;
pub extern fn X509_STORE_CTX_get_obj_by_subject(vs: ?*X509_STORE_CTX, type: X509_LOOKUP_TYPE, name: ?*X509_NAME) ?*X509_OBJECT;
pub extern fn X509_LOOKUP_ctrl(ctx: ?*X509_LOOKUP, cmd: c_int, argc: [*c]const u8, argl: c_long, ret: [*c][*c]u8) c_int;
pub extern fn X509_load_cert_file(ctx: ?*X509_LOOKUP, file: [*c]const u8, type: c_int) c_int;
pub extern fn X509_load_crl_file(ctx: ?*X509_LOOKUP, file: [*c]const u8, type: c_int) c_int;
pub extern fn X509_load_cert_crl_file(ctx: ?*X509_LOOKUP, file: [*c]const u8, type: c_int) c_int;
pub extern fn X509_LOOKUP_new(method: ?*X509_LOOKUP_METHOD) ?*X509_LOOKUP;
pub extern fn X509_LOOKUP_free(ctx: ?*X509_LOOKUP) void;
pub extern fn X509_LOOKUP_init(ctx: ?*X509_LOOKUP) c_int;
pub extern fn X509_LOOKUP_by_subject(ctx: ?*X509_LOOKUP, type: X509_LOOKUP_TYPE, name: ?*X509_NAME, ret: ?*X509_OBJECT) c_int;
pub extern fn X509_LOOKUP_by_issuer_serial(ctx: ?*X509_LOOKUP, type: X509_LOOKUP_TYPE, name: ?*X509_NAME, serial: [*c]ASN1_INTEGER, ret: ?*X509_OBJECT) c_int;
pub extern fn X509_LOOKUP_by_fingerprint(ctx: ?*X509_LOOKUP, type: X509_LOOKUP_TYPE, bytes: [*c]const u8, len: c_int, ret: ?*X509_OBJECT) c_int;
pub extern fn X509_LOOKUP_by_alias(ctx: ?*X509_LOOKUP, type: X509_LOOKUP_TYPE, str: [*c]const u8, len: c_int, ret: ?*X509_OBJECT) c_int;
pub extern fn X509_LOOKUP_set_method_data(ctx: ?*X509_LOOKUP, data: ?*c_void) c_int;
pub extern fn X509_LOOKUP_get_method_data(ctx: ?*const X509_LOOKUP) ?*c_void;
pub extern fn X509_LOOKUP_get_store(ctx: ?*const X509_LOOKUP) ?*X509_STORE;
pub extern fn X509_LOOKUP_shutdown(ctx: ?*X509_LOOKUP) c_int;
pub extern fn X509_STORE_load_locations(ctx: ?*X509_STORE, file: [*c]const u8, dir: [*c]const u8) c_int;
pub extern fn X509_STORE_set_default_paths(ctx: ?*X509_STORE) c_int;
pub extern fn X509_STORE_CTX_set_ex_data(ctx: ?*X509_STORE_CTX, idx: c_int, data: ?*c_void) c_int;
pub extern fn X509_STORE_CTX_get_ex_data(ctx: ?*X509_STORE_CTX, idx: c_int) ?*c_void;
pub extern fn X509_STORE_CTX_get_error(ctx: ?*X509_STORE_CTX) c_int;
pub extern fn X509_STORE_CTX_set_error(ctx: ?*X509_STORE_CTX, s: c_int) void;
pub extern fn X509_STORE_CTX_get_error_depth(ctx: ?*X509_STORE_CTX) c_int;
pub extern fn X509_STORE_CTX_set_error_depth(ctx: ?*X509_STORE_CTX, depth: c_int) void;
pub extern fn X509_STORE_CTX_get_current_cert(ctx: ?*X509_STORE_CTX) ?*X509;
pub extern fn X509_STORE_CTX_set_current_cert(ctx: ?*X509_STORE_CTX, x: ?*X509) void;
pub extern fn X509_STORE_CTX_get0_current_issuer(ctx: ?*X509_STORE_CTX) ?*X509;
pub extern fn X509_STORE_CTX_get0_current_crl(ctx: ?*X509_STORE_CTX) ?*X509_CRL;
pub extern fn X509_STORE_CTX_get0_parent_ctx(ctx: ?*X509_STORE_CTX) ?*X509_STORE_CTX;
pub extern fn X509_STORE_CTX_get0_chain(ctx: ?*X509_STORE_CTX) ?*struct_stack_st_X509;
pub extern fn X509_STORE_CTX_get1_chain(ctx: ?*X509_STORE_CTX) ?*struct_stack_st_X509;
pub extern fn X509_STORE_CTX_set_cert(c: ?*X509_STORE_CTX, x: ?*X509) void;
pub extern fn X509_STORE_CTX_set0_verified_chain(c: ?*X509_STORE_CTX, sk: ?*struct_stack_st_X509) void;
pub extern fn X509_STORE_CTX_set0_crls(c: ?*X509_STORE_CTX, sk: ?*struct_stack_st_X509_CRL) void;
pub extern fn X509_STORE_CTX_set_purpose(ctx: ?*X509_STORE_CTX, purpose: c_int) c_int;
pub extern fn X509_STORE_CTX_set_trust(ctx: ?*X509_STORE_CTX, trust: c_int) c_int;
pub extern fn X509_STORE_CTX_purpose_inherit(ctx: ?*X509_STORE_CTX, def_purpose: c_int, purpose: c_int, trust: c_int) c_int;
pub extern fn X509_STORE_CTX_set_flags(ctx: ?*X509_STORE_CTX, flags: c_ulong) void;
pub extern fn X509_STORE_CTX_set_time(ctx: ?*X509_STORE_CTX, flags: c_ulong, t: time_t) void;
pub extern fn X509_STORE_CTX_get0_policy_tree(ctx: ?*X509_STORE_CTX) ?*X509_POLICY_TREE;
pub extern fn X509_STORE_CTX_get_explicit_policy(ctx: ?*X509_STORE_CTX) c_int;
pub extern fn X509_STORE_CTX_get_num_untrusted(ctx: ?*X509_STORE_CTX) c_int;
pub extern fn X509_STORE_CTX_get0_param(ctx: ?*X509_STORE_CTX) ?*X509_VERIFY_PARAM;
pub extern fn X509_STORE_CTX_set0_param(ctx: ?*X509_STORE_CTX, param: ?*X509_VERIFY_PARAM) void;
pub extern fn X509_STORE_CTX_set_default(ctx: ?*X509_STORE_CTX, name: [*c]const u8) c_int;
pub extern fn X509_STORE_CTX_set0_dane(ctx: ?*X509_STORE_CTX, dane: ?*SSL_DANE) void;
pub extern fn X509_VERIFY_PARAM_new() ?*X509_VERIFY_PARAM;
pub extern fn X509_VERIFY_PARAM_free(param: ?*X509_VERIFY_PARAM) void;
pub extern fn X509_VERIFY_PARAM_inherit(to: ?*X509_VERIFY_PARAM, from: ?*const X509_VERIFY_PARAM) c_int;
pub extern fn X509_VERIFY_PARAM_set1(to: ?*X509_VERIFY_PARAM, from: ?*const X509_VERIFY_PARAM) c_int;
pub extern fn X509_VERIFY_PARAM_set1_name(param: ?*X509_VERIFY_PARAM, name: [*c]const u8) c_int;
pub extern fn X509_VERIFY_PARAM_set_flags(param: ?*X509_VERIFY_PARAM, flags: c_ulong) c_int;
pub extern fn X509_VERIFY_PARAM_clear_flags(param: ?*X509_VERIFY_PARAM, flags: c_ulong) c_int;
pub extern fn X509_VERIFY_PARAM_get_flags(param: ?*X509_VERIFY_PARAM) c_ulong;
pub extern fn X509_VERIFY_PARAM_set_purpose(param: ?*X509_VERIFY_PARAM, purpose: c_int) c_int;
pub extern fn X509_VERIFY_PARAM_set_trust(param: ?*X509_VERIFY_PARAM, trust: c_int) c_int;
pub extern fn X509_VERIFY_PARAM_set_depth(param: ?*X509_VERIFY_PARAM, depth: c_int) void;
pub extern fn X509_VERIFY_PARAM_set_auth_level(param: ?*X509_VERIFY_PARAM, auth_level: c_int) void;
pub extern fn X509_VERIFY_PARAM_get_time(param: ?*const X509_VERIFY_PARAM) time_t;
pub extern fn X509_VERIFY_PARAM_set_time(param: ?*X509_VERIFY_PARAM, t: time_t) void;
pub extern fn X509_VERIFY_PARAM_add0_policy(param: ?*X509_VERIFY_PARAM, policy: ?*ASN1_OBJECT) c_int;
pub extern fn X509_VERIFY_PARAM_set1_policies(param: ?*X509_VERIFY_PARAM, policies: ?*struct_stack_st_ASN1_OBJECT) c_int;
pub extern fn X509_VERIFY_PARAM_set_inh_flags(param: ?*X509_VERIFY_PARAM, flags: u32) c_int;
pub extern fn X509_VERIFY_PARAM_get_inh_flags(param: ?*const X509_VERIFY_PARAM) u32;
pub extern fn X509_VERIFY_PARAM_set1_host(param: ?*X509_VERIFY_PARAM, name: [*c]const u8, namelen: usize) c_int;
pub extern fn X509_VERIFY_PARAM_add1_host(param: ?*X509_VERIFY_PARAM, name: [*c]const u8, namelen: usize) c_int;
pub extern fn X509_VERIFY_PARAM_set_hostflags(param: ?*X509_VERIFY_PARAM, flags: c_uint) void;
pub extern fn X509_VERIFY_PARAM_get_hostflags(param: ?*const X509_VERIFY_PARAM) c_uint;
pub extern fn X509_VERIFY_PARAM_get0_peername(?*X509_VERIFY_PARAM) [*c]u8;
pub extern fn X509_VERIFY_PARAM_move_peername(?*X509_VERIFY_PARAM, ?*X509_VERIFY_PARAM) void;
pub extern fn X509_VERIFY_PARAM_set1_email(param: ?*X509_VERIFY_PARAM, email: [*c]const u8, emaillen: usize) c_int;
pub extern fn X509_VERIFY_PARAM_set1_ip(param: ?*X509_VERIFY_PARAM, ip: [*c]const u8, iplen: usize) c_int;
pub extern fn X509_VERIFY_PARAM_set1_ip_asc(param: ?*X509_VERIFY_PARAM, ipasc: [*c]const u8) c_int;
pub extern fn X509_VERIFY_PARAM_get_depth(param: ?*const X509_VERIFY_PARAM) c_int;
pub extern fn X509_VERIFY_PARAM_get_auth_level(param: ?*const X509_VERIFY_PARAM) c_int;
pub extern fn X509_VERIFY_PARAM_get0_name(param: ?*const X509_VERIFY_PARAM) [*c]const u8;
pub extern fn X509_VERIFY_PARAM_add0_table(param: ?*X509_VERIFY_PARAM) c_int;
pub extern fn X509_VERIFY_PARAM_get_count() c_int;
pub extern fn X509_VERIFY_PARAM_get0(id: c_int) ?*const X509_VERIFY_PARAM;
pub extern fn X509_VERIFY_PARAM_lookup(name: [*c]const u8) ?*const X509_VERIFY_PARAM;
pub extern fn X509_VERIFY_PARAM_table_cleanup() void;
pub extern fn X509_policy_check(ptree: [*c]?*X509_POLICY_TREE, pexplicit_policy: [*c]c_int, certs: ?*struct_stack_st_X509, policy_oids: ?*struct_stack_st_ASN1_OBJECT, flags: c_uint) c_int;
pub extern fn X509_policy_tree_free(tree: ?*X509_POLICY_TREE) void;
pub extern fn X509_policy_tree_level_count(tree: ?*const X509_POLICY_TREE) c_int;
pub extern fn X509_policy_tree_get0_level(tree: ?*const X509_POLICY_TREE, i: c_int) ?*X509_POLICY_LEVEL;
pub const struct_stack_st_X509_POLICY_NODE = opaque {};
pub extern fn X509_policy_tree_get0_policies(tree: ?*const X509_POLICY_TREE) ?*struct_stack_st_X509_POLICY_NODE;
pub extern fn X509_policy_tree_get0_user_policies(tree: ?*const X509_POLICY_TREE) ?*struct_stack_st_X509_POLICY_NODE;
pub extern fn X509_policy_level_node_count(level: ?*X509_POLICY_LEVEL) c_int;
pub extern fn X509_policy_level_get0_node(level: ?*X509_POLICY_LEVEL, i: c_int) ?*X509_POLICY_NODE;
pub extern fn X509_policy_node_get0_policy(node: ?*const X509_POLICY_NODE) ?*const ASN1_OBJECT;
pub const struct_stack_st_POLICYQUALINFO = opaque {};
pub extern fn X509_policy_node_get0_qualifiers(node: ?*const X509_POLICY_NODE) ?*struct_stack_st_POLICYQUALINFO;
pub extern fn X509_policy_node_get0_parent(node: ?*const X509_POLICY_NODE) ?*const X509_POLICY_NODE;
pub extern fn ERR_load_PKCS7_strings() c_int;
pub const struct_pkcs7_issuer_and_serial_st = extern struct {
    issuer: ?*X509_NAME,
    serial: [*c]ASN1_INTEGER,
};
pub const PKCS7_ISSUER_AND_SERIAL = struct_pkcs7_issuer_and_serial_st;
pub const struct_pkcs7_signer_info_st = extern struct {
    version: [*c]ASN1_INTEGER,
    issuer_and_serial: [*c]PKCS7_ISSUER_AND_SERIAL,
    digest_alg: [*c]X509_ALGOR,
    auth_attr: ?*struct_stack_st_X509_ATTRIBUTE,
    digest_enc_alg: [*c]X509_ALGOR,
    enc_digest: [*c]ASN1_OCTET_STRING,
    unauth_attr: ?*struct_stack_st_X509_ATTRIBUTE,
    pkey: ?*EVP_PKEY,
};
pub const PKCS7_SIGNER_INFO = struct_pkcs7_signer_info_st;
pub const struct_stack_st_PKCS7_SIGNER_INFO = opaque {};
pub const sk_PKCS7_SIGNER_INFO_compfunc = ?fn ([*c]const [*c]const PKCS7_SIGNER_INFO, [*c]const [*c]const PKCS7_SIGNER_INFO) callconv(.C) c_int;
pub const sk_PKCS7_SIGNER_INFO_freefunc = ?fn ([*c]PKCS7_SIGNER_INFO) callconv(.C) void;
pub const sk_PKCS7_SIGNER_INFO_copyfunc = ?fn ([*c]const PKCS7_SIGNER_INFO) callconv(.C) [*c]PKCS7_SIGNER_INFO;
pub fn sk_PKCS7_SIGNER_INFO_num(arg_sk: ?*const struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_SIGNER_INFO_value(arg_sk: ?*const struct_stack_st_PKCS7_SIGNER_INFO, arg_idx: c_int) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_PKCS7_SIGNER_INFO_new(arg_compare: sk_PKCS7_SIGNER_INFO_compfunc) callconv(.C) ?*struct_stack_st_PKCS7_SIGNER_INFO {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_PKCS7_SIGNER_INFO, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_PKCS7_SIGNER_INFO_new_null() callconv(.C) ?*struct_stack_st_PKCS7_SIGNER_INFO {
    return @ptrCast(?*struct_stack_st_PKCS7_SIGNER_INFO, OPENSSL_sk_new_null());
}
pub fn sk_PKCS7_SIGNER_INFO_new_reserve(arg_compare: sk_PKCS7_SIGNER_INFO_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_PKCS7_SIGNER_INFO {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_PKCS7_SIGNER_INFO, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_PKCS7_SIGNER_INFO_reserve(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_PKCS7_SIGNER_INFO_free(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_SIGNER_INFO_zero(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_SIGNER_INFO_delete(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_i: c_int) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_PKCS7_SIGNER_INFO_delete_ptr(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_SIGNER_INFO_push(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_SIGNER_INFO_unshift(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_SIGNER_INFO_pop(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_SIGNER_INFO_shift(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_SIGNER_INFO_pop_free(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_freefunc: sk_PKCS7_SIGNER_INFO_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_PKCS7_SIGNER_INFO_insert(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_PKCS7_SIGNER_INFO_set(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_idx: c_int, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) [*c]PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7_SIGNER_INFO, @alignCast(@alignOf(PKCS7_SIGNER_INFO), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_SIGNER_INFO_find(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_SIGNER_INFO_find_ex(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_ptr: [*c]PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_SIGNER_INFO_sort(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_SIGNER_INFO_is_sorted(arg_sk: ?*const struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_SIGNER_INFO_dup(arg_sk: ?*const struct_stack_st_PKCS7_SIGNER_INFO) callconv(.C) ?*struct_stack_st_PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_PKCS7_SIGNER_INFO, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_PKCS7_SIGNER_INFO_deep_copy(arg_sk: ?*const struct_stack_st_PKCS7_SIGNER_INFO, arg_copyfunc: sk_PKCS7_SIGNER_INFO_copyfunc, arg_freefunc: sk_PKCS7_SIGNER_INFO_freefunc) callconv(.C) ?*struct_stack_st_PKCS7_SIGNER_INFO {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_PKCS7_SIGNER_INFO, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_PKCS7_SIGNER_INFO_set_cmp_func(arg_sk: ?*struct_stack_st_PKCS7_SIGNER_INFO, arg_compare: sk_PKCS7_SIGNER_INFO_compfunc) callconv(.C) sk_PKCS7_SIGNER_INFO_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_PKCS7_SIGNER_INFO_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const PKCS7_SIGNER_INFO, [*c]const [*c]const PKCS7_SIGNER_INFO) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_pkcs7_recip_info_st = extern struct {
    version: [*c]ASN1_INTEGER,
    issuer_and_serial: [*c]PKCS7_ISSUER_AND_SERIAL,
    key_enc_algor: [*c]X509_ALGOR,
    enc_key: [*c]ASN1_OCTET_STRING,
    cert: ?*X509,
};
pub const PKCS7_RECIP_INFO = struct_pkcs7_recip_info_st;
pub const struct_stack_st_PKCS7_RECIP_INFO = opaque {};
pub const sk_PKCS7_RECIP_INFO_compfunc = ?fn ([*c]const [*c]const PKCS7_RECIP_INFO, [*c]const [*c]const PKCS7_RECIP_INFO) callconv(.C) c_int;
pub const sk_PKCS7_RECIP_INFO_freefunc = ?fn ([*c]PKCS7_RECIP_INFO) callconv(.C) void;
pub const sk_PKCS7_RECIP_INFO_copyfunc = ?fn ([*c]const PKCS7_RECIP_INFO) callconv(.C) [*c]PKCS7_RECIP_INFO;
pub fn sk_PKCS7_RECIP_INFO_num(arg_sk: ?*const struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_RECIP_INFO_value(arg_sk: ?*const struct_stack_st_PKCS7_RECIP_INFO, arg_idx: c_int) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_PKCS7_RECIP_INFO_new(arg_compare: sk_PKCS7_RECIP_INFO_compfunc) callconv(.C) ?*struct_stack_st_PKCS7_RECIP_INFO {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_PKCS7_RECIP_INFO, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_PKCS7_RECIP_INFO_new_null() callconv(.C) ?*struct_stack_st_PKCS7_RECIP_INFO {
    return @ptrCast(?*struct_stack_st_PKCS7_RECIP_INFO, OPENSSL_sk_new_null());
}
pub fn sk_PKCS7_RECIP_INFO_new_reserve(arg_compare: sk_PKCS7_RECIP_INFO_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_PKCS7_RECIP_INFO {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_PKCS7_RECIP_INFO, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_PKCS7_RECIP_INFO_reserve(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_PKCS7_RECIP_INFO_free(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_RECIP_INFO_zero(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_RECIP_INFO_delete(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_i: c_int) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_PKCS7_RECIP_INFO_delete_ptr(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_RECIP_INFO_push(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_RECIP_INFO_unshift(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_RECIP_INFO_pop(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_RECIP_INFO_shift(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_RECIP_INFO_pop_free(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_freefunc: sk_PKCS7_RECIP_INFO_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_PKCS7_RECIP_INFO_insert(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_PKCS7_RECIP_INFO_set(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_idx: c_int, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) [*c]PKCS7_RECIP_INFO {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7_RECIP_INFO, @alignCast(@alignOf(PKCS7_RECIP_INFO), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_RECIP_INFO_find(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_RECIP_INFO_find_ex(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_ptr: [*c]PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_RECIP_INFO_sort(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_RECIP_INFO_is_sorted(arg_sk: ?*const struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_RECIP_INFO_dup(arg_sk: ?*const struct_stack_st_PKCS7_RECIP_INFO) callconv(.C) ?*struct_stack_st_PKCS7_RECIP_INFO {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_PKCS7_RECIP_INFO, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_PKCS7_RECIP_INFO_deep_copy(arg_sk: ?*const struct_stack_st_PKCS7_RECIP_INFO, arg_copyfunc: sk_PKCS7_RECIP_INFO_copyfunc, arg_freefunc: sk_PKCS7_RECIP_INFO_freefunc) callconv(.C) ?*struct_stack_st_PKCS7_RECIP_INFO {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_PKCS7_RECIP_INFO, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_PKCS7_RECIP_INFO_set_cmp_func(arg_sk: ?*struct_stack_st_PKCS7_RECIP_INFO, arg_compare: sk_PKCS7_RECIP_INFO_compfunc) callconv(.C) sk_PKCS7_RECIP_INFO_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_PKCS7_RECIP_INFO_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const PKCS7_RECIP_INFO, [*c]const [*c]const PKCS7_RECIP_INFO) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
const union_unnamed_44 = extern union {
    ptr: [*c]u8,
    data: [*c]ASN1_OCTET_STRING,
    sign: [*c]PKCS7_SIGNED,
    enveloped: [*c]PKCS7_ENVELOPE,
    signed_and_enveloped: [*c]PKCS7_SIGN_ENVELOPE,
    digest: [*c]PKCS7_DIGEST,
    encrypted: [*c]PKCS7_ENCRYPT,
    other: [*c]ASN1_TYPE,
};
pub const struct_pkcs7_st = extern struct {
    asn1: [*c]u8,
    length: c_long,
    state: c_int,
    detached: c_int,
    type: ?*ASN1_OBJECT,
    d: union_unnamed_44,
};
pub const struct_pkcs7_signed_st = extern struct {
    version: [*c]ASN1_INTEGER,
    md_algs: ?*struct_stack_st_X509_ALGOR,
    cert: ?*struct_stack_st_X509,
    crl: ?*struct_stack_st_X509_CRL,
    signer_info: ?*struct_stack_st_PKCS7_SIGNER_INFO,
    contents: [*c]struct_pkcs7_st,
};
pub const PKCS7_SIGNED = struct_pkcs7_signed_st;
pub const struct_pkcs7_enc_content_st = extern struct {
    content_type: ?*ASN1_OBJECT,
    algorithm: [*c]X509_ALGOR,
    enc_data: [*c]ASN1_OCTET_STRING,
    cipher: ?*const EVP_CIPHER,
};
pub const PKCS7_ENC_CONTENT = struct_pkcs7_enc_content_st;
pub const struct_pkcs7_enveloped_st = extern struct {
    version: [*c]ASN1_INTEGER,
    recipientinfo: ?*struct_stack_st_PKCS7_RECIP_INFO,
    enc_data: [*c]PKCS7_ENC_CONTENT,
};
pub const PKCS7_ENVELOPE = struct_pkcs7_enveloped_st;
pub const struct_pkcs7_signedandenveloped_st = extern struct {
    version: [*c]ASN1_INTEGER,
    md_algs: ?*struct_stack_st_X509_ALGOR,
    cert: ?*struct_stack_st_X509,
    crl: ?*struct_stack_st_X509_CRL,
    signer_info: ?*struct_stack_st_PKCS7_SIGNER_INFO,
    enc_data: [*c]PKCS7_ENC_CONTENT,
    recipientinfo: ?*struct_stack_st_PKCS7_RECIP_INFO,
};
pub const PKCS7_SIGN_ENVELOPE = struct_pkcs7_signedandenveloped_st;
pub const struct_pkcs7_digest_st = extern struct {
    version: [*c]ASN1_INTEGER,
    md: [*c]X509_ALGOR,
    contents: [*c]struct_pkcs7_st,
    digest: [*c]ASN1_OCTET_STRING,
};
pub const PKCS7_DIGEST = struct_pkcs7_digest_st;
pub const struct_pkcs7_encrypted_st = extern struct {
    version: [*c]ASN1_INTEGER,
    enc_data: [*c]PKCS7_ENC_CONTENT,
};
pub const PKCS7_ENCRYPT = struct_pkcs7_encrypted_st;
pub const PKCS7 = struct_pkcs7_st;
pub const struct_stack_st_PKCS7 = opaque {};
pub const sk_PKCS7_compfunc = ?fn ([*c]const [*c]const PKCS7, [*c]const [*c]const PKCS7) callconv(.C) c_int;
pub const sk_PKCS7_freefunc = ?fn ([*c]PKCS7) callconv(.C) void;
pub const sk_PKCS7_copyfunc = ?fn ([*c]const PKCS7) callconv(.C) [*c]PKCS7;
pub fn sk_PKCS7_num(arg_sk: ?*const struct_stack_st_PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_value(arg_sk: ?*const struct_stack_st_PKCS7, arg_idx: c_int) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_PKCS7_new(arg_compare: sk_PKCS7_compfunc) callconv(.C) ?*struct_stack_st_PKCS7 {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_PKCS7, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_PKCS7_new_null() callconv(.C) ?*struct_stack_st_PKCS7 {
    return @ptrCast(?*struct_stack_st_PKCS7, OPENSSL_sk_new_null());
}
pub fn sk_PKCS7_new_reserve(arg_compare: sk_PKCS7_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_PKCS7 {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_PKCS7, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_PKCS7_reserve(arg_sk: ?*struct_stack_st_PKCS7, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_PKCS7_free(arg_sk: ?*struct_stack_st_PKCS7) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_zero(arg_sk: ?*struct_stack_st_PKCS7) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_delete(arg_sk: ?*struct_stack_st_PKCS7, arg_i: c_int) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_PKCS7_delete_ptr(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_push(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_unshift(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_pop(arg_sk: ?*struct_stack_st_PKCS7) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_shift(arg_sk: ?*struct_stack_st_PKCS7) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_PKCS7_pop_free(arg_sk: ?*struct_stack_st_PKCS7, arg_freefunc: sk_PKCS7_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_PKCS7_insert(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_PKCS7_set(arg_sk: ?*struct_stack_st_PKCS7, arg_idx: c_int, arg_ptr: [*c]PKCS7) callconv(.C) [*c]PKCS7 {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]PKCS7, @alignCast(@alignOf(PKCS7), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_PKCS7_find(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_find_ex(arg_sk: ?*struct_stack_st_PKCS7, arg_ptr: [*c]PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_PKCS7_sort(arg_sk: ?*struct_stack_st_PKCS7) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_is_sorted(arg_sk: ?*const struct_stack_st_PKCS7) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_PKCS7_dup(arg_sk: ?*const struct_stack_st_PKCS7) callconv(.C) ?*struct_stack_st_PKCS7 {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_PKCS7, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_PKCS7_deep_copy(arg_sk: ?*const struct_stack_st_PKCS7, arg_copyfunc: sk_PKCS7_copyfunc, arg_freefunc: sk_PKCS7_freefunc) callconv(.C) ?*struct_stack_st_PKCS7 {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_PKCS7, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_PKCS7_set_cmp_func(arg_sk: ?*struct_stack_st_PKCS7, arg_compare: sk_PKCS7_compfunc) callconv(.C) sk_PKCS7_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_PKCS7_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const PKCS7, [*c]const [*c]const PKCS7) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn PKCS7_ISSUER_AND_SERIAL_new() [*c]PKCS7_ISSUER_AND_SERIAL;
pub extern fn PKCS7_ISSUER_AND_SERIAL_free(a: [*c]PKCS7_ISSUER_AND_SERIAL) void;
pub extern fn d2i_PKCS7_ISSUER_AND_SERIAL(a: [*c][*c]PKCS7_ISSUER_AND_SERIAL, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_ISSUER_AND_SERIAL;
pub extern fn i2d_PKCS7_ISSUER_AND_SERIAL(a: [*c]PKCS7_ISSUER_AND_SERIAL, out: [*c][*c]u8) c_int;
pub extern const PKCS7_ISSUER_AND_SERIAL_it: ASN1_ITEM;
pub extern fn PKCS7_ISSUER_AND_SERIAL_digest(data: [*c]PKCS7_ISSUER_AND_SERIAL, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn d2i_PKCS7_fp(fp: [*c]FILE, p7: [*c][*c]PKCS7) [*c]PKCS7;
pub extern fn i2d_PKCS7_fp(fp: [*c]FILE, p7: [*c]PKCS7) c_int;
pub extern fn PKCS7_dup(p7: [*c]PKCS7) [*c]PKCS7;
pub extern fn d2i_PKCS7_bio(bp: ?*BIO, p7: [*c][*c]PKCS7) [*c]PKCS7;
pub extern fn i2d_PKCS7_bio(bp: ?*BIO, p7: [*c]PKCS7) c_int;
pub extern fn i2d_PKCS7_bio_stream(out: ?*BIO, p7: [*c]PKCS7, in: ?*BIO, flags: c_int) c_int;
pub extern fn PEM_write_bio_PKCS7_stream(out: ?*BIO, p7: [*c]PKCS7, in: ?*BIO, flags: c_int) c_int;
pub extern fn PKCS7_SIGNER_INFO_new() [*c]PKCS7_SIGNER_INFO;
pub extern fn PKCS7_SIGNER_INFO_free(a: [*c]PKCS7_SIGNER_INFO) void;
pub extern fn d2i_PKCS7_SIGNER_INFO(a: [*c][*c]PKCS7_SIGNER_INFO, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_SIGNER_INFO;
pub extern fn i2d_PKCS7_SIGNER_INFO(a: [*c]PKCS7_SIGNER_INFO, out: [*c][*c]u8) c_int;
pub extern const PKCS7_SIGNER_INFO_it: ASN1_ITEM;
pub extern fn PKCS7_RECIP_INFO_new() [*c]PKCS7_RECIP_INFO;
pub extern fn PKCS7_RECIP_INFO_free(a: [*c]PKCS7_RECIP_INFO) void;
pub extern fn d2i_PKCS7_RECIP_INFO(a: [*c][*c]PKCS7_RECIP_INFO, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_RECIP_INFO;
pub extern fn i2d_PKCS7_RECIP_INFO(a: [*c]PKCS7_RECIP_INFO, out: [*c][*c]u8) c_int;
pub extern const PKCS7_RECIP_INFO_it: ASN1_ITEM;
pub extern fn PKCS7_SIGNED_new() [*c]PKCS7_SIGNED;
pub extern fn PKCS7_SIGNED_free(a: [*c]PKCS7_SIGNED) void;
pub extern fn d2i_PKCS7_SIGNED(a: [*c][*c]PKCS7_SIGNED, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_SIGNED;
pub extern fn i2d_PKCS7_SIGNED(a: [*c]PKCS7_SIGNED, out: [*c][*c]u8) c_int;
pub extern const PKCS7_SIGNED_it: ASN1_ITEM;
pub extern fn PKCS7_ENC_CONTENT_new() [*c]PKCS7_ENC_CONTENT;
pub extern fn PKCS7_ENC_CONTENT_free(a: [*c]PKCS7_ENC_CONTENT) void;
pub extern fn d2i_PKCS7_ENC_CONTENT(a: [*c][*c]PKCS7_ENC_CONTENT, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_ENC_CONTENT;
pub extern fn i2d_PKCS7_ENC_CONTENT(a: [*c]PKCS7_ENC_CONTENT, out: [*c][*c]u8) c_int;
pub extern const PKCS7_ENC_CONTENT_it: ASN1_ITEM;
pub extern fn PKCS7_ENVELOPE_new() [*c]PKCS7_ENVELOPE;
pub extern fn PKCS7_ENVELOPE_free(a: [*c]PKCS7_ENVELOPE) void;
pub extern fn d2i_PKCS7_ENVELOPE(a: [*c][*c]PKCS7_ENVELOPE, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_ENVELOPE;
pub extern fn i2d_PKCS7_ENVELOPE(a: [*c]PKCS7_ENVELOPE, out: [*c][*c]u8) c_int;
pub extern const PKCS7_ENVELOPE_it: ASN1_ITEM;
pub extern fn PKCS7_SIGN_ENVELOPE_new() [*c]PKCS7_SIGN_ENVELOPE;
pub extern fn PKCS7_SIGN_ENVELOPE_free(a: [*c]PKCS7_SIGN_ENVELOPE) void;
pub extern fn d2i_PKCS7_SIGN_ENVELOPE(a: [*c][*c]PKCS7_SIGN_ENVELOPE, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_SIGN_ENVELOPE;
pub extern fn i2d_PKCS7_SIGN_ENVELOPE(a: [*c]PKCS7_SIGN_ENVELOPE, out: [*c][*c]u8) c_int;
pub extern const PKCS7_SIGN_ENVELOPE_it: ASN1_ITEM;
pub extern fn PKCS7_DIGEST_new() [*c]PKCS7_DIGEST;
pub extern fn PKCS7_DIGEST_free(a: [*c]PKCS7_DIGEST) void;
pub extern fn d2i_PKCS7_DIGEST(a: [*c][*c]PKCS7_DIGEST, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_DIGEST;
pub extern fn i2d_PKCS7_DIGEST(a: [*c]PKCS7_DIGEST, out: [*c][*c]u8) c_int;
pub extern const PKCS7_DIGEST_it: ASN1_ITEM;
pub extern fn PKCS7_ENCRYPT_new() [*c]PKCS7_ENCRYPT;
pub extern fn PKCS7_ENCRYPT_free(a: [*c]PKCS7_ENCRYPT) void;
pub extern fn d2i_PKCS7_ENCRYPT(a: [*c][*c]PKCS7_ENCRYPT, in: [*c][*c]const u8, len: c_long) [*c]PKCS7_ENCRYPT;
pub extern fn i2d_PKCS7_ENCRYPT(a: [*c]PKCS7_ENCRYPT, out: [*c][*c]u8) c_int;
pub extern const PKCS7_ENCRYPT_it: ASN1_ITEM;
pub extern fn PKCS7_new() [*c]PKCS7;
pub extern fn PKCS7_free(a: [*c]PKCS7) void;
pub extern fn d2i_PKCS7(a: [*c][*c]PKCS7, in: [*c][*c]const u8, len: c_long) [*c]PKCS7;
pub extern fn i2d_PKCS7(a: [*c]PKCS7, out: [*c][*c]u8) c_int;
pub extern const PKCS7_it: ASN1_ITEM;
pub extern const PKCS7_ATTR_SIGN_it: ASN1_ITEM;
pub extern const PKCS7_ATTR_VERIFY_it: ASN1_ITEM;
pub extern fn i2d_PKCS7_NDEF(a: [*c]PKCS7, out: [*c][*c]u8) c_int;
pub extern fn PKCS7_print_ctx(out: ?*BIO, x: [*c]PKCS7, indent: c_int, pctx: ?*const ASN1_PCTX) c_int;
pub extern fn PKCS7_ctrl(p7: [*c]PKCS7, cmd: c_int, larg: c_long, parg: [*c]u8) c_long;
pub extern fn PKCS7_set_type(p7: [*c]PKCS7, type: c_int) c_int;
pub extern fn PKCS7_set0_type_other(p7: [*c]PKCS7, type: c_int, other: [*c]ASN1_TYPE) c_int;
pub extern fn PKCS7_set_content(p7: [*c]PKCS7, p7_data: [*c]PKCS7) c_int;
pub extern fn PKCS7_SIGNER_INFO_set(p7i: [*c]PKCS7_SIGNER_INFO, x509: ?*X509, pkey: ?*EVP_PKEY, dgst: ?*const EVP_MD) c_int;
pub extern fn PKCS7_SIGNER_INFO_sign(si: [*c]PKCS7_SIGNER_INFO) c_int;
pub extern fn PKCS7_add_signer(p7: [*c]PKCS7, p7i: [*c]PKCS7_SIGNER_INFO) c_int;
pub extern fn PKCS7_add_certificate(p7: [*c]PKCS7, x509: ?*X509) c_int;
pub extern fn PKCS7_add_crl(p7: [*c]PKCS7, x509: ?*X509_CRL) c_int;
pub extern fn PKCS7_content_new(p7: [*c]PKCS7, nid: c_int) c_int;
pub extern fn PKCS7_dataVerify(cert_store: ?*X509_STORE, ctx: ?*X509_STORE_CTX, bio: ?*BIO, p7: [*c]PKCS7, si: [*c]PKCS7_SIGNER_INFO) c_int;
pub extern fn PKCS7_signatureVerify(bio: ?*BIO, p7: [*c]PKCS7, si: [*c]PKCS7_SIGNER_INFO, x509: ?*X509) c_int;
pub extern fn PKCS7_dataInit(p7: [*c]PKCS7, bio: ?*BIO) ?*BIO;
pub extern fn PKCS7_dataFinal(p7: [*c]PKCS7, bio: ?*BIO) c_int;
pub extern fn PKCS7_dataDecode(p7: [*c]PKCS7, pkey: ?*EVP_PKEY, in_bio: ?*BIO, pcert: ?*X509) ?*BIO;
pub extern fn PKCS7_add_signature(p7: [*c]PKCS7, x509: ?*X509, pkey: ?*EVP_PKEY, dgst: ?*const EVP_MD) [*c]PKCS7_SIGNER_INFO;
pub extern fn PKCS7_cert_from_signer_info(p7: [*c]PKCS7, si: [*c]PKCS7_SIGNER_INFO) ?*X509;
pub extern fn PKCS7_set_digest(p7: [*c]PKCS7, md: ?*const EVP_MD) c_int;
pub extern fn PKCS7_get_signer_info(p7: [*c]PKCS7) ?*struct_stack_st_PKCS7_SIGNER_INFO;
pub extern fn PKCS7_add_recipient(p7: [*c]PKCS7, x509: ?*X509) [*c]PKCS7_RECIP_INFO;
pub extern fn PKCS7_SIGNER_INFO_get0_algs(si: [*c]PKCS7_SIGNER_INFO, pk: [*c]?*EVP_PKEY, pdig: [*c][*c]X509_ALGOR, psig: [*c][*c]X509_ALGOR) void;
pub extern fn PKCS7_RECIP_INFO_get0_alg(ri: [*c]PKCS7_RECIP_INFO, penc: [*c][*c]X509_ALGOR) void;
pub extern fn PKCS7_add_recipient_info(p7: [*c]PKCS7, ri: [*c]PKCS7_RECIP_INFO) c_int;
pub extern fn PKCS7_RECIP_INFO_set(p7i: [*c]PKCS7_RECIP_INFO, x509: ?*X509) c_int;
pub extern fn PKCS7_set_cipher(p7: [*c]PKCS7, cipher: ?*const EVP_CIPHER) c_int;
pub extern fn PKCS7_stream(boundary: [*c][*c][*c]u8, p7: [*c]PKCS7) c_int;
pub extern fn PKCS7_get_issuer_and_serial(p7: [*c]PKCS7, idx: c_int) [*c]PKCS7_ISSUER_AND_SERIAL;
pub extern fn PKCS7_digest_from_attributes(sk: ?*struct_stack_st_X509_ATTRIBUTE) [*c]ASN1_OCTET_STRING;
pub extern fn PKCS7_add_signed_attribute(p7si: [*c]PKCS7_SIGNER_INFO, nid: c_int, type: c_int, data: ?*c_void) c_int;
pub extern fn PKCS7_add_attribute(p7si: [*c]PKCS7_SIGNER_INFO, nid: c_int, atrtype: c_int, value: ?*c_void) c_int;
pub extern fn PKCS7_get_attribute(si: [*c]PKCS7_SIGNER_INFO, nid: c_int) [*c]ASN1_TYPE;
pub extern fn PKCS7_get_signed_attribute(si: [*c]PKCS7_SIGNER_INFO, nid: c_int) [*c]ASN1_TYPE;
pub extern fn PKCS7_set_signed_attributes(p7si: [*c]PKCS7_SIGNER_INFO, sk: ?*struct_stack_st_X509_ATTRIBUTE) c_int;
pub extern fn PKCS7_set_attributes(p7si: [*c]PKCS7_SIGNER_INFO, sk: ?*struct_stack_st_X509_ATTRIBUTE) c_int;
pub extern fn PKCS7_sign(signcert: ?*X509, pkey: ?*EVP_PKEY, certs: ?*struct_stack_st_X509, data: ?*BIO, flags: c_int) [*c]PKCS7;
pub extern fn PKCS7_sign_add_signer(p7: [*c]PKCS7, signcert: ?*X509, pkey: ?*EVP_PKEY, md: ?*const EVP_MD, flags: c_int) [*c]PKCS7_SIGNER_INFO;
pub extern fn PKCS7_final(p7: [*c]PKCS7, data: ?*BIO, flags: c_int) c_int;
pub extern fn PKCS7_verify(p7: [*c]PKCS7, certs: ?*struct_stack_st_X509, store: ?*X509_STORE, indata: ?*BIO, out: ?*BIO, flags: c_int) c_int;
pub extern fn PKCS7_get0_signers(p7: [*c]PKCS7, certs: ?*struct_stack_st_X509, flags: c_int) ?*struct_stack_st_X509;
pub extern fn PKCS7_encrypt(certs: ?*struct_stack_st_X509, in: ?*BIO, cipher: ?*const EVP_CIPHER, flags: c_int) [*c]PKCS7;
pub extern fn PKCS7_decrypt(p7: [*c]PKCS7, pkey: ?*EVP_PKEY, cert: ?*X509, data: ?*BIO, flags: c_int) c_int;
pub extern fn PKCS7_add_attrib_smimecap(si: [*c]PKCS7_SIGNER_INFO, cap: ?*struct_stack_st_X509_ALGOR) c_int;
pub extern fn PKCS7_get_smimecap(si: [*c]PKCS7_SIGNER_INFO) ?*struct_stack_st_X509_ALGOR;
pub extern fn PKCS7_simple_smimecap(sk: ?*struct_stack_st_X509_ALGOR, nid: c_int, arg: c_int) c_int;
pub extern fn PKCS7_add_attrib_content_type(si: [*c]PKCS7_SIGNER_INFO, coid: ?*ASN1_OBJECT) c_int;
pub extern fn PKCS7_add0_attrib_signing_time(si: [*c]PKCS7_SIGNER_INFO, t: [*c]ASN1_TIME) c_int;
pub extern fn PKCS7_add1_attrib_digest(si: [*c]PKCS7_SIGNER_INFO, md: [*c]const u8, mdlen: c_int) c_int;
pub extern fn SMIME_write_PKCS7(bio: ?*BIO, p7: [*c]PKCS7, data: ?*BIO, flags: c_int) c_int;
pub extern fn SMIME_read_PKCS7(bio: ?*BIO, bcont: [*c]?*BIO) [*c]PKCS7;
pub extern fn BIO_new_PKCS7(out: ?*BIO, p7: [*c]PKCS7) ?*BIO;
pub extern fn X509_CRL_set_default_method(meth: ?*const X509_CRL_METHOD) void;
pub extern fn X509_CRL_METHOD_new(crl_init: ?fn (?*X509_CRL) callconv(.C) c_int, crl_free: ?fn (?*X509_CRL) callconv(.C) c_int, crl_lookup: ?fn (?*X509_CRL, [*c]?*X509_REVOKED, [*c]ASN1_INTEGER, ?*X509_NAME) callconv(.C) c_int, crl_verify: ?fn (?*X509_CRL, ?*EVP_PKEY) callconv(.C) c_int) ?*X509_CRL_METHOD;
pub extern fn X509_CRL_METHOD_free(m: ?*X509_CRL_METHOD) void;
pub extern fn X509_CRL_set_meth_data(crl: ?*X509_CRL, dat: ?*c_void) void;
pub extern fn X509_CRL_get_meth_data(crl: ?*X509_CRL) ?*c_void;
pub extern fn X509_verify_cert_error_string(n: c_long) [*c]const u8;
pub extern fn X509_verify(a: ?*X509, r: ?*EVP_PKEY) c_int;
pub extern fn X509_REQ_verify(a: ?*X509_REQ, r: ?*EVP_PKEY) c_int;
pub extern fn X509_CRL_verify(a: ?*X509_CRL, r: ?*EVP_PKEY) c_int;
pub extern fn NETSCAPE_SPKI_verify(a: [*c]NETSCAPE_SPKI, r: ?*EVP_PKEY) c_int;
pub extern fn NETSCAPE_SPKI_b64_decode(str: [*c]const u8, len: c_int) [*c]NETSCAPE_SPKI;
pub extern fn NETSCAPE_SPKI_b64_encode(x: [*c]NETSCAPE_SPKI) [*c]u8;
pub extern fn NETSCAPE_SPKI_get_pubkey(x: [*c]NETSCAPE_SPKI) ?*EVP_PKEY;
pub extern fn NETSCAPE_SPKI_set_pubkey(x: [*c]NETSCAPE_SPKI, pkey: ?*EVP_PKEY) c_int;
pub extern fn NETSCAPE_SPKI_print(out: ?*BIO, spki: [*c]NETSCAPE_SPKI) c_int;
pub extern fn X509_signature_dump(bp: ?*BIO, sig: [*c]const ASN1_STRING, indent: c_int) c_int;
pub extern fn X509_signature_print(bp: ?*BIO, alg: [*c]const X509_ALGOR, sig: [*c]const ASN1_STRING) c_int;
pub extern fn X509_sign(x: ?*X509, pkey: ?*EVP_PKEY, md: ?*const EVP_MD) c_int;
pub extern fn X509_sign_ctx(x: ?*X509, ctx: ?*EVP_MD_CTX) c_int;
pub extern fn X509_http_nbio(rctx: ?*OCSP_REQ_CTX, pcert: [*c]?*X509) c_int;
pub extern fn X509_REQ_sign(x: ?*X509_REQ, pkey: ?*EVP_PKEY, md: ?*const EVP_MD) c_int;
pub extern fn X509_REQ_sign_ctx(x: ?*X509_REQ, ctx: ?*EVP_MD_CTX) c_int;
pub extern fn X509_CRL_sign(x: ?*X509_CRL, pkey: ?*EVP_PKEY, md: ?*const EVP_MD) c_int;
pub extern fn X509_CRL_sign_ctx(x: ?*X509_CRL, ctx: ?*EVP_MD_CTX) c_int;
pub extern fn X509_CRL_http_nbio(rctx: ?*OCSP_REQ_CTX, pcrl: [*c]?*X509_CRL) c_int;
pub extern fn NETSCAPE_SPKI_sign(x: [*c]NETSCAPE_SPKI, pkey: ?*EVP_PKEY, md: ?*const EVP_MD) c_int;
pub extern fn X509_pubkey_digest(data: ?*const X509, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn X509_digest(data: ?*const X509, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn X509_CRL_digest(data: ?*const X509_CRL, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn X509_REQ_digest(data: ?*const X509_REQ, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn X509_NAME_digest(data: ?*const X509_NAME, type: ?*const EVP_MD, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn d2i_X509_fp(fp: [*c]FILE, x509: [*c]?*X509) ?*X509;
pub extern fn i2d_X509_fp(fp: [*c]FILE, x509: ?*X509) c_int;
pub extern fn d2i_X509_CRL_fp(fp: [*c]FILE, crl: [*c]?*X509_CRL) ?*X509_CRL;
pub extern fn i2d_X509_CRL_fp(fp: [*c]FILE, crl: ?*X509_CRL) c_int;
pub extern fn d2i_X509_REQ_fp(fp: [*c]FILE, req: [*c]?*X509_REQ) ?*X509_REQ;
pub extern fn i2d_X509_REQ_fp(fp: [*c]FILE, req: ?*X509_REQ) c_int;
pub extern fn d2i_RSAPrivateKey_fp(fp: [*c]FILE, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSAPrivateKey_fp(fp: [*c]FILE, rsa: ?*RSA) c_int;
pub extern fn d2i_RSAPublicKey_fp(fp: [*c]FILE, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSAPublicKey_fp(fp: [*c]FILE, rsa: ?*RSA) c_int;
pub extern fn d2i_RSA_PUBKEY_fp(fp: [*c]FILE, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSA_PUBKEY_fp(fp: [*c]FILE, rsa: ?*RSA) c_int;
pub extern fn d2i_DSA_PUBKEY_fp(fp: [*c]FILE, dsa: [*c]?*DSA) ?*DSA;
pub extern fn i2d_DSA_PUBKEY_fp(fp: [*c]FILE, dsa: ?*DSA) c_int;
pub extern fn d2i_DSAPrivateKey_fp(fp: [*c]FILE, dsa: [*c]?*DSA) ?*DSA;
pub extern fn i2d_DSAPrivateKey_fp(fp: [*c]FILE, dsa: ?*DSA) c_int;
pub extern fn d2i_EC_PUBKEY_fp(fp: [*c]FILE, eckey: [*c]?*EC_KEY) ?*EC_KEY;
pub extern fn i2d_EC_PUBKEY_fp(fp: [*c]FILE, eckey: ?*EC_KEY) c_int;
pub extern fn d2i_ECPrivateKey_fp(fp: [*c]FILE, eckey: [*c]?*EC_KEY) ?*EC_KEY;
pub extern fn i2d_ECPrivateKey_fp(fp: [*c]FILE, eckey: ?*EC_KEY) c_int;
pub extern fn d2i_PKCS8_fp(fp: [*c]FILE, p8: [*c]?*X509_SIG) ?*X509_SIG;
pub extern fn i2d_PKCS8_fp(fp: [*c]FILE, p8: ?*X509_SIG) c_int;
pub extern fn d2i_PKCS8_PRIV_KEY_INFO_fp(fp: [*c]FILE, p8inf: [*c]?*PKCS8_PRIV_KEY_INFO) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn i2d_PKCS8_PRIV_KEY_INFO_fp(fp: [*c]FILE, p8inf: ?*PKCS8_PRIV_KEY_INFO) c_int;
pub extern fn i2d_PKCS8PrivateKeyInfo_fp(fp: [*c]FILE, key: ?*EVP_PKEY) c_int;
pub extern fn i2d_PrivateKey_fp(fp: [*c]FILE, pkey: ?*EVP_PKEY) c_int;
pub extern fn d2i_PrivateKey_fp(fp: [*c]FILE, a: [*c]?*EVP_PKEY) ?*EVP_PKEY;
pub extern fn i2d_PUBKEY_fp(fp: [*c]FILE, pkey: ?*EVP_PKEY) c_int;
pub extern fn d2i_PUBKEY_fp(fp: [*c]FILE, a: [*c]?*EVP_PKEY) ?*EVP_PKEY;
pub extern fn d2i_X509_bio(bp: ?*BIO, x509: [*c]?*X509) ?*X509;
pub extern fn i2d_X509_bio(bp: ?*BIO, x509: ?*X509) c_int;
pub extern fn d2i_X509_CRL_bio(bp: ?*BIO, crl: [*c]?*X509_CRL) ?*X509_CRL;
pub extern fn i2d_X509_CRL_bio(bp: ?*BIO, crl: ?*X509_CRL) c_int;
pub extern fn d2i_X509_REQ_bio(bp: ?*BIO, req: [*c]?*X509_REQ) ?*X509_REQ;
pub extern fn i2d_X509_REQ_bio(bp: ?*BIO, req: ?*X509_REQ) c_int;
pub extern fn d2i_RSAPrivateKey_bio(bp: ?*BIO, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSAPrivateKey_bio(bp: ?*BIO, rsa: ?*RSA) c_int;
pub extern fn d2i_RSAPublicKey_bio(bp: ?*BIO, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSAPublicKey_bio(bp: ?*BIO, rsa: ?*RSA) c_int;
pub extern fn d2i_RSA_PUBKEY_bio(bp: ?*BIO, rsa: [*c]?*RSA) ?*RSA;
pub extern fn i2d_RSA_PUBKEY_bio(bp: ?*BIO, rsa: ?*RSA) c_int;
pub extern fn d2i_DSA_PUBKEY_bio(bp: ?*BIO, dsa: [*c]?*DSA) ?*DSA;
pub extern fn i2d_DSA_PUBKEY_bio(bp: ?*BIO, dsa: ?*DSA) c_int;
pub extern fn d2i_DSAPrivateKey_bio(bp: ?*BIO, dsa: [*c]?*DSA) ?*DSA;
pub extern fn i2d_DSAPrivateKey_bio(bp: ?*BIO, dsa: ?*DSA) c_int;
pub extern fn d2i_EC_PUBKEY_bio(bp: ?*BIO, eckey: [*c]?*EC_KEY) ?*EC_KEY;
pub extern fn i2d_EC_PUBKEY_bio(bp: ?*BIO, eckey: ?*EC_KEY) c_int;
pub extern fn d2i_ECPrivateKey_bio(bp: ?*BIO, eckey: [*c]?*EC_KEY) ?*EC_KEY;
pub extern fn i2d_ECPrivateKey_bio(bp: ?*BIO, eckey: ?*EC_KEY) c_int;
pub extern fn d2i_PKCS8_bio(bp: ?*BIO, p8: [*c]?*X509_SIG) ?*X509_SIG;
pub extern fn i2d_PKCS8_bio(bp: ?*BIO, p8: ?*X509_SIG) c_int;
pub extern fn d2i_PKCS8_PRIV_KEY_INFO_bio(bp: ?*BIO, p8inf: [*c]?*PKCS8_PRIV_KEY_INFO) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn i2d_PKCS8_PRIV_KEY_INFO_bio(bp: ?*BIO, p8inf: ?*PKCS8_PRIV_KEY_INFO) c_int;
pub extern fn i2d_PKCS8PrivateKeyInfo_bio(bp: ?*BIO, key: ?*EVP_PKEY) c_int;
pub extern fn i2d_PrivateKey_bio(bp: ?*BIO, pkey: ?*EVP_PKEY) c_int;
pub extern fn d2i_PrivateKey_bio(bp: ?*BIO, a: [*c]?*EVP_PKEY) ?*EVP_PKEY;
pub extern fn i2d_PUBKEY_bio(bp: ?*BIO, pkey: ?*EVP_PKEY) c_int;
pub extern fn d2i_PUBKEY_bio(bp: ?*BIO, a: [*c]?*EVP_PKEY) ?*EVP_PKEY;
pub extern fn X509_dup(x509: ?*X509) ?*X509;
pub extern fn X509_ATTRIBUTE_dup(xa: ?*X509_ATTRIBUTE) ?*X509_ATTRIBUTE;
pub extern fn X509_EXTENSION_dup(ex: ?*X509_EXTENSION) ?*X509_EXTENSION;
pub extern fn X509_CRL_dup(crl: ?*X509_CRL) ?*X509_CRL;
pub extern fn X509_REVOKED_dup(rev: ?*X509_REVOKED) ?*X509_REVOKED;
pub extern fn X509_REQ_dup(req: ?*X509_REQ) ?*X509_REQ;
pub extern fn X509_ALGOR_dup(xn: [*c]X509_ALGOR) [*c]X509_ALGOR;
pub extern fn X509_ALGOR_set0(alg: [*c]X509_ALGOR, aobj: ?*ASN1_OBJECT, ptype: c_int, pval: ?*c_void) c_int;
pub extern fn X509_ALGOR_get0(paobj: [*c]?*const ASN1_OBJECT, pptype: [*c]c_int, ppval: [*c]?*const c_void, algor: [*c]const X509_ALGOR) void;
pub extern fn X509_ALGOR_set_md(alg: [*c]X509_ALGOR, md: ?*const EVP_MD) void;
pub extern fn X509_ALGOR_cmp(a: [*c]const X509_ALGOR, b: [*c]const X509_ALGOR) c_int;
pub extern fn X509_NAME_dup(xn: ?*X509_NAME) ?*X509_NAME;
pub extern fn X509_NAME_ENTRY_dup(ne: ?*X509_NAME_ENTRY) ?*X509_NAME_ENTRY;
pub extern fn X509_cmp_time(s: [*c]const ASN1_TIME, t: [*c]time_t) c_int;
pub extern fn X509_cmp_current_time(s: [*c]const ASN1_TIME) c_int;
pub extern fn X509_time_adj(s: [*c]ASN1_TIME, adj: c_long, t: [*c]time_t) [*c]ASN1_TIME;
pub extern fn X509_time_adj_ex(s: [*c]ASN1_TIME, offset_day: c_int, offset_sec: c_long, t: [*c]time_t) [*c]ASN1_TIME;
pub extern fn X509_gmtime_adj(s: [*c]ASN1_TIME, adj: c_long) [*c]ASN1_TIME;
pub extern fn X509_get_default_cert_area() [*c]const u8;
pub extern fn X509_get_default_cert_dir() [*c]const u8;
pub extern fn X509_get_default_cert_file() [*c]const u8;
pub extern fn X509_get_default_cert_dir_env() [*c]const u8;
pub extern fn X509_get_default_cert_file_env() [*c]const u8;
pub extern fn X509_get_default_private_dir() [*c]const u8;
pub extern fn X509_to_X509_REQ(x: ?*X509, pkey: ?*EVP_PKEY, md: ?*const EVP_MD) ?*X509_REQ;
pub extern fn X509_REQ_to_X509(r: ?*X509_REQ, days: c_int, pkey: ?*EVP_PKEY) ?*X509;
pub extern fn X509_ALGOR_new() [*c]X509_ALGOR;
pub extern fn X509_ALGOR_free(a: [*c]X509_ALGOR) void;
pub extern fn d2i_X509_ALGOR(a: [*c][*c]X509_ALGOR, in: [*c][*c]const u8, len: c_long) [*c]X509_ALGOR;
pub extern fn i2d_X509_ALGOR(a: [*c]X509_ALGOR, out: [*c][*c]u8) c_int;
pub extern const X509_ALGOR_it: ASN1_ITEM;
pub extern fn d2i_X509_ALGORS(a: [*c]?*X509_ALGORS, in: [*c][*c]const u8, len: c_long) ?*X509_ALGORS;
pub extern fn i2d_X509_ALGORS(a: ?*X509_ALGORS, out: [*c][*c]u8) c_int;
pub extern const X509_ALGORS_it: ASN1_ITEM;
pub extern fn X509_VAL_new() [*c]X509_VAL;
pub extern fn X509_VAL_free(a: [*c]X509_VAL) void;
pub extern fn d2i_X509_VAL(a: [*c][*c]X509_VAL, in: [*c][*c]const u8, len: c_long) [*c]X509_VAL;
pub extern fn i2d_X509_VAL(a: [*c]X509_VAL, out: [*c][*c]u8) c_int;
pub extern const X509_VAL_it: ASN1_ITEM;
pub extern fn X509_PUBKEY_new() ?*X509_PUBKEY;
pub extern fn X509_PUBKEY_free(a: ?*X509_PUBKEY) void;
pub extern fn d2i_X509_PUBKEY(a: [*c]?*X509_PUBKEY, in: [*c][*c]const u8, len: c_long) ?*X509_PUBKEY;
pub extern fn i2d_X509_PUBKEY(a: ?*X509_PUBKEY, out: [*c][*c]u8) c_int;
pub extern const X509_PUBKEY_it: ASN1_ITEM;
pub extern fn X509_PUBKEY_set(x: [*c]?*X509_PUBKEY, pkey: ?*EVP_PKEY) c_int;
pub extern fn X509_PUBKEY_get0(key: ?*X509_PUBKEY) ?*EVP_PKEY;
pub extern fn X509_PUBKEY_get(key: ?*X509_PUBKEY) ?*EVP_PKEY;
pub extern fn X509_get_pubkey_parameters(pkey: ?*EVP_PKEY, chain: ?*struct_stack_st_X509) c_int;
pub extern fn X509_get_pathlen(x: ?*X509) c_long;
pub extern fn i2d_PUBKEY(a: ?*EVP_PKEY, pp: [*c][*c]u8) c_int;
pub extern fn d2i_PUBKEY(a: [*c]?*EVP_PKEY, pp: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn i2d_RSA_PUBKEY(a: ?*RSA, pp: [*c][*c]u8) c_int;
pub extern fn d2i_RSA_PUBKEY(a: [*c]?*RSA, pp: [*c][*c]const u8, length: c_long) ?*RSA;
pub extern fn i2d_DSA_PUBKEY(a: ?*DSA, pp: [*c][*c]u8) c_int;
pub extern fn d2i_DSA_PUBKEY(a: [*c]?*DSA, pp: [*c][*c]const u8, length: c_long) ?*DSA;
pub extern fn i2d_EC_PUBKEY(a: ?*EC_KEY, pp: [*c][*c]u8) c_int;
pub extern fn d2i_EC_PUBKEY(a: [*c]?*EC_KEY, pp: [*c][*c]const u8, length: c_long) ?*EC_KEY;
pub extern fn X509_SIG_new() ?*X509_SIG;
pub extern fn X509_SIG_free(a: ?*X509_SIG) void;
pub extern fn d2i_X509_SIG(a: [*c]?*X509_SIG, in: [*c][*c]const u8, len: c_long) ?*X509_SIG;
pub extern fn i2d_X509_SIG(a: ?*X509_SIG, out: [*c][*c]u8) c_int;
pub extern const X509_SIG_it: ASN1_ITEM;
pub extern fn X509_SIG_get0(sig: ?*const X509_SIG, palg: [*c][*c]const X509_ALGOR, pdigest: [*c][*c]const ASN1_OCTET_STRING) void;
pub extern fn X509_SIG_getm(sig: ?*X509_SIG, palg: [*c][*c]X509_ALGOR, pdigest: [*c][*c]ASN1_OCTET_STRING) void;
pub extern fn X509_REQ_INFO_new() ?*X509_REQ_INFO;
pub extern fn X509_REQ_INFO_free(a: ?*X509_REQ_INFO) void;
pub extern fn d2i_X509_REQ_INFO(a: [*c]?*X509_REQ_INFO, in: [*c][*c]const u8, len: c_long) ?*X509_REQ_INFO;
pub extern fn i2d_X509_REQ_INFO(a: ?*X509_REQ_INFO, out: [*c][*c]u8) c_int;
pub extern const X509_REQ_INFO_it: ASN1_ITEM;
pub extern fn X509_REQ_new() ?*X509_REQ;
pub extern fn X509_REQ_free(a: ?*X509_REQ) void;
pub extern fn d2i_X509_REQ(a: [*c]?*X509_REQ, in: [*c][*c]const u8, len: c_long) ?*X509_REQ;
pub extern fn i2d_X509_REQ(a: ?*X509_REQ, out: [*c][*c]u8) c_int;
pub extern const X509_REQ_it: ASN1_ITEM;
pub extern fn X509_ATTRIBUTE_new() ?*X509_ATTRIBUTE;
pub extern fn X509_ATTRIBUTE_free(a: ?*X509_ATTRIBUTE) void;
pub extern fn d2i_X509_ATTRIBUTE(a: [*c]?*X509_ATTRIBUTE, in: [*c][*c]const u8, len: c_long) ?*X509_ATTRIBUTE;
pub extern fn i2d_X509_ATTRIBUTE(a: ?*X509_ATTRIBUTE, out: [*c][*c]u8) c_int;
pub extern const X509_ATTRIBUTE_it: ASN1_ITEM;
pub extern fn X509_ATTRIBUTE_create(nid: c_int, atrtype: c_int, value: ?*c_void) ?*X509_ATTRIBUTE;
pub extern fn X509_EXTENSION_new() ?*X509_EXTENSION;
pub extern fn X509_EXTENSION_free(a: ?*X509_EXTENSION) void;
pub extern fn d2i_X509_EXTENSION(a: [*c]?*X509_EXTENSION, in: [*c][*c]const u8, len: c_long) ?*X509_EXTENSION;
pub extern fn i2d_X509_EXTENSION(a: ?*X509_EXTENSION, out: [*c][*c]u8) c_int;
pub extern const X509_EXTENSION_it: ASN1_ITEM;
pub extern fn d2i_X509_EXTENSIONS(a: [*c]?*X509_EXTENSIONS, in: [*c][*c]const u8, len: c_long) ?*X509_EXTENSIONS;
pub extern fn i2d_X509_EXTENSIONS(a: ?*X509_EXTENSIONS, out: [*c][*c]u8) c_int;
pub extern const X509_EXTENSIONS_it: ASN1_ITEM;
pub extern fn X509_NAME_ENTRY_new() ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_ENTRY_free(a: ?*X509_NAME_ENTRY) void;
pub extern fn d2i_X509_NAME_ENTRY(a: [*c]?*X509_NAME_ENTRY, in: [*c][*c]const u8, len: c_long) ?*X509_NAME_ENTRY;
pub extern fn i2d_X509_NAME_ENTRY(a: ?*X509_NAME_ENTRY, out: [*c][*c]u8) c_int;
pub extern const X509_NAME_ENTRY_it: ASN1_ITEM;
pub extern fn X509_NAME_new() ?*X509_NAME;
pub extern fn X509_NAME_free(a: ?*X509_NAME) void;
pub extern fn d2i_X509_NAME(a: [*c]?*X509_NAME, in: [*c][*c]const u8, len: c_long) ?*X509_NAME;
pub extern fn i2d_X509_NAME(a: ?*X509_NAME, out: [*c][*c]u8) c_int;
pub extern const X509_NAME_it: ASN1_ITEM;
pub extern fn X509_NAME_set(xn: [*c]?*X509_NAME, name: ?*X509_NAME) c_int;
pub extern fn X509_CINF_new() ?*X509_CINF;
pub extern fn X509_CINF_free(a: ?*X509_CINF) void;
pub extern fn d2i_X509_CINF(a: [*c]?*X509_CINF, in: [*c][*c]const u8, len: c_long) ?*X509_CINF;
pub extern fn i2d_X509_CINF(a: ?*X509_CINF, out: [*c][*c]u8) c_int;
pub extern const X509_CINF_it: ASN1_ITEM;
pub extern fn X509_new() ?*X509;
pub extern fn X509_free(a: ?*X509) void;
pub extern fn d2i_X509(a: [*c]?*X509, in: [*c][*c]const u8, len: c_long) ?*X509;
pub extern fn i2d_X509(a: ?*X509, out: [*c][*c]u8) c_int;
pub extern const X509_it: ASN1_ITEM;
pub extern fn X509_CERT_AUX_new() ?*X509_CERT_AUX;
pub extern fn X509_CERT_AUX_free(a: ?*X509_CERT_AUX) void;
pub extern fn d2i_X509_CERT_AUX(a: [*c]?*X509_CERT_AUX, in: [*c][*c]const u8, len: c_long) ?*X509_CERT_AUX;
pub extern fn i2d_X509_CERT_AUX(a: ?*X509_CERT_AUX, out: [*c][*c]u8) c_int;
pub extern const X509_CERT_AUX_it: ASN1_ITEM;
pub extern fn X509_set_ex_data(r: ?*X509, idx: c_int, arg: ?*c_void) c_int;
pub extern fn X509_get_ex_data(r: ?*X509, idx: c_int) ?*c_void;
pub extern fn i2d_X509_AUX(a: ?*X509, pp: [*c][*c]u8) c_int;
pub extern fn d2i_X509_AUX(a: [*c]?*X509, pp: [*c][*c]const u8, length: c_long) ?*X509;
pub extern fn i2d_re_X509_tbs(x: ?*X509, pp: [*c][*c]u8) c_int;
pub extern fn X509_SIG_INFO_get(siginf: ?*const X509_SIG_INFO, mdnid: [*c]c_int, pknid: [*c]c_int, secbits: [*c]c_int, flags: [*c]u32) c_int;
pub extern fn X509_SIG_INFO_set(siginf: ?*X509_SIG_INFO, mdnid: c_int, pknid: c_int, secbits: c_int, flags: u32) void;
pub extern fn X509_get_signature_info(x: ?*X509, mdnid: [*c]c_int, pknid: [*c]c_int, secbits: [*c]c_int, flags: [*c]u32) c_int;
pub extern fn X509_get0_signature(psig: [*c][*c]const ASN1_BIT_STRING, palg: [*c][*c]const X509_ALGOR, x: ?*const X509) void;
pub extern fn X509_get_signature_nid(x: ?*const X509) c_int;
pub extern fn X509_trusted(x: ?*const X509) c_int;
pub extern fn X509_alias_set1(x: ?*X509, name: [*c]const u8, len: c_int) c_int;
pub extern fn X509_keyid_set1(x: ?*X509, id: [*c]const u8, len: c_int) c_int;
pub extern fn X509_alias_get0(x: ?*X509, len: [*c]c_int) [*c]u8;
pub extern fn X509_keyid_get0(x: ?*X509, len: [*c]c_int) [*c]u8;
pub extern fn X509_TRUST_set_default(trust: ?fn (c_int, ?*X509, c_int) callconv(.C) c_int) ?fn (c_int, ?*X509, c_int) callconv(.C) c_int;
pub extern fn X509_TRUST_set(t: [*c]c_int, trust: c_int) c_int;
pub extern fn X509_add1_trust_object(x: ?*X509, obj: ?*const ASN1_OBJECT) c_int;
pub extern fn X509_add1_reject_object(x: ?*X509, obj: ?*const ASN1_OBJECT) c_int;
pub extern fn X509_trust_clear(x: ?*X509) void;
pub extern fn X509_reject_clear(x: ?*X509) void;
pub extern fn X509_get0_trust_objects(x: ?*X509) ?*struct_stack_st_ASN1_OBJECT;
pub extern fn X509_get0_reject_objects(x: ?*X509) ?*struct_stack_st_ASN1_OBJECT;
pub extern fn X509_REVOKED_new() ?*X509_REVOKED;
pub extern fn X509_REVOKED_free(a: ?*X509_REVOKED) void;
pub extern fn d2i_X509_REVOKED(a: [*c]?*X509_REVOKED, in: [*c][*c]const u8, len: c_long) ?*X509_REVOKED;
pub extern fn i2d_X509_REVOKED(a: ?*X509_REVOKED, out: [*c][*c]u8) c_int;
pub extern const X509_REVOKED_it: ASN1_ITEM;
pub extern fn X509_CRL_INFO_new() ?*X509_CRL_INFO;
pub extern fn X509_CRL_INFO_free(a: ?*X509_CRL_INFO) void;
pub extern fn d2i_X509_CRL_INFO(a: [*c]?*X509_CRL_INFO, in: [*c][*c]const u8, len: c_long) ?*X509_CRL_INFO;
pub extern fn i2d_X509_CRL_INFO(a: ?*X509_CRL_INFO, out: [*c][*c]u8) c_int;
pub extern const X509_CRL_INFO_it: ASN1_ITEM;
pub extern fn X509_CRL_new() ?*X509_CRL;
pub extern fn X509_CRL_free(a: ?*X509_CRL) void;
pub extern fn d2i_X509_CRL(a: [*c]?*X509_CRL, in: [*c][*c]const u8, len: c_long) ?*X509_CRL;
pub extern fn i2d_X509_CRL(a: ?*X509_CRL, out: [*c][*c]u8) c_int;
pub extern const X509_CRL_it: ASN1_ITEM;
pub extern fn X509_CRL_add0_revoked(crl: ?*X509_CRL, rev: ?*X509_REVOKED) c_int;
pub extern fn X509_CRL_get0_by_serial(crl: ?*X509_CRL, ret: [*c]?*X509_REVOKED, serial: [*c]ASN1_INTEGER) c_int;
pub extern fn X509_CRL_get0_by_cert(crl: ?*X509_CRL, ret: [*c]?*X509_REVOKED, x: ?*X509) c_int;
pub extern fn X509_PKEY_new() [*c]X509_PKEY;
pub extern fn X509_PKEY_free(a: [*c]X509_PKEY) void;
pub extern fn NETSCAPE_SPKI_new() [*c]NETSCAPE_SPKI;
pub extern fn NETSCAPE_SPKI_free(a: [*c]NETSCAPE_SPKI) void;
pub extern fn d2i_NETSCAPE_SPKI(a: [*c][*c]NETSCAPE_SPKI, in: [*c][*c]const u8, len: c_long) [*c]NETSCAPE_SPKI;
pub extern fn i2d_NETSCAPE_SPKI(a: [*c]NETSCAPE_SPKI, out: [*c][*c]u8) c_int;
pub extern const NETSCAPE_SPKI_it: ASN1_ITEM;
pub extern fn NETSCAPE_SPKAC_new() [*c]NETSCAPE_SPKAC;
pub extern fn NETSCAPE_SPKAC_free(a: [*c]NETSCAPE_SPKAC) void;
pub extern fn d2i_NETSCAPE_SPKAC(a: [*c][*c]NETSCAPE_SPKAC, in: [*c][*c]const u8, len: c_long) [*c]NETSCAPE_SPKAC;
pub extern fn i2d_NETSCAPE_SPKAC(a: [*c]NETSCAPE_SPKAC, out: [*c][*c]u8) c_int;
pub extern const NETSCAPE_SPKAC_it: ASN1_ITEM;
pub extern fn NETSCAPE_CERT_SEQUENCE_new() [*c]NETSCAPE_CERT_SEQUENCE;
pub extern fn NETSCAPE_CERT_SEQUENCE_free(a: [*c]NETSCAPE_CERT_SEQUENCE) void;
pub extern fn d2i_NETSCAPE_CERT_SEQUENCE(a: [*c][*c]NETSCAPE_CERT_SEQUENCE, in: [*c][*c]const u8, len: c_long) [*c]NETSCAPE_CERT_SEQUENCE;
pub extern fn i2d_NETSCAPE_CERT_SEQUENCE(a: [*c]NETSCAPE_CERT_SEQUENCE, out: [*c][*c]u8) c_int;
pub extern const NETSCAPE_CERT_SEQUENCE_it: ASN1_ITEM;
pub extern fn X509_INFO_new() [*c]X509_INFO;
pub extern fn X509_INFO_free(a: [*c]X509_INFO) void;
pub extern fn X509_NAME_oneline(a: ?*const X509_NAME, buf: [*c]u8, size: c_int) [*c]u8;
pub extern fn ASN1_verify(i2d: ?i2d_of_void, algor1: [*c]X509_ALGOR, signature: [*c]ASN1_BIT_STRING, data: [*c]u8, pkey: ?*EVP_PKEY) c_int;
pub extern fn ASN1_digest(i2d: ?i2d_of_void, type: ?*const EVP_MD, data: [*c]u8, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn ASN1_sign(i2d: ?i2d_of_void, algor1: [*c]X509_ALGOR, algor2: [*c]X509_ALGOR, signature: [*c]ASN1_BIT_STRING, data: [*c]u8, pkey: ?*EVP_PKEY, type: ?*const EVP_MD) c_int;
pub extern fn ASN1_item_digest(it: ?*const ASN1_ITEM, type: ?*const EVP_MD, data: ?*c_void, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn ASN1_item_verify(it: ?*const ASN1_ITEM, algor1: [*c]X509_ALGOR, signature: [*c]ASN1_BIT_STRING, data: ?*c_void, pkey: ?*EVP_PKEY) c_int;
pub extern fn ASN1_item_sign(it: ?*const ASN1_ITEM, algor1: [*c]X509_ALGOR, algor2: [*c]X509_ALGOR, signature: [*c]ASN1_BIT_STRING, data: ?*c_void, pkey: ?*EVP_PKEY, type: ?*const EVP_MD) c_int;
pub extern fn ASN1_item_sign_ctx(it: ?*const ASN1_ITEM, algor1: [*c]X509_ALGOR, algor2: [*c]X509_ALGOR, signature: [*c]ASN1_BIT_STRING, asn: ?*c_void, ctx: ?*EVP_MD_CTX) c_int;
pub extern fn X509_get_version(x: ?*const X509) c_long;
pub extern fn X509_set_version(x: ?*X509, version: c_long) c_int;
pub extern fn X509_set_serialNumber(x: ?*X509, serial: [*c]ASN1_INTEGER) c_int;
pub extern fn X509_get_serialNumber(x: ?*X509) [*c]ASN1_INTEGER;
pub extern fn X509_get0_serialNumber(x: ?*const X509) [*c]const ASN1_INTEGER;
pub extern fn X509_set_issuer_name(x: ?*X509, name: ?*X509_NAME) c_int;
pub extern fn X509_get_issuer_name(a: ?*const X509) ?*X509_NAME;
pub extern fn X509_set_subject_name(x: ?*X509, name: ?*X509_NAME) c_int;
pub extern fn X509_get_subject_name(a: ?*const X509) ?*X509_NAME;
pub extern fn X509_get0_notBefore(x: ?*const X509) [*c]const ASN1_TIME;
pub extern fn X509_getm_notBefore(x: ?*const X509) [*c]ASN1_TIME;
pub extern fn X509_set1_notBefore(x: ?*X509, tm: [*c]const ASN1_TIME) c_int;
pub extern fn X509_get0_notAfter(x: ?*const X509) [*c]const ASN1_TIME;
pub extern fn X509_getm_notAfter(x: ?*const X509) [*c]ASN1_TIME;
pub extern fn X509_set1_notAfter(x: ?*X509, tm: [*c]const ASN1_TIME) c_int;
pub extern fn X509_set_pubkey(x: ?*X509, pkey: ?*EVP_PKEY) c_int;
pub extern fn X509_up_ref(x: ?*X509) c_int;
pub extern fn X509_get_signature_type(x: ?*const X509) c_int;
pub extern fn X509_get_X509_PUBKEY(x: ?*const X509) ?*X509_PUBKEY;
pub extern fn X509_get0_extensions(x: ?*const X509) ?*const struct_stack_st_X509_EXTENSION;
pub extern fn X509_get0_uids(x: ?*const X509, piuid: [*c][*c]const ASN1_BIT_STRING, psuid: [*c][*c]const ASN1_BIT_STRING) void;
pub extern fn X509_get0_tbs_sigalg(x: ?*const X509) [*c]const X509_ALGOR;
pub extern fn X509_get0_pubkey(x: ?*const X509) ?*EVP_PKEY;
pub extern fn X509_get_pubkey(x: ?*X509) ?*EVP_PKEY;
pub extern fn X509_get0_pubkey_bitstr(x: ?*const X509) [*c]ASN1_BIT_STRING;
pub extern fn X509_certificate_type(x: ?*const X509, pubkey: ?*const EVP_PKEY) c_int;
pub extern fn X509_REQ_get_version(req: ?*const X509_REQ) c_long;
pub extern fn X509_REQ_set_version(x: ?*X509_REQ, version: c_long) c_int;
pub extern fn X509_REQ_get_subject_name(req: ?*const X509_REQ) ?*X509_NAME;
pub extern fn X509_REQ_set_subject_name(req: ?*X509_REQ, name: ?*X509_NAME) c_int;
pub extern fn X509_REQ_get0_signature(req: ?*const X509_REQ, psig: [*c][*c]const ASN1_BIT_STRING, palg: [*c][*c]const X509_ALGOR) void;
pub extern fn X509_REQ_get_signature_nid(req: ?*const X509_REQ) c_int;
pub extern fn i2d_re_X509_REQ_tbs(req: ?*X509_REQ, pp: [*c][*c]u8) c_int;
pub extern fn X509_REQ_set_pubkey(x: ?*X509_REQ, pkey: ?*EVP_PKEY) c_int;
pub extern fn X509_REQ_get_pubkey(req: ?*X509_REQ) ?*EVP_PKEY;
pub extern fn X509_REQ_get0_pubkey(req: ?*X509_REQ) ?*EVP_PKEY;
pub extern fn X509_REQ_get_X509_PUBKEY(req: ?*X509_REQ) ?*X509_PUBKEY;
pub extern fn X509_REQ_extension_nid(nid: c_int) c_int;
pub extern fn X509_REQ_get_extension_nids() [*c]c_int;
pub extern fn X509_REQ_set_extension_nids(nids: [*c]c_int) void;
pub extern fn X509_REQ_get_extensions(req: ?*X509_REQ) ?*struct_stack_st_X509_EXTENSION;
pub extern fn X509_REQ_add_extensions_nid(req: ?*X509_REQ, exts: ?*struct_stack_st_X509_EXTENSION, nid: c_int) c_int;
pub extern fn X509_REQ_add_extensions(req: ?*X509_REQ, exts: ?*struct_stack_st_X509_EXTENSION) c_int;
pub extern fn X509_REQ_get_attr_count(req: ?*const X509_REQ) c_int;
pub extern fn X509_REQ_get_attr_by_NID(req: ?*const X509_REQ, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509_REQ_get_attr_by_OBJ(req: ?*const X509_REQ, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509_REQ_get_attr(req: ?*const X509_REQ, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509_REQ_delete_attr(req: ?*X509_REQ, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509_REQ_add1_attr(req: ?*X509_REQ, attr: ?*X509_ATTRIBUTE) c_int;
pub extern fn X509_REQ_add1_attr_by_OBJ(req: ?*X509_REQ, obj: ?*const ASN1_OBJECT, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_REQ_add1_attr_by_NID(req: ?*X509_REQ, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_REQ_add1_attr_by_txt(req: ?*X509_REQ, attrname: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_CRL_set_version(x: ?*X509_CRL, version: c_long) c_int;
pub extern fn X509_CRL_set_issuer_name(x: ?*X509_CRL, name: ?*X509_NAME) c_int;
pub extern fn X509_CRL_set1_lastUpdate(x: ?*X509_CRL, tm: [*c]const ASN1_TIME) c_int;
pub extern fn X509_CRL_set1_nextUpdate(x: ?*X509_CRL, tm: [*c]const ASN1_TIME) c_int;
pub extern fn X509_CRL_sort(crl: ?*X509_CRL) c_int;
pub extern fn X509_CRL_up_ref(crl: ?*X509_CRL) c_int;
pub extern fn X509_CRL_get_version(crl: ?*const X509_CRL) c_long;
pub extern fn X509_CRL_get0_lastUpdate(crl: ?*const X509_CRL) [*c]const ASN1_TIME;
pub extern fn X509_CRL_get0_nextUpdate(crl: ?*const X509_CRL) [*c]const ASN1_TIME;
pub extern fn X509_CRL_get_lastUpdate(crl: ?*X509_CRL) [*c]ASN1_TIME;
pub extern fn X509_CRL_get_nextUpdate(crl: ?*X509_CRL) [*c]ASN1_TIME;
pub extern fn X509_CRL_get_issuer(crl: ?*const X509_CRL) ?*X509_NAME;
pub extern fn X509_CRL_get0_extensions(crl: ?*const X509_CRL) ?*const struct_stack_st_X509_EXTENSION;
pub extern fn X509_CRL_get_REVOKED(crl: ?*X509_CRL) ?*struct_stack_st_X509_REVOKED;
pub extern fn X509_CRL_get0_signature(crl: ?*const X509_CRL, psig: [*c][*c]const ASN1_BIT_STRING, palg: [*c][*c]const X509_ALGOR) void;
pub extern fn X509_CRL_get_signature_nid(crl: ?*const X509_CRL) c_int;
pub extern fn i2d_re_X509_CRL_tbs(req: ?*X509_CRL, pp: [*c][*c]u8) c_int;
pub extern fn X509_REVOKED_get0_serialNumber(x: ?*const X509_REVOKED) [*c]const ASN1_INTEGER;
pub extern fn X509_REVOKED_set_serialNumber(x: ?*X509_REVOKED, serial: [*c]ASN1_INTEGER) c_int;
pub extern fn X509_REVOKED_get0_revocationDate(x: ?*const X509_REVOKED) [*c]const ASN1_TIME;
pub extern fn X509_REVOKED_set_revocationDate(r: ?*X509_REVOKED, tm: [*c]ASN1_TIME) c_int;
pub extern fn X509_REVOKED_get0_extensions(r: ?*const X509_REVOKED) ?*const struct_stack_st_X509_EXTENSION;
pub extern fn X509_CRL_diff(base: ?*X509_CRL, newer: ?*X509_CRL, skey: ?*EVP_PKEY, md: ?*const EVP_MD, flags: c_uint) ?*X509_CRL;
pub extern fn X509_REQ_check_private_key(x509: ?*X509_REQ, pkey: ?*EVP_PKEY) c_int;
pub extern fn X509_check_private_key(x509: ?*const X509, pkey: ?*const EVP_PKEY) c_int;
pub extern fn X509_chain_check_suiteb(perror_depth: [*c]c_int, x: ?*X509, chain: ?*struct_stack_st_X509, flags: c_ulong) c_int;
pub extern fn X509_CRL_check_suiteb(crl: ?*X509_CRL, pk: ?*EVP_PKEY, flags: c_ulong) c_int;
pub extern fn X509_chain_up_ref(chain: ?*struct_stack_st_X509) ?*struct_stack_st_X509;
pub extern fn X509_issuer_and_serial_cmp(a: ?*const X509, b: ?*const X509) c_int;
pub extern fn X509_issuer_and_serial_hash(a: ?*X509) c_ulong;
pub extern fn X509_issuer_name_cmp(a: ?*const X509, b: ?*const X509) c_int;
pub extern fn X509_issuer_name_hash(a: ?*X509) c_ulong;
pub extern fn X509_subject_name_cmp(a: ?*const X509, b: ?*const X509) c_int;
pub extern fn X509_subject_name_hash(x: ?*X509) c_ulong;
pub extern fn X509_issuer_name_hash_old(a: ?*X509) c_ulong;
pub extern fn X509_subject_name_hash_old(x: ?*X509) c_ulong;
pub extern fn X509_cmp(a: ?*const X509, b: ?*const X509) c_int;
pub extern fn X509_NAME_cmp(a: ?*const X509_NAME, b: ?*const X509_NAME) c_int;
pub extern fn X509_NAME_hash(x: ?*X509_NAME) c_ulong;
pub extern fn X509_NAME_hash_old(x: ?*X509_NAME) c_ulong;
pub extern fn X509_CRL_cmp(a: ?*const X509_CRL, b: ?*const X509_CRL) c_int;
pub extern fn X509_CRL_match(a: ?*const X509_CRL, b: ?*const X509_CRL) c_int;
pub extern fn X509_aux_print(out: ?*BIO, x: ?*X509, indent: c_int) c_int;
pub extern fn X509_print_ex_fp(bp: [*c]FILE, x: ?*X509, nmflag: c_ulong, cflag: c_ulong) c_int;
pub extern fn X509_print_fp(bp: [*c]FILE, x: ?*X509) c_int;
pub extern fn X509_CRL_print_fp(bp: [*c]FILE, x: ?*X509_CRL) c_int;
pub extern fn X509_REQ_print_fp(bp: [*c]FILE, req: ?*X509_REQ) c_int;
pub extern fn X509_NAME_print_ex_fp(fp: [*c]FILE, nm: ?*const X509_NAME, indent: c_int, flags: c_ulong) c_int;
pub extern fn X509_NAME_print(bp: ?*BIO, name: ?*const X509_NAME, obase: c_int) c_int;
pub extern fn X509_NAME_print_ex(out: ?*BIO, nm: ?*const X509_NAME, indent: c_int, flags: c_ulong) c_int;
pub extern fn X509_print_ex(bp: ?*BIO, x: ?*X509, nmflag: c_ulong, cflag: c_ulong) c_int;
pub extern fn X509_print(bp: ?*BIO, x: ?*X509) c_int;
pub extern fn X509_ocspid_print(bp: ?*BIO, x: ?*X509) c_int;
pub extern fn X509_CRL_print_ex(out: ?*BIO, x: ?*X509_CRL, nmflag: c_ulong) c_int;
pub extern fn X509_CRL_print(bp: ?*BIO, x: ?*X509_CRL) c_int;
pub extern fn X509_REQ_print_ex(bp: ?*BIO, x: ?*X509_REQ, nmflag: c_ulong, cflag: c_ulong) c_int;
pub extern fn X509_REQ_print(bp: ?*BIO, req: ?*X509_REQ) c_int;
pub extern fn X509_NAME_entry_count(name: ?*const X509_NAME) c_int;
pub extern fn X509_NAME_get_text_by_NID(name: ?*X509_NAME, nid: c_int, buf: [*c]u8, len: c_int) c_int;
pub extern fn X509_NAME_get_text_by_OBJ(name: ?*X509_NAME, obj: ?*const ASN1_OBJECT, buf: [*c]u8, len: c_int) c_int;
pub extern fn X509_NAME_get_index_by_NID(name: ?*X509_NAME, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509_NAME_get_index_by_OBJ(name: ?*X509_NAME, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509_NAME_get_entry(name: ?*const X509_NAME, loc: c_int) ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_delete_entry(name: ?*X509_NAME, loc: c_int) ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_add_entry(name: ?*X509_NAME, ne: ?*const X509_NAME_ENTRY, loc: c_int, set: c_int) c_int;
pub extern fn X509_NAME_add_entry_by_OBJ(name: ?*X509_NAME, obj: ?*const ASN1_OBJECT, type: c_int, bytes: [*c]const u8, len: c_int, loc: c_int, set: c_int) c_int;
pub extern fn X509_NAME_add_entry_by_NID(name: ?*X509_NAME, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int, loc: c_int, set: c_int) c_int;
pub extern fn X509_NAME_ENTRY_create_by_txt(ne: [*c]?*X509_NAME_ENTRY, field: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int) ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_ENTRY_create_by_NID(ne: [*c]?*X509_NAME_ENTRY, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int) ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_add_entry_by_txt(name: ?*X509_NAME, field: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int, loc: c_int, set: c_int) c_int;
pub extern fn X509_NAME_ENTRY_create_by_OBJ(ne: [*c]?*X509_NAME_ENTRY, obj: ?*const ASN1_OBJECT, type: c_int, bytes: [*c]const u8, len: c_int) ?*X509_NAME_ENTRY;
pub extern fn X509_NAME_ENTRY_set_object(ne: ?*X509_NAME_ENTRY, obj: ?*const ASN1_OBJECT) c_int;
pub extern fn X509_NAME_ENTRY_set_data(ne: ?*X509_NAME_ENTRY, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_NAME_ENTRY_get_object(ne: ?*const X509_NAME_ENTRY) ?*ASN1_OBJECT;
pub extern fn X509_NAME_ENTRY_get_data(ne: ?*const X509_NAME_ENTRY) [*c]ASN1_STRING;
pub extern fn X509_NAME_ENTRY_set(ne: ?*const X509_NAME_ENTRY) c_int;
pub extern fn X509_NAME_get0_der(nm: ?*X509_NAME, pder: [*c][*c]const u8, pderlen: [*c]usize) c_int;
pub extern fn X509v3_get_ext_count(x: ?*const struct_stack_st_X509_EXTENSION) c_int;
pub extern fn X509v3_get_ext_by_NID(x: ?*const struct_stack_st_X509_EXTENSION, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509v3_get_ext_by_OBJ(x: ?*const struct_stack_st_X509_EXTENSION, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509v3_get_ext_by_critical(x: ?*const struct_stack_st_X509_EXTENSION, crit: c_int, lastpos: c_int) c_int;
pub extern fn X509v3_get_ext(x: ?*const struct_stack_st_X509_EXTENSION, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509v3_delete_ext(x: ?*struct_stack_st_X509_EXTENSION, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509v3_add_ext(x: [*c]?*struct_stack_st_X509_EXTENSION, ex: ?*X509_EXTENSION, loc: c_int) ?*struct_stack_st_X509_EXTENSION;
pub extern fn X509_get_ext_count(x: ?*const X509) c_int;
pub extern fn X509_get_ext_by_NID(x: ?*const X509, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509_get_ext_by_OBJ(x: ?*const X509, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509_get_ext_by_critical(x: ?*const X509, crit: c_int, lastpos: c_int) c_int;
pub extern fn X509_get_ext(x: ?*const X509, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_delete_ext(x: ?*X509, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_add_ext(x: ?*X509, ex: ?*X509_EXTENSION, loc: c_int) c_int;
pub extern fn X509_get_ext_d2i(x: ?*const X509, nid: c_int, crit: [*c]c_int, idx: [*c]c_int) ?*c_void;
pub extern fn X509_add1_ext_i2d(x: ?*X509, nid: c_int, value: ?*c_void, crit: c_int, flags: c_ulong) c_int;
pub extern fn X509_CRL_get_ext_count(x: ?*const X509_CRL) c_int;
pub extern fn X509_CRL_get_ext_by_NID(x: ?*const X509_CRL, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509_CRL_get_ext_by_OBJ(x: ?*const X509_CRL, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509_CRL_get_ext_by_critical(x: ?*const X509_CRL, crit: c_int, lastpos: c_int) c_int;
pub extern fn X509_CRL_get_ext(x: ?*const X509_CRL, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_CRL_delete_ext(x: ?*X509_CRL, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_CRL_add_ext(x: ?*X509_CRL, ex: ?*X509_EXTENSION, loc: c_int) c_int;
pub extern fn X509_CRL_get_ext_d2i(x: ?*const X509_CRL, nid: c_int, crit: [*c]c_int, idx: [*c]c_int) ?*c_void;
pub extern fn X509_CRL_add1_ext_i2d(x: ?*X509_CRL, nid: c_int, value: ?*c_void, crit: c_int, flags: c_ulong) c_int;
pub extern fn X509_REVOKED_get_ext_count(x: ?*const X509_REVOKED) c_int;
pub extern fn X509_REVOKED_get_ext_by_NID(x: ?*const X509_REVOKED, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509_REVOKED_get_ext_by_OBJ(x: ?*const X509_REVOKED, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509_REVOKED_get_ext_by_critical(x: ?*const X509_REVOKED, crit: c_int, lastpos: c_int) c_int;
pub extern fn X509_REVOKED_get_ext(x: ?*const X509_REVOKED, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_REVOKED_delete_ext(x: ?*X509_REVOKED, loc: c_int) ?*X509_EXTENSION;
pub extern fn X509_REVOKED_add_ext(x: ?*X509_REVOKED, ex: ?*X509_EXTENSION, loc: c_int) c_int;
pub extern fn X509_REVOKED_get_ext_d2i(x: ?*const X509_REVOKED, nid: c_int, crit: [*c]c_int, idx: [*c]c_int) ?*c_void;
pub extern fn X509_REVOKED_add1_ext_i2d(x: ?*X509_REVOKED, nid: c_int, value: ?*c_void, crit: c_int, flags: c_ulong) c_int;
pub extern fn X509_EXTENSION_create_by_NID(ex: [*c]?*X509_EXTENSION, nid: c_int, crit: c_int, data: [*c]ASN1_OCTET_STRING) ?*X509_EXTENSION;
pub extern fn X509_EXTENSION_create_by_OBJ(ex: [*c]?*X509_EXTENSION, obj: ?*const ASN1_OBJECT, crit: c_int, data: [*c]ASN1_OCTET_STRING) ?*X509_EXTENSION;
pub extern fn X509_EXTENSION_set_object(ex: ?*X509_EXTENSION, obj: ?*const ASN1_OBJECT) c_int;
pub extern fn X509_EXTENSION_set_critical(ex: ?*X509_EXTENSION, crit: c_int) c_int;
pub extern fn X509_EXTENSION_set_data(ex: ?*X509_EXTENSION, data: [*c]ASN1_OCTET_STRING) c_int;
pub extern fn X509_EXTENSION_get_object(ex: ?*X509_EXTENSION) ?*ASN1_OBJECT;
pub extern fn X509_EXTENSION_get_data(ne: ?*X509_EXTENSION) [*c]ASN1_OCTET_STRING;
pub extern fn X509_EXTENSION_get_critical(ex: ?*const X509_EXTENSION) c_int;
pub extern fn X509at_get_attr_count(x: ?*const struct_stack_st_X509_ATTRIBUTE) c_int;
pub extern fn X509at_get_attr_by_NID(x: ?*const struct_stack_st_X509_ATTRIBUTE, nid: c_int, lastpos: c_int) c_int;
pub extern fn X509at_get_attr_by_OBJ(sk: ?*const struct_stack_st_X509_ATTRIBUTE, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn X509at_get_attr(x: ?*const struct_stack_st_X509_ATTRIBUTE, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509at_delete_attr(x: ?*struct_stack_st_X509_ATTRIBUTE, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509at_add1_attr(x: [*c]?*struct_stack_st_X509_ATTRIBUTE, attr: ?*X509_ATTRIBUTE) ?*struct_stack_st_X509_ATTRIBUTE;
pub extern fn X509at_add1_attr_by_OBJ(x: [*c]?*struct_stack_st_X509_ATTRIBUTE, obj: ?*const ASN1_OBJECT, type: c_int, bytes: [*c]const u8, len: c_int) ?*struct_stack_st_X509_ATTRIBUTE;
pub extern fn X509at_add1_attr_by_NID(x: [*c]?*struct_stack_st_X509_ATTRIBUTE, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int) ?*struct_stack_st_X509_ATTRIBUTE;
pub extern fn X509at_add1_attr_by_txt(x: [*c]?*struct_stack_st_X509_ATTRIBUTE, attrname: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int) ?*struct_stack_st_X509_ATTRIBUTE;
pub extern fn X509at_get0_data_by_OBJ(x: ?*struct_stack_st_X509_ATTRIBUTE, obj: ?*const ASN1_OBJECT, lastpos: c_int, type: c_int) ?*c_void;
pub extern fn X509_ATTRIBUTE_create_by_NID(attr: [*c]?*X509_ATTRIBUTE, nid: c_int, atrtype: c_int, data: ?*const c_void, len: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509_ATTRIBUTE_create_by_OBJ(attr: [*c]?*X509_ATTRIBUTE, obj: ?*const ASN1_OBJECT, atrtype: c_int, data: ?*const c_void, len: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509_ATTRIBUTE_create_by_txt(attr: [*c]?*X509_ATTRIBUTE, atrname: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int) ?*X509_ATTRIBUTE;
pub extern fn X509_ATTRIBUTE_set1_object(attr: ?*X509_ATTRIBUTE, obj: ?*const ASN1_OBJECT) c_int;
pub extern fn X509_ATTRIBUTE_set1_data(attr: ?*X509_ATTRIBUTE, attrtype: c_int, data: ?*const c_void, len: c_int) c_int;
pub extern fn X509_ATTRIBUTE_get0_data(attr: ?*X509_ATTRIBUTE, idx: c_int, atrtype: c_int, data: ?*c_void) ?*c_void;
pub extern fn X509_ATTRIBUTE_count(attr: ?*const X509_ATTRIBUTE) c_int;
pub extern fn X509_ATTRIBUTE_get0_object(attr: ?*X509_ATTRIBUTE) ?*ASN1_OBJECT;
pub extern fn X509_ATTRIBUTE_get0_type(attr: ?*X509_ATTRIBUTE, idx: c_int) [*c]ASN1_TYPE;
pub extern fn EVP_PKEY_get_attr_count(key: ?*const EVP_PKEY) c_int;
pub extern fn EVP_PKEY_get_attr_by_NID(key: ?*const EVP_PKEY, nid: c_int, lastpos: c_int) c_int;
pub extern fn EVP_PKEY_get_attr_by_OBJ(key: ?*const EVP_PKEY, obj: ?*const ASN1_OBJECT, lastpos: c_int) c_int;
pub extern fn EVP_PKEY_get_attr(key: ?*const EVP_PKEY, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn EVP_PKEY_delete_attr(key: ?*EVP_PKEY, loc: c_int) ?*X509_ATTRIBUTE;
pub extern fn EVP_PKEY_add1_attr(key: ?*EVP_PKEY, attr: ?*X509_ATTRIBUTE) c_int;
pub extern fn EVP_PKEY_add1_attr_by_OBJ(key: ?*EVP_PKEY, obj: ?*const ASN1_OBJECT, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn EVP_PKEY_add1_attr_by_NID(key: ?*EVP_PKEY, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn EVP_PKEY_add1_attr_by_txt(key: ?*EVP_PKEY, attrname: [*c]const u8, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_verify_cert(ctx: ?*X509_STORE_CTX) c_int;
pub extern fn X509_find_by_issuer_and_serial(sk: ?*struct_stack_st_X509, name: ?*X509_NAME, serial: [*c]ASN1_INTEGER) ?*X509;
pub extern fn X509_find_by_subject(sk: ?*struct_stack_st_X509, name: ?*X509_NAME) ?*X509;
pub extern fn PBEPARAM_new() [*c]PBEPARAM;
pub extern fn PBEPARAM_free(a: [*c]PBEPARAM) void;
pub extern fn d2i_PBEPARAM(a: [*c][*c]PBEPARAM, in: [*c][*c]const u8, len: c_long) [*c]PBEPARAM;
pub extern fn i2d_PBEPARAM(a: [*c]PBEPARAM, out: [*c][*c]u8) c_int;
pub extern const PBEPARAM_it: ASN1_ITEM;
pub extern fn PBE2PARAM_new() [*c]PBE2PARAM;
pub extern fn PBE2PARAM_free(a: [*c]PBE2PARAM) void;
pub extern fn d2i_PBE2PARAM(a: [*c][*c]PBE2PARAM, in: [*c][*c]const u8, len: c_long) [*c]PBE2PARAM;
pub extern fn i2d_PBE2PARAM(a: [*c]PBE2PARAM, out: [*c][*c]u8) c_int;
pub extern const PBE2PARAM_it: ASN1_ITEM;
pub extern fn PBKDF2PARAM_new() [*c]PBKDF2PARAM;
pub extern fn PBKDF2PARAM_free(a: [*c]PBKDF2PARAM) void;
pub extern fn d2i_PBKDF2PARAM(a: [*c][*c]PBKDF2PARAM, in: [*c][*c]const u8, len: c_long) [*c]PBKDF2PARAM;
pub extern fn i2d_PBKDF2PARAM(a: [*c]PBKDF2PARAM, out: [*c][*c]u8) c_int;
pub extern const PBKDF2PARAM_it: ASN1_ITEM;
pub extern fn SCRYPT_PARAMS_new() [*c]SCRYPT_PARAMS;
pub extern fn SCRYPT_PARAMS_free(a: [*c]SCRYPT_PARAMS) void;
pub extern fn d2i_SCRYPT_PARAMS(a: [*c][*c]SCRYPT_PARAMS, in: [*c][*c]const u8, len: c_long) [*c]SCRYPT_PARAMS;
pub extern fn i2d_SCRYPT_PARAMS(a: [*c]SCRYPT_PARAMS, out: [*c][*c]u8) c_int;
pub extern const SCRYPT_PARAMS_it: ASN1_ITEM;
pub extern fn PKCS5_pbe_set0_algor(algor: [*c]X509_ALGOR, alg: c_int, iter: c_int, salt: [*c]const u8, saltlen: c_int) c_int;
pub extern fn PKCS5_pbe_set(alg: c_int, iter: c_int, salt: [*c]const u8, saltlen: c_int) [*c]X509_ALGOR;
pub extern fn PKCS5_pbe2_set(cipher: ?*const EVP_CIPHER, iter: c_int, salt: [*c]u8, saltlen: c_int) [*c]X509_ALGOR;
pub extern fn PKCS5_pbe2_set_iv(cipher: ?*const EVP_CIPHER, iter: c_int, salt: [*c]u8, saltlen: c_int, aiv: [*c]u8, prf_nid: c_int) [*c]X509_ALGOR;
pub extern fn PKCS5_pbe2_set_scrypt(cipher: ?*const EVP_CIPHER, salt: [*c]const u8, saltlen: c_int, aiv: [*c]u8, N: u64, r: u64, p: u64) [*c]X509_ALGOR;
pub extern fn PKCS5_pbkdf2_set(iter: c_int, salt: [*c]u8, saltlen: c_int, prf_nid: c_int, keylen: c_int) [*c]X509_ALGOR;
pub extern fn PKCS8_PRIV_KEY_INFO_new() ?*PKCS8_PRIV_KEY_INFO;
pub extern fn PKCS8_PRIV_KEY_INFO_free(a: ?*PKCS8_PRIV_KEY_INFO) void;
pub extern fn d2i_PKCS8_PRIV_KEY_INFO(a: [*c]?*PKCS8_PRIV_KEY_INFO, in: [*c][*c]const u8, len: c_long) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn i2d_PKCS8_PRIV_KEY_INFO(a: ?*PKCS8_PRIV_KEY_INFO, out: [*c][*c]u8) c_int;
pub extern const PKCS8_PRIV_KEY_INFO_it: ASN1_ITEM;
pub extern fn EVP_PKCS82PKEY(p8: ?*const PKCS8_PRIV_KEY_INFO) ?*EVP_PKEY;
pub extern fn EVP_PKEY2PKCS8(pkey: ?*EVP_PKEY) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn PKCS8_pkey_set0(priv: ?*PKCS8_PRIV_KEY_INFO, aobj: ?*ASN1_OBJECT, version: c_int, ptype: c_int, pval: ?*c_void, penc: [*c]u8, penclen: c_int) c_int;
pub extern fn PKCS8_pkey_get0(ppkalg: [*c]?*const ASN1_OBJECT, pk: [*c][*c]const u8, ppklen: [*c]c_int, pa: [*c][*c]const X509_ALGOR, p8: ?*const PKCS8_PRIV_KEY_INFO) c_int;
pub extern fn PKCS8_pkey_get0_attrs(p8: ?*const PKCS8_PRIV_KEY_INFO) ?*const struct_stack_st_X509_ATTRIBUTE;
pub extern fn PKCS8_pkey_add1_attr_by_NID(p8: ?*PKCS8_PRIV_KEY_INFO, nid: c_int, type: c_int, bytes: [*c]const u8, len: c_int) c_int;
pub extern fn X509_PUBKEY_set0_param(@"pub": ?*X509_PUBKEY, aobj: ?*ASN1_OBJECT, ptype: c_int, pval: ?*c_void, penc: [*c]u8, penclen: c_int) c_int;
pub extern fn X509_PUBKEY_get0_param(ppkalg: [*c]?*ASN1_OBJECT, pk: [*c][*c]const u8, ppklen: [*c]c_int, pa: [*c][*c]X509_ALGOR, @"pub": ?*X509_PUBKEY) c_int;
pub extern fn X509_check_trust(x: ?*X509, id: c_int, flags: c_int) c_int;
pub extern fn X509_TRUST_get_count() c_int;
pub extern fn X509_TRUST_get0(idx: c_int) [*c]X509_TRUST;
pub extern fn X509_TRUST_get_by_id(id: c_int) c_int;
pub extern fn X509_TRUST_add(id: c_int, flags: c_int, ck: ?fn ([*c]X509_TRUST, ?*X509, c_int) callconv(.C) c_int, name: [*c]const u8, arg1: c_int, arg2: ?*c_void) c_int;
pub extern fn X509_TRUST_cleanup() void;
pub extern fn X509_TRUST_get_flags(xp: [*c]const X509_TRUST) c_int;
pub extern fn X509_TRUST_get0_name(xp: [*c]const X509_TRUST) [*c]u8;
pub extern fn X509_TRUST_get_trust(xp: [*c]const X509_TRUST) c_int;
pub extern fn ERR_load_PEM_strings() c_int;
pub const pem_password_cb = fn ([*c]u8, c_int, c_int, ?*c_void) callconv(.C) c_int;
pub extern fn PEM_get_EVP_CIPHER_INFO(header: [*c]u8, cipher: [*c]EVP_CIPHER_INFO) c_int;
pub extern fn PEM_do_header(cipher: [*c]EVP_CIPHER_INFO, data: [*c]u8, len: [*c]c_long, callback: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio(bp: ?*BIO, name: [*c][*c]u8, header: [*c][*c]u8, data: [*c][*c]u8, len: [*c]c_long) c_int;
pub extern fn PEM_read_bio_ex(bp: ?*BIO, name: [*c][*c]u8, header: [*c][*c]u8, data: [*c][*c]u8, len: [*c]c_long, flags: c_uint) c_int;
pub extern fn PEM_bytes_read_bio_secmem(pdata: [*c][*c]u8, plen: [*c]c_long, pnm: [*c][*c]u8, name: [*c]const u8, bp: ?*BIO, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_bio(bp: ?*BIO, name: [*c]const u8, hdr: [*c]const u8, data: [*c]const u8, len: c_long) c_int;
pub extern fn PEM_bytes_read_bio(pdata: [*c][*c]u8, plen: [*c]c_long, pnm: [*c][*c]u8, name: [*c]const u8, bp: ?*BIO, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_ASN1_read_bio(d2i: ?d2i_of_void, name: [*c]const u8, bp: ?*BIO, x: [*c]?*c_void, cb: ?pem_password_cb, u: ?*c_void) ?*c_void;
pub extern fn PEM_ASN1_write_bio(i2d: ?i2d_of_void, name: [*c]const u8, bp: ?*BIO, x: ?*c_void, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_X509_INFO_read_bio(bp: ?*BIO, sk: ?*struct_stack_st_X509_INFO, cb: ?pem_password_cb, u: ?*c_void) ?*struct_stack_st_X509_INFO;
pub extern fn PEM_X509_INFO_write_bio(bp: ?*BIO, xi: [*c]X509_INFO, enc: ?*EVP_CIPHER, kstr: [*c]u8, klen: c_int, cd: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read(fp: [*c]FILE, name: [*c][*c]u8, header: [*c][*c]u8, data: [*c][*c]u8, len: [*c]c_long) c_int;
pub extern fn PEM_write(fp: [*c]FILE, name: [*c]const u8, hdr: [*c]const u8, data: [*c]const u8, len: c_long) c_int;
pub extern fn PEM_ASN1_read(d2i: ?d2i_of_void, name: [*c]const u8, fp: [*c]FILE, x: [*c]?*c_void, cb: ?pem_password_cb, u: ?*c_void) ?*c_void;
pub extern fn PEM_ASN1_write(i2d: ?i2d_of_void, name: [*c]const u8, fp: [*c]FILE, x: ?*c_void, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, callback: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_X509_INFO_read(fp: [*c]FILE, sk: ?*struct_stack_st_X509_INFO, cb: ?pem_password_cb, u: ?*c_void) ?*struct_stack_st_X509_INFO;
pub extern fn PEM_SignInit(ctx: ?*EVP_MD_CTX, type: ?*EVP_MD) c_int;
pub extern fn PEM_SignUpdate(ctx: ?*EVP_MD_CTX, d: [*c]u8, cnt: c_uint) c_int;
pub extern fn PEM_SignFinal(ctx: ?*EVP_MD_CTX, sigret: [*c]u8, siglen: [*c]c_uint, pkey: ?*EVP_PKEY) c_int;
pub extern fn PEM_def_callback(buf: [*c]u8, num: c_int, rwflag: c_int, userdata: ?*c_void) c_int;
pub extern fn PEM_proc_type(buf: [*c]u8, type: c_int) void;
pub extern fn PEM_dek_info(buf: [*c]u8, type: [*c]const u8, len: c_int, str: [*c]u8) void;
pub extern fn PEM_read_bio_X509(bp: ?*BIO, x: [*c]?*X509, cb: ?pem_password_cb, u: ?*c_void) ?*X509;
pub extern fn PEM_read_X509(fp: [*c]FILE, x: [*c]?*X509, cb: ?pem_password_cb, u: ?*c_void) ?*X509;
pub extern fn PEM_write_bio_X509(bp: ?*BIO, x: ?*X509) c_int;
pub extern fn PEM_write_X509(fp: [*c]FILE, x: ?*X509) c_int;
pub extern fn PEM_read_bio_X509_AUX(bp: ?*BIO, x: [*c]?*X509, cb: ?pem_password_cb, u: ?*c_void) ?*X509;
pub extern fn PEM_read_X509_AUX(fp: [*c]FILE, x: [*c]?*X509, cb: ?pem_password_cb, u: ?*c_void) ?*X509;
pub extern fn PEM_write_bio_X509_AUX(bp: ?*BIO, x: ?*X509) c_int;
pub extern fn PEM_write_X509_AUX(fp: [*c]FILE, x: ?*X509) c_int;
pub extern fn PEM_read_bio_X509_REQ(bp: ?*BIO, x: [*c]?*X509_REQ, cb: ?pem_password_cb, u: ?*c_void) ?*X509_REQ;
pub extern fn PEM_read_X509_REQ(fp: [*c]FILE, x: [*c]?*X509_REQ, cb: ?pem_password_cb, u: ?*c_void) ?*X509_REQ;
pub extern fn PEM_write_bio_X509_REQ(bp: ?*BIO, x: ?*X509_REQ) c_int;
pub extern fn PEM_write_X509_REQ(fp: [*c]FILE, x: ?*X509_REQ) c_int;
pub extern fn PEM_write_bio_X509_REQ_NEW(bp: ?*BIO, x: ?*X509_REQ) c_int;
pub extern fn PEM_write_X509_REQ_NEW(fp: [*c]FILE, x: ?*X509_REQ) c_int;
pub extern fn PEM_read_bio_X509_CRL(bp: ?*BIO, x: [*c]?*X509_CRL, cb: ?pem_password_cb, u: ?*c_void) ?*X509_CRL;
pub extern fn PEM_read_X509_CRL(fp: [*c]FILE, x: [*c]?*X509_CRL, cb: ?pem_password_cb, u: ?*c_void) ?*X509_CRL;
pub extern fn PEM_write_bio_X509_CRL(bp: ?*BIO, x: ?*X509_CRL) c_int;
pub extern fn PEM_write_X509_CRL(fp: [*c]FILE, x: ?*X509_CRL) c_int;
pub extern fn PEM_read_bio_PKCS7(bp: ?*BIO, x: [*c][*c]PKCS7, cb: ?pem_password_cb, u: ?*c_void) [*c]PKCS7;
pub extern fn PEM_read_PKCS7(fp: [*c]FILE, x: [*c][*c]PKCS7, cb: ?pem_password_cb, u: ?*c_void) [*c]PKCS7;
pub extern fn PEM_write_bio_PKCS7(bp: ?*BIO, x: [*c]PKCS7) c_int;
pub extern fn PEM_write_PKCS7(fp: [*c]FILE, x: [*c]PKCS7) c_int;
pub extern fn PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp: ?*BIO, x: [*c][*c]NETSCAPE_CERT_SEQUENCE, cb: ?pem_password_cb, u: ?*c_void) [*c]NETSCAPE_CERT_SEQUENCE;
pub extern fn PEM_read_NETSCAPE_CERT_SEQUENCE(fp: [*c]FILE, x: [*c][*c]NETSCAPE_CERT_SEQUENCE, cb: ?pem_password_cb, u: ?*c_void) [*c]NETSCAPE_CERT_SEQUENCE;
pub extern fn PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp: ?*BIO, x: [*c]NETSCAPE_CERT_SEQUENCE) c_int;
pub extern fn PEM_write_NETSCAPE_CERT_SEQUENCE(fp: [*c]FILE, x: [*c]NETSCAPE_CERT_SEQUENCE) c_int;
pub extern fn PEM_read_bio_PKCS8(bp: ?*BIO, x: [*c]?*X509_SIG, cb: ?pem_password_cb, u: ?*c_void) ?*X509_SIG;
pub extern fn PEM_read_PKCS8(fp: [*c]FILE, x: [*c]?*X509_SIG, cb: ?pem_password_cb, u: ?*c_void) ?*X509_SIG;
pub extern fn PEM_write_bio_PKCS8(bp: ?*BIO, x: ?*X509_SIG) c_int;
pub extern fn PEM_write_PKCS8(fp: [*c]FILE, x: ?*X509_SIG) c_int;
pub extern fn PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp: ?*BIO, x: [*c]?*PKCS8_PRIV_KEY_INFO, cb: ?pem_password_cb, u: ?*c_void) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn PEM_read_PKCS8_PRIV_KEY_INFO(fp: [*c]FILE, x: [*c]?*PKCS8_PRIV_KEY_INFO, cb: ?pem_password_cb, u: ?*c_void) ?*PKCS8_PRIV_KEY_INFO;
pub extern fn PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp: ?*BIO, x: ?*PKCS8_PRIV_KEY_INFO) c_int;
pub extern fn PEM_write_PKCS8_PRIV_KEY_INFO(fp: [*c]FILE, x: ?*PKCS8_PRIV_KEY_INFO) c_int;
pub extern fn PEM_read_bio_RSAPrivateKey(bp: ?*BIO, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_read_RSAPrivateKey(fp: [*c]FILE, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_write_bio_RSAPrivateKey(bp: ?*BIO, x: ?*RSA, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_RSAPrivateKey(fp: [*c]FILE, x: ?*RSA, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio_RSAPublicKey(bp: ?*BIO, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_read_RSAPublicKey(fp: [*c]FILE, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_write_bio_RSAPublicKey(bp: ?*BIO, x: ?*const RSA) c_int;
pub extern fn PEM_write_RSAPublicKey(fp: [*c]FILE, x: ?*const RSA) c_int;
pub extern fn PEM_read_bio_RSA_PUBKEY(bp: ?*BIO, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_read_RSA_PUBKEY(fp: [*c]FILE, x: [*c]?*RSA, cb: ?pem_password_cb, u: ?*c_void) ?*RSA;
pub extern fn PEM_write_bio_RSA_PUBKEY(bp: ?*BIO, x: ?*RSA) c_int;
pub extern fn PEM_write_RSA_PUBKEY(fp: [*c]FILE, x: ?*RSA) c_int;
pub extern fn PEM_read_bio_DSAPrivateKey(bp: ?*BIO, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_read_DSAPrivateKey(fp: [*c]FILE, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_write_bio_DSAPrivateKey(bp: ?*BIO, x: ?*DSA, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_DSAPrivateKey(fp: [*c]FILE, x: ?*DSA, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio_DSA_PUBKEY(bp: ?*BIO, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_read_DSA_PUBKEY(fp: [*c]FILE, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_write_bio_DSA_PUBKEY(bp: ?*BIO, x: ?*DSA) c_int;
pub extern fn PEM_write_DSA_PUBKEY(fp: [*c]FILE, x: ?*DSA) c_int;
pub extern fn PEM_read_bio_DSAparams(bp: ?*BIO, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_read_DSAparams(fp: [*c]FILE, x: [*c]?*DSA, cb: ?pem_password_cb, u: ?*c_void) ?*DSA;
pub extern fn PEM_write_bio_DSAparams(bp: ?*BIO, x: ?*const DSA) c_int;
pub extern fn PEM_write_DSAparams(fp: [*c]FILE, x: ?*const DSA) c_int;
pub extern fn PEM_read_bio_ECPKParameters(bp: ?*BIO, x: [*c]?*EC_GROUP, cb: ?pem_password_cb, u: ?*c_void) ?*EC_GROUP;
pub extern fn PEM_read_ECPKParameters(fp: [*c]FILE, x: [*c]?*EC_GROUP, cb: ?pem_password_cb, u: ?*c_void) ?*EC_GROUP;
pub extern fn PEM_write_bio_ECPKParameters(bp: ?*BIO, x: ?*const EC_GROUP) c_int;
pub extern fn PEM_write_ECPKParameters(fp: [*c]FILE, x: ?*const EC_GROUP) c_int;
pub extern fn PEM_read_bio_ECPrivateKey(bp: ?*BIO, x: [*c]?*EC_KEY, cb: ?pem_password_cb, u: ?*c_void) ?*EC_KEY;
pub extern fn PEM_read_ECPrivateKey(fp: [*c]FILE, x: [*c]?*EC_KEY, cb: ?pem_password_cb, u: ?*c_void) ?*EC_KEY;
pub extern fn PEM_write_bio_ECPrivateKey(bp: ?*BIO, x: ?*EC_KEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_ECPrivateKey(fp: [*c]FILE, x: ?*EC_KEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio_EC_PUBKEY(bp: ?*BIO, x: [*c]?*EC_KEY, cb: ?pem_password_cb, u: ?*c_void) ?*EC_KEY;
pub extern fn PEM_read_EC_PUBKEY(fp: [*c]FILE, x: [*c]?*EC_KEY, cb: ?pem_password_cb, u: ?*c_void) ?*EC_KEY;
pub extern fn PEM_write_bio_EC_PUBKEY(bp: ?*BIO, x: ?*EC_KEY) c_int;
pub extern fn PEM_write_EC_PUBKEY(fp: [*c]FILE, x: ?*EC_KEY) c_int;
pub extern fn PEM_read_bio_DHparams(bp: ?*BIO, x: [*c]?*DH, cb: ?pem_password_cb, u: ?*c_void) ?*DH;
pub extern fn PEM_read_DHparams(fp: [*c]FILE, x: [*c]?*DH, cb: ?pem_password_cb, u: ?*c_void) ?*DH;
pub extern fn PEM_write_bio_DHparams(bp: ?*BIO, x: ?*const DH) c_int;
pub extern fn PEM_write_DHparams(fp: [*c]FILE, x: ?*const DH) c_int;
pub extern fn PEM_write_bio_DHxparams(bp: ?*BIO, x: ?*const DH) c_int;
pub extern fn PEM_write_DHxparams(fp: [*c]FILE, x: ?*const DH) c_int;
pub extern fn PEM_read_bio_PrivateKey(bp: ?*BIO, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn PEM_read_PrivateKey(fp: [*c]FILE, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn PEM_write_bio_PrivateKey(bp: ?*BIO, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_PrivateKey(fp: [*c]FILE, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio_PUBKEY(bp: ?*BIO, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn PEM_read_PUBKEY(fp: [*c]FILE, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn PEM_write_bio_PUBKEY(bp: ?*BIO, x: ?*EVP_PKEY) c_int;
pub extern fn PEM_write_PUBKEY(fp: [*c]FILE, x: ?*EVP_PKEY) c_int;
pub extern fn PEM_write_bio_PrivateKey_traditional(bp: ?*BIO, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_bio_PKCS8PrivateKey_nid(bp: ?*BIO, x: ?*EVP_PKEY, nid: c_int, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_bio_PKCS8PrivateKey(?*BIO, ?*EVP_PKEY, ?*const EVP_CIPHER, [*c]u8, c_int, ?pem_password_cb, ?*c_void) c_int;
pub extern fn i2d_PKCS8PrivateKey_bio(bp: ?*BIO, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn i2d_PKCS8PrivateKey_nid_bio(bp: ?*BIO, x: ?*EVP_PKEY, nid: c_int, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn d2i_PKCS8PrivateKey_bio(bp: ?*BIO, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn i2d_PKCS8PrivateKey_fp(fp: [*c]FILE, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn i2d_PKCS8PrivateKey_nid_fp(fp: [*c]FILE, x: ?*EVP_PKEY, nid: c_int, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_write_PKCS8PrivateKey_nid(fp: [*c]FILE, x: ?*EVP_PKEY, nid: c_int, kstr: [*c]u8, klen: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn d2i_PKCS8PrivateKey_fp(fp: [*c]FILE, x: [*c]?*EVP_PKEY, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn PEM_write_PKCS8PrivateKey(fp: [*c]FILE, x: ?*EVP_PKEY, enc: ?*const EVP_CIPHER, kstr: [*c]u8, klen: c_int, cd: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn PEM_read_bio_Parameters(bp: ?*BIO, x: [*c]?*EVP_PKEY) ?*EVP_PKEY;
pub extern fn PEM_write_bio_Parameters(bp: ?*BIO, x: ?*EVP_PKEY) c_int;
pub extern fn b2i_PrivateKey(in: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn b2i_PublicKey(in: [*c][*c]const u8, length: c_long) ?*EVP_PKEY;
pub extern fn b2i_PrivateKey_bio(in: ?*BIO) ?*EVP_PKEY;
pub extern fn b2i_PublicKey_bio(in: ?*BIO) ?*EVP_PKEY;
pub extern fn i2b_PrivateKey_bio(out: ?*BIO, pk: ?*EVP_PKEY) c_int;
pub extern fn i2b_PublicKey_bio(out: ?*BIO, pk: ?*EVP_PKEY) c_int;
pub extern fn b2i_PVK_bio(in: ?*BIO, cb: ?pem_password_cb, u: ?*c_void) ?*EVP_PKEY;
pub extern fn i2b_PVK_bio(out: ?*BIO, pk: ?*EVP_PKEY, enclevel: c_int, cb: ?pem_password_cb, u: ?*c_void) c_int;
pub extern fn HMAC_size(e: ?*const HMAC_CTX) usize;
pub extern fn HMAC_CTX_new() ?*HMAC_CTX;
pub extern fn HMAC_CTX_reset(ctx: ?*HMAC_CTX) c_int;
pub extern fn HMAC_CTX_free(ctx: ?*HMAC_CTX) void;
pub extern fn HMAC_Init(ctx: ?*HMAC_CTX, key: ?*const c_void, len: c_int, md: ?*const EVP_MD) c_int;
pub extern fn HMAC_Init_ex(ctx: ?*HMAC_CTX, key: ?*const c_void, len: c_int, md: ?*const EVP_MD, impl: ?*ENGINE) c_int;
pub extern fn HMAC_Update(ctx: ?*HMAC_CTX, data: [*c]const u8, len: usize) c_int;
pub extern fn HMAC_Final(ctx: ?*HMAC_CTX, md: [*c]u8, len: [*c]c_uint) c_int;
pub extern fn HMAC(evp_md: ?*const EVP_MD, key: ?*const c_void, key_len: c_int, d: [*c]const u8, n: usize, md: [*c]u8, md_len: [*c]c_uint) [*c]u8;
pub extern fn HMAC_CTX_copy(dctx: ?*HMAC_CTX, sctx: ?*HMAC_CTX) c_int;
pub extern fn HMAC_CTX_set_flags(ctx: ?*HMAC_CTX, flags: c_ulong) void;
pub extern fn HMAC_CTX_get_md(ctx: ?*const HMAC_CTX) ?*const EVP_MD;
pub extern fn ERR_load_ASYNC_strings() c_int;
pub const struct_async_job_st = opaque {};
pub const ASYNC_JOB = struct_async_job_st;
pub const struct_async_wait_ctx_st = opaque {};
pub const ASYNC_WAIT_CTX = struct_async_wait_ctx_st;
pub extern fn ASYNC_init_thread(max_size: usize, init_size: usize) c_int;
pub extern fn ASYNC_cleanup_thread() void;
pub extern fn ASYNC_WAIT_CTX_new() ?*ASYNC_WAIT_CTX;
pub extern fn ASYNC_WAIT_CTX_free(ctx: ?*ASYNC_WAIT_CTX) void;
pub extern fn ASYNC_WAIT_CTX_set_wait_fd(ctx: ?*ASYNC_WAIT_CTX, key: ?*const c_void, fd: c_int, custom_data: ?*c_void, cleanup: ?fn (?*ASYNC_WAIT_CTX, ?*const c_void, c_int, ?*c_void) callconv(.C) void) c_int;
pub extern fn ASYNC_WAIT_CTX_get_fd(ctx: ?*ASYNC_WAIT_CTX, key: ?*const c_void, fd: [*c]c_int, custom_data: [*c]?*c_void) c_int;
pub extern fn ASYNC_WAIT_CTX_get_all_fds(ctx: ?*ASYNC_WAIT_CTX, fd: [*c]c_int, numfds: [*c]usize) c_int;
pub extern fn ASYNC_WAIT_CTX_get_changed_fds(ctx: ?*ASYNC_WAIT_CTX, addfd: [*c]c_int, numaddfds: [*c]usize, delfd: [*c]c_int, numdelfds: [*c]usize) c_int;
pub extern fn ASYNC_WAIT_CTX_clear_fd(ctx: ?*ASYNC_WAIT_CTX, key: ?*const c_void) c_int;
pub extern fn ASYNC_is_capable() c_int;
pub extern fn ASYNC_start_job(job: [*c]?*ASYNC_JOB, ctx: ?*ASYNC_WAIT_CTX, ret: [*c]c_int, func: ?fn (?*c_void) callconv(.C) c_int, args: ?*c_void, size: usize) c_int;
pub extern fn ASYNC_pause_job() c_int;
pub extern fn ASYNC_get_current_job() ?*ASYNC_JOB;
pub extern fn ASYNC_get_wait_ctx(job: ?*ASYNC_JOB) ?*ASYNC_WAIT_CTX;
pub extern fn ASYNC_block_pause() void;
pub extern fn ASYNC_unblock_pause() void;
pub extern fn ERR_load_CT_strings() c_int;
pub const CT_LOG_ENTRY_TYPE_NOT_SET = @enumToInt(enum_unnamed_45.CT_LOG_ENTRY_TYPE_NOT_SET);
pub const CT_LOG_ENTRY_TYPE_X509 = @enumToInt(enum_unnamed_45.CT_LOG_ENTRY_TYPE_X509);
pub const CT_LOG_ENTRY_TYPE_PRECERT = @enumToInt(enum_unnamed_45.CT_LOG_ENTRY_TYPE_PRECERT);
const enum_unnamed_45 = extern enum(c_int) {
    CT_LOG_ENTRY_TYPE_NOT_SET = -1,
    CT_LOG_ENTRY_TYPE_X509 = 0,
    CT_LOG_ENTRY_TYPE_PRECERT = 1,
    _,
};
pub const ct_log_entry_type_t = enum_unnamed_45;
pub const SCT_VERSION_NOT_SET = @enumToInt(enum_unnamed_46.SCT_VERSION_NOT_SET);
pub const SCT_VERSION_V1 = @enumToInt(enum_unnamed_46.SCT_VERSION_V1);
const enum_unnamed_46 = extern enum(c_int) {
    SCT_VERSION_NOT_SET = -1,
    SCT_VERSION_V1 = 0,
    _,
};
pub const sct_version_t = enum_unnamed_46;
pub const SCT_SOURCE_UNKNOWN = @enumToInt(enum_unnamed_47.SCT_SOURCE_UNKNOWN);
pub const SCT_SOURCE_TLS_EXTENSION = @enumToInt(enum_unnamed_47.SCT_SOURCE_TLS_EXTENSION);
pub const SCT_SOURCE_X509V3_EXTENSION = @enumToInt(enum_unnamed_47.SCT_SOURCE_X509V3_EXTENSION);
pub const SCT_SOURCE_OCSP_STAPLED_RESPONSE = @enumToInt(enum_unnamed_47.SCT_SOURCE_OCSP_STAPLED_RESPONSE);
const enum_unnamed_47 = extern enum(c_int) {
    SCT_SOURCE_UNKNOWN,
    SCT_SOURCE_TLS_EXTENSION,
    SCT_SOURCE_X509V3_EXTENSION,
    SCT_SOURCE_OCSP_STAPLED_RESPONSE,
    _,
};
pub const sct_source_t = enum_unnamed_47;
pub const SCT_VALIDATION_STATUS_NOT_SET = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_NOT_SET);
pub const SCT_VALIDATION_STATUS_UNKNOWN_LOG = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_UNKNOWN_LOG);
pub const SCT_VALIDATION_STATUS_VALID = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_VALID);
pub const SCT_VALIDATION_STATUS_INVALID = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_INVALID);
pub const SCT_VALIDATION_STATUS_UNVERIFIED = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_UNVERIFIED);
pub const SCT_VALIDATION_STATUS_UNKNOWN_VERSION = @enumToInt(enum_unnamed_48.SCT_VALIDATION_STATUS_UNKNOWN_VERSION);
const enum_unnamed_48 = extern enum(c_int) {
    SCT_VALIDATION_STATUS_NOT_SET,
    SCT_VALIDATION_STATUS_UNKNOWN_LOG,
    SCT_VALIDATION_STATUS_VALID,
    SCT_VALIDATION_STATUS_INVALID,
    SCT_VALIDATION_STATUS_UNVERIFIED,
    SCT_VALIDATION_STATUS_UNKNOWN_VERSION,
    _,
};
pub const sct_validation_status_t = enum_unnamed_48;
pub const struct_stack_st_SCT = opaque {};
pub const sk_SCT_compfunc = ?fn ([*c]const ?*const SCT, [*c]const ?*const SCT) callconv(.C) c_int;
pub const sk_SCT_freefunc = ?fn (?*SCT) callconv(.C) void;
pub const sk_SCT_copyfunc = ?fn (?*const SCT) callconv(.C) ?*SCT;
pub fn sk_SCT_num(arg_sk: ?*const struct_stack_st_SCT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SCT_value(arg_sk: ?*const struct_stack_st_SCT, arg_idx: c_int) callconv(.C) ?*SCT {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*SCT, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_SCT_new(arg_compare: sk_SCT_compfunc) callconv(.C) ?*struct_stack_st_SCT {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_SCT, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_SCT_new_null() callconv(.C) ?*struct_stack_st_SCT {
    return @ptrCast(?*struct_stack_st_SCT, OPENSSL_sk_new_null());
}
pub fn sk_SCT_new_reserve(arg_compare: sk_SCT_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_SCT {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_SCT, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_SCT_reserve(arg_sk: ?*struct_stack_st_SCT, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_SCT_free(arg_sk: ?*struct_stack_st_SCT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SCT_zero(arg_sk: ?*struct_stack_st_SCT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SCT_delete(arg_sk: ?*struct_stack_st_SCT, arg_i: c_int) callconv(.C) ?*SCT {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*SCT, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_SCT_delete_ptr(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT) callconv(.C) ?*SCT {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*SCT, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SCT_push(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SCT_unshift(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SCT_pop(arg_sk: ?*struct_stack_st_SCT) callconv(.C) ?*SCT {
    var sk = arg_sk;
    return @ptrCast(?*SCT, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SCT_shift(arg_sk: ?*struct_stack_st_SCT) callconv(.C) ?*SCT {
    var sk = arg_sk;
    return @ptrCast(?*SCT, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SCT_pop_free(arg_sk: ?*struct_stack_st_SCT, arg_freefunc: sk_SCT_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_SCT_insert(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_SCT_set(arg_sk: ?*struct_stack_st_SCT, arg_idx: c_int, arg_ptr: ?*SCT) callconv(.C) ?*SCT {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*SCT, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SCT_find(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SCT_find_ex(arg_sk: ?*struct_stack_st_SCT, arg_ptr: ?*SCT) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SCT_sort(arg_sk: ?*struct_stack_st_SCT) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SCT_is_sorted(arg_sk: ?*const struct_stack_st_SCT) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SCT_dup(arg_sk: ?*const struct_stack_st_SCT) callconv(.C) ?*struct_stack_st_SCT {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_SCT, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_SCT_deep_copy(arg_sk: ?*const struct_stack_st_SCT, arg_copyfunc: sk_SCT_copyfunc, arg_freefunc: sk_SCT_freefunc) callconv(.C) ?*struct_stack_st_SCT {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_SCT, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_SCT_set_cmp_func(arg_sk: ?*struct_stack_st_SCT, arg_compare: sk_SCT_compfunc) callconv(.C) sk_SCT_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_SCT_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const SCT, [*c]const ?*const SCT) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const struct_stack_st_CTLOG = opaque {};
pub const sk_CTLOG_compfunc = ?fn ([*c]const ?*const CTLOG, [*c]const ?*const CTLOG) callconv(.C) c_int;
pub const sk_CTLOG_freefunc = ?fn (?*CTLOG) callconv(.C) void;
pub const sk_CTLOG_copyfunc = ?fn (?*const CTLOG) callconv(.C) ?*CTLOG;
pub fn sk_CTLOG_num(arg_sk: ?*const struct_stack_st_CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_CTLOG_value(arg_sk: ?*const struct_stack_st_CTLOG, arg_idx: c_int) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*CTLOG, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_CTLOG_new(arg_compare: sk_CTLOG_compfunc) callconv(.C) ?*struct_stack_st_CTLOG {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_CTLOG, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_CTLOG_new_null() callconv(.C) ?*struct_stack_st_CTLOG {
    return @ptrCast(?*struct_stack_st_CTLOG, OPENSSL_sk_new_null());
}
pub fn sk_CTLOG_new_reserve(arg_compare: sk_CTLOG_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_CTLOG {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_CTLOG, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_CTLOG_reserve(arg_sk: ?*struct_stack_st_CTLOG, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_CTLOG_free(arg_sk: ?*struct_stack_st_CTLOG) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_CTLOG_zero(arg_sk: ?*struct_stack_st_CTLOG) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_CTLOG_delete(arg_sk: ?*struct_stack_st_CTLOG, arg_i: c_int) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*CTLOG, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_CTLOG_delete_ptr(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*CTLOG, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_CTLOG_push(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_CTLOG_unshift(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_CTLOG_pop(arg_sk: ?*struct_stack_st_CTLOG) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    return @ptrCast(?*CTLOG, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_CTLOG_shift(arg_sk: ?*struct_stack_st_CTLOG) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    return @ptrCast(?*CTLOG, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_CTLOG_pop_free(arg_sk: ?*struct_stack_st_CTLOG, arg_freefunc: sk_CTLOG_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_CTLOG_insert(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_CTLOG_set(arg_sk: ?*struct_stack_st_CTLOG, arg_idx: c_int, arg_ptr: ?*CTLOG) callconv(.C) ?*CTLOG {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*CTLOG, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_CTLOG_find(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_CTLOG_find_ex(arg_sk: ?*struct_stack_st_CTLOG, arg_ptr: ?*CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_CTLOG_sort(arg_sk: ?*struct_stack_st_CTLOG) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_CTLOG_is_sorted(arg_sk: ?*const struct_stack_st_CTLOG) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_CTLOG_dup(arg_sk: ?*const struct_stack_st_CTLOG) callconv(.C) ?*struct_stack_st_CTLOG {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_CTLOG, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_CTLOG_deep_copy(arg_sk: ?*const struct_stack_st_CTLOG, arg_copyfunc: sk_CTLOG_copyfunc, arg_freefunc: sk_CTLOG_freefunc) callconv(.C) ?*struct_stack_st_CTLOG {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_CTLOG, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_CTLOG_set_cmp_func(arg_sk: ?*struct_stack_st_CTLOG, arg_compare: sk_CTLOG_compfunc) callconv(.C) sk_CTLOG_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_CTLOG_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const CTLOG, [*c]const ?*const CTLOG) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn CT_POLICY_EVAL_CTX_new() ?*CT_POLICY_EVAL_CTX;
pub extern fn CT_POLICY_EVAL_CTX_free(ctx: ?*CT_POLICY_EVAL_CTX) void;
pub extern fn CT_POLICY_EVAL_CTX_get0_cert(ctx: ?*const CT_POLICY_EVAL_CTX) ?*X509;
pub extern fn CT_POLICY_EVAL_CTX_set1_cert(ctx: ?*CT_POLICY_EVAL_CTX, cert: ?*X509) c_int;
pub extern fn CT_POLICY_EVAL_CTX_get0_issuer(ctx: ?*const CT_POLICY_EVAL_CTX) ?*X509;
pub extern fn CT_POLICY_EVAL_CTX_set1_issuer(ctx: ?*CT_POLICY_EVAL_CTX, issuer: ?*X509) c_int;
pub extern fn CT_POLICY_EVAL_CTX_get0_log_store(ctx: ?*const CT_POLICY_EVAL_CTX) ?*const CTLOG_STORE;
pub extern fn CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx: ?*CT_POLICY_EVAL_CTX, log_store: ?*CTLOG_STORE) void;
pub extern fn CT_POLICY_EVAL_CTX_get_time(ctx: ?*const CT_POLICY_EVAL_CTX) u64;
pub extern fn CT_POLICY_EVAL_CTX_set_time(ctx: ?*CT_POLICY_EVAL_CTX, time_in_ms: u64) void;
pub extern fn SCT_new() ?*SCT;
pub extern fn SCT_new_from_base64(version: u8, logid_base64: [*c]const u8, entry_type: ct_log_entry_type_t, timestamp: u64, extensions_base64: [*c]const u8, signature_base64: [*c]const u8) ?*SCT;
pub extern fn SCT_free(sct: ?*SCT) void;
pub extern fn SCT_LIST_free(a: ?*struct_stack_st_SCT) void;
pub extern fn SCT_get_version(sct: ?*const SCT) sct_version_t;
pub extern fn SCT_set_version(sct: ?*SCT, version: sct_version_t) c_int;
pub extern fn SCT_get_log_entry_type(sct: ?*const SCT) ct_log_entry_type_t;
pub extern fn SCT_set_log_entry_type(sct: ?*SCT, entry_type: ct_log_entry_type_t) c_int;
pub extern fn SCT_get0_log_id(sct: ?*const SCT, log_id: [*c][*c]u8) usize;
pub extern fn SCT_set0_log_id(sct: ?*SCT, log_id: [*c]u8, log_id_len: usize) c_int;
pub extern fn SCT_set1_log_id(sct: ?*SCT, log_id: [*c]const u8, log_id_len: usize) c_int;
pub extern fn SCT_get_timestamp(sct: ?*const SCT) u64;
pub extern fn SCT_set_timestamp(sct: ?*SCT, timestamp: u64) void;
pub extern fn SCT_get_signature_nid(sct: ?*const SCT) c_int;
pub extern fn SCT_set_signature_nid(sct: ?*SCT, nid: c_int) c_int;
pub extern fn SCT_get0_extensions(sct: ?*const SCT, ext: [*c][*c]u8) usize;
pub extern fn SCT_set0_extensions(sct: ?*SCT, ext: [*c]u8, ext_len: usize) void;
pub extern fn SCT_set1_extensions(sct: ?*SCT, ext: [*c]const u8, ext_len: usize) c_int;
pub extern fn SCT_get0_signature(sct: ?*const SCT, sig: [*c][*c]u8) usize;
pub extern fn SCT_set0_signature(sct: ?*SCT, sig: [*c]u8, sig_len: usize) void;
pub extern fn SCT_set1_signature(sct: ?*SCT, sig: [*c]const u8, sig_len: usize) c_int;
pub extern fn SCT_get_source(sct: ?*const SCT) sct_source_t;
pub extern fn SCT_set_source(sct: ?*SCT, source: sct_source_t) c_int;
pub extern fn SCT_validation_status_string(sct: ?*const SCT) [*c]const u8;
pub extern fn SCT_print(sct: ?*const SCT, out: ?*BIO, indent: c_int, logs: ?*const CTLOG_STORE) void;
pub extern fn SCT_LIST_print(sct_list: ?*const struct_stack_st_SCT, out: ?*BIO, indent: c_int, separator: [*c]const u8, logs: ?*const CTLOG_STORE) void;
pub extern fn SCT_get_validation_status(sct: ?*const SCT) sct_validation_status_t;
pub extern fn SCT_validate(sct: ?*SCT, ctx: ?*const CT_POLICY_EVAL_CTX) c_int;
pub extern fn SCT_LIST_validate(scts: ?*const struct_stack_st_SCT, ctx: ?*CT_POLICY_EVAL_CTX) c_int;
pub extern fn i2o_SCT_LIST(a: ?*const struct_stack_st_SCT, pp: [*c][*c]u8) c_int;
pub extern fn o2i_SCT_LIST(a: [*c]?*struct_stack_st_SCT, pp: [*c][*c]const u8, len: usize) ?*struct_stack_st_SCT;
pub extern fn i2d_SCT_LIST(a: ?*const struct_stack_st_SCT, pp: [*c][*c]u8) c_int;
pub extern fn d2i_SCT_LIST(a: [*c]?*struct_stack_st_SCT, pp: [*c][*c]const u8, len: c_long) ?*struct_stack_st_SCT;
pub extern fn i2o_SCT(sct: ?*const SCT, out: [*c][*c]u8) c_int;
pub extern fn o2i_SCT(psct: [*c]?*SCT, in: [*c][*c]const u8, len: usize) ?*SCT;
pub extern fn CTLOG_new(public_key: ?*EVP_PKEY, name: [*c]const u8) ?*CTLOG;
pub extern fn CTLOG_new_from_base64(ct_log: [*c]?*CTLOG, pkey_base64: [*c]const u8, name: [*c]const u8) c_int;
pub extern fn CTLOG_free(log: ?*CTLOG) void;
pub extern fn CTLOG_get0_name(log: ?*const CTLOG) [*c]const u8;
pub extern fn CTLOG_get0_log_id(log: ?*const CTLOG, log_id: [*c][*c]const u8, log_id_len: [*c]usize) void;
pub extern fn CTLOG_get0_public_key(log: ?*const CTLOG) ?*EVP_PKEY;
pub extern fn CTLOG_STORE_new() ?*CTLOG_STORE;
pub extern fn CTLOG_STORE_free(store: ?*CTLOG_STORE) void;
pub extern fn CTLOG_STORE_get0_log_by_id(store: ?*const CTLOG_STORE, log_id: [*c]const u8, log_id_len: usize) ?*const CTLOG;
pub extern fn CTLOG_STORE_load_file(store: ?*CTLOG_STORE, file: [*c]const u8) c_int;
pub extern fn CTLOG_STORE_load_default_file(store: ?*CTLOG_STORE) c_int;
pub extern fn ERR_load_SSL_strings() c_int;
pub const ssl_crock_st = ?*struct_ssl_st;
pub const struct_tls_session_ticket_ext_st = extern struct {
    length: c_ushort,
    data: ?*c_void,
};
pub const TLS_SESSION_TICKET_EXT = struct_tls_session_ticket_ext_st;
pub const struct_ssl_method_st = opaque {};
pub const SSL_METHOD = struct_ssl_method_st;
pub const struct_ssl_cipher_st = opaque {};
pub const SSL_CIPHER = struct_ssl_cipher_st;
pub const struct_ssl_session_st = opaque {};
pub const SSL_SESSION = struct_ssl_session_st;
pub const struct_tls_sigalgs_st = opaque {};
pub const TLS_SIGALGS = struct_tls_sigalgs_st;
pub const struct_ssl_conf_ctx_st = opaque {};
pub const SSL_CONF_CTX = struct_ssl_conf_ctx_st;
pub const struct_ssl_comp_st = opaque {};
pub const SSL_COMP = struct_ssl_comp_st;
pub const struct_stack_st_SSL_CIPHER = opaque {};
pub const struct_stack_st_SSL_COMP = opaque {};
pub const struct_srtp_protection_profile_st = extern struct {
    name: [*c]const u8,
    id: c_ulong,
};
pub const SRTP_PROTECTION_PROFILE = struct_srtp_protection_profile_st;
pub const struct_stack_st_SRTP_PROTECTION_PROFILE = opaque {};
pub const sk_SRTP_PROTECTION_PROFILE_compfunc = ?fn ([*c]const [*c]const SRTP_PROTECTION_PROFILE, [*c]const [*c]const SRTP_PROTECTION_PROFILE) callconv(.C) c_int;
pub const sk_SRTP_PROTECTION_PROFILE_freefunc = ?fn ([*c]SRTP_PROTECTION_PROFILE) callconv(.C) void;
pub const sk_SRTP_PROTECTION_PROFILE_copyfunc = ?fn ([*c]const SRTP_PROTECTION_PROFILE) callconv(.C) [*c]SRTP_PROTECTION_PROFILE;
pub fn sk_SRTP_PROTECTION_PROFILE_num(arg_sk: ?*const struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SRTP_PROTECTION_PROFILE_value(arg_sk: ?*const struct_stack_st_SRTP_PROTECTION_PROFILE, arg_idx: c_int) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx)));
}
pub fn sk_SRTP_PROTECTION_PROFILE_new(arg_compare: sk_SRTP_PROTECTION_PROFILE_compfunc) callconv(.C) ?*struct_stack_st_SRTP_PROTECTION_PROFILE {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_SRTP_PROTECTION_PROFILE, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_new_null() callconv(.C) ?*struct_stack_st_SRTP_PROTECTION_PROFILE {
    return @ptrCast(?*struct_stack_st_SRTP_PROTECTION_PROFILE, OPENSSL_sk_new_null());
}
pub fn sk_SRTP_PROTECTION_PROFILE_new_reserve(arg_compare: sk_SRTP_PROTECTION_PROFILE_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_SRTP_PROTECTION_PROFILE {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_SRTP_PROTECTION_PROFILE, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_SRTP_PROTECTION_PROFILE_reserve(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_SRTP_PROTECTION_PROFILE_free(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SRTP_PROTECTION_PROFILE_zero(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SRTP_PROTECTION_PROFILE_delete(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_i: c_int) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i)));
}
pub fn sk_SRTP_PROTECTION_PROFILE_delete_ptr(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_push(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SRTP_PROTECTION_PROFILE_unshift(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SRTP_PROTECTION_PROFILE_pop(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_shift(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_pop_free(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_freefunc: sk_SRTP_PROTECTION_PROFILE_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_SRTP_PROTECTION_PROFILE_insert(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_SRTP_PROTECTION_PROFILE_set(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_idx: c_int, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) [*c]SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast([*c]SRTP_PROTECTION_PROFILE, @alignCast(@alignOf(SRTP_PROTECTION_PROFILE), OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_find(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SRTP_PROTECTION_PROFILE_find_ex(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_ptr: [*c]SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SRTP_PROTECTION_PROFILE_sort(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SRTP_PROTECTION_PROFILE_is_sorted(arg_sk: ?*const struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SRTP_PROTECTION_PROFILE_dup(arg_sk: ?*const struct_stack_st_SRTP_PROTECTION_PROFILE) callconv(.C) ?*struct_stack_st_SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_SRTP_PROTECTION_PROFILE, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_SRTP_PROTECTION_PROFILE_deep_copy(arg_sk: ?*const struct_stack_st_SRTP_PROTECTION_PROFILE, arg_copyfunc: sk_SRTP_PROTECTION_PROFILE_copyfunc, arg_freefunc: sk_SRTP_PROTECTION_PROFILE_freefunc) callconv(.C) ?*struct_stack_st_SRTP_PROTECTION_PROFILE {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_SRTP_PROTECTION_PROFILE, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_SRTP_PROTECTION_PROFILE_set_cmp_func(arg_sk: ?*struct_stack_st_SRTP_PROTECTION_PROFILE, arg_compare: sk_SRTP_PROTECTION_PROFILE_compfunc) callconv(.C) sk_SRTP_PROTECTION_PROFILE_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_SRTP_PROTECTION_PROFILE_compfunc, @alignCast(@alignOf(fn ([*c]const [*c]const SRTP_PROTECTION_PROFILE, [*c]const [*c]const SRTP_PROTECTION_PROFILE) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const tls_session_ticket_ext_cb_fn = ?fn (?*SSL, [*c]const u8, c_int, ?*c_void) callconv(.C) c_int;
pub const tls_session_secret_cb_fn = ?fn (?*SSL, ?*c_void, [*c]c_int, ?*struct_stack_st_SSL_CIPHER, [*c]?*const SSL_CIPHER, ?*c_void) callconv(.C) c_int;
pub const custom_ext_add_cb = ?fn (?*SSL, c_uint, [*c][*c]const u8, [*c]usize, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub const custom_ext_free_cb = ?fn (?*SSL, c_uint, [*c]const u8, ?*c_void) callconv(.C) void;
pub const custom_ext_parse_cb = ?fn (?*SSL, c_uint, [*c]const u8, usize, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub const SSL_custom_ext_add_cb_ex = ?fn (?*SSL, c_uint, c_uint, [*c][*c]const u8, [*c]usize, ?*X509, usize, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub const SSL_custom_ext_free_cb_ex = ?fn (?*SSL, c_uint, c_uint, [*c]const u8, ?*c_void) callconv(.C) void;
pub const SSL_custom_ext_parse_cb_ex = ?fn (?*SSL, c_uint, c_uint, [*c]const u8, usize, ?*X509, usize, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub const SSL_verify_cb = ?fn (c_int, ?*X509_STORE_CTX) callconv(.C) c_int;
pub extern fn SSL_CTX_get_options(ctx: ?*const SSL_CTX) c_ulong;
pub extern fn SSL_get_options(s: ?*const SSL) c_ulong;
pub extern fn SSL_CTX_clear_options(ctx: ?*SSL_CTX, op: c_ulong) c_ulong;
pub extern fn SSL_clear_options(s: ?*SSL, op: c_ulong) c_ulong;
pub extern fn SSL_CTX_set_options(ctx: ?*SSL_CTX, op: c_ulong) c_ulong;
pub extern fn SSL_set_options(s: ?*SSL, op: c_ulong) c_ulong;
pub extern fn SSL_CTX_set_msg_callback(ctx: ?*SSL_CTX, cb: ?fn (c_int, c_int, c_int, ?*const c_void, usize, ?*SSL, ?*c_void) callconv(.C) void) void;
pub extern fn SSL_set_msg_callback(ssl: ?*SSL, cb: ?fn (c_int, c_int, c_int, ?*const c_void, usize, ?*SSL, ?*c_void) callconv(.C) void) void;
pub extern fn SSL_SRP_CTX_init(s: ?*SSL) c_int;
pub extern fn SSL_CTX_SRP_CTX_init(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_SRP_CTX_free(ctx: ?*SSL) c_int;
pub extern fn SSL_CTX_SRP_CTX_free(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_srp_server_param_with_username(s: ?*SSL, ad: [*c]c_int) c_int;
pub extern fn SRP_Calc_A_param(s: ?*SSL) c_int;
pub const GEN_SESSION_CB = ?fn (?*SSL, [*c]u8, [*c]c_uint) callconv(.C) c_int;
pub const struct_lhash_st_SSL_SESSION = opaque {};
pub extern fn SSL_CTX_sessions(ctx: ?*SSL_CTX) ?*struct_lhash_st_SSL_SESSION;
pub extern fn SSL_CTX_sess_set_new_cb(ctx: ?*SSL_CTX, new_session_cb: ?fn (?*struct_ssl_st, ?*SSL_SESSION) callconv(.C) c_int) void;
pub extern fn SSL_CTX_sess_get_new_cb(ctx: ?*SSL_CTX) ?fn (?*struct_ssl_st, ?*SSL_SESSION) callconv(.C) c_int;
pub extern fn SSL_CTX_sess_set_remove_cb(ctx: ?*SSL_CTX, remove_session_cb: ?fn (?*struct_ssl_ctx_st, ?*SSL_SESSION) callconv(.C) void) void;
pub extern fn SSL_CTX_sess_get_remove_cb(ctx: ?*SSL_CTX) ?fn (?*struct_ssl_ctx_st, ?*SSL_SESSION) callconv(.C) void;
pub extern fn SSL_CTX_sess_set_get_cb(ctx: ?*SSL_CTX, get_session_cb: ?fn (?*struct_ssl_st, [*c]const u8, c_int, [*c]c_int) callconv(.C) ?*SSL_SESSION) void;
pub extern fn SSL_CTX_sess_get_get_cb(ctx: ?*SSL_CTX) ?fn (?*struct_ssl_st, [*c]const u8, c_int, [*c]c_int) callconv(.C) ?*SSL_SESSION;
pub extern fn SSL_CTX_set_info_callback(ctx: ?*SSL_CTX, cb: ?fn (?*const SSL, c_int, c_int) callconv(.C) void) void;
pub extern fn SSL_CTX_get_info_callback(ctx: ?*SSL_CTX) ?fn (?*const SSL, c_int, c_int) callconv(.C) void;
pub extern fn SSL_CTX_set_client_cert_cb(ctx: ?*SSL_CTX, client_cert_cb: ?fn (?*SSL, [*c]?*X509, [*c]?*EVP_PKEY) callconv(.C) c_int) void;
pub extern fn SSL_CTX_get_client_cert_cb(ctx: ?*SSL_CTX) ?fn (?*SSL, [*c]?*X509, [*c]?*EVP_PKEY) callconv(.C) c_int;
pub extern fn SSL_CTX_set_client_cert_engine(ctx: ?*SSL_CTX, e: ?*ENGINE) c_int;
pub extern fn SSL_CTX_set_cookie_generate_cb(ctx: ?*SSL_CTX, app_gen_cookie_cb: ?fn (?*SSL, [*c]u8, [*c]c_uint) callconv(.C) c_int) void;
pub extern fn SSL_CTX_set_cookie_verify_cb(ctx: ?*SSL_CTX, app_verify_cookie_cb: ?fn (?*SSL, [*c]const u8, c_uint) callconv(.C) c_int) void;
pub extern fn SSL_CTX_set_stateless_cookie_generate_cb(ctx: ?*SSL_CTX, gen_stateless_cookie_cb: ?fn (?*SSL, [*c]u8, [*c]usize) callconv(.C) c_int) void;
pub extern fn SSL_CTX_set_stateless_cookie_verify_cb(ctx: ?*SSL_CTX, verify_stateless_cookie_cb: ?fn (?*SSL, [*c]const u8, usize) callconv(.C) c_int) void;
pub const SSL_CTX_npn_advertised_cb_func = ?fn (?*SSL, [*c][*c]const u8, [*c]c_uint, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set_next_protos_advertised_cb(s: ?*SSL_CTX, cb: SSL_CTX_npn_advertised_cb_func, arg: ?*c_void) void;
pub const SSL_CTX_npn_select_cb_func = ?fn (?*SSL, [*c][*c]u8, [*c]u8, [*c]const u8, c_uint, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set_next_proto_select_cb(s: ?*SSL_CTX, cb: SSL_CTX_npn_select_cb_func, arg: ?*c_void) void;
pub extern fn SSL_get0_next_proto_negotiated(s: ?*const SSL, data: [*c][*c]const u8, len: [*c]c_uint) void;
pub extern fn SSL_select_next_proto(out: [*c][*c]u8, outlen: [*c]u8, in: [*c]const u8, inlen: c_uint, client: [*c]const u8, client_len: c_uint) c_int;
pub extern fn SSL_CTX_set_alpn_protos(ctx: ?*SSL_CTX, protos: [*c]const u8, protos_len: c_uint) c_int;
pub extern fn SSL_set_alpn_protos(ssl: ?*SSL, protos: [*c]const u8, protos_len: c_uint) c_int;
pub const SSL_CTX_alpn_select_cb_func = ?fn (?*SSL, [*c][*c]const u8, [*c]u8, [*c]const u8, c_uint, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set_alpn_select_cb(ctx: ?*SSL_CTX, cb: SSL_CTX_alpn_select_cb_func, arg: ?*c_void) void;
pub extern fn SSL_get0_alpn_selected(ssl: ?*const SSL, data: [*c][*c]const u8, len: [*c]c_uint) void;
pub const SSL_psk_client_cb_func = ?fn (?*SSL, [*c]const u8, [*c]u8, c_uint, [*c]u8, c_uint) callconv(.C) c_uint;
pub extern fn SSL_CTX_set_psk_client_callback(ctx: ?*SSL_CTX, cb: SSL_psk_client_cb_func) void;
pub extern fn SSL_set_psk_client_callback(ssl: ?*SSL, cb: SSL_psk_client_cb_func) void;
pub const SSL_psk_server_cb_func = ?fn (?*SSL, [*c]const u8, [*c]u8, c_uint) callconv(.C) c_uint;
pub extern fn SSL_CTX_set_psk_server_callback(ctx: ?*SSL_CTX, cb: SSL_psk_server_cb_func) void;
pub extern fn SSL_set_psk_server_callback(ssl: ?*SSL, cb: SSL_psk_server_cb_func) void;
pub extern fn SSL_CTX_use_psk_identity_hint(ctx: ?*SSL_CTX, identity_hint: [*c]const u8) c_int;
pub extern fn SSL_use_psk_identity_hint(s: ?*SSL, identity_hint: [*c]const u8) c_int;
pub extern fn SSL_get_psk_identity_hint(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_get_psk_identity(s: ?*const SSL) [*c]const u8;
pub const SSL_psk_find_session_cb_func = ?fn (?*SSL, [*c]const u8, usize, [*c]?*SSL_SESSION) callconv(.C) c_int;
pub const SSL_psk_use_session_cb_func = ?fn (?*SSL, ?*const EVP_MD, [*c][*c]const u8, [*c]usize, [*c]?*SSL_SESSION) callconv(.C) c_int;
pub extern fn SSL_set_psk_find_session_callback(s: ?*SSL, cb: SSL_psk_find_session_cb_func) void;
pub extern fn SSL_CTX_set_psk_find_session_callback(ctx: ?*SSL_CTX, cb: SSL_psk_find_session_cb_func) void;
pub extern fn SSL_set_psk_use_session_callback(s: ?*SSL, cb: SSL_psk_use_session_cb_func) void;
pub extern fn SSL_CTX_set_psk_use_session_callback(ctx: ?*SSL_CTX, cb: SSL_psk_use_session_cb_func) void;
pub extern fn SSL_CTX_has_client_custom_ext(ctx: ?*const SSL_CTX, ext_type: c_uint) c_int;
pub extern fn SSL_CTX_add_client_custom_ext(ctx: ?*SSL_CTX, ext_type: c_uint, add_cb: custom_ext_add_cb, free_cb: custom_ext_free_cb, add_arg: ?*c_void, parse_cb: custom_ext_parse_cb, parse_arg: ?*c_void) c_int;
pub extern fn SSL_CTX_add_server_custom_ext(ctx: ?*SSL_CTX, ext_type: c_uint, add_cb: custom_ext_add_cb, free_cb: custom_ext_free_cb, add_arg: ?*c_void, parse_cb: custom_ext_parse_cb, parse_arg: ?*c_void) c_int;
pub extern fn SSL_CTX_add_custom_ext(ctx: ?*SSL_CTX, ext_type: c_uint, context: c_uint, add_cb: SSL_custom_ext_add_cb_ex, free_cb: SSL_custom_ext_free_cb_ex, add_arg: ?*c_void, parse_cb: SSL_custom_ext_parse_cb_ex, parse_arg: ?*c_void) c_int;
pub extern fn SSL_extension_supported(ext_type: c_uint) c_int;
pub const SSL_CTX_keylog_cb_func = ?fn (?*const SSL, [*c]const u8) callconv(.C) void;
pub extern fn SSL_CTX_set_keylog_callback(ctx: ?*SSL_CTX, cb: SSL_CTX_keylog_cb_func) void;
pub extern fn SSL_CTX_get_keylog_callback(ctx: ?*const SSL_CTX) SSL_CTX_keylog_cb_func;
pub extern fn SSL_CTX_set_max_early_data(ctx: ?*SSL_CTX, max_early_data: u32) c_int;
pub extern fn SSL_CTX_get_max_early_data(ctx: ?*const SSL_CTX) u32;
pub extern fn SSL_set_max_early_data(s: ?*SSL, max_early_data: u32) c_int;
pub extern fn SSL_get_max_early_data(s: ?*const SSL) u32;
pub extern fn SSL_CTX_set_recv_max_early_data(ctx: ?*SSL_CTX, recv_max_early_data: u32) c_int;
pub extern fn SSL_CTX_get_recv_max_early_data(ctx: ?*const SSL_CTX) u32;
pub extern fn SSL_set_recv_max_early_data(s: ?*SSL, recv_max_early_data: u32) c_int;
pub extern fn SSL_get_recv_max_early_data(s: ?*const SSL) u32;
pub extern fn SSL_CTX_set_tlsext_max_fragment_length(ctx: ?*SSL_CTX, mode: u8) c_int;
pub extern fn SSL_set_tlsext_max_fragment_length(ssl: ?*SSL, mode: u8) c_int;
pub extern fn SSL_get_servername(s: ?*const SSL, type: c_int) [*c]const u8;
pub extern fn SSL_get_servername_type(s: ?*const SSL) c_int;
pub extern fn SSL_export_keying_material(s: ?*SSL, out: [*c]u8, olen: usize, label: [*c]const u8, llen: usize, context: [*c]const u8, contextlen: usize, use_context: c_int) c_int;
pub extern fn SSL_export_keying_material_early(s: ?*SSL, out: [*c]u8, olen: usize, label: [*c]const u8, llen: usize, context: [*c]const u8, contextlen: usize) c_int;
pub extern fn SSL_get_peer_signature_type_nid(s: ?*const SSL, pnid: [*c]c_int) c_int;
pub extern fn SSL_get_signature_type_nid(s: ?*const SSL, pnid: [*c]c_int) c_int;
pub extern fn SSL_get_sigalgs(s: ?*SSL, idx: c_int, psign: [*c]c_int, phash: [*c]c_int, psignandhash: [*c]c_int, rsig: [*c]u8, rhash: [*c]u8) c_int;
pub extern fn SSL_get_shared_sigalgs(s: ?*SSL, idx: c_int, psign: [*c]c_int, phash: [*c]c_int, psignandhash: [*c]c_int, rsig: [*c]u8, rhash: [*c]u8) c_int;
pub extern fn SSL_check_chain(s: ?*SSL, x: ?*X509, pk: ?*EVP_PKEY, chain: ?*struct_stack_st_X509) c_int;
pub extern fn SSL_CTX_set_tlsext_use_srtp(ctx: ?*SSL_CTX, profiles: [*c]const u8) c_int;
pub extern fn SSL_set_tlsext_use_srtp(ssl: ?*SSL, profiles: [*c]const u8) c_int;
pub extern fn SSL_get_srtp_profiles(ssl: ?*SSL) ?*struct_stack_st_SRTP_PROTECTION_PROFILE;
pub extern fn SSL_get_selected_srtp_profile(s: ?*SSL) [*c]SRTP_PROTECTION_PROFILE;
pub const sk_SSL_CIPHER_compfunc = ?fn ([*c]const ?*const SSL_CIPHER, [*c]const ?*const SSL_CIPHER) callconv(.C) c_int;
pub const sk_SSL_CIPHER_freefunc = ?fn (?*SSL_CIPHER) callconv(.C) void;
pub const sk_SSL_CIPHER_copyfunc = ?fn (?*const SSL_CIPHER) callconv(.C) ?*SSL_CIPHER;
pub fn sk_SSL_CIPHER_num(arg_sk: ?*const struct_stack_st_SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SSL_CIPHER_value(arg_sk: ?*const struct_stack_st_SSL_CIPHER, arg_idx: c_int) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_SSL_CIPHER_new(arg_compare: sk_SSL_CIPHER_compfunc) callconv(.C) ?*struct_stack_st_SSL_CIPHER {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_SSL_CIPHER, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_SSL_CIPHER_new_null() callconv(.C) ?*struct_stack_st_SSL_CIPHER {
    return @ptrCast(?*struct_stack_st_SSL_CIPHER, OPENSSL_sk_new_null());
}
pub fn sk_SSL_CIPHER_new_reserve(arg_compare: sk_SSL_CIPHER_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_SSL_CIPHER {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_SSL_CIPHER, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_SSL_CIPHER_reserve(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_SSL_CIPHER_free(arg_sk: ?*struct_stack_st_SSL_CIPHER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_CIPHER_zero(arg_sk: ?*struct_stack_st_SSL_CIPHER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_CIPHER_delete(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_i: c_int) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_SSL_CIPHER_delete_ptr(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SSL_CIPHER_push(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_CIPHER_unshift(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_CIPHER_pop(arg_sk: ?*struct_stack_st_SSL_CIPHER) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SSL_CIPHER_shift(arg_sk: ?*struct_stack_st_SSL_CIPHER) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SSL_CIPHER_pop_free(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_freefunc: sk_SSL_CIPHER_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_SSL_CIPHER_insert(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_SSL_CIPHER_set(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_idx: c_int, arg_ptr: ?*const SSL_CIPHER) callconv(.C) ?*const SSL_CIPHER {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*const SSL_CIPHER, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SSL_CIPHER_find(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_CIPHER_find_ex(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_ptr: ?*const SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_CIPHER_sort(arg_sk: ?*struct_stack_st_SSL_CIPHER) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_CIPHER_is_sorted(arg_sk: ?*const struct_stack_st_SSL_CIPHER) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SSL_CIPHER_dup(arg_sk: ?*const struct_stack_st_SSL_CIPHER) callconv(.C) ?*struct_stack_st_SSL_CIPHER {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_SSL_CIPHER, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_SSL_CIPHER_deep_copy(arg_sk: ?*const struct_stack_st_SSL_CIPHER, arg_copyfunc: sk_SSL_CIPHER_copyfunc, arg_freefunc: sk_SSL_CIPHER_freefunc) callconv(.C) ?*struct_stack_st_SSL_CIPHER {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_SSL_CIPHER, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_SSL_CIPHER_set_cmp_func(arg_sk: ?*struct_stack_st_SSL_CIPHER, arg_compare: sk_SSL_CIPHER_compfunc) callconv(.C) sk_SSL_CIPHER_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_SSL_CIPHER_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const SSL_CIPHER, [*c]const ?*const SSL_CIPHER) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub const sk_SSL_COMP_compfunc = ?fn ([*c]const ?*const SSL_COMP, [*c]const ?*const SSL_COMP) callconv(.C) c_int;
pub const sk_SSL_COMP_freefunc = ?fn (?*SSL_COMP) callconv(.C) void;
pub const sk_SSL_COMP_copyfunc = ?fn (?*const SSL_COMP) callconv(.C) ?*SSL_COMP;
pub fn sk_SSL_COMP_num(arg_sk: ?*const struct_stack_st_SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_num(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SSL_COMP_value(arg_sk: ?*const struct_stack_st_SSL_COMP, arg_idx: c_int) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    var idx = arg_idx;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_value(@ptrCast(?*const OPENSSL_STACK, sk), idx));
}
pub fn sk_SSL_COMP_new(arg_compare: sk_SSL_COMP_compfunc) callconv(.C) ?*struct_stack_st_SSL_COMP {
    var compare = arg_compare;
    return @ptrCast(?*struct_stack_st_SSL_COMP, OPENSSL_sk_new(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare))));
}
pub fn sk_SSL_COMP_new_null() callconv(.C) ?*struct_stack_st_SSL_COMP {
    return @ptrCast(?*struct_stack_st_SSL_COMP, OPENSSL_sk_new_null());
}
pub fn sk_SSL_COMP_new_reserve(arg_compare: sk_SSL_COMP_compfunc, arg_n: c_int) callconv(.C) ?*struct_stack_st_SSL_COMP {
    var compare = arg_compare;
    var n = arg_n;
    return @ptrCast(?*struct_stack_st_SSL_COMP, OPENSSL_sk_new_reserve(@ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)), n));
}
pub fn sk_SSL_COMP_reserve(arg_sk: ?*struct_stack_st_SSL_COMP, arg_n: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var n = arg_n;
    return OPENSSL_sk_reserve(@ptrCast(?*OPENSSL_STACK, sk), n);
}
pub fn sk_SSL_COMP_free(arg_sk: ?*struct_stack_st_SSL_COMP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_free(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_COMP_zero(arg_sk: ?*struct_stack_st_SSL_COMP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_zero(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_COMP_delete(arg_sk: ?*struct_stack_st_SSL_COMP, arg_i: c_int) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    var i = arg_i;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_delete(@ptrCast(?*OPENSSL_STACK, sk), i));
}
pub fn sk_SSL_COMP_delete_ptr(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_delete_ptr(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SSL_COMP_push(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_push(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_COMP_unshift(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_unshift(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_COMP_pop(arg_sk: ?*struct_stack_st_SSL_COMP) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_pop(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SSL_COMP_shift(arg_sk: ?*struct_stack_st_SSL_COMP) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_shift(@ptrCast(?*OPENSSL_STACK, sk)));
}
pub fn sk_SSL_COMP_pop_free(arg_sk: ?*struct_stack_st_SSL_COMP, arg_freefunc: sk_SSL_COMP_freefunc) callconv(.C) void {
    var sk = arg_sk;
    var freefunc = arg_freefunc;
    OPENSSL_sk_pop_free(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc)));
}
pub fn sk_SSL_COMP_insert(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP, arg_idx: c_int) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    var idx = arg_idx;
    return OPENSSL_sk_insert(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr), idx);
}
pub fn sk_SSL_COMP_set(arg_sk: ?*struct_stack_st_SSL_COMP, arg_idx: c_int, arg_ptr: ?*SSL_COMP) callconv(.C) ?*SSL_COMP {
    var sk = arg_sk;
    var idx = arg_idx;
    var ptr = arg_ptr;
    return @ptrCast(?*SSL_COMP, OPENSSL_sk_set(@ptrCast(?*OPENSSL_STACK, sk), idx, @ptrCast(?*const c_void, ptr)));
}
pub fn sk_SSL_COMP_find(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_COMP_find_ex(arg_sk: ?*struct_stack_st_SSL_COMP, arg_ptr: ?*SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    var ptr = arg_ptr;
    return OPENSSL_sk_find_ex(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(?*const c_void, ptr));
}
pub fn sk_SSL_COMP_sort(arg_sk: ?*struct_stack_st_SSL_COMP) callconv(.C) void {
    var sk = arg_sk;
    OPENSSL_sk_sort(@ptrCast(?*OPENSSL_STACK, sk));
}
pub fn sk_SSL_COMP_is_sorted(arg_sk: ?*const struct_stack_st_SSL_COMP) callconv(.C) c_int {
    var sk = arg_sk;
    return OPENSSL_sk_is_sorted(@ptrCast(?*const OPENSSL_STACK, sk));
}
pub fn sk_SSL_COMP_dup(arg_sk: ?*const struct_stack_st_SSL_COMP) callconv(.C) ?*struct_stack_st_SSL_COMP {
    var sk = arg_sk;
    return @ptrCast(?*struct_stack_st_SSL_COMP, OPENSSL_sk_dup(@ptrCast(?*const OPENSSL_STACK, sk)));
}
pub fn sk_SSL_COMP_deep_copy(arg_sk: ?*const struct_stack_st_SSL_COMP, arg_copyfunc: sk_SSL_COMP_copyfunc, arg_freefunc: sk_SSL_COMP_freefunc) callconv(.C) ?*struct_stack_st_SSL_COMP {
    var sk = arg_sk;
    var copyfunc = arg_copyfunc;
    var freefunc = arg_freefunc;
    return @ptrCast(?*struct_stack_st_SSL_COMP, OPENSSL_sk_deep_copy(@ptrCast(?*const OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_copyfunc, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) ?*c_void), copyfunc)), @ptrCast(OPENSSL_sk_freefunc, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), freefunc))));
}
pub fn sk_SSL_COMP_set_cmp_func(arg_sk: ?*struct_stack_st_SSL_COMP, arg_compare: sk_SSL_COMP_compfunc) callconv(.C) sk_SSL_COMP_compfunc {
    var sk = arg_sk;
    var compare = arg_compare;
    return @ptrCast(sk_SSL_COMP_compfunc, @alignCast(@alignOf(fn ([*c]const ?*const SSL_COMP, [*c]const ?*const SSL_COMP) callconv(.C) c_int), OPENSSL_sk_set_cmp_func(@ptrCast(?*OPENSSL_STACK, sk), @ptrCast(OPENSSL_sk_compfunc, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), compare)))));
}
pub extern fn SSL_set_debug(s: ?*SSL, debug: c_int) void;
pub const TLS_ST_BEFORE = @enumToInt(enum_unnamed_49.TLS_ST_BEFORE);
pub const TLS_ST_OK = @enumToInt(enum_unnamed_49.TLS_ST_OK);
pub const DTLS_ST_CR_HELLO_VERIFY_REQUEST = @enumToInt(enum_unnamed_49.DTLS_ST_CR_HELLO_VERIFY_REQUEST);
pub const TLS_ST_CR_SRVR_HELLO = @enumToInt(enum_unnamed_49.TLS_ST_CR_SRVR_HELLO);
pub const TLS_ST_CR_CERT = @enumToInt(enum_unnamed_49.TLS_ST_CR_CERT);
pub const TLS_ST_CR_CERT_STATUS = @enumToInt(enum_unnamed_49.TLS_ST_CR_CERT_STATUS);
pub const TLS_ST_CR_KEY_EXCH = @enumToInt(enum_unnamed_49.TLS_ST_CR_KEY_EXCH);
pub const TLS_ST_CR_CERT_REQ = @enumToInt(enum_unnamed_49.TLS_ST_CR_CERT_REQ);
pub const TLS_ST_CR_SRVR_DONE = @enumToInt(enum_unnamed_49.TLS_ST_CR_SRVR_DONE);
pub const TLS_ST_CR_SESSION_TICKET = @enumToInt(enum_unnamed_49.TLS_ST_CR_SESSION_TICKET);
pub const TLS_ST_CR_CHANGE = @enumToInt(enum_unnamed_49.TLS_ST_CR_CHANGE);
pub const TLS_ST_CR_FINISHED = @enumToInt(enum_unnamed_49.TLS_ST_CR_FINISHED);
pub const TLS_ST_CW_CLNT_HELLO = @enumToInt(enum_unnamed_49.TLS_ST_CW_CLNT_HELLO);
pub const TLS_ST_CW_CERT = @enumToInt(enum_unnamed_49.TLS_ST_CW_CERT);
pub const TLS_ST_CW_KEY_EXCH = @enumToInt(enum_unnamed_49.TLS_ST_CW_KEY_EXCH);
pub const TLS_ST_CW_CERT_VRFY = @enumToInt(enum_unnamed_49.TLS_ST_CW_CERT_VRFY);
pub const TLS_ST_CW_CHANGE = @enumToInt(enum_unnamed_49.TLS_ST_CW_CHANGE);
pub const TLS_ST_CW_NEXT_PROTO = @enumToInt(enum_unnamed_49.TLS_ST_CW_NEXT_PROTO);
pub const TLS_ST_CW_FINISHED = @enumToInt(enum_unnamed_49.TLS_ST_CW_FINISHED);
pub const TLS_ST_SW_HELLO_REQ = @enumToInt(enum_unnamed_49.TLS_ST_SW_HELLO_REQ);
pub const TLS_ST_SR_CLNT_HELLO = @enumToInt(enum_unnamed_49.TLS_ST_SR_CLNT_HELLO);
pub const DTLS_ST_SW_HELLO_VERIFY_REQUEST = @enumToInt(enum_unnamed_49.DTLS_ST_SW_HELLO_VERIFY_REQUEST);
pub const TLS_ST_SW_SRVR_HELLO = @enumToInt(enum_unnamed_49.TLS_ST_SW_SRVR_HELLO);
pub const TLS_ST_SW_CERT = @enumToInt(enum_unnamed_49.TLS_ST_SW_CERT);
pub const TLS_ST_SW_KEY_EXCH = @enumToInt(enum_unnamed_49.TLS_ST_SW_KEY_EXCH);
pub const TLS_ST_SW_CERT_REQ = @enumToInt(enum_unnamed_49.TLS_ST_SW_CERT_REQ);
pub const TLS_ST_SW_SRVR_DONE = @enumToInt(enum_unnamed_49.TLS_ST_SW_SRVR_DONE);
pub const TLS_ST_SR_CERT = @enumToInt(enum_unnamed_49.TLS_ST_SR_CERT);
pub const TLS_ST_SR_KEY_EXCH = @enumToInt(enum_unnamed_49.TLS_ST_SR_KEY_EXCH);
pub const TLS_ST_SR_CERT_VRFY = @enumToInt(enum_unnamed_49.TLS_ST_SR_CERT_VRFY);
pub const TLS_ST_SR_NEXT_PROTO = @enumToInt(enum_unnamed_49.TLS_ST_SR_NEXT_PROTO);
pub const TLS_ST_SR_CHANGE = @enumToInt(enum_unnamed_49.TLS_ST_SR_CHANGE);
pub const TLS_ST_SR_FINISHED = @enumToInt(enum_unnamed_49.TLS_ST_SR_FINISHED);
pub const TLS_ST_SW_SESSION_TICKET = @enumToInt(enum_unnamed_49.TLS_ST_SW_SESSION_TICKET);
pub const TLS_ST_SW_CERT_STATUS = @enumToInt(enum_unnamed_49.TLS_ST_SW_CERT_STATUS);
pub const TLS_ST_SW_CHANGE = @enumToInt(enum_unnamed_49.TLS_ST_SW_CHANGE);
pub const TLS_ST_SW_FINISHED = @enumToInt(enum_unnamed_49.TLS_ST_SW_FINISHED);
pub const TLS_ST_SW_ENCRYPTED_EXTENSIONS = @enumToInt(enum_unnamed_49.TLS_ST_SW_ENCRYPTED_EXTENSIONS);
pub const TLS_ST_CR_ENCRYPTED_EXTENSIONS = @enumToInt(enum_unnamed_49.TLS_ST_CR_ENCRYPTED_EXTENSIONS);
pub const TLS_ST_CR_CERT_VRFY = @enumToInt(enum_unnamed_49.TLS_ST_CR_CERT_VRFY);
pub const TLS_ST_SW_CERT_VRFY = @enumToInt(enum_unnamed_49.TLS_ST_SW_CERT_VRFY);
pub const TLS_ST_CR_HELLO_REQ = @enumToInt(enum_unnamed_49.TLS_ST_CR_HELLO_REQ);
pub const TLS_ST_SW_KEY_UPDATE = @enumToInt(enum_unnamed_49.TLS_ST_SW_KEY_UPDATE);
pub const TLS_ST_CW_KEY_UPDATE = @enumToInt(enum_unnamed_49.TLS_ST_CW_KEY_UPDATE);
pub const TLS_ST_SR_KEY_UPDATE = @enumToInt(enum_unnamed_49.TLS_ST_SR_KEY_UPDATE);
pub const TLS_ST_CR_KEY_UPDATE = @enumToInt(enum_unnamed_49.TLS_ST_CR_KEY_UPDATE);
pub const TLS_ST_EARLY_DATA = @enumToInt(enum_unnamed_49.TLS_ST_EARLY_DATA);
pub const TLS_ST_PENDING_EARLY_DATA_END = @enumToInt(enum_unnamed_49.TLS_ST_PENDING_EARLY_DATA_END);
pub const TLS_ST_CW_END_OF_EARLY_DATA = @enumToInt(enum_unnamed_49.TLS_ST_CW_END_OF_EARLY_DATA);
pub const TLS_ST_SR_END_OF_EARLY_DATA = @enumToInt(enum_unnamed_49.TLS_ST_SR_END_OF_EARLY_DATA);
const enum_unnamed_49 = extern enum(c_int) {
    TLS_ST_BEFORE,
    TLS_ST_OK,
    DTLS_ST_CR_HELLO_VERIFY_REQUEST,
    TLS_ST_CR_SRVR_HELLO,
    TLS_ST_CR_CERT,
    TLS_ST_CR_CERT_STATUS,
    TLS_ST_CR_KEY_EXCH,
    TLS_ST_CR_CERT_REQ,
    TLS_ST_CR_SRVR_DONE,
    TLS_ST_CR_SESSION_TICKET,
    TLS_ST_CR_CHANGE,
    TLS_ST_CR_FINISHED,
    TLS_ST_CW_CLNT_HELLO,
    TLS_ST_CW_CERT,
    TLS_ST_CW_KEY_EXCH,
    TLS_ST_CW_CERT_VRFY,
    TLS_ST_CW_CHANGE,
    TLS_ST_CW_NEXT_PROTO,
    TLS_ST_CW_FINISHED,
    TLS_ST_SW_HELLO_REQ,
    TLS_ST_SR_CLNT_HELLO,
    DTLS_ST_SW_HELLO_VERIFY_REQUEST,
    TLS_ST_SW_SRVR_HELLO,
    TLS_ST_SW_CERT,
    TLS_ST_SW_KEY_EXCH,
    TLS_ST_SW_CERT_REQ,
    TLS_ST_SW_SRVR_DONE,
    TLS_ST_SR_CERT,
    TLS_ST_SR_KEY_EXCH,
    TLS_ST_SR_CERT_VRFY,
    TLS_ST_SR_NEXT_PROTO,
    TLS_ST_SR_CHANGE,
    TLS_ST_SR_FINISHED,
    TLS_ST_SW_SESSION_TICKET,
    TLS_ST_SW_CERT_STATUS,
    TLS_ST_SW_CHANGE,
    TLS_ST_SW_FINISHED,
    TLS_ST_SW_ENCRYPTED_EXTENSIONS,
    TLS_ST_CR_ENCRYPTED_EXTENSIONS,
    TLS_ST_CR_CERT_VRFY,
    TLS_ST_SW_CERT_VRFY,
    TLS_ST_CR_HELLO_REQ,
    TLS_ST_SW_KEY_UPDATE,
    TLS_ST_CW_KEY_UPDATE,
    TLS_ST_SR_KEY_UPDATE,
    TLS_ST_CR_KEY_UPDATE,
    TLS_ST_EARLY_DATA,
    TLS_ST_PENDING_EARLY_DATA_END,
    TLS_ST_CW_END_OF_EARLY_DATA,
    TLS_ST_SR_END_OF_EARLY_DATA,
    _,
};
pub const OSSL_HANDSHAKE_STATE = enum_unnamed_49;
pub extern fn SSL_in_init(s: ?*const SSL) c_int;
pub extern fn SSL_in_before(s: ?*const SSL) c_int;
pub extern fn SSL_is_init_finished(s: ?*const SSL) c_int;
pub extern fn SSL_get_finished(s: ?*const SSL, buf: ?*c_void, count: usize) usize;
pub extern fn SSL_get_peer_finished(s: ?*const SSL, buf: ?*c_void, count: usize) usize;
pub extern fn PEM_read_bio_SSL_SESSION(bp: ?*BIO, x: [*c]?*SSL_SESSION, cb: ?pem_password_cb, u: ?*c_void) ?*SSL_SESSION;
pub extern fn PEM_read_SSL_SESSION(fp: [*c]FILE, x: [*c]?*SSL_SESSION, cb: ?pem_password_cb, u: ?*c_void) ?*SSL_SESSION;
pub extern fn PEM_write_bio_SSL_SESSION(bp: ?*BIO, x: ?*SSL_SESSION) c_int;
pub extern fn PEM_write_SSL_SESSION(fp: [*c]FILE, x: ?*SSL_SESSION) c_int;
pub extern fn BIO_f_ssl() ?*const BIO_METHOD;
pub extern fn BIO_new_ssl(ctx: ?*SSL_CTX, client: c_int) ?*BIO;
pub extern fn BIO_new_ssl_connect(ctx: ?*SSL_CTX) ?*BIO;
pub extern fn BIO_new_buffer_ssl_connect(ctx: ?*SSL_CTX) ?*BIO;
pub extern fn BIO_ssl_copy_session_id(to: ?*BIO, from: ?*BIO) c_int;
pub extern fn BIO_ssl_shutdown(ssl_bio: ?*BIO) void;
pub extern fn SSL_CTX_set_cipher_list(?*SSL_CTX, str: [*c]const u8) c_int;
pub extern fn SSL_CTX_new(meth: ?*const SSL_METHOD) ?*SSL_CTX;
pub extern fn SSL_CTX_up_ref(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_free(?*SSL_CTX) void;
pub extern fn SSL_CTX_set_timeout(ctx: ?*SSL_CTX, t: c_long) c_long;
pub extern fn SSL_CTX_get_timeout(ctx: ?*const SSL_CTX) c_long;
pub extern fn SSL_CTX_get_cert_store(?*const SSL_CTX) ?*X509_STORE;
pub extern fn SSL_CTX_set_cert_store(?*SSL_CTX, ?*X509_STORE) void;
pub extern fn SSL_CTX_set1_cert_store(?*SSL_CTX, ?*X509_STORE) void;
pub extern fn SSL_want(s: ?*const SSL) c_int;
pub extern fn SSL_clear(s: ?*SSL) c_int;
pub extern fn SSL_CTX_flush_sessions(ctx: ?*SSL_CTX, tm: c_long) void;
pub extern fn SSL_get_current_cipher(s: ?*const SSL) ?*const SSL_CIPHER;
pub extern fn SSL_get_pending_cipher(s: ?*const SSL) ?*const SSL_CIPHER;
pub extern fn SSL_CIPHER_get_bits(c: ?*const SSL_CIPHER, alg_bits: [*c]c_int) c_int;
pub extern fn SSL_CIPHER_get_version(c: ?*const SSL_CIPHER) [*c]const u8;
pub extern fn SSL_CIPHER_get_name(c: ?*const SSL_CIPHER) [*c]const u8;
pub extern fn SSL_CIPHER_standard_name(c: ?*const SSL_CIPHER) [*c]const u8;
pub extern fn OPENSSL_cipher_name(rfc_name: [*c]const u8) [*c]const u8;
pub extern fn SSL_CIPHER_get_id(c: ?*const SSL_CIPHER) u32;
pub extern fn SSL_CIPHER_get_protocol_id(c: ?*const SSL_CIPHER) u16;
pub extern fn SSL_CIPHER_get_kx_nid(c: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_CIPHER_get_auth_nid(c: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_CIPHER_get_handshake_digest(c: ?*const SSL_CIPHER) ?*const EVP_MD;
pub extern fn SSL_CIPHER_is_aead(c: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_get_fd(s: ?*const SSL) c_int;
pub extern fn SSL_get_rfd(s: ?*const SSL) c_int;
pub extern fn SSL_get_wfd(s: ?*const SSL) c_int;
pub extern fn SSL_get_cipher_list(s: ?*const SSL, n: c_int) [*c]const u8;
pub extern fn SSL_get_shared_ciphers(s: ?*const SSL, buf: [*c]u8, size: c_int) [*c]u8;
pub extern fn SSL_get_read_ahead(s: ?*const SSL) c_int;
pub extern fn SSL_pending(s: ?*const SSL) c_int;
pub extern fn SSL_has_pending(s: ?*const SSL) c_int;
pub extern fn SSL_set_fd(s: ?*SSL, fd: c_int) c_int;
pub extern fn SSL_set_rfd(s: ?*SSL, fd: c_int) c_int;
pub extern fn SSL_set_wfd(s: ?*SSL, fd: c_int) c_int;
pub extern fn SSL_set0_rbio(s: ?*SSL, rbio: ?*BIO) void;
pub extern fn SSL_set0_wbio(s: ?*SSL, wbio: ?*BIO) void;
pub extern fn SSL_set_bio(s: ?*SSL, rbio: ?*BIO, wbio: ?*BIO) void;
pub extern fn SSL_get_rbio(s: ?*const SSL) ?*BIO;
pub extern fn SSL_get_wbio(s: ?*const SSL) ?*BIO;
pub extern fn SSL_set_cipher_list(s: ?*SSL, str: [*c]const u8) c_int;
pub extern fn SSL_CTX_set_ciphersuites(ctx: ?*SSL_CTX, str: [*c]const u8) c_int;
pub extern fn SSL_set_ciphersuites(s: ?*SSL, str: [*c]const u8) c_int;
pub extern fn SSL_set_read_ahead(s: ?*SSL, yes: c_int) void;
pub extern fn SSL_get_verify_mode(s: ?*const SSL) c_int;
pub extern fn SSL_get_verify_depth(s: ?*const SSL) c_int;
pub extern fn SSL_get_verify_callback(s: ?*const SSL) SSL_verify_cb;
pub extern fn SSL_set_verify(s: ?*SSL, mode: c_int, callback: SSL_verify_cb) void;
pub extern fn SSL_set_verify_depth(s: ?*SSL, depth: c_int) void;
pub extern fn SSL_set_cert_cb(s: ?*SSL, cb: ?fn (?*SSL, ?*c_void) callconv(.C) c_int, arg: ?*c_void) void;
pub extern fn SSL_use_RSAPrivateKey(ssl: ?*SSL, rsa: ?*RSA) c_int;
pub extern fn SSL_use_RSAPrivateKey_ASN1(ssl: ?*SSL, d: [*c]const u8, len: c_long) c_int;
pub extern fn SSL_use_PrivateKey(ssl: ?*SSL, pkey: ?*EVP_PKEY) c_int;
pub extern fn SSL_use_PrivateKey_ASN1(pk: c_int, ssl: ?*SSL, d: [*c]const u8, len: c_long) c_int;
pub extern fn SSL_use_certificate(ssl: ?*SSL, x: ?*X509) c_int;
pub extern fn SSL_use_certificate_ASN1(ssl: ?*SSL, d: [*c]const u8, len: c_int) c_int;
pub extern fn SSL_use_cert_and_key(ssl: ?*SSL, x509: ?*X509, privatekey: ?*EVP_PKEY, chain: ?*struct_stack_st_X509, override: c_int) c_int;
pub extern fn SSL_CTX_use_serverinfo(ctx: ?*SSL_CTX, serverinfo: [*c]const u8, serverinfo_length: usize) c_int;
pub extern fn SSL_CTX_use_serverinfo_ex(ctx: ?*SSL_CTX, version: c_uint, serverinfo: [*c]const u8, serverinfo_length: usize) c_int;
pub extern fn SSL_CTX_use_serverinfo_file(ctx: ?*SSL_CTX, file: [*c]const u8) c_int;
pub extern fn SSL_use_RSAPrivateKey_file(ssl: ?*SSL, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_use_PrivateKey_file(ssl: ?*SSL, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_use_certificate_file(ssl: ?*SSL, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_CTX_use_RSAPrivateKey_file(ctx: ?*SSL_CTX, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_CTX_use_PrivateKey_file(ctx: ?*SSL_CTX, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_CTX_use_certificate_file(ctx: ?*SSL_CTX, file: [*c]const u8, type: c_int) c_int;
pub extern fn SSL_CTX_use_certificate_chain_file(ctx: ?*SSL_CTX, file: [*c]const u8) c_int;
pub extern fn SSL_use_certificate_chain_file(ssl: ?*SSL, file: [*c]const u8) c_int;
pub extern fn SSL_load_client_CA_file(file: [*c]const u8) ?*struct_stack_st_X509_NAME;
pub extern fn SSL_add_file_cert_subjects_to_stack(stackCAs: ?*struct_stack_st_X509_NAME, file: [*c]const u8) c_int;
pub extern fn SSL_add_dir_cert_subjects_to_stack(stackCAs: ?*struct_stack_st_X509_NAME, dir: [*c]const u8) c_int;
pub extern fn SSL_state_string(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_rstate_string(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_state_string_long(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_rstate_string_long(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_SESSION_get_time(s: ?*const SSL_SESSION) c_long;
pub extern fn SSL_SESSION_set_time(s: ?*SSL_SESSION, t: c_long) c_long;
pub extern fn SSL_SESSION_get_timeout(s: ?*const SSL_SESSION) c_long;
pub extern fn SSL_SESSION_set_timeout(s: ?*SSL_SESSION, t: c_long) c_long;
pub extern fn SSL_SESSION_get_protocol_version(s: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_set_protocol_version(s: ?*SSL_SESSION, version: c_int) c_int;
pub extern fn SSL_SESSION_get0_hostname(s: ?*const SSL_SESSION) [*c]const u8;
pub extern fn SSL_SESSION_set1_hostname(s: ?*SSL_SESSION, hostname: [*c]const u8) c_int;
pub extern fn SSL_SESSION_get0_alpn_selected(s: ?*const SSL_SESSION, alpn: [*c][*c]const u8, len: [*c]usize) void;
pub extern fn SSL_SESSION_set1_alpn_selected(s: ?*SSL_SESSION, alpn: [*c]const u8, len: usize) c_int;
pub extern fn SSL_SESSION_get0_cipher(s: ?*const SSL_SESSION) ?*const SSL_CIPHER;
pub extern fn SSL_SESSION_set_cipher(s: ?*SSL_SESSION, cipher: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_SESSION_has_ticket(s: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_get_ticket_lifetime_hint(s: ?*const SSL_SESSION) c_ulong;
pub extern fn SSL_SESSION_get0_ticket(s: ?*const SSL_SESSION, tick: [*c][*c]const u8, len: [*c]usize) void;
pub extern fn SSL_SESSION_get_max_early_data(s: ?*const SSL_SESSION) u32;
pub extern fn SSL_SESSION_set_max_early_data(s: ?*SSL_SESSION, max_early_data: u32) c_int;
pub extern fn SSL_copy_session_id(to: ?*SSL, from: ?*const SSL) c_int;
pub extern fn SSL_SESSION_get0_peer(s: ?*SSL_SESSION) ?*X509;
pub extern fn SSL_SESSION_set1_id_context(s: ?*SSL_SESSION, sid_ctx: [*c]const u8, sid_ctx_len: c_uint) c_int;
pub extern fn SSL_SESSION_set1_id(s: ?*SSL_SESSION, sid: [*c]const u8, sid_len: c_uint) c_int;
pub extern fn SSL_SESSION_is_resumable(s: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_new() ?*SSL_SESSION;
pub extern fn SSL_SESSION_dup(src: ?*SSL_SESSION) ?*SSL_SESSION;
pub extern fn SSL_SESSION_get_id(s: ?*const SSL_SESSION, len: [*c]c_uint) [*c]const u8;
pub extern fn SSL_SESSION_get0_id_context(s: ?*const SSL_SESSION, len: [*c]c_uint) [*c]const u8;
pub extern fn SSL_SESSION_get_compress_id(s: ?*const SSL_SESSION) c_uint;
pub extern fn SSL_SESSION_print_fp(fp: [*c]FILE, ses: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_print(fp: ?*BIO, ses: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_print_keylog(bp: ?*BIO, x: ?*const SSL_SESSION) c_int;
pub extern fn SSL_SESSION_up_ref(ses: ?*SSL_SESSION) c_int;
pub extern fn SSL_SESSION_free(ses: ?*SSL_SESSION) void;
pub extern fn i2d_SSL_SESSION(in: ?*SSL_SESSION, pp: [*c][*c]u8) c_int;
pub extern fn SSL_set_session(to: ?*SSL, session: ?*SSL_SESSION) c_int;
pub extern fn SSL_CTX_add_session(ctx: ?*SSL_CTX, session: ?*SSL_SESSION) c_int;
pub extern fn SSL_CTX_remove_session(ctx: ?*SSL_CTX, session: ?*SSL_SESSION) c_int;
pub extern fn SSL_CTX_set_generate_session_id(ctx: ?*SSL_CTX, cb: GEN_SESSION_CB) c_int;
pub extern fn SSL_set_generate_session_id(s: ?*SSL, cb: GEN_SESSION_CB) c_int;
pub extern fn SSL_has_matching_session_id(s: ?*const SSL, id: [*c]const u8, id_len: c_uint) c_int;
pub extern fn d2i_SSL_SESSION(a: [*c]?*SSL_SESSION, pp: [*c][*c]const u8, length: c_long) ?*SSL_SESSION;
pub extern fn SSL_get_peer_certificate(s: ?*const SSL) ?*X509;
pub extern fn SSL_get_peer_cert_chain(s: ?*const SSL) ?*struct_stack_st_X509;
pub extern fn SSL_CTX_get_verify_mode(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_CTX_get_verify_depth(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_CTX_get_verify_callback(ctx: ?*const SSL_CTX) SSL_verify_cb;
pub extern fn SSL_CTX_set_verify(ctx: ?*SSL_CTX, mode: c_int, callback: SSL_verify_cb) void;
pub extern fn SSL_CTX_set_verify_depth(ctx: ?*SSL_CTX, depth: c_int) void;
pub extern fn SSL_CTX_set_cert_verify_callback(ctx: ?*SSL_CTX, cb: ?fn (?*X509_STORE_CTX, ?*c_void) callconv(.C) c_int, arg: ?*c_void) void;
pub extern fn SSL_CTX_set_cert_cb(c: ?*SSL_CTX, cb: ?fn (?*SSL, ?*c_void) callconv(.C) c_int, arg: ?*c_void) void;
pub extern fn SSL_CTX_use_RSAPrivateKey(ctx: ?*SSL_CTX, rsa: ?*RSA) c_int;
pub extern fn SSL_CTX_use_RSAPrivateKey_ASN1(ctx: ?*SSL_CTX, d: [*c]const u8, len: c_long) c_int;
pub extern fn SSL_CTX_use_PrivateKey(ctx: ?*SSL_CTX, pkey: ?*EVP_PKEY) c_int;
pub extern fn SSL_CTX_use_PrivateKey_ASN1(pk: c_int, ctx: ?*SSL_CTX, d: [*c]const u8, len: c_long) c_int;
pub extern fn SSL_CTX_use_certificate(ctx: ?*SSL_CTX, x: ?*X509) c_int;
pub extern fn SSL_CTX_use_certificate_ASN1(ctx: ?*SSL_CTX, len: c_int, d: [*c]const u8) c_int;
pub extern fn SSL_CTX_use_cert_and_key(ctx: ?*SSL_CTX, x509: ?*X509, privatekey: ?*EVP_PKEY, chain: ?*struct_stack_st_X509, override: c_int) c_int;
pub extern fn SSL_CTX_set_default_passwd_cb(ctx: ?*SSL_CTX, cb: ?pem_password_cb) void;
pub extern fn SSL_CTX_set_default_passwd_cb_userdata(ctx: ?*SSL_CTX, u: ?*c_void) void;
pub extern fn SSL_CTX_get_default_passwd_cb(ctx: ?*SSL_CTX) ?pem_password_cb;
pub extern fn SSL_CTX_get_default_passwd_cb_userdata(ctx: ?*SSL_CTX) ?*c_void;
pub extern fn SSL_set_default_passwd_cb(s: ?*SSL, cb: ?pem_password_cb) void;
pub extern fn SSL_set_default_passwd_cb_userdata(s: ?*SSL, u: ?*c_void) void;
pub extern fn SSL_get_default_passwd_cb(s: ?*SSL) ?pem_password_cb;
pub extern fn SSL_get_default_passwd_cb_userdata(s: ?*SSL) ?*c_void;
pub extern fn SSL_CTX_check_private_key(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_check_private_key(ctx: ?*const SSL) c_int;
pub extern fn SSL_CTX_set_session_id_context(ctx: ?*SSL_CTX, sid_ctx: [*c]const u8, sid_ctx_len: c_uint) c_int;
pub extern fn SSL_new(ctx: ?*SSL_CTX) ?*SSL;
pub extern fn SSL_up_ref(s: ?*SSL) c_int;
pub extern fn SSL_is_dtls(s: ?*const SSL) c_int;
pub extern fn SSL_set_session_id_context(ssl: ?*SSL, sid_ctx: [*c]const u8, sid_ctx_len: c_uint) c_int;
pub extern fn SSL_CTX_set_purpose(ctx: ?*SSL_CTX, purpose: c_int) c_int;
pub extern fn SSL_set_purpose(ssl: ?*SSL, purpose: c_int) c_int;
pub extern fn SSL_CTX_set_trust(ctx: ?*SSL_CTX, trust: c_int) c_int;
pub extern fn SSL_set_trust(ssl: ?*SSL, trust: c_int) c_int;
pub extern fn SSL_set1_host(s: ?*SSL, hostname: [*c]const u8) c_int;
pub extern fn SSL_add1_host(s: ?*SSL, hostname: [*c]const u8) c_int;
pub extern fn SSL_get0_peername(s: ?*SSL) [*c]const u8;
pub extern fn SSL_set_hostflags(s: ?*SSL, flags: c_uint) void;
pub extern fn SSL_CTX_dane_enable(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_dane_mtype_set(ctx: ?*SSL_CTX, md: ?*const EVP_MD, mtype: u8, ord: u8) c_int;
pub extern fn SSL_dane_enable(s: ?*SSL, basedomain: [*c]const u8) c_int;
pub extern fn SSL_dane_tlsa_add(s: ?*SSL, usage: u8, selector: u8, mtype: u8, data: [*c]const u8, dlen: usize) c_int;
pub extern fn SSL_get0_dane_authority(s: ?*SSL, mcert: [*c]?*X509, mspki: [*c]?*EVP_PKEY) c_int;
pub extern fn SSL_get0_dane_tlsa(s: ?*SSL, usage: [*c]u8, selector: [*c]u8, mtype: [*c]u8, data: [*c][*c]const u8, dlen: [*c]usize) c_int;
pub extern fn SSL_get0_dane(ssl: ?*SSL) ?*SSL_DANE;
pub extern fn SSL_CTX_dane_set_flags(ctx: ?*SSL_CTX, flags: c_ulong) c_ulong;
pub extern fn SSL_CTX_dane_clear_flags(ctx: ?*SSL_CTX, flags: c_ulong) c_ulong;
pub extern fn SSL_dane_set_flags(ssl: ?*SSL, flags: c_ulong) c_ulong;
pub extern fn SSL_dane_clear_flags(ssl: ?*SSL, flags: c_ulong) c_ulong;
pub extern fn SSL_CTX_set1_param(ctx: ?*SSL_CTX, vpm: ?*X509_VERIFY_PARAM) c_int;
pub extern fn SSL_set1_param(ssl: ?*SSL, vpm: ?*X509_VERIFY_PARAM) c_int;
pub extern fn SSL_CTX_get0_param(ctx: ?*SSL_CTX) ?*X509_VERIFY_PARAM;
pub extern fn SSL_get0_param(ssl: ?*SSL) ?*X509_VERIFY_PARAM;
pub extern fn SSL_CTX_set_srp_username(ctx: ?*SSL_CTX, name: [*c]u8) c_int;
pub extern fn SSL_CTX_set_srp_password(ctx: ?*SSL_CTX, password: [*c]u8) c_int;
pub extern fn SSL_CTX_set_srp_strength(ctx: ?*SSL_CTX, strength: c_int) c_int;
pub extern fn SSL_CTX_set_srp_client_pwd_callback(ctx: ?*SSL_CTX, cb: ?fn (?*SSL, ?*c_void) callconv(.C) [*c]u8) c_int;
pub extern fn SSL_CTX_set_srp_verify_param_callback(ctx: ?*SSL_CTX, cb: ?fn (?*SSL, ?*c_void) callconv(.C) c_int) c_int;
pub extern fn SSL_CTX_set_srp_username_callback(ctx: ?*SSL_CTX, cb: ?fn (?*SSL, [*c]c_int, ?*c_void) callconv(.C) c_int) c_int;
pub extern fn SSL_CTX_set_srp_cb_arg(ctx: ?*SSL_CTX, arg: ?*c_void) c_int;
pub extern fn SSL_set_srp_server_param(s: ?*SSL, N: ?*const BIGNUM, g: ?*const BIGNUM, sa: ?*BIGNUM, v: ?*BIGNUM, info: [*c]u8) c_int;
pub extern fn SSL_set_srp_server_param_pw(s: ?*SSL, user: [*c]const u8, pass: [*c]const u8, grp: [*c]const u8) c_int;
pub extern fn SSL_get_srp_g(s: ?*SSL) ?*BIGNUM;
pub extern fn SSL_get_srp_N(s: ?*SSL) ?*BIGNUM;
pub extern fn SSL_get_srp_username(s: ?*SSL) [*c]u8;
pub extern fn SSL_get_srp_userinfo(s: ?*SSL) [*c]u8;
pub const SSL_client_hello_cb_fn = ?fn (?*SSL, [*c]c_int, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set_client_hello_cb(c: ?*SSL_CTX, cb: SSL_client_hello_cb_fn, arg: ?*c_void) void;
pub extern fn SSL_client_hello_isv2(s: ?*SSL) c_int;
pub extern fn SSL_client_hello_get0_legacy_version(s: ?*SSL) c_uint;
pub extern fn SSL_client_hello_get0_random(s: ?*SSL, out: [*c][*c]const u8) usize;
pub extern fn SSL_client_hello_get0_session_id(s: ?*SSL, out: [*c][*c]const u8) usize;
pub extern fn SSL_client_hello_get0_ciphers(s: ?*SSL, out: [*c][*c]const u8) usize;
pub extern fn SSL_client_hello_get0_compression_methods(s: ?*SSL, out: [*c][*c]const u8) usize;
pub extern fn SSL_client_hello_get1_extensions_present(s: ?*SSL, out: [*c][*c]c_int, outlen: [*c]usize) c_int;
pub extern fn SSL_client_hello_get0_ext(s: ?*SSL, type: c_uint, out: [*c][*c]const u8, outlen: [*c]usize) c_int;
pub extern fn SSL_certs_clear(s: ?*SSL) void;
pub extern fn SSL_free(ssl: ?*SSL) void;
pub extern fn SSL_waiting_for_async(s: ?*SSL) c_int;
pub extern fn SSL_get_all_async_fds(s: ?*SSL, fds: [*c]c_int, numfds: [*c]usize) c_int;
pub extern fn SSL_get_changed_async_fds(s: ?*SSL, addfd: [*c]c_int, numaddfds: [*c]usize, delfd: [*c]c_int, numdelfds: [*c]usize) c_int;
pub extern fn SSL_accept(ssl: ?*SSL) c_int;
pub extern fn SSL_stateless(s: ?*SSL) c_int;
pub extern fn SSL_connect(ssl: ?*SSL) c_int;
pub extern fn SSL_read(ssl: ?*SSL, buf: ?*c_void, num: c_int) c_int;
pub extern fn SSL_read_ex(ssl: ?*SSL, buf: ?*c_void, num: usize, readbytes: [*c]usize) c_int;
pub extern fn SSL_read_early_data(s: ?*SSL, buf: ?*c_void, num: usize, readbytes: [*c]usize) c_int;
pub extern fn SSL_peek(ssl: ?*SSL, buf: ?*c_void, num: c_int) c_int;
pub extern fn SSL_peek_ex(ssl: ?*SSL, buf: ?*c_void, num: usize, readbytes: [*c]usize) c_int;
pub extern fn SSL_write(ssl: ?*SSL, buf: ?*const c_void, num: c_int) c_int;
pub extern fn SSL_write_ex(s: ?*SSL, buf: ?*const c_void, num: usize, written: [*c]usize) c_int;
pub extern fn SSL_write_early_data(s: ?*SSL, buf: ?*const c_void, num: usize, written: [*c]usize) c_int;
pub extern fn SSL_ctrl(ssl: ?*SSL, cmd: c_int, larg: c_long, parg: ?*c_void) c_long;
pub extern fn SSL_callback_ctrl(?*SSL, c_int, ?fn () callconv(.C) void) c_long;
pub extern fn SSL_CTX_ctrl(ctx: ?*SSL_CTX, cmd: c_int, larg: c_long, parg: ?*c_void) c_long;
pub extern fn SSL_CTX_callback_ctrl(?*SSL_CTX, c_int, ?fn () callconv(.C) void) c_long;
pub extern fn SSL_get_early_data_status(s: ?*const SSL) c_int;
pub extern fn SSL_get_error(s: ?*const SSL, ret_code: c_int) c_int;
pub extern fn SSL_get_version(s: ?*const SSL) [*c]const u8;
pub extern fn SSL_CTX_set_ssl_version(ctx: ?*SSL_CTX, meth: ?*const SSL_METHOD) c_int;
pub extern fn TLS_method() ?*const SSL_METHOD;
pub extern fn TLS_server_method() ?*const SSL_METHOD;
pub extern fn TLS_client_method() ?*const SSL_METHOD;
pub extern fn TLSv1_method() ?*const SSL_METHOD;
pub extern fn TLSv1_server_method() ?*const SSL_METHOD;
pub extern fn TLSv1_client_method() ?*const SSL_METHOD;
pub extern fn TLSv1_1_method() ?*const SSL_METHOD;
pub extern fn TLSv1_1_server_method() ?*const SSL_METHOD;
pub extern fn TLSv1_1_client_method() ?*const SSL_METHOD;
pub extern fn TLSv1_2_method() ?*const SSL_METHOD;
pub extern fn TLSv1_2_server_method() ?*const SSL_METHOD;
pub extern fn TLSv1_2_client_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_server_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_client_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_2_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_2_server_method() ?*const SSL_METHOD;
pub extern fn DTLSv1_2_client_method() ?*const SSL_METHOD;
pub extern fn DTLS_method() ?*const SSL_METHOD;
pub extern fn DTLS_server_method() ?*const SSL_METHOD;
pub extern fn DTLS_client_method() ?*const SSL_METHOD;
pub extern fn DTLS_get_data_mtu(s: ?*const SSL) usize;
pub extern fn SSL_get_ciphers(s: ?*const SSL) ?*struct_stack_st_SSL_CIPHER;
pub extern fn SSL_CTX_get_ciphers(ctx: ?*const SSL_CTX) ?*struct_stack_st_SSL_CIPHER;
pub extern fn SSL_get_client_ciphers(s: ?*const SSL) ?*struct_stack_st_SSL_CIPHER;
pub extern fn SSL_get1_supported_ciphers(s: ?*SSL) ?*struct_stack_st_SSL_CIPHER;
pub extern fn SSL_do_handshake(s: ?*SSL) c_int;
pub extern fn SSL_key_update(s: ?*SSL, updatetype: c_int) c_int;
pub extern fn SSL_get_key_update_type(s: ?*const SSL) c_int;
pub extern fn SSL_renegotiate(s: ?*SSL) c_int;
pub extern fn SSL_renegotiate_abbreviated(s: ?*SSL) c_int;
pub extern fn SSL_renegotiate_pending(s: ?*const SSL) c_int;
pub extern fn SSL_shutdown(s: ?*SSL) c_int;
pub extern fn SSL_verify_client_post_handshake(s: ?*SSL) c_int;
pub extern fn SSL_CTX_set_post_handshake_auth(ctx: ?*SSL_CTX, val: c_int) void;
pub extern fn SSL_set_post_handshake_auth(s: ?*SSL, val: c_int) void;
pub extern fn SSL_CTX_get_ssl_method(ctx: ?*const SSL_CTX) ?*const SSL_METHOD;
pub extern fn SSL_get_ssl_method(s: ?*const SSL) ?*const SSL_METHOD;
pub extern fn SSL_set_ssl_method(s: ?*SSL, method: ?*const SSL_METHOD) c_int;
pub extern fn SSL_alert_type_string_long(value: c_int) [*c]const u8;
pub extern fn SSL_alert_type_string(value: c_int) [*c]const u8;
pub extern fn SSL_alert_desc_string_long(value: c_int) [*c]const u8;
pub extern fn SSL_alert_desc_string(value: c_int) [*c]const u8;
pub extern fn SSL_set0_CA_list(s: ?*SSL, name_list: ?*struct_stack_st_X509_NAME) void;
pub extern fn SSL_CTX_set0_CA_list(ctx: ?*SSL_CTX, name_list: ?*struct_stack_st_X509_NAME) void;
pub extern fn SSL_get0_CA_list(s: ?*const SSL) ?*const struct_stack_st_X509_NAME;
pub extern fn SSL_CTX_get0_CA_list(ctx: ?*const SSL_CTX) ?*const struct_stack_st_X509_NAME;
pub extern fn SSL_add1_to_CA_list(ssl: ?*SSL, x: ?*const X509) c_int;
pub extern fn SSL_CTX_add1_to_CA_list(ctx: ?*SSL_CTX, x: ?*const X509) c_int;
pub extern fn SSL_get0_peer_CA_list(s: ?*const SSL) ?*const struct_stack_st_X509_NAME;
pub extern fn SSL_set_client_CA_list(s: ?*SSL, name_list: ?*struct_stack_st_X509_NAME) void;
pub extern fn SSL_CTX_set_client_CA_list(ctx: ?*SSL_CTX, name_list: ?*struct_stack_st_X509_NAME) void;
pub extern fn SSL_get_client_CA_list(s: ?*const SSL) ?*struct_stack_st_X509_NAME;
pub extern fn SSL_CTX_get_client_CA_list(s: ?*const SSL_CTX) ?*struct_stack_st_X509_NAME;
pub extern fn SSL_add_client_CA(ssl: ?*SSL, x: ?*X509) c_int;
pub extern fn SSL_CTX_add_client_CA(ctx: ?*SSL_CTX, x: ?*X509) c_int;
pub extern fn SSL_set_connect_state(s: ?*SSL) void;
pub extern fn SSL_set_accept_state(s: ?*SSL) void;
pub extern fn SSL_get_default_timeout(s: ?*const SSL) c_long;
pub extern fn SSL_CIPHER_description(?*const SSL_CIPHER, buf: [*c]u8, size: c_int) [*c]u8;
pub extern fn SSL_dup_CA_list(sk: ?*const struct_stack_st_X509_NAME) ?*struct_stack_st_X509_NAME;
pub extern fn SSL_dup(ssl: ?*SSL) ?*SSL;
pub extern fn SSL_get_certificate(ssl: ?*const SSL) ?*X509;
pub extern fn SSL_get_privatekey(ssl: ?*const SSL) ?*struct_evp_pkey_st;
pub extern fn SSL_CTX_get0_certificate(ctx: ?*const SSL_CTX) ?*X509;
pub extern fn SSL_CTX_get0_privatekey(ctx: ?*const SSL_CTX) ?*EVP_PKEY;
pub extern fn SSL_CTX_set_quiet_shutdown(ctx: ?*SSL_CTX, mode: c_int) void;
pub extern fn SSL_CTX_get_quiet_shutdown(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_set_quiet_shutdown(ssl: ?*SSL, mode: c_int) void;
pub extern fn SSL_get_quiet_shutdown(ssl: ?*const SSL) c_int;
pub extern fn SSL_set_shutdown(ssl: ?*SSL, mode: c_int) void;
pub extern fn SSL_get_shutdown(ssl: ?*const SSL) c_int;
pub extern fn SSL_version(ssl: ?*const SSL) c_int;
pub extern fn SSL_client_version(s: ?*const SSL) c_int;
pub extern fn SSL_CTX_set_default_verify_paths(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_set_default_verify_dir(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_set_default_verify_file(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_load_verify_locations(ctx: ?*SSL_CTX, CAfile: [*c]const u8, CApath: [*c]const u8) c_int;
pub extern fn SSL_get_session(ssl: ?*const SSL) ?*SSL_SESSION;
pub extern fn SSL_get1_session(ssl: ?*SSL) ?*SSL_SESSION;
pub extern fn SSL_get_SSL_CTX(ssl: ?*const SSL) ?*SSL_CTX;
pub extern fn SSL_set_SSL_CTX(ssl: ?*SSL, ctx: ?*SSL_CTX) ?*SSL_CTX;
pub extern fn SSL_set_info_callback(ssl: ?*SSL, cb: ?fn (?*const SSL, c_int, c_int) callconv(.C) void) void;
pub extern fn SSL_get_info_callback(ssl: ?*const SSL) ?fn (?*const SSL, c_int, c_int) callconv(.C) void;
pub extern fn SSL_get_state(ssl: ?*const SSL) OSSL_HANDSHAKE_STATE;
pub extern fn SSL_set_verify_result(ssl: ?*SSL, v: c_long) void;
pub extern fn SSL_get_verify_result(ssl: ?*const SSL) c_long;
pub extern fn SSL_get0_verified_chain(s: ?*const SSL) ?*struct_stack_st_X509;
pub extern fn SSL_get_client_random(ssl: ?*const SSL, out: [*c]u8, outlen: usize) usize;
pub extern fn SSL_get_server_random(ssl: ?*const SSL, out: [*c]u8, outlen: usize) usize;
pub extern fn SSL_SESSION_get_master_key(sess: ?*const SSL_SESSION, out: [*c]u8, outlen: usize) usize;
pub extern fn SSL_SESSION_set1_master_key(sess: ?*SSL_SESSION, in: [*c]const u8, len: usize) c_int;
pub extern fn SSL_SESSION_get_max_fragment_length(sess: ?*const SSL_SESSION) u8;
pub extern fn SSL_set_ex_data(ssl: ?*SSL, idx: c_int, data: ?*c_void) c_int;
pub extern fn SSL_get_ex_data(ssl: ?*const SSL, idx: c_int) ?*c_void;
pub extern fn SSL_SESSION_set_ex_data(ss: ?*SSL_SESSION, idx: c_int, data: ?*c_void) c_int;
pub extern fn SSL_SESSION_get_ex_data(ss: ?*const SSL_SESSION, idx: c_int) ?*c_void;
pub extern fn SSL_CTX_set_ex_data(ssl: ?*SSL_CTX, idx: c_int, data: ?*c_void) c_int;
pub extern fn SSL_CTX_get_ex_data(ssl: ?*const SSL_CTX, idx: c_int) ?*c_void;
pub extern fn SSL_get_ex_data_X509_STORE_CTX_idx() c_int;
pub extern fn SSL_CTX_set_default_read_buffer_len(ctx: ?*SSL_CTX, len: usize) void;
pub extern fn SSL_set_default_read_buffer_len(s: ?*SSL, len: usize) void;
pub extern fn SSL_CTX_set_tmp_dh_callback(ctx: ?*SSL_CTX, dh: ?fn (?*SSL, c_int, c_int) callconv(.C) ?*DH) void;
pub extern fn SSL_set_tmp_dh_callback(ssl: ?*SSL, dh: ?fn (?*SSL, c_int, c_int) callconv(.C) ?*DH) void;
pub extern fn SSL_get_current_compression(s: ?*const SSL) ?*const COMP_METHOD;
pub extern fn SSL_get_current_expansion(s: ?*const SSL) ?*const COMP_METHOD;
pub extern fn SSL_COMP_get_name(comp: ?*const COMP_METHOD) [*c]const u8;
pub extern fn SSL_COMP_get0_name(comp: ?*const SSL_COMP) [*c]const u8;
pub extern fn SSL_COMP_get_id(comp: ?*const SSL_COMP) c_int;
pub extern fn SSL_COMP_get_compression_methods() ?*struct_stack_st_SSL_COMP;
pub extern fn SSL_COMP_set0_compression_methods(meths: ?*struct_stack_st_SSL_COMP) ?*struct_stack_st_SSL_COMP;
pub extern fn SSL_COMP_add_compression_method(id: c_int, cm: ?*COMP_METHOD) c_int;
pub extern fn SSL_CIPHER_find(ssl: ?*SSL, ptr: [*c]const u8) ?*const SSL_CIPHER;
pub extern fn SSL_CIPHER_get_cipher_nid(c: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_CIPHER_get_digest_nid(c: ?*const SSL_CIPHER) c_int;
pub extern fn SSL_bytes_to_cipher_list(s: ?*SSL, bytes: [*c]const u8, len: usize, isv2format: c_int, sk: [*c]?*struct_stack_st_SSL_CIPHER, scsvs: [*c]?*struct_stack_st_SSL_CIPHER) c_int;
pub extern fn SSL_set_session_ticket_ext(s: ?*SSL, ext_data: ?*c_void, ext_len: c_int) c_int;
pub extern fn SSL_set_session_ticket_ext_cb(s: ?*SSL, cb: tls_session_ticket_ext_cb_fn, arg: ?*c_void) c_int;
pub extern fn SSL_set_session_secret_cb(s: ?*SSL, session_secret_cb: tls_session_secret_cb_fn, arg: ?*c_void) c_int;
pub extern fn SSL_CTX_set_not_resumable_session_callback(ctx: ?*SSL_CTX, cb: ?fn (?*SSL, c_int) callconv(.C) c_int) void;
pub extern fn SSL_set_not_resumable_session_callback(ssl: ?*SSL, cb: ?fn (?*SSL, c_int) callconv(.C) c_int) void;
pub extern fn SSL_CTX_set_record_padding_callback(ctx: ?*SSL_CTX, cb: ?fn (?*SSL, c_int, usize, ?*c_void) callconv(.C) usize) void;
pub extern fn SSL_CTX_set_record_padding_callback_arg(ctx: ?*SSL_CTX, arg: ?*c_void) void;
pub extern fn SSL_CTX_get_record_padding_callback_arg(ctx: ?*const SSL_CTX) ?*c_void;
pub extern fn SSL_CTX_set_block_padding(ctx: ?*SSL_CTX, block_size: usize) c_int;
pub extern fn SSL_set_record_padding_callback(ssl: ?*SSL, cb: ?fn (?*SSL, c_int, usize, ?*c_void) callconv(.C) usize) void;
pub extern fn SSL_set_record_padding_callback_arg(ssl: ?*SSL, arg: ?*c_void) void;
pub extern fn SSL_get_record_padding_callback_arg(ssl: ?*const SSL) ?*c_void;
pub extern fn SSL_set_block_padding(ssl: ?*SSL, block_size: usize) c_int;
pub extern fn SSL_set_num_tickets(s: ?*SSL, num_tickets: usize) c_int;
pub extern fn SSL_get_num_tickets(s: ?*const SSL) usize;
pub extern fn SSL_CTX_set_num_tickets(ctx: ?*SSL_CTX, num_tickets: usize) c_int;
pub extern fn SSL_CTX_get_num_tickets(ctx: ?*const SSL_CTX) usize;
pub extern fn SSL_session_reused(s: ?*const SSL) c_int;
pub extern fn SSL_is_server(s: ?*const SSL) c_int;
pub extern fn SSL_CONF_CTX_new() ?*SSL_CONF_CTX;
pub extern fn SSL_CONF_CTX_finish(cctx: ?*SSL_CONF_CTX) c_int;
pub extern fn SSL_CONF_CTX_free(cctx: ?*SSL_CONF_CTX) void;
pub extern fn SSL_CONF_CTX_set_flags(cctx: ?*SSL_CONF_CTX, flags: c_uint) c_uint;
pub extern fn SSL_CONF_CTX_clear_flags(cctx: ?*SSL_CONF_CTX, flags: c_uint) c_uint;
pub extern fn SSL_CONF_CTX_set1_prefix(cctx: ?*SSL_CONF_CTX, pre: [*c]const u8) c_int;
pub extern fn SSL_CONF_CTX_set_ssl(cctx: ?*SSL_CONF_CTX, ssl: ?*SSL) void;
pub extern fn SSL_CONF_CTX_set_ssl_ctx(cctx: ?*SSL_CONF_CTX, ctx: ?*SSL_CTX) void;
pub extern fn SSL_CONF_cmd(cctx: ?*SSL_CONF_CTX, cmd: [*c]const u8, value: [*c]const u8) c_int;
pub extern fn SSL_CONF_cmd_argv(cctx: ?*SSL_CONF_CTX, pargc: [*c]c_int, pargv: [*c][*c][*c]u8) c_int;
pub extern fn SSL_CONF_cmd_value_type(cctx: ?*SSL_CONF_CTX, cmd: [*c]const u8) c_int;
pub extern fn SSL_add_ssl_module() void;
pub extern fn SSL_config(s: ?*SSL, name: [*c]const u8) c_int;
pub extern fn SSL_CTX_config(ctx: ?*SSL_CTX, name: [*c]const u8) c_int;
pub extern fn DTLSv1_listen(s: ?*SSL, client: ?*BIO_ADDR) c_int;
pub const ssl_ct_validation_cb = ?fn (?*const CT_POLICY_EVAL_CTX, ?*const struct_stack_st_SCT, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_set_ct_validation_callback(s: ?*SSL, callback: ssl_ct_validation_cb, arg: ?*c_void) c_int;
pub extern fn SSL_CTX_set_ct_validation_callback(ctx: ?*SSL_CTX, callback: ssl_ct_validation_cb, arg: ?*c_void) c_int;
pub const SSL_CT_VALIDATION_PERMISSIVE = @enumToInt(enum_unnamed_50.SSL_CT_VALIDATION_PERMISSIVE);
pub const SSL_CT_VALIDATION_STRICT = @enumToInt(enum_unnamed_50.SSL_CT_VALIDATION_STRICT);
const enum_unnamed_50 = extern enum(c_int) {
    SSL_CT_VALIDATION_PERMISSIVE = 0,
    SSL_CT_VALIDATION_STRICT = 1,
    _,
};
pub extern fn SSL_enable_ct(s: ?*SSL, validation_mode: c_int) c_int;
pub extern fn SSL_CTX_enable_ct(ctx: ?*SSL_CTX, validation_mode: c_int) c_int;
pub extern fn SSL_ct_is_enabled(s: ?*const SSL) c_int;
pub extern fn SSL_CTX_ct_is_enabled(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_get0_peer_scts(s: ?*SSL) ?*const struct_stack_st_SCT;
pub extern fn SSL_CTX_set_default_ctlog_list_file(ctx: ?*SSL_CTX) c_int;
pub extern fn SSL_CTX_set_ctlog_list_file(ctx: ?*SSL_CTX, path: [*c]const u8) c_int;
pub extern fn SSL_CTX_set0_ctlog_store(ctx: ?*SSL_CTX, logs: ?*CTLOG_STORE) void;
pub extern fn SSL_CTX_get0_ctlog_store(ctx: ?*const SSL_CTX) ?*const CTLOG_STORE;
pub extern fn SSL_set_security_level(s: ?*SSL, level: c_int) void;
pub extern fn SSL_get_security_level(s: ?*const SSL) c_int;
pub extern fn SSL_set_security_callback(s: ?*SSL, cb: ?fn (?*const SSL, ?*const SSL_CTX, c_int, c_int, c_int, ?*c_void, ?*c_void) callconv(.C) c_int) void;
pub extern fn SSL_get_security_callback(s: ?*const SSL) ?fn (?*const SSL, ?*const SSL_CTX, c_int, c_int, c_int, ?*c_void, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_set0_security_ex_data(s: ?*SSL, ex: ?*c_void) void;
pub extern fn SSL_get0_security_ex_data(s: ?*const SSL) ?*c_void;
pub extern fn SSL_CTX_set_security_level(ctx: ?*SSL_CTX, level: c_int) void;
pub extern fn SSL_CTX_get_security_level(ctx: ?*const SSL_CTX) c_int;
pub extern fn SSL_CTX_set_security_callback(ctx: ?*SSL_CTX, cb: ?fn (?*const SSL, ?*const SSL_CTX, c_int, c_int, c_int, ?*c_void, ?*c_void) callconv(.C) c_int) void;
pub extern fn SSL_CTX_get_security_callback(ctx: ?*const SSL_CTX) ?fn (?*const SSL, ?*const SSL_CTX, c_int, c_int, c_int, ?*c_void, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set0_security_ex_data(ctx: ?*SSL_CTX, ex: ?*c_void) void;
pub extern fn SSL_CTX_get0_security_ex_data(ctx: ?*const SSL_CTX) ?*c_void;
pub extern fn OPENSSL_init_ssl(opts: u64, settings: ?*const OPENSSL_INIT_SETTINGS) c_int;
pub const struct_openssl_ssl_test_functions = opaque {};
pub extern fn SSL_test_functions() ?*const struct_openssl_ssl_test_functions;
pub extern fn SSL_free_buffers(ssl: ?*SSL) c_int;
pub extern fn SSL_alloc_buffers(ssl: ?*SSL) c_int;
pub const SSL_TICKET_STATUS = c_int;
pub const SSL_TICKET_RETURN = c_int;
pub const SSL_CTX_generate_session_ticket_fn = ?fn (?*SSL, ?*c_void) callconv(.C) c_int;
pub const SSL_CTX_decrypt_session_ticket_fn = ?fn (?*SSL, ?*SSL_SESSION, [*c]const u8, usize, SSL_TICKET_STATUS, ?*c_void) callconv(.C) SSL_TICKET_RETURN;
pub extern fn SSL_CTX_set_session_ticket_cb(ctx: ?*SSL_CTX, gen_cb: SSL_CTX_generate_session_ticket_fn, dec_cb: SSL_CTX_decrypt_session_ticket_fn, arg: ?*c_void) c_int;
pub extern fn SSL_SESSION_set1_ticket_appdata(ss: ?*SSL_SESSION, data: ?*const c_void, len: usize) c_int;
pub extern fn SSL_SESSION_get0_ticket_appdata(ss: ?*SSL_SESSION, data: [*c]?*c_void, len: [*c]usize) c_int;
pub extern const SSL_version_str: [*c]const u8;
pub const DTLS_timer_cb = ?fn (?*SSL, c_uint) callconv(.C) c_uint;
pub extern fn DTLS_set_timer_cb(s: ?*SSL, cb: DTLS_timer_cb) void;
pub const SSL_allow_early_data_cb_fn = ?fn (?*SSL, ?*c_void) callconv(.C) c_int;
pub extern fn SSL_CTX_set_allow_early_data_cb(ctx: ?*SSL_CTX, cb: SSL_allow_early_data_cb_fn, arg: ?*c_void) void;
pub extern fn SSL_set_allow_early_data_cb(s: ?*SSL, cb: SSL_allow_early_data_cb_fn, arg: ?*c_void) void;
pub extern fn __errno_location() [*c]c_int;
pub const struct_err_state_st = extern struct {
    err_flags: [16]c_int,
    err_buffer: [16]c_ulong,
    err_data: [16][*c]u8,
    err_data_flags: [16]c_int,
    err_file: [16][*c]const u8,
    err_line: [16]c_int,
    top: c_int,
    bottom: c_int,
};
pub const ERR_STATE = struct_err_state_st;
pub const struct_ERR_string_data_st = extern struct {
    @"error": c_ulong,
    string: [*c]const u8,
};
pub const ERR_STRING_DATA = struct_ERR_string_data_st;
pub const union_lh_ERR_STRING_DATA_dummy = extern union {
    d1: ?*c_void,
    d2: c_ulong,
    d3: c_int,
};
pub const struct_lhash_st_ERR_STRING_DATA = extern struct {
    dummy: union_lh_ERR_STRING_DATA_dummy,
};
pub fn lh_ERR_STRING_DATA_new(arg_hfn: ?fn ([*c]const ERR_STRING_DATA) callconv(.C) c_ulong, arg_cfn: ?fn ([*c]const ERR_STRING_DATA, [*c]const ERR_STRING_DATA) callconv(.C) c_int) callconv(.C) [*c]struct_lhash_st_ERR_STRING_DATA {
    var hfn = arg_hfn;
    var cfn = arg_cfn;
    return @ptrCast([*c]struct_lhash_st_ERR_STRING_DATA, @alignCast(@alignOf(struct_lhash_st_ERR_STRING_DATA), OPENSSL_LH_new(@ptrCast(OPENSSL_LH_HASHFUNC, @alignCast(@alignOf(fn (?*const c_void) callconv(.C) c_ulong), hfn)), @ptrCast(OPENSSL_LH_COMPFUNC, @alignCast(@alignOf(fn (?*const c_void, ?*const c_void) callconv(.C) c_int), cfn)))));
}
pub fn lh_ERR_STRING_DATA_free(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA) callconv(.C) void {
    var lh = arg_lh;
    OPENSSL_LH_free(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_ERR_STRING_DATA_insert(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA, arg_d: [*c]ERR_STRING_DATA) callconv(.C) [*c]ERR_STRING_DATA {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]ERR_STRING_DATA, @alignCast(@alignOf(ERR_STRING_DATA), OPENSSL_LH_insert(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*c_void, d))));
}
pub fn lh_ERR_STRING_DATA_delete(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA, arg_d: [*c]const ERR_STRING_DATA) callconv(.C) [*c]ERR_STRING_DATA {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]ERR_STRING_DATA, @alignCast(@alignOf(ERR_STRING_DATA), OPENSSL_LH_delete(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_ERR_STRING_DATA_retrieve(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA, arg_d: [*c]const ERR_STRING_DATA) callconv(.C) [*c]ERR_STRING_DATA {
    var lh = arg_lh;
    var d = arg_d;
    return @ptrCast([*c]ERR_STRING_DATA, @alignCast(@alignOf(ERR_STRING_DATA), OPENSSL_LH_retrieve(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(?*const c_void, d))));
}
pub fn lh_ERR_STRING_DATA_error(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA) callconv(.C) c_int {
    var lh = arg_lh;
    return OPENSSL_LH_error(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_ERR_STRING_DATA_num_items(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_num_items(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_ERR_STRING_DATA_node_stats_bio(arg_lh: [*c]const struct_lhash_st_ERR_STRING_DATA, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_ERR_STRING_DATA_node_usage_stats_bio(arg_lh: [*c]const struct_lhash_st_ERR_STRING_DATA, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_node_usage_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_ERR_STRING_DATA_stats_bio(arg_lh: [*c]const struct_lhash_st_ERR_STRING_DATA, arg_out: ?*BIO) callconv(.C) void {
    var lh = arg_lh;
    var out = arg_out;
    OPENSSL_LH_stats_bio(@ptrCast(?*const OPENSSL_LHASH, lh), out);
}
pub fn lh_ERR_STRING_DATA_get_down_load(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA) callconv(.C) c_ulong {
    var lh = arg_lh;
    return OPENSSL_LH_get_down_load(@ptrCast(?*OPENSSL_LHASH, lh));
}
pub fn lh_ERR_STRING_DATA_set_down_load(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA, arg_dl: c_ulong) callconv(.C) void {
    var lh = arg_lh;
    var dl = arg_dl;
    OPENSSL_LH_set_down_load(@ptrCast(?*OPENSSL_LHASH, lh), dl);
}
pub fn lh_ERR_STRING_DATA_doall(arg_lh: [*c]struct_lhash_st_ERR_STRING_DATA, arg_doall: ?fn ([*c]ERR_STRING_DATA) callconv(.C) void) callconv(.C) void {
    var lh = arg_lh;
    var doall = arg_doall;
    OPENSSL_LH_doall(@ptrCast(?*OPENSSL_LHASH, lh), @ptrCast(OPENSSL_LH_DOALL_FUNC, @alignCast(@alignOf(fn (?*c_void) callconv(.C) void), doall)));
}
pub extern fn ERR_put_error(lib: c_int, func: c_int, reason: c_int, file: [*c]const u8, line: c_int) void;
pub extern fn ERR_set_error_data(data: [*c]u8, flags: c_int) void;
pub extern fn ERR_get_error() c_ulong;
pub extern fn ERR_get_error_line(file: [*c][*c]const u8, line: [*c]c_int) c_ulong;
pub extern fn ERR_get_error_line_data(file: [*c][*c]const u8, line: [*c]c_int, data: [*c][*c]const u8, flags: [*c]c_int) c_ulong;
pub extern fn ERR_peek_error() c_ulong;
pub extern fn ERR_peek_error_line(file: [*c][*c]const u8, line: [*c]c_int) c_ulong;
pub extern fn ERR_peek_error_line_data(file: [*c][*c]const u8, line: [*c]c_int, data: [*c][*c]const u8, flags: [*c]c_int) c_ulong;
pub extern fn ERR_peek_last_error() c_ulong;
pub extern fn ERR_peek_last_error_line(file: [*c][*c]const u8, line: [*c]c_int) c_ulong;
pub extern fn ERR_peek_last_error_line_data(file: [*c][*c]const u8, line: [*c]c_int, data: [*c][*c]const u8, flags: [*c]c_int) c_ulong;
pub extern fn ERR_clear_error() void;
pub extern fn ERR_error_string(e: c_ulong, buf: [*c]u8) [*c]u8;
pub extern fn ERR_error_string_n(e: c_ulong, buf: [*c]u8, len: usize) void;
pub extern fn ERR_lib_error_string(e: c_ulong) [*c]const u8;
pub extern fn ERR_func_error_string(e: c_ulong) [*c]const u8;
pub extern fn ERR_reason_error_string(e: c_ulong) [*c]const u8;
pub extern fn ERR_print_errors_cb(cb: ?fn ([*c]const u8, usize, ?*c_void) callconv(.C) c_int, u: ?*c_void) void;
pub extern fn ERR_print_errors_fp(fp: [*c]FILE) void;
pub extern fn ERR_print_errors(bp: ?*BIO) void;
pub extern fn ERR_add_error_data(num: c_int, ...) void;
pub extern fn ERR_add_error_vdata(num: c_int, args: [*c]struct___va_list_tag) void;
pub extern fn ERR_load_strings(lib: c_int, str: [*c]ERR_STRING_DATA) c_int;
pub extern fn ERR_load_strings_const(str: [*c]const ERR_STRING_DATA) c_int;
pub extern fn ERR_unload_strings(lib: c_int, str: [*c]ERR_STRING_DATA) c_int;
pub extern fn ERR_load_ERR_strings() c_int;
pub extern fn ERR_remove_thread_state(?*c_void) void;
pub extern fn ERR_remove_state(pid: c_ulong) void;
pub extern fn ERR_get_state() [*c]ERR_STATE;
pub extern fn ERR_get_next_error_library() c_int;
pub extern fn ERR_set_mark() c_int;
pub extern fn ERR_pop_to_mark() c_int;
pub extern fn ERR_clear_last_mark() c_int;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):62:9
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):66:9
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):73:9
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):77:9
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):81:9
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):96:9
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):159:9
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):187:9
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):225:9
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):229:9
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // (no file):265:9
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_unsigned"); // (no file):269:9
pub const NON_EMPTY_TRANSLATION_UNIT = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/x86_64-linux-gnu/openssl/opensslconf.h:102:9
pub const DECLARE_DEPRECATED = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/x86_64-linux-gnu/openssl/opensslconf.h:111:10
pub const DEPRECATEDIN_1_2_0 = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/x86_64-linux-gnu/openssl/opensslconf.h:144:10
pub const OPENSSL_UNISTD = @compileError("unable to translate C expr: unexpected token .AngleBracketLeft"); // /usr/include/x86_64-linux-gnu/openssl/opensslconf.h:173:9
pub const OPENSSL_EXPORT = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/openssl/e_os2.h:171:11
pub const OPENSSL_EXTERN = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/openssl/e_os2.h:172:11
pub const OPENSSL_IMPLEMENT_GLOBAL = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/e_os2.h:193:11
pub const OPENSSL_DECLARE_GLOBAL = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/e_os2.h:194:11
pub const OPENSSL_GLOBAL_REF = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/e_os2.h:195:11
pub const __GLIBC_USE = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/features.h:179:9
pub const __NTH = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:57:11
pub const __NTHNL = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:58:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:105:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:106:9
pub const __ptr_t = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:109:9
pub const __warndecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:133:10
pub const __warnattr = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:134:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:135:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:143:10
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:174:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:181:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:183:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token .Identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:187:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:219:10
pub const __extern_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:346:11
pub const __extern_always_inline = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:347:11
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:441:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:512:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:513:10
pub const __glibc_macro_warning1 = @compileError("unable to translate C expr: unexpected token .Hash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:527:10
pub const __attr_access = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/sys/cdefs.h:559:11
pub const __S16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:109:9
pub const __U16_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:110:9
pub const __SLONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:113:9
pub const __ULONGWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:114:9
pub const __SQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:128:10
pub const __UQUAD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:129:10
pub const __SWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:130:10
pub const __UWORD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:131:10
pub const __S64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:134:10
pub const __U64_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_int"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:135:10
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types.h:137:10
pub const __TIMER_T_TYPE = @compileError("unable to translate C expr: unexpected token .Nl"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/typesizes.h:71:9
pub const __FSID_T_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/typesizes.h:73:9
pub const __INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:106:11
pub const __UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:107:11
pub const INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:252:11
pub const UINT32_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:260:10
pub const UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:262:11
pub const INTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:269:11
pub const UINTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdint.h:270:11
pub const ossl_inline = @compileError("unable to translate C expr: unexpected token .Keyword_inline"); // /usr/include/openssl/e_os2.h:265:12
pub const ossl_noreturn = @compileError("unable to translate C expr: unexpected token .Keyword_noreturn"); // /usr/include/openssl/e_os2.h:283:11
pub const __f32 = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:91:12
pub const __f64x = @compileError("unable to translate C expr: unexpected token .HashHash"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:120:13
pub const __CFLOAT32 = @compileError("unable to translate C expr: unexpected token .Keyword_complex"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:149:12
pub const __CFLOAT64 = @compileError("unable to translate C expr: unexpected token .Keyword_complex"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:160:13
pub const __CFLOAT32X = @compileError("unable to translate C expr: unexpected token .Keyword_complex"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:169:12
pub const __CFLOAT64X = @compileError("unable to translate C expr: unexpected token .Keyword_complex"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:178:13
pub const __builtin_huge_valf32 = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:218:12
pub const __builtin_inff32 = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:219:12
pub const __builtin_huge_valf64 = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:255:13
pub const __builtin_inff64 = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:256:13
pub const __builtin_huge_valf32x = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:272:12
pub const __builtin_inff32x = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:273:12
pub const __builtin_huge_valf64x = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:289:13
pub const __builtin_inff64x = @compileError("unable to translate C expr: expected identifier"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/floatn-common.h:290:13
pub const MB_CUR_MAX = @compileError("unable to translate C expr: unexpected token .RParen"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/stdlib.h:96:9
pub const __FD_ZERO = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')''"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')''"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/select.h:34:9
pub const _SIGSET_NWORDS = @compileError("unable to translate C expr: expected ')'"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types/__sigset_t.h:4:9
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/struct_mutex.h:56:10
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/x86_64-linux-gnu/bits/struct_rwlock.h:40:11
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/thread-shared-types.h:127:9
pub const __getc_unlocked_body = @compileError("TODO postfix inc/dec expr"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types/struct_FILE.h:102:9
pub const __putc_unlocked_body = @compileError("TODO postfix inc/dec expr"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/types/struct_FILE.h:106:9
pub const STACK_OF = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/include/openssl/safestack.h:20:10
pub const SKM_DEFINE_STACK_OF = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/openssl/safestack.h:22:10
pub const DEFINE_SPECIAL_STACK_OF_CONST = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/safestack.h:131:10
pub const DEFINE_STACK_OF_CONST = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/safestack.h:133:10
pub const OPENSSL_malloc_init = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:113:9
pub const CRYPTO_cleanup_all_ex_data = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:200:10
pub const CRYPTO_num_locks = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:212:11
pub const CRYPTO_set_locking_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:213:11
pub const CRYPTO_get_locking_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:214:11
pub const CRYPTO_set_add_lock_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:215:11
pub const CRYPTO_get_add_lock_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:216:11
pub const CRYPTO_THREADID_set_numeric = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:233:11
pub const CRYPTO_THREADID_set_pointer = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:234:11
pub const CRYPTO_THREADID_get_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:236:11
pub const CRYPTO_THREADID_current = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:237:11
pub const CRYPTO_THREADID_cpy = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:239:11
pub const CRYPTO_set_id_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:243:12
pub const CRYPTO_get_id_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:244:12
pub const CRYPTO_thread_id = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:245:12
pub const CRYPTO_set_dynlock_create_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:248:11
pub const CRYPTO_set_dynlock_lock_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:249:11
pub const CRYPTO_set_dynlock_destroy_callback = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/crypto.h:250:11
pub const CRYPTO_get_dynlock_create_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:251:11
pub const CRYPTO_get_dynlock_lock_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:252:11
pub const CRYPTO_get_dynlock_destroy_callback = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/crypto.h:253:11
pub const OPENSSL_assert = @compileError("unable to translate C expr: expected ',' or ')'"); // /usr/include/openssl/crypto.h:326:10
pub const __CPU_ZERO_S = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/cpu-set.h:46:10
pub const __CPU_SET_S = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/cpu-set.h:58:9
pub const __CPU_CLR_S = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/cpu-set.h:65:9
pub const __CPU_ISSET_S = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/cpu-set.h:72:9
pub const __CPU_OP_S = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/bits/cpu-set.h:99:9
pub const PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/pthread.h:87:9
pub const PTHREAD_RWLOCK_INITIALIZER = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/pthread.h:111:10
pub const PTHREAD_COND_INITIALIZER = @compileError("unable to translate C expr: unexpected token .LBrace"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/pthread.h:152:9
pub const pthread_cleanup_push = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/pthread.h:655:10
pub const pthread_cleanup_pop = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/pthread.h:676:10
pub const COMP_zlib_cleanup = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/comp.h:39:9
pub const BIO_get_conn_hostname = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:375:11
pub const BIO_get_conn_port = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:376:11
pub const BIO_get_conn_address = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:377:11
pub const BIO_get_accept_name = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:386:11
pub const BIO_get_accept_port = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:387:11
pub const BIO_get_peer_name = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:388:11
pub const BIO_get_peer_port = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/bio.h:389:11
pub const BIO_sock_cleanup = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/bio.h:682:11
pub const ossl_bio__attr__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/include/openssl/bio.h:735:10
pub const DECLARE_ASN1_FUNCTIONS_name = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/asn1.h:222:10
pub const DECLARE_ASN1_FUNCTIONS_fname = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/asn1.h:226:10
pub const DECLARE_ASN1_ENCODE_FUNCTIONS = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/asn1.h:230:10
pub const DECLARE_ASN1_ENCODE_FUNCTIONS_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/asn1.h:235:10
pub const DECLARE_ASN1_NDEF_FUNCTION = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/asn1.h:240:10
pub const DECLARE_ASN1_FUNCTIONS_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/asn1.h:243:10
pub const DECLARE_ASN1_ALLOC_FUNCTIONS_name = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/asn1.h:247:10
pub const DECLARE_ASN1_PRINT_FUNCTION_fname = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/asn1.h:254:10
pub const D2I_OF = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/asn1.h:258:10
pub const I2D_OF = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/asn1.h:259:10
pub const I2D_OF_const = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/asn1.h:260:10
pub const CHECKED_NEW_OF = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/asn1.h:266:10
pub const CHECKED_PPTR_OF = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/asn1.h:270:10
pub const TYPEDEF_D2I_OF = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/openssl/asn1.h:273:10
pub const TYPEDEF_I2D_OF = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/openssl/asn1.h:274:10
pub const TYPEDEF_D2I2D_OF = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/openssl/asn1.h:275:10
pub const ASN1_ITEM_ref = @compileError("unable to translate C expr: expected ')'' instead got: HashHash"); // /usr/include/openssl/asn1.h:324:11
pub const ASN1_ITEM_rptr = @compileError("unable to translate C expr: expected ')'' instead got: HashHash"); // /usr/include/openssl/asn1.h:326:11
pub const DECLARE_ASN1_ITEM = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/asn1.h:328:11
pub const ASN1_dup_of_const = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/asn1.h:695:10
pub const ASN1_i2d_fp_of_const = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/asn1.h:725:11
pub const ASN1_i2d_bio_of_const = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/asn1.h:752:11
pub const _DECLARE_OBJ_BSEARCH_CMP_FN = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/openssl/objects.h:76:10
pub const DECLARE_OBJ_BSEARCH_CMP_FN = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/openssl/objects.h:81:10
pub const DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/objects.h:83:10
pub const IMPLEMENT_OBJ_BSEARCH_CMP_FN = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/openssl/objects.h:113:10
pub const IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/openssl/objects.h:127:10
pub const OBJ_bsearch = @compileError("unable to translate C expr: expected ',' or ')'"); // /usr/include/openssl/objects.h:141:10
pub const OBJ_bsearch_ex = @compileError("unable to translate C expr: expected ',' or ')'"); // /usr/include/openssl/objects.h:148:10
pub const OBJ_cleanup = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/objects.h:159:10
pub const EVP_delete_cipher_alias = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/openssl/evp.h:532:10
pub const EVP_delete_digest_alias = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/include/openssl/evp.h:534:10
pub const EVP_MD_CTX_create = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:541:10
pub const OPENSSL_add_all_algorithms_conf = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:943:11
pub const OPENSSL_add_all_algorithms_noconf = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:947:11
pub const OpenSSL_add_all_algorithms = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:954:12
pub const OpenSSL_add_all_ciphers = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:957:11
pub const OpenSSL_add_all_digests = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:959:11
pub const EVP_cleanup = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/evp.h:962:11
pub const d2i_ECPKParameters_fp = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/ec.h:798:10
pub const d2i_DHparams_fp = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/dh.h:91:10
pub const d2i_DHxparams_fp = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/dh.h:103:10
pub const d2i_DSAparams_fp = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/dsa.h:67:10
pub const U64 = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/sha.h:92:11
pub const DECLARE_LHASH_HASH_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:41:10
pub const IMPLEMENT_LHASH_HASH_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:43:10
pub const LHASH_HASH_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:47:10
pub const DECLARE_LHASH_COMP_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:50:10
pub const IMPLEMENT_LHASH_COMP_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:52:10
pub const LHASH_COMP_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:57:10
pub const DECLARE_LHASH_DOALL_ARG_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:60:10
pub const IMPLEMENT_LHASH_DOALL_ARG_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:62:10
pub const LHASH_DOALL_ARG_FN = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/lhash.h:67:10
pub const LHASH_OF = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/include/openssl/lhash.h:119:10
pub const DEFINE_LHASH_OF = @compileError("unable to translate C expr: unexpected token .Keyword_union"); // /usr/include/openssl/lhash.h:121:10
pub const IMPLEMENT_LHASH_DOALL_ARG_CONST = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/include/openssl/lhash.h:180:9
pub const int_implement_lhash_doall = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/include/openssl/lhash.h:186:9
pub const IMPLEMENT_PEM_read_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:72:11
pub const IMPLEMENT_PEM_write_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:78:11
pub const IMPLEMENT_PEM_write_fp_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:84:11
pub const IMPLEMENT_PEM_write_cb_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:90:11
pub const IMPLEMENT_PEM_write_cb_fp_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:98:11
pub const IMPLEMENT_PEM_read_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:108:10
pub const IMPLEMENT_PEM_write_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:114:10
pub const IMPLEMENT_PEM_write_bio_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:120:10
pub const IMPLEMENT_PEM_write_cb_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:126:10
pub const IMPLEMENT_PEM_write_cb_bio_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:133:10
pub const IMPLEMENT_PEM_write = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:140:10
pub const IMPLEMENT_PEM_write_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:144:10
pub const IMPLEMENT_PEM_write_cb = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:148:10
pub const IMPLEMENT_PEM_write_cb_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:152:10
pub const IMPLEMENT_PEM_read = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:156:10
pub const IMPLEMENT_PEM_rw = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:160:10
pub const IMPLEMENT_PEM_rw_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:164:10
pub const IMPLEMENT_PEM_rw_cb = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:168:10
pub const DECLARE_PEM_read_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:182:11
pub const DECLARE_PEM_write_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:185:11
pub const DECLARE_PEM_write_fp_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:188:11
pub const DECLARE_PEM_write_cb_fp = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:191:11
pub const DECLARE_PEM_read_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:197:11
pub const DECLARE_PEM_write_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:200:11
pub const DECLARE_PEM_write_bio_const = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:203:11
pub const DECLARE_PEM_write_cb_bio = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/openssl/pem.h:206:11
pub const DECLARE_PEM_write = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:210:10
pub const DECLARE_PEM_write_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:213:10
pub const DECLARE_PEM_write_cb = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:216:10
pub const DECLARE_PEM_read = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:219:10
pub const DECLARE_PEM_rw = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:222:10
pub const DECLARE_PEM_rw_const = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:225:10
pub const DECLARE_PEM_rw_cb = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/openssl/pem.h:228:10
pub const SSL_set_tlsext_debug_callback = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/tls1.h:260:10
pub const SSL_CTX_set_tlsext_servername_callback = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/tls1.h:291:10
pub const SSL_CTX_set_tlsext_status_cb = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/tls1.h:310:10
pub const SSL_CTX_set_tlsext_ticket_key_cb = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/include/openssl/tls1.h:325:10
pub const OpenSSL_add_ssl_algorithms = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/ssl.h:1106:11
pub const SSLeay_add_ssl_algorithms = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/ssl.h:1107:11
pub const SSL_CTX_set_tmp_rsa_callback = @compileError("unable to translate C expr: unexpected token .Keyword_while"); // /usr/include/openssl/ssl.h:1492:11
pub const SSL_set_tmp_rsa_callback = @compileError("unable to translate C expr: unexpected token .Keyword_while"); // /usr/include/openssl/ssl.h:1493:11
pub const SSL_load_error_strings = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/ssl.h:1609:11
pub const SSL_library_init = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/ssl.h:1958:11
pub const SSL_COMP_free_compression_methods = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/ssl.h:2087:11
pub const errno = @compileError("unable to translate C expr: unexpected token .RParen"); // /media/randy/ac75723c-05b3-448d-9a7e-f1c066cca623/home/ziglang/lib/zig/libc/include/generic-glibc/errno.h:38:10
pub const ERR_load_crypto_strings = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/err.h:255:10
pub const ERR_free_strings = @compileError("unable to translate C expr: expected identifier"); // /usr/include/openssl/err.h:257:10
pub const __llvm__ = 1;
pub const __clang__ = 1;
pub const __clang_major__ = 11;
pub const __clang_minor__ = 0;
pub const __clang_patchlevel__ = 0;
pub const __clang_version__ = "11.0.0 ";
pub const __GNUC__ = 4;
pub const __GNUC_MINOR__ = 2;
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __GXX_ABI_VERSION = 1002;
pub const __ATOMIC_RELAXED = 0;
pub const __ATOMIC_CONSUME = 1;
pub const __ATOMIC_ACQUIRE = 2;
pub const __ATOMIC_RELEASE = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __ATOMIC_SEQ_CST = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __VERSION__ = "Clang 11.0.0";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __OPTIMIZE__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = 1;
pub const _LP64 = 1;
pub const __LP64__ = 1;
pub const __CHAR_BIT__ = 8;
pub const __SCHAR_MAX__ = 127;
pub const __SHRT_MAX__ = 32767;
pub const __INT_MAX__ = 2147483647;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = 2147483647;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __SIZEOF_DOUBLE__ = 8;
pub const __SIZEOF_FLOAT__ = 4;
pub const __SIZEOF_INT__ = 4;
pub const __SIZEOF_LONG__ = 8;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZEOF_SHORT__ = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __SIZEOF_WINT_T__ = 4;
pub const __SIZEOF_INT128__ = 16;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __INTMAX_WIDTH__ = 64;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = 64;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = 64;
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = 32;
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = 32;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = 64;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = 64;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = 1;
pub const __FLT_DIG__ = 6;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __FLT_MAX_EXP__ = 128;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -37;
pub const __FLT_MIN_EXP__ = -125;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = 1;
pub const __DBL_DIG__ = 15;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = 1;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __DBL_MANT_DIG__ = 53;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __DBL_MAX_EXP__ = 1024;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __DBL_MIN_EXP__ = -1021;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = 1;
pub const __LDBL_DIG__ = 18;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __LDBL_MIN_EXP__ = -16381;
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = 64;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __WINT_UNSIGNED__ = 1;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = L;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_MAX__ = 255;
pub const __INT8_MAX__ = 127;
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_MAX__ = 65535;
pub const __INT16_MAX__ = 32767;
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = U;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __INT32_MAX__ = 2147483647;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = 127;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = 255;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = 127;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = 255;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __FINITE_MATH_ONLY__ = 0;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __PIC__ = 2;
pub const __pic__ = 2;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __FLT_RADIX__ = 2;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = 2;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const __code_model_small__ = 1;
pub const __amd64__ = 1;
pub const __amd64 = 1;
pub const __x86_64 = 1;
pub const __x86_64__ = 1;
pub const __SEG_GS = 1;
pub const __SEG_FS = 1;
pub const __seg_gs = __attribute__(address_space(256));
pub const __seg_fs = __attribute__(address_space(257));
pub const __bdver3 = 1;
pub const __bdver3__ = 1;
pub const __tune_bdver3__ = 1;
pub const __NO_MATH_INLINES = 1;
pub const __AES__ = 1;
pub const __PCLMUL__ = 1;
pub const __LZCNT__ = 1;
pub const __FSGSBASE__ = 1;
pub const __BMI__ = 1;
pub const __POPCNT__ = 1;
pub const __PRFCHW__ = 1;
pub const __TBM__ = 1;
pub const __LWP__ = 1;
pub const __XOP__ = 1;
pub const __FMA4__ = 1;
pub const __SSE4A__ = 1;
pub const __FMA__ = 1;
pub const __F16C__ = 1;
pub const __FXSR__ = 1;
pub const __XSAVE__ = 1;
pub const __XSAVEOPT__ = 1;
pub const __AVX__ = 1;
pub const __SSE4_2__ = 1;
pub const __SSE4_1__ = 1;
pub const __SSSE3__ = 1;
pub const __SSE3__ = 1;
pub const __SSE2__ = 1;
pub const __SSE2_MATH__ = 1;
pub const __SSE__ = 1;
pub const __SSE_MATH__ = 1;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __SIZEOF_FLOAT128__ = 16;
pub const unix = 1;
pub const __unix = 1;
pub const __unix__ = 1;
pub const linux = 1;
pub const __linux = 1;
pub const __linux__ = 1;
pub const __ELF__ = 1;
pub const __gnu_linux__ = 1;
pub const __FLOAT128__ = 1;
pub const __STDC__ = 1;
pub const __STDC_HOSTED__ = 1;
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = 1;
pub const __STDC_UTF_32__ = 1;
pub const _DEBUG = 1;
pub const OPENSSL_VERSION_NUMBER = @as(c_long, 0x1010106f);
pub const OPENSSL_VERSION_TEXT = "OpenSSL 1.1.1f  31 Mar 2020";
pub const SHLIB_VERSION_HISTORY = "";
pub const SHLIB_VERSION_NUMBER = "1.1";
pub const OPENSSL_FILE = __FILE__;
pub const OPENSSL_LINE = __LINE__;
pub const OPENSSL_MIN_API = 0;
pub const OPENSSL_API_COMPAT = OPENSSL_MIN_API;
pub inline fn DEPRECATEDIN_1_1_0(f: anytype) @TypeOf(DECLARE_DEPRECATED(f)) {
    return DECLARE_DEPRECATED(f);
}
pub inline fn DEPRECATEDIN_1_0_0(f: anytype) @TypeOf(DECLARE_DEPRECATED(f)) {
    return DECLARE_DEPRECATED(f);
}
pub inline fn DEPRECATEDIN_0_9_8(f: anytype) @TypeOf(DECLARE_DEPRECATED(f)) {
    return DECLARE_DEPRECATED(f);
}
pub const RC4_INT = c_uint;
pub const OPENSSL_UNISTD_IO = OPENSSL_UNISTD;
pub const ossl_ssize_t = isize;
pub const OSSL_SSIZE_MAX = (@import("std").meta.cast(isize, SIZE_MAX >> 1));
pub const _INTTYPES_H = 1;
pub const _FEATURES_H = 1;
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min)) {
    return ((__clang_major__ << 16) + __clang_minor__) >= ((maj << 16) + min);
}
pub const _DEFAULT_SOURCE = 1;
pub const __GLIBC_USE_ISOC2X = 0;
pub const __USE_ISOC11 = 1;
pub const __USE_ISOC99 = 1;
pub const __USE_ISOC95 = 1;
pub const __USE_POSIX_IMPLICITLY = 1;
pub const _POSIX_SOURCE = 1;
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = 1;
pub const __USE_POSIX2 = 1;
pub const __USE_POSIX199309 = 1;
pub const __USE_POSIX199506 = 1;
pub const __USE_XOPEN2K = 1;
pub const __USE_XOPEN2K8 = 1;
pub const _ATFILE_SOURCE = 1;
pub const __USE_MISC = 1;
pub const __USE_ATFILE = 1;
pub const __USE_FORTIFY_LEVEL = 0;
pub const __GLIBC_USE_DEPRECATED_GETS = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF = 0;
pub const _STDC_PREDEF_H = 1;
pub const __STDC_IEC_559__ = 1;
pub const __STDC_IEC_559_COMPLEX__ = 1;
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = 6;
pub const __GLIBC__ = 2;
pub const __GLIBC_MINOR__ = 32;
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GLIBC__ << 16) + __GLIBC_MINOR__) >= ((maj << 16) + min);
}
pub const _SYS_CDEFS_H = 1;
pub const __THROW = __attribute__(__nothrow__ ++ __LEAF);
pub const __THROWNL = __attribute__(__nothrow__);
pub inline fn __glibc_clang_has_extension(ext: anytype) @TypeOf(__has_extension(ext)) {
    return __has_extension(ext);
}
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1)) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1);
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, 0)) {
    return __builtin_object_size(ptr, 0);
}
pub const __glibc_c99_flexarr_available = 1;
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub const __attribute_malloc__ = __attribute__(__malloc__);
pub const __attribute_pure__ = __attribute__(__pure__);
pub const __attribute_const__ = __attribute__(__const__);
pub const __attribute_used__ = __attribute__(__used__);
pub const __attribute_noinline__ = __attribute__(__noinline__);
pub const __attribute_deprecated__ = __attribute__(__deprecated__);
pub inline fn __attribute_deprecated_msg__(msg: anytype) @TypeOf(__attribute__(__deprecated__(msg))) {
    return __attribute__(__deprecated__(msg));
}
pub inline fn __attribute_format_arg__(x: anytype) @TypeOf(__attribute__(__format_arg__(x))) {
    return __attribute__(__format_arg__(x));
}
pub inline fn __attribute_format_strfmon__(a: anytype, b: anytype) @TypeOf(__attribute__(__format__(__strfmon__, a, b))) {
    return __attribute__(__format__(__strfmon__, a, b));
}
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute__(__nonnull__ ++ params)) {
    return __attribute__(__nonnull__ ++ params);
}
pub const __attribute_warn_unused_result__ = __attribute__(__warn_unused_result__);
pub const __always_inline = __inline ++ __attribute__(__always_inline__);
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = __restrict;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, 0)) {
    return __builtin_expect(cond, 0);
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, 1)) {
    return __builtin_expect(cond, 1);
}
pub inline fn __glibc_has_attribute(attr: anytype) @TypeOf(__has_attribute(attr)) {
    return __has_attribute(attr);
}
pub const __WORDSIZE = 64;
pub const __WORDSIZE_TIME64_COMPAT32 = 1;
pub const __SYSCALL_WORDSIZE = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub inline fn __glibc_macro_warning(message: anytype) @TypeOf(__glibc_macro_warning1(GCC ++ warning ++ message)) {
    return __glibc_macro_warning1(GCC ++ warning ++ message);
}
pub const __HAVE_GENERIC_SELECTION = 1;
pub const __USE_EXTERN_INLINES = 1;
pub const _STDINT_H = 1;
pub const __GLIBC_USE_LIB_EXT2 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = 0;
pub const _BITS_TYPES_H = 1;
pub const __TIMESIZE = __WORDSIZE;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const _BITS_TYPESIZES_H = 1;
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = 1;
pub const __INO_T_MATCHES_INO64_T = 1;
pub const __RLIM_T_MATCHES_RLIM64_T = 1;
pub const __STATFS_MATCHES_STATFS64 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;
pub const __FD_SETSIZE = 1024;
pub const _BITS_TIME64_H = 1;
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = 1;
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - 1;
pub const _BITS_STDINT_INTN_H = 1;
pub const _BITS_STDINT_UINTN_H = 1;
pub const INT8_MIN = -128;
pub const INT16_MIN = -32767 - 1;
pub const INT32_MIN = -2147483647 - 1;
pub const INT64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT8_MAX = 127;
pub const INT16_MAX = 32767;
pub const INT32_MAX = 2147483647;
pub const INT64_MAX = __INT64_C(9223372036854775807);
pub const UINT8_MAX = 255;
pub const UINT16_MAX = 65535;
pub const UINT32_MAX = @as(c_uint, 4294967295);
pub const UINT64_MAX = __UINT64_C(18446744073709551615);
pub const INT_LEAST8_MIN = -128;
pub const INT_LEAST16_MIN = -32767 - 1;
pub const INT_LEAST32_MIN = -2147483647 - 1;
pub const INT_LEAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_LEAST8_MAX = 127;
pub const INT_LEAST16_MAX = 32767;
pub const INT_LEAST32_MAX = 2147483647;
pub const INT_LEAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_LEAST8_MAX = 255;
pub const UINT_LEAST16_MAX = 65535;
pub const UINT_LEAST32_MAX = @as(c_uint, 4294967295);
pub const UINT_LEAST64_MAX = __UINT64_C(18446744073709551615);
pub const INT_FAST8_MIN = -128;
pub const INT_FAST16_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST32_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INT_FAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INT_FAST8_MAX = 127;
pub const INT_FAST16_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST32_MAX = @as(c_long, 9223372036854775807);
pub const INT_FAST64_MAX = __INT64_C(9223372036854775807);
pub const UINT_FAST8_MAX = 255;
pub const UINT_FAST16_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST32_MAX = @as(c_ulong, 18446744073709551615);
pub const UINT_FAST64_MAX = __UINT64_C(18446744073709551615);
pub const INTPTR_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const INTPTR_MAX = @as(c_long, 9223372036854775807);
pub const UINTPTR_MAX = @as(c_ulong, 18446744073709551615);
pub const INTMAX_MIN = -__INT64_C(9223372036854775807) - 1;
pub const INTMAX_MAX = __INT64_C(9223372036854775807);
pub const UINTMAX_MAX = __UINT64_C(18446744073709551615);
pub const PTRDIFF_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const PTRDIFF_MAX = @as(c_long, 9223372036854775807);
pub const SIG_ATOMIC_MIN = -2147483647 - 1;
pub const SIG_ATOMIC_MAX = 2147483647;
pub const SIZE_MAX = @as(c_ulong, 18446744073709551615);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @as(c_uint, 4294967295);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub const ____gwchar_t_defined = 1;
pub const __PRI64_PREFIX = "l";
pub const __PRIPTR_PREFIX = "l";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const SCNd8 = "hhd";
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub const SCNdLEAST8 = "hhd";
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const SCNdFAST8 = "hhd";
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const SCNi8 = "hhi";
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub const SCNiLEAST8 = "hhi";
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const SCNiFAST8 = "hhi";
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub const SCNu8 = "hhu";
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub const SCNuLEAST8 = "hhu";
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub const SCNuFAST8 = "hhu";
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const SCNo8 = "hho";
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub const SCNoLEAST8 = "hho";
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const SCNoFAST8 = "hho";
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const SCNx8 = "hhx";
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub const SCNxLEAST8 = "hhx";
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const SCNxFAST8 = "hhx";
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const ossl_unused = __attribute__(unused);
pub const NULL = (@import("std").meta.cast(?*c_void, 0));
pub const _STDLIB_H = 1;
pub const WNOHANG = 1;
pub const WUNTRACED = 2;
pub const WSTOPPED = 2;
pub const WEXITED = 4;
pub const WCONTINUED = 8;
pub const WNOWAIT = 0x01000000;
pub const __WNOTHREAD = 0x20000000;
pub const __WALL = 0x40000000;
pub const __WCLONE = 0x80000000;
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & 0xff00) >> 8) {
    return (status & 0xff00) >> 8;
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & 0x7f) {
    return status & 0x7f;
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == 0) {
    return __WTERMSIG(status) == 0;
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf(((@import("std").meta.cast(i8, (status & 0x7f) + 1)) >> 1) > 0) {
    return ((@import("std").meta.cast(i8, (status & 0x7f) + 1)) >> 1) > 0;
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & 0xff) == 0x7f) {
    return (status & 0xff) == 0x7f;
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << 8) | sig) {
    return (ret << 8) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << 8) | 0x7f) {
    return (sig << 8) | 0x7f;
}
pub const __W_CONTINUED = 0xffff;
pub const __WCOREFLAG = 0x80;
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    return __WIFCONTINUED(status);
}
pub const __HAVE_FLOAT128 = 0;
pub const __HAVE_DISTINCT_FLOAT128 = 0;
pub const __HAVE_FLOAT64X = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE = 1;
pub const __HAVE_FLOAT16 = 0;
pub const __HAVE_FLOAT32 = 1;
pub const __HAVE_FLOAT64 = 1;
pub const __HAVE_FLOAT32X = 1;
pub const __HAVE_FLOAT128X = 0;
pub const __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;
pub const __HAVE_DISTINCT_FLOAT32 = 0;
pub const __HAVE_DISTINCT_FLOAT64 = 0;
pub const __HAVE_DISTINCT_FLOAT32X = 0;
pub const __HAVE_DISTINCT_FLOAT64X = 0;
pub const __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;
pub const __HAVE_FLOAT128_UNLIKE_LDBL = (__HAVE_DISTINCT_FLOAT128 != 0) and (__LDBL_MANT_DIG__ != 113);
pub const __HAVE_FLOATN_NOT_TYPEDEF = 0;
pub inline fn __f64(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __f32x(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __builtin_nanf32(x: anytype) @TypeOf(__builtin_nanf(x)) {
    return __builtin_nanf(x);
}
pub inline fn __builtin_nansf32(x: anytype) @TypeOf(__builtin_nansf(x)) {
    return __builtin_nansf(x);
}
pub inline fn __builtin_nanf64(x: anytype) @TypeOf(__builtin_nan(x)) {
    return __builtin_nan(x);
}
pub inline fn __builtin_nansf64(x: anytype) @TypeOf(__builtin_nans(x)) {
    return __builtin_nans(x);
}
pub inline fn __builtin_nanf32x(x: anytype) @TypeOf(__builtin_nan(x)) {
    return __builtin_nan(x);
}
pub inline fn __builtin_nansf32x(x: anytype) @TypeOf(__builtin_nans(x)) {
    return __builtin_nans(x);
}
pub inline fn __builtin_nanf64x(x: anytype) @TypeOf(__builtin_nanl(x)) {
    return __builtin_nanl(x);
}
pub inline fn __builtin_nansf64x(x: anytype) @TypeOf(__builtin_nansl(x)) {
    return __builtin_nansl(x);
}
pub const __ldiv_t_defined = 1;
pub const __lldiv_t_defined = 1;
pub const RAND_MAX = 2147483647;
pub const EXIT_FAILURE = 1;
pub const EXIT_SUCCESS = 0;
pub const _SYS_TYPES_H = 1;
pub const __clock_t_defined = 1;
pub const __clockid_t_defined = 1;
pub const __time_t_defined = 1;
pub const __timer_t_defined = 1;
pub const __BIT_TYPES_DEFINED__ = 1;
pub const _ENDIAN_H = 1;
pub const _BITS_ENDIAN_H = 1;
pub const __LITTLE_ENDIAN = 1234;
pub const __BIG_ENDIAN = 4321;
pub const __PDP_ENDIAN = 3412;
pub const _BITS_ENDIANNESS_H = 1;
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    return blk: {
        _ = LO;
        break :blk HI;
    };
}
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = 1;
pub inline fn __bswap_constant_16(x: anytype) @TypeOf((@import("std").meta.cast(__uint16_t, ((x >> 8) & 0xff) | ((x & 0xff) << 8)))) {
    return (@import("std").meta.cast(__uint16_t, ((x >> 8) & 0xff) | ((x & 0xff) << 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @as(c_uint, 0xff000000)) >> 24) | ((x & @as(c_uint, 0x00ff0000)) >> 8)) | ((x & @as(c_uint, 0x0000ff00)) << 8)) | ((x & @as(c_uint, 0x000000ff)) << 24)) {
    return ((((x & @as(c_uint, 0xff000000)) >> 24) | ((x & @as(c_uint, 0x00ff0000)) >> 8)) | ((x & @as(c_uint, 0x0000ff00)) << 8)) | ((x & @as(c_uint, 0x000000ff)) << 24);
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> 56) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> 40)) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> 24)) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> 8)) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << 8)) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << 24)) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << 40)) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << 56)) {
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> 56) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> 40)) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> 24)) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> 8)) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << 8)) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << 24)) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << 40)) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << 56);
}
pub const _BITS_UINTN_IDENTITY_H = 1;
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub const _SYS_SELECT_H = 1;
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[__FD_ELT(d)] & __FD_MASK(d)) != 0) {
    return (__FDS_BITS(s)[__FD_ELT(d)] & __FD_MASK(d)) != 0;
}
pub const __sigset_t_defined = 1;
pub const __timeval_defined = 1;
pub const _STRUCT_TIMESPEC = 1;
pub const __NFDBITS = 8 * (@import("std").meta.cast(c_int, @import("std").meta.sizeof(__fd_mask)));
pub inline fn __FD_ELT(d: anytype) @TypeOf(d / __NFDBITS) {
    return d / __NFDBITS;
}
pub inline fn __FD_MASK(d: anytype) @TypeOf((@import("std").meta.cast(__fd_mask, @as(c_ulong, 1) << (d % __NFDBITS)))) {
    return (@import("std").meta.cast(__fd_mask, @as(c_ulong, 1) << (d % __NFDBITS)));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    return __FD_ZERO(fdsetp);
}
pub const _BITS_PTHREADTYPES_COMMON_H = 1;
pub const _THREAD_SHARED_TYPES_H = 1;
pub const _BITS_PTHREADTYPES_ARCH_H = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T = 40;
pub const __SIZEOF_PTHREAD_ATTR_T = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = 4;
pub const __SIZEOF_PTHREAD_COND_T = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = 4;
pub const _THREAD_MUTEX_INTERNAL_H = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV = 1;
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    return blk: {
        _ = 0;
        _ = 0;
        _ = 0;
        _ = 0;
        _ = 0;
        _ = 0;
        _ = 0;
        _ = 0;
        _ = __PTHREAD_RWLOCK_ELISION_EXTRA;
        _ = 0;
        break :blk __flags;
    };
}
pub const __have_pthread_attr_t = 1;
pub const _ALLOCA_H = 1;
pub const _TIME_H = 1;
pub const _BITS_TIME_H = 1;
pub const CLOCKS_PER_SEC = (@import("std").meta.cast(__clock_t, 1000000));
pub const CLOCK_REALTIME = 0;
pub const CLOCK_MONOTONIC = 1;
pub const CLOCK_PROCESS_CPUTIME_ID = 2;
pub const CLOCK_THREAD_CPUTIME_ID = 3;
pub const CLOCK_MONOTONIC_RAW = 4;
pub const CLOCK_REALTIME_COARSE = 5;
pub const CLOCK_MONOTONIC_COARSE = 6;
pub const CLOCK_BOOTTIME = 7;
pub const CLOCK_REALTIME_ALARM = 8;
pub const CLOCK_BOOTTIME_ALARM = 9;
pub const CLOCK_TAI = 11;
pub const TIMER_ABSTIME = 1;
pub const __struct_tm_defined = 1;
pub const __itimerspec_defined = 1;
pub const _BITS_TYPES_LOCALE_T_H = 1;
pub const _BITS_TYPES___LOCALE_T_H = 1;
pub const TIME_UTC = 1;
pub inline fn __isleap(year: anytype) @TypeOf(((year % 4) == 0) and (((year % 100) != 0) or ((year % 400) == 0))) {
    return ((year % 4) == 0) and (((year % 100) != 0) or ((year % 400) == 0));
}
pub const _STDIO_H = 1;
pub inline fn va_start(ap: anytype, param: anytype) @TypeOf(__builtin_va_start(ap, param)) {
    return __builtin_va_start(ap, param);
}
pub inline fn va_end(ap: anytype) @TypeOf(__builtin_va_end(ap)) {
    return __builtin_va_end(ap);
}
pub inline fn va_arg(ap: anytype, type_1: anytype) @TypeOf(__builtin_va_arg(ap, type_1)) {
    return __builtin_va_arg(ap, type_1);
}
pub inline fn __va_copy(d: anytype, s: anytype) @TypeOf(__builtin_va_copy(d, s)) {
    return __builtin_va_copy(d, s);
}
pub inline fn va_copy(dest: anytype, src: anytype) @TypeOf(__builtin_va_copy(dest, src)) {
    return __builtin_va_copy(dest, src);
}
pub const __GNUC_VA_LIST = 1;
pub const _____fpos_t_defined = 1;
pub const ____mbstate_t_defined = 1;
pub const _____fpos64_t_defined = 1;
pub const ____FILE_defined = 1;
pub const __FILE_defined = 1;
pub const __struct_FILE_defined = 1;
pub const _IO_EOF_SEEN = 0x0010;
pub inline fn __feof_unlocked_body(_fp: anytype) @TypeOf(((_fp.*._flags) & _IO_EOF_SEEN) != 0) {
    return ((_fp.*._flags) & _IO_EOF_SEEN) != 0;
}
pub const _IO_ERR_SEEN = 0x0020;
pub inline fn __ferror_unlocked_body(_fp: anytype) @TypeOf(((_fp.*._flags) & _IO_ERR_SEEN) != 0) {
    return ((_fp.*._flags) & _IO_ERR_SEEN) != 0;
}
pub const _IO_USER_LOCK = 0x8000;
pub const _IOFBF = 0;
pub const _IOLBF = 1;
pub const _IONBF = 2;
pub const BUFSIZ = 8192;
pub const EOF = -1;
pub const SEEK_SET = 0;
pub const SEEK_CUR = 1;
pub const SEEK_END = 2;
pub const P_tmpdir = "/tmp";
pub const _BITS_STDIO_LIM_H = 1;
pub const L_tmpnam = 20;
pub const TMP_MAX = 238328;
pub const FILENAME_MAX = 4096;
pub const L_ctermid = 9;
pub const FOPEN_MAX = 16;
pub const _BITS_STDIO_H = 1;
pub const __STDIO_INLINE = __extern_inline;
pub const _STACK = OPENSSL_STACK;
pub const sk_num = OPENSSL_sk_num;
pub const sk_value = OPENSSL_sk_value;
pub const sk_set = OPENSSL_sk_set;
pub const sk_new = OPENSSL_sk_new;
pub const sk_new_null = OPENSSL_sk_new_null;
pub const sk_free = OPENSSL_sk_free;
pub const sk_pop_free = OPENSSL_sk_pop_free;
pub const sk_deep_copy = OPENSSL_sk_deep_copy;
pub const sk_insert = OPENSSL_sk_insert;
pub const sk_delete = OPENSSL_sk_delete;
pub const sk_delete_ptr = OPENSSL_sk_delete_ptr;
pub const sk_find = OPENSSL_sk_find;
pub const sk_find_ex = OPENSSL_sk_find_ex;
pub const sk_push = OPENSSL_sk_push;
pub const sk_unshift = OPENSSL_sk_unshift;
pub const sk_shift = OPENSSL_sk_shift;
pub const sk_pop = OPENSSL_sk_pop;
pub const sk_zero = OPENSSL_sk_zero;
pub const sk_set_cmp_func = OPENSSL_sk_set_cmp_func;
pub const sk_dup = OPENSSL_sk_dup;
pub const sk_sort = OPENSSL_sk_sort;
pub const sk_is_sorted = OPENSSL_sk_is_sorted;
pub inline fn DEFINE_SPECIAL_STACK_OF(t1: anytype, t2: anytype) @TypeOf(SKM_DEFINE_STACK_OF(t1, t2, t2)) {
    return SKM_DEFINE_STACK_OF(t1, t2, t2);
}
pub inline fn DEFINE_STACK_OF(t: anytype) @TypeOf(SKM_DEFINE_STACK_OF(t, t, t)) {
    return SKM_DEFINE_STACK_OF(t, t, t);
}
pub const _LIBC_LIMITS_H_ = 1;
pub const MB_LEN_MAX = 16;
pub const LLONG_MIN = -LLONG_MAX - 1;
pub const LLONG_MAX = __LONG_LONG_MAX__;
pub const ULLONG_MAX = (LLONG_MAX * @as(c_ulonglong, 2)) + 1;
pub const _BITS_POSIX1_LIM_H = 1;
pub const _POSIX_AIO_LISTIO_MAX = 2;
pub const _POSIX_AIO_MAX = 1;
pub const _POSIX_ARG_MAX = 4096;
pub const _POSIX_CHILD_MAX = 25;
pub const _POSIX_DELAYTIMER_MAX = 32;
pub const _POSIX_HOST_NAME_MAX = 255;
pub const _POSIX_LINK_MAX = 8;
pub const _POSIX_LOGIN_NAME_MAX = 9;
pub const _POSIX_MAX_CANON = 255;
pub const _POSIX_MAX_INPUT = 255;
pub const _POSIX_MQ_OPEN_MAX = 8;
pub const _POSIX_MQ_PRIO_MAX = 32;
pub const _POSIX_NAME_MAX = 14;
pub const _POSIX_NGROUPS_MAX = 8;
pub const _POSIX_OPEN_MAX = 20;
pub const _POSIX_PATH_MAX = 256;
pub const _POSIX_PIPE_BUF = 512;
pub const _POSIX_RE_DUP_MAX = 255;
pub const _POSIX_RTSIG_MAX = 8;
pub const _POSIX_SEM_NSEMS_MAX = 256;
pub const _POSIX_SEM_VALUE_MAX = 32767;
pub const _POSIX_SIGQUEUE_MAX = 32;
pub const _POSIX_SSIZE_MAX = 32767;
pub const _POSIX_STREAM_MAX = 8;
pub const _POSIX_SYMLINK_MAX = 255;
pub const _POSIX_SYMLOOP_MAX = 8;
pub const _POSIX_TIMER_MAX = 32;
pub const _POSIX_TTY_NAME_MAX = 9;
pub const _POSIX_TZNAME_MAX = 6;
pub const _POSIX_CLOCKRES_MIN = 20000000;
pub const NR_OPEN = 1024;
pub const NGROUPS_MAX = 65536;
pub const ARG_MAX = 131072;
pub const LINK_MAX = 127;
pub const MAX_CANON = 255;
pub const MAX_INPUT = 255;
pub const NAME_MAX = 255;
pub const PATH_MAX = 4096;
pub const PIPE_BUF = 4096;
pub const XATTR_NAME_MAX = 255;
pub const XATTR_SIZE_MAX = 65536;
pub const XATTR_LIST_MAX = 65536;
pub const RTSIG_MAX = 32;
pub const _POSIX_THREAD_KEYS_MAX = 128;
pub const PTHREAD_KEYS_MAX = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS = _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
pub const _POSIX_THREAD_THREADS_MAX = 64;
pub const AIO_PRIO_DELTA_MAX = 20;
pub const PTHREAD_STACK_MIN = 16384;
pub const DELAYTIMER_MAX = 2147483647;
pub const TTY_NAME_MAX = 32;
pub const LOGIN_NAME_MAX = 256;
pub const HOST_NAME_MAX = 64;
pub const MQ_PRIO_MAX = 32768;
pub const SEM_VALUE_MAX = 2147483647;
pub const SSIZE_MAX = LONG_MAX;
pub const _BITS_POSIX2_LIM_H = 1;
pub const _POSIX2_BC_BASE_MAX = 99;
pub const _POSIX2_BC_DIM_MAX = 2048;
pub const _POSIX2_BC_SCALE_MAX = 99;
pub const _POSIX2_BC_STRING_MAX = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX = 2;
pub const _POSIX2_EXPR_NEST_MAX = 32;
pub const _POSIX2_LINE_MAX = 2048;
pub const _POSIX2_RE_DUP_MAX = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX = 14;
pub const BC_BASE_MAX = _POSIX2_BC_BASE_MAX;
pub const BC_DIM_MAX = _POSIX2_BC_DIM_MAX;
pub const BC_SCALE_MAX = _POSIX2_BC_SCALE_MAX;
pub const BC_STRING_MAX = _POSIX2_BC_STRING_MAX;
pub const COLL_WEIGHTS_MAX = 255;
pub const EXPR_NEST_MAX = _POSIX2_EXPR_NEST_MAX;
pub const LINE_MAX = _POSIX2_LINE_MAX;
pub const CHARCLASS_NAME_MAX = 2048;
pub const RE_DUP_MAX = 0x7fff;
pub const SCHAR_MAX = __SCHAR_MAX__;
pub const SHRT_MAX = __SHRT_MAX__;
pub const INT_MAX = __INT_MAX__;
pub const LONG_MAX = __LONG_MAX__;
pub const SCHAR_MIN = -__SCHAR_MAX__ - 1;
pub const SHRT_MIN = -__SHRT_MAX__ - 1;
pub const INT_MIN = -__INT_MAX__ - 1;
pub const LONG_MIN = -__LONG_MAX__ - @as(c_long, 1);
pub const UCHAR_MAX = (__SCHAR_MAX__ * 2) + 1;
pub const USHRT_MAX = (__SHRT_MAX__ * 2) + 1;
pub const UINT_MAX = (__INT_MAX__ * @as(c_uint, 2)) + @as(c_uint, 1);
pub const ULONG_MAX = (__LONG_MAX__ * @as(c_ulong, 2)) + @as(c_ulong, 1);
pub const CHAR_BIT = __CHAR_BIT__;
pub const CHAR_MIN = SCHAR_MIN;
pub const CHAR_MAX = __SCHAR_MAX__;
pub const CRYPTO_F_CMAC_CTX_NEW = 120;
pub const CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;
pub const CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;
pub const CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;
pub const CRYPTO_F_CRYPTO_MEMDUP = 115;
pub const CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;
pub const CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;
pub const CRYPTO_F_CRYPTO_OCB128_INIT = 122;
pub const CRYPTO_F_CRYPTO_SET_EX_DATA = 102;
pub const CRYPTO_F_FIPS_MODE_SET = 109;
pub const CRYPTO_F_GET_AND_LOCK = 113;
pub const CRYPTO_F_OPENSSL_ATEXIT = 114;
pub const CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;
pub const CRYPTO_F_OPENSSL_FOPEN = 119;
pub const CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;
pub const CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;
pub const CRYPTO_F_OPENSSL_LH_NEW = 126;
pub const CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;
pub const CRYPTO_F_OPENSSL_SK_DUP = 128;
pub const CRYPTO_F_PKEY_HMAC_INIT = 123;
pub const CRYPTO_F_PKEY_POLY1305_INIT = 124;
pub const CRYPTO_F_PKEY_SIPHASH_INIT = 125;
pub const CRYPTO_F_SK_RESERVE = 129;
pub const CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;
pub const CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;
pub const CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;
pub const SSLeay = OpenSSL_version_num;
pub const SSLeay_version = OpenSSL_version;
pub const SSLEAY_VERSION_NUMBER = OPENSSL_VERSION_NUMBER;
pub const SSLEAY_VERSION = OPENSSL_VERSION;
pub const SSLEAY_CFLAGS = OPENSSL_CFLAGS;
pub const SSLEAY_BUILT_ON = OPENSSL_BUILT_ON;
pub const SSLEAY_PLATFORM = OPENSSL_PLATFORM;
pub const SSLEAY_DIR = OPENSSL_DIR;
pub const CRYPTO_MEM_CHECK_OFF = 0x0;
pub const CRYPTO_MEM_CHECK_ON = 0x1;
pub const CRYPTO_MEM_CHECK_ENABLE = 0x2;
pub const CRYPTO_MEM_CHECK_DISABLE = 0x3;
pub const CRYPTO_EX_INDEX_SSL = 0;
pub const CRYPTO_EX_INDEX_SSL_CTX = 1;
pub const CRYPTO_EX_INDEX_SSL_SESSION = 2;
pub const CRYPTO_EX_INDEX_X509 = 3;
pub const CRYPTO_EX_INDEX_X509_STORE = 4;
pub const CRYPTO_EX_INDEX_X509_STORE_CTX = 5;
pub const CRYPTO_EX_INDEX_DH = 6;
pub const CRYPTO_EX_INDEX_DSA = 7;
pub const CRYPTO_EX_INDEX_EC_KEY = 8;
pub const CRYPTO_EX_INDEX_RSA = 9;
pub const CRYPTO_EX_INDEX_ENGINE = 10;
pub const CRYPTO_EX_INDEX_UI = 11;
pub const CRYPTO_EX_INDEX_BIO = 12;
pub const CRYPTO_EX_INDEX_APP = 13;
pub const CRYPTO_EX_INDEX_UI_METHOD = 14;
pub const CRYPTO_EX_INDEX_DRBG = 15;
pub const CRYPTO_EX_INDEX__COUNT = 16;
pub inline fn OPENSSL_malloc(num: anytype) @TypeOf(CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_zalloc(num: anytype) @TypeOf(CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_realloc(addr: anytype, num: anytype) @TypeOf(CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_clear_realloc(addr: anytype, old_num: anytype, num: anytype) @TypeOf(CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_clear_free(addr: anytype, num: anytype) @TypeOf(CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_free(addr: anytype) @TypeOf(CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_memdup(str: anytype, s: anytype) @TypeOf(CRYPTO_memdup(str, s, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_memdup(str, s, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_strdup(str: anytype) @TypeOf(CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_strndup(str: anytype, n: anytype) @TypeOf(CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_secure_malloc(num: anytype) @TypeOf(CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_secure_zalloc(num: anytype) @TypeOf(CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_secure_free(addr: anytype) @TypeOf(CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_secure_clear_free(addr: anytype, num: anytype) @TypeOf(CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)) {
    return CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OPENSSL_secure_actual_size(ptr: anytype) @TypeOf(CRYPTO_secure_actual_size(ptr)) {
    return CRYPTO_secure_actual_size(ptr);
}
pub inline fn OPENSSL_MALLOC_MAX_NELEMS(type_1: anytype) @TypeOf(((@as(c_uint, 1) << ((@import("std").meta.sizeof(c_int) * 8) - 1)) - 1) / @import("std").meta.sizeof(type_1)) {
    return ((@as(c_uint, 1) << ((@import("std").meta.sizeof(c_int) * 8) - 1)) - 1) / @import("std").meta.sizeof(type_1);
}
pub const OPENSSL_VERSION = 0;
pub const OPENSSL_CFLAGS = 1;
pub const OPENSSL_BUILT_ON = 2;
pub const OPENSSL_PLATFORM = 3;
pub const OPENSSL_DIR = 4;
pub const OPENSSL_ENGINES_DIR = 5;
pub const CRYPTO_LOCK = 1;
pub const CRYPTO_UNLOCK = 2;
pub const CRYPTO_READ = 4;
pub const CRYPTO_WRITE = 8;
pub inline fn CRYPTO_THREADID_set_callback(threadid_func: anytype) @TypeOf(0) {
    return 0;
}
pub inline fn CRYPTO_THREADID_cmp(a: anytype, b: anytype) @TypeOf(-1) {
    return -1;
}
pub inline fn CRYPTO_THREADID_hash(id: anytype) @TypeOf(@as(c_ulong, 0)) {
    return @as(c_ulong, 0);
}
pub inline fn OpenSSLDie(f: anytype, l: anytype, a: anytype) @TypeOf(OPENSSL_die(a, f, l)) {
    return OPENSSL_die(a, f, l);
}
pub const OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = @as(c_long, 0x00000001);
pub const OPENSSL_INIT_LOAD_CRYPTO_STRINGS = @as(c_long, 0x00000002);
pub const OPENSSL_INIT_ADD_ALL_CIPHERS = @as(c_long, 0x00000004);
pub const OPENSSL_INIT_ADD_ALL_DIGESTS = @as(c_long, 0x00000008);
pub const OPENSSL_INIT_NO_ADD_ALL_CIPHERS = @as(c_long, 0x00000010);
pub const OPENSSL_INIT_NO_ADD_ALL_DIGESTS = @as(c_long, 0x00000020);
pub const OPENSSL_INIT_LOAD_CONFIG = @as(c_long, 0x00000040);
pub const OPENSSL_INIT_NO_LOAD_CONFIG = @as(c_long, 0x00000080);
pub const OPENSSL_INIT_ASYNC = @as(c_long, 0x00000100);
pub const OPENSSL_INIT_ENGINE_RDRAND = @as(c_long, 0x00000200);
pub const OPENSSL_INIT_ENGINE_DYNAMIC = @as(c_long, 0x00000400);
pub const OPENSSL_INIT_ENGINE_OPENSSL = @as(c_long, 0x00000800);
pub const OPENSSL_INIT_ENGINE_CRYPTODEV = @as(c_long, 0x00001000);
pub const OPENSSL_INIT_ENGINE_CAPI = @as(c_long, 0x00002000);
pub const OPENSSL_INIT_ENGINE_PADLOCK = @as(c_long, 0x00004000);
pub const OPENSSL_INIT_ENGINE_AFALG = @as(c_long, 0x00008000);
pub const OPENSSL_INIT_ATFORK = @as(c_long, 0x00020000);
pub const OPENSSL_INIT_NO_ATEXIT = @as(c_long, 0x00080000);
pub const OPENSSL_INIT_ENGINE_ALL_BUILTIN = (((OPENSSL_INIT_ENGINE_RDRAND | OPENSSL_INIT_ENGINE_DYNAMIC) | OPENSSL_INIT_ENGINE_CRYPTODEV) | OPENSSL_INIT_ENGINE_CAPI) | OPENSSL_INIT_ENGINE_PADLOCK;
pub const _PTHREAD_H = 1;
pub const _SCHED_H = 1;
pub const _BITS_SCHED_H = 1;
pub const SCHED_OTHER = 0;
pub const SCHED_FIFO = 1;
pub const SCHED_RR = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM = 1;
pub const _BITS_CPU_SET_H = 1;
pub const __CPU_SETSIZE = 1024;
pub const __NCPUBITS = 8 * @import("std").meta.sizeof(__cpu_mask);
pub inline fn __CPUELT(cpu: anytype) @TypeOf(cpu / __NCPUBITS) {
    return cpu / __NCPUBITS;
}
pub inline fn __CPUMASK(cpu: anytype) @TypeOf((@import("std").meta.cast(__cpu_mask, 1 << (cpu % __NCPUBITS)))) {
    return (@import("std").meta.cast(__cpu_mask, 1 << (cpu % __NCPUBITS)));
}
pub inline fn __CPU_COUNT_S(setsize: anytype, cpusetp: anytype) @TypeOf(__sched_cpucount(setsize, cpusetp)) {
    return __sched_cpucount(setsize, cpusetp);
}
pub inline fn __CPU_EQUAL_S(setsize: anytype, cpusetp1: anytype, cpusetp2: anytype) @TypeOf(__builtin_memcmp(cpusetp1, cpusetp2, setsize) == 0) {
    return __builtin_memcmp(cpusetp1, cpusetp2, setsize) == 0;
}
pub inline fn __CPU_ALLOC_SIZE(count: anytype) @TypeOf((((count + __NCPUBITS) - 1) / __NCPUBITS) * @import("std").meta.sizeof(__cpu_mask)) {
    return (((count + __NCPUBITS) - 1) / __NCPUBITS) * @import("std").meta.sizeof(__cpu_mask);
}
pub inline fn __CPU_ALLOC(count: anytype) @TypeOf(__sched_cpualloc(count)) {
    return __sched_cpualloc(count);
}
pub inline fn __CPU_FREE(cpuset: anytype) @TypeOf(__sched_cpufree(cpuset)) {
    return __sched_cpufree(cpuset);
}
pub const __sched_priority = sched_priority;
pub const _BITS_SETJMP_H = 1;
pub const PTHREAD_CANCELED = ?*c_void - 1;
pub const PTHREAD_ONCE_INIT = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD = -1;
pub const CRYPTO_ONCE_STATIC_INIT = PTHREAD_ONCE_INIT;
pub const COMP_F_BIO_ZLIB_FLUSH = 99;
pub const COMP_F_BIO_ZLIB_NEW = 100;
pub const COMP_F_BIO_ZLIB_READ = 101;
pub const COMP_F_BIO_ZLIB_WRITE = 102;
pub const COMP_F_COMP_CTX_NEW = 103;
pub const COMP_R_ZLIB_DEFLATE_ERROR = 99;
pub const COMP_R_ZLIB_INFLATE_ERROR = 100;
pub const COMP_R_ZLIB_NOT_SUPPORTED = 101;
pub const BIO_F_ACPT_STATE = 100;
pub const BIO_F_ADDRINFO_WRAP = 148;
pub const BIO_F_ADDR_STRINGS = 134;
pub const BIO_F_BIO_ACCEPT = 101;
pub const BIO_F_BIO_ACCEPT_EX = 137;
pub const BIO_F_BIO_ACCEPT_NEW = 152;
pub const BIO_F_BIO_ADDR_NEW = 144;
pub const BIO_F_BIO_BIND = 147;
pub const BIO_F_BIO_CALLBACK_CTRL = 131;
pub const BIO_F_BIO_CONNECT = 138;
pub const BIO_F_BIO_CONNECT_NEW = 153;
pub const BIO_F_BIO_CTRL = 103;
pub const BIO_F_BIO_GETS = 104;
pub const BIO_F_BIO_GET_HOST_IP = 106;
pub const BIO_F_BIO_GET_NEW_INDEX = 102;
pub const BIO_F_BIO_GET_PORT = 107;
pub const BIO_F_BIO_LISTEN = 139;
pub const BIO_F_BIO_LOOKUP = 135;
pub const BIO_F_BIO_LOOKUP_EX = 143;
pub const BIO_F_BIO_MAKE_PAIR = 121;
pub const BIO_F_BIO_METH_NEW = 146;
pub const BIO_F_BIO_NEW = 108;
pub const BIO_F_BIO_NEW_DGRAM_SCTP = 145;
pub const BIO_F_BIO_NEW_FILE = 109;
pub const BIO_F_BIO_NEW_MEM_BUF = 126;
pub const BIO_F_BIO_NREAD = 123;
pub const BIO_F_BIO_NREAD0 = 124;
pub const BIO_F_BIO_NWRITE = 125;
pub const BIO_F_BIO_NWRITE0 = 122;
pub const BIO_F_BIO_PARSE_HOSTSERV = 136;
pub const BIO_F_BIO_PUTS = 110;
pub const BIO_F_BIO_READ = 111;
pub const BIO_F_BIO_READ_EX = 105;
pub const BIO_F_BIO_READ_INTERN = 120;
pub const BIO_F_BIO_SOCKET = 140;
pub const BIO_F_BIO_SOCKET_NBIO = 142;
pub const BIO_F_BIO_SOCK_INFO = 141;
pub const BIO_F_BIO_SOCK_INIT = 112;
pub const BIO_F_BIO_WRITE = 113;
pub const BIO_F_BIO_WRITE_EX = 119;
pub const BIO_F_BIO_WRITE_INTERN = 128;
pub const BIO_F_BUFFER_CTRL = 114;
pub const BIO_F_CONN_CTRL = 127;
pub const BIO_F_CONN_STATE = 115;
pub const BIO_F_DGRAM_SCTP_NEW = 149;
pub const BIO_F_DGRAM_SCTP_READ = 132;
pub const BIO_F_DGRAM_SCTP_WRITE = 133;
pub const BIO_F_DOAPR_OUTCH = 150;
pub const BIO_F_FILE_CTRL = 116;
pub const BIO_F_FILE_READ = 130;
pub const BIO_F_LINEBUFFER_CTRL = 129;
pub const BIO_F_LINEBUFFER_NEW = 151;
pub const BIO_F_MEM_WRITE = 117;
pub const BIO_F_NBIOF_NEW = 154;
pub const BIO_F_SLG_WRITE = 155;
pub const BIO_F_SSL_NEW = 118;
pub const BIO_R_ACCEPT_ERROR = 100;
pub const BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;
pub const BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;
pub const BIO_R_BAD_FOPEN_MODE = 101;
pub const BIO_R_BROKEN_PIPE = 124;
pub const BIO_R_CONNECT_ERROR = 103;
pub const BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;
pub const BIO_R_GETSOCKNAME_ERROR = 132;
pub const BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;
pub const BIO_R_GETTING_SOCKTYPE = 134;
pub const BIO_R_INVALID_ARGUMENT = 125;
pub const BIO_R_INVALID_SOCKET = 135;
pub const BIO_R_IN_USE = 123;
pub const BIO_R_LENGTH_TOO_LONG = 102;
pub const BIO_R_LISTEN_V6_ONLY = 136;
pub const BIO_R_LOOKUP_RETURNED_NOTHING = 142;
pub const BIO_R_MALFORMED_HOST_OR_SERVICE = 130;
pub const BIO_R_NBIO_CONNECT_ERROR = 110;
pub const BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;
pub const BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;
pub const BIO_R_NO_PORT_DEFINED = 113;
pub const BIO_R_NO_SUCH_FILE = 128;
pub const BIO_R_NULL_PARAMETER = 115;
pub const BIO_R_UNABLE_TO_BIND_SOCKET = 117;
pub const BIO_R_UNABLE_TO_CREATE_SOCKET = 118;
pub const BIO_R_UNABLE_TO_KEEPALIVE = 137;
pub const BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;
pub const BIO_R_UNABLE_TO_NODELAY = 138;
pub const BIO_R_UNABLE_TO_REUSEADDR = 139;
pub const BIO_R_UNAVAILABLE_IP_FAMILY = 145;
pub const BIO_R_UNINITIALIZED = 120;
pub const BIO_R_UNKNOWN_INFO_TYPE = 140;
pub const BIO_R_UNSUPPORTED_IP_FAMILY = 146;
pub const BIO_R_UNSUPPORTED_METHOD = 121;
pub const BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;
pub const BIO_R_WRITE_TO_READ_ONLY_BIO = 126;
pub const BIO_R_WSASTARTUP = 122;
pub const BIO_TYPE_DESCRIPTOR = 0x0100;
pub const BIO_TYPE_FILTER = 0x0200;
pub const BIO_TYPE_SOURCE_SINK = 0x0400;
pub const BIO_TYPE_NONE = 0;
pub const BIO_TYPE_MEM = 1 | BIO_TYPE_SOURCE_SINK;
pub const BIO_TYPE_FILE = 2 | BIO_TYPE_SOURCE_SINK;
pub const BIO_TYPE_FD = (4 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR;
pub const BIO_TYPE_SOCKET = (5 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR;
pub const BIO_TYPE_NULL = 6 | BIO_TYPE_SOURCE_SINK;
pub const BIO_TYPE_SSL = 7 | BIO_TYPE_FILTER;
pub const BIO_TYPE_MD = 8 | BIO_TYPE_FILTER;
pub const BIO_TYPE_BUFFER = 9 | BIO_TYPE_FILTER;
pub const BIO_TYPE_CIPHER = 10 | BIO_TYPE_FILTER;
pub const BIO_TYPE_BASE64 = 11 | BIO_TYPE_FILTER;
pub const BIO_TYPE_CONNECT = (12 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR;
pub const BIO_TYPE_ACCEPT = (13 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR;
pub const BIO_TYPE_NBIO_TEST = 16 | BIO_TYPE_FILTER;
pub const BIO_TYPE_NULL_FILTER = 17 | BIO_TYPE_FILTER;
pub const BIO_TYPE_BIO = 19 | BIO_TYPE_SOURCE_SINK;
pub const BIO_TYPE_LINEBUFFER = 20 | BIO_TYPE_FILTER;
pub const BIO_TYPE_DGRAM = (21 | BIO_TYPE_SOURCE_SINK) | BIO_TYPE_DESCRIPTOR;
pub const BIO_TYPE_ASN1 = 22 | BIO_TYPE_FILTER;
pub const BIO_TYPE_COMP = 23 | BIO_TYPE_FILTER;
pub const BIO_TYPE_START = 128;
pub const BIO_NOCLOSE = 0x00;
pub const BIO_CLOSE = 0x01;
pub const BIO_CTRL_RESET = 1;
pub const BIO_CTRL_EOF = 2;
pub const BIO_CTRL_INFO = 3;
pub const BIO_CTRL_SET = 4;
pub const BIO_CTRL_GET = 5;
pub const BIO_CTRL_PUSH = 6;
pub const BIO_CTRL_POP = 7;
pub const BIO_CTRL_GET_CLOSE = 8;
pub const BIO_CTRL_SET_CLOSE = 9;
pub const BIO_CTRL_PENDING = 10;
pub const BIO_CTRL_FLUSH = 11;
pub const BIO_CTRL_DUP = 12;
pub const BIO_CTRL_WPENDING = 13;
pub const BIO_CTRL_SET_CALLBACK = 14;
pub const BIO_CTRL_GET_CALLBACK = 15;
pub const BIO_CTRL_PEEK = 29;
pub const BIO_CTRL_SET_FILENAME = 30;
pub const BIO_CTRL_DGRAM_CONNECT = 31;
pub const BIO_CTRL_DGRAM_SET_CONNECTED = 32;
pub const BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;
pub const BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;
pub const BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;
pub const BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;
pub const BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;
pub const BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;
pub const BIO_CTRL_DGRAM_MTU_DISCOVER = 39;
pub const BIO_CTRL_DGRAM_QUERY_MTU = 40;
pub const BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;
pub const BIO_CTRL_DGRAM_GET_MTU = 41;
pub const BIO_CTRL_DGRAM_SET_MTU = 42;
pub const BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;
pub const BIO_CTRL_DGRAM_GET_PEER = 46;
pub const BIO_CTRL_DGRAM_SET_PEER = 44;
pub const BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;
pub const BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;
pub const BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;
pub const BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;
pub const BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;
pub const BIO_FP_READ = 0x02;
pub const BIO_FP_WRITE = 0x04;
pub const BIO_FP_APPEND = 0x08;
pub const BIO_FP_TEXT = 0x10;
pub const BIO_FLAGS_READ = 0x01;
pub const BIO_FLAGS_WRITE = 0x02;
pub const BIO_FLAGS_IO_SPECIAL = 0x04;
pub const BIO_FLAGS_RWS = (BIO_FLAGS_READ | BIO_FLAGS_WRITE) | BIO_FLAGS_IO_SPECIAL;
pub const BIO_FLAGS_SHOULD_RETRY = 0x08;
pub const BIO_FLAGS_UPLINK = 0;
pub const BIO_FLAGS_BASE64_NO_NL = 0x100;
pub const BIO_FLAGS_MEM_RDONLY = 0x200;
pub const BIO_FLAGS_NONCLEAR_RST = 0x400;
pub const BIO_FLAGS_IN_EOF = 0x800;
pub inline fn BIO_get_flags(b: anytype) @TypeOf(BIO_test_flags(b, ~0x0)) {
    return BIO_test_flags(b, ~0x0);
}
pub inline fn BIO_set_retry_special(b: anytype) @TypeOf(BIO_set_flags(b, BIO_FLAGS_IO_SPECIAL | BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_set_flags(b, BIO_FLAGS_IO_SPECIAL | BIO_FLAGS_SHOULD_RETRY);
}
pub inline fn BIO_set_retry_read(b: anytype) @TypeOf(BIO_set_flags(b, BIO_FLAGS_READ | BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_set_flags(b, BIO_FLAGS_READ | BIO_FLAGS_SHOULD_RETRY);
}
pub inline fn BIO_set_retry_write(b: anytype) @TypeOf(BIO_set_flags(b, BIO_FLAGS_WRITE | BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_set_flags(b, BIO_FLAGS_WRITE | BIO_FLAGS_SHOULD_RETRY);
}
pub inline fn BIO_clear_retry_flags(b: anytype) @TypeOf(BIO_clear_flags(b, BIO_FLAGS_RWS | BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_clear_flags(b, BIO_FLAGS_RWS | BIO_FLAGS_SHOULD_RETRY);
}
pub inline fn BIO_get_retry_flags(b: anytype) @TypeOf(BIO_test_flags(b, BIO_FLAGS_RWS | BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_test_flags(b, BIO_FLAGS_RWS | BIO_FLAGS_SHOULD_RETRY);
}
pub inline fn BIO_should_read(a: anytype) @TypeOf(BIO_test_flags(a, BIO_FLAGS_READ)) {
    return BIO_test_flags(a, BIO_FLAGS_READ);
}
pub inline fn BIO_should_write(a: anytype) @TypeOf(BIO_test_flags(a, BIO_FLAGS_WRITE)) {
    return BIO_test_flags(a, BIO_FLAGS_WRITE);
}
pub inline fn BIO_should_io_special(a: anytype) @TypeOf(BIO_test_flags(a, BIO_FLAGS_IO_SPECIAL)) {
    return BIO_test_flags(a, BIO_FLAGS_IO_SPECIAL);
}
pub inline fn BIO_retry_type(a: anytype) @TypeOf(BIO_test_flags(a, BIO_FLAGS_RWS)) {
    return BIO_test_flags(a, BIO_FLAGS_RWS);
}
pub inline fn BIO_should_retry(a: anytype) @TypeOf(BIO_test_flags(a, BIO_FLAGS_SHOULD_RETRY)) {
    return BIO_test_flags(a, BIO_FLAGS_SHOULD_RETRY);
}
pub const BIO_RR_SSL_X509_LOOKUP = 0x01;
pub const BIO_RR_CONNECT = 0x02;
pub const BIO_RR_ACCEPT = 0x03;
pub const BIO_CB_FREE = 0x01;
pub const BIO_CB_READ = 0x02;
pub const BIO_CB_WRITE = 0x03;
pub const BIO_CB_PUTS = 0x04;
pub const BIO_CB_GETS = 0x05;
pub const BIO_CB_CTRL = 0x06;
pub const BIO_CB_RETURN = 0x80;
pub inline fn BIO_CB_return(a: anytype) @TypeOf(a | BIO_CB_RETURN) {
    return a | BIO_CB_RETURN;
}
pub inline fn BIO_cb_pre(a: anytype) @TypeOf(!(a & BIO_CB_RETURN != 0)) {
    return !(a & BIO_CB_RETURN != 0);
}
pub inline fn BIO_cb_post(a: anytype) @TypeOf(a & BIO_CB_RETURN) {
    return a & BIO_CB_RETURN;
}
pub const BIO_C_SET_CONNECT = 100;
pub const BIO_C_DO_STATE_MACHINE = 101;
pub const BIO_C_SET_NBIO = 102;
pub const BIO_C_SET_FD = 104;
pub const BIO_C_GET_FD = 105;
pub const BIO_C_SET_FILE_PTR = 106;
pub const BIO_C_GET_FILE_PTR = 107;
pub const BIO_C_SET_FILENAME = 108;
pub const BIO_C_SET_SSL = 109;
pub const BIO_C_GET_SSL = 110;
pub const BIO_C_SET_MD = 111;
pub const BIO_C_GET_MD = 112;
pub const BIO_C_GET_CIPHER_STATUS = 113;
pub const BIO_C_SET_BUF_MEM = 114;
pub const BIO_C_GET_BUF_MEM_PTR = 115;
pub const BIO_C_GET_BUFF_NUM_LINES = 116;
pub const BIO_C_SET_BUFF_SIZE = 117;
pub const BIO_C_SET_ACCEPT = 118;
pub const BIO_C_SSL_MODE = 119;
pub const BIO_C_GET_MD_CTX = 120;
pub const BIO_C_SET_BUFF_READ_DATA = 122;
pub const BIO_C_GET_CONNECT = 123;
pub const BIO_C_GET_ACCEPT = 124;
pub const BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;
pub const BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;
pub const BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;
pub const BIO_C_FILE_SEEK = 128;
pub const BIO_C_GET_CIPHER_CTX = 129;
pub const BIO_C_SET_BUF_MEM_EOF_RETURN = 130;
pub const BIO_C_SET_BIND_MODE = 131;
pub const BIO_C_GET_BIND_MODE = 132;
pub const BIO_C_FILE_TELL = 133;
pub const BIO_C_GET_SOCKS = 134;
pub const BIO_C_SET_SOCKS = 135;
pub const BIO_C_SET_WRITE_BUF_SIZE = 136;
pub const BIO_C_GET_WRITE_BUF_SIZE = 137;
pub const BIO_C_MAKE_BIO_PAIR = 138;
pub const BIO_C_DESTROY_BIO_PAIR = 139;
pub const BIO_C_GET_WRITE_GUARANTEE = 140;
pub const BIO_C_GET_READ_REQUEST = 141;
pub const BIO_C_SHUTDOWN_WR = 142;
pub const BIO_C_NREAD0 = 143;
pub const BIO_C_NREAD = 144;
pub const BIO_C_NWRITE0 = 145;
pub const BIO_C_NWRITE = 146;
pub const BIO_C_RESET_READ_REQUEST = 147;
pub const BIO_C_SET_MD_CTX = 148;
pub const BIO_C_SET_PREFIX = 149;
pub const BIO_C_GET_PREFIX = 150;
pub const BIO_C_SET_SUFFIX = 151;
pub const BIO_C_GET_SUFFIX = 152;
pub const BIO_C_SET_EX_ARG = 153;
pub const BIO_C_GET_EX_ARG = 154;
pub const BIO_C_SET_CONNECT_MODE = 155;
pub inline fn BIO_set_app_data(s: anytype, arg: anytype) @TypeOf(BIO_set_ex_data(s, 0, arg)) {
    return BIO_set_ex_data(s, 0, arg);
}
pub inline fn BIO_get_app_data(s: anytype) @TypeOf(BIO_get_ex_data(s, 0)) {
    return BIO_get_ex_data(s, 0);
}
pub inline fn BIO_set_nbio(b: anytype, n: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_NBIO, n, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_NBIO, n, NULL);
}
pub const BIO_FAMILY_IPV4 = 4;
pub const BIO_FAMILY_IPV6 = 6;
pub const BIO_FAMILY_IPANY = 256;
pub inline fn BIO_set_conn_hostname(b: anytype, name: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_CONNECT, 0, (@import("std").meta.cast([*c]u8, name)))) {
    return BIO_ctrl(b, BIO_C_SET_CONNECT, 0, (@import("std").meta.cast([*c]u8, name)));
}
pub inline fn BIO_set_conn_port(b: anytype, port: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_CONNECT, 1, (@import("std").meta.cast([*c]u8, port)))) {
    return BIO_ctrl(b, BIO_C_SET_CONNECT, 1, (@import("std").meta.cast([*c]u8, port)));
}
pub inline fn BIO_set_conn_address(b: anytype, addr: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_CONNECT, 2, (@import("std").meta.cast([*c]u8, addr)))) {
    return BIO_ctrl(b, BIO_C_SET_CONNECT, 2, (@import("std").meta.cast([*c]u8, addr)));
}
pub inline fn BIO_set_conn_ip_family(b: anytype, f: anytype) @TypeOf(BIO_int_ctrl(b, BIO_C_SET_CONNECT, 3, f)) {
    return BIO_int_ctrl(b, BIO_C_SET_CONNECT, 3, f);
}
pub inline fn BIO_get_conn_ip_family(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_CONNECT, 3, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_CONNECT, 3, NULL);
}
pub inline fn BIO_set_conn_mode(b: anytype, n: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_CONNECT_MODE, n, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_CONNECT_MODE, n, NULL);
}
pub inline fn BIO_set_accept_name(b: anytype, name: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_ACCEPT, 0, (@import("std").meta.cast([*c]u8, name)))) {
    return BIO_ctrl(b, BIO_C_SET_ACCEPT, 0, (@import("std").meta.cast([*c]u8, name)));
}
pub inline fn BIO_set_accept_port(b: anytype, port: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_ACCEPT, 1, (@import("std").meta.cast([*c]u8, port)))) {
    return BIO_ctrl(b, BIO_C_SET_ACCEPT, 1, (@import("std").meta.cast([*c]u8, port)));
}
pub inline fn BIO_set_nbio_accept(b: anytype, n: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_ACCEPT, 2, if (n) ?*c_void ++ "a" else NULL)) {
    return BIO_ctrl(b, BIO_C_SET_ACCEPT, 2, if (n) ?*c_void ++ "a" else NULL);
}
pub inline fn BIO_set_accept_bios(b: anytype, bio: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_ACCEPT, 3, (@import("std").meta.cast([*c]u8, bio)))) {
    return BIO_ctrl(b, BIO_C_SET_ACCEPT, 3, (@import("std").meta.cast([*c]u8, bio)));
}
pub inline fn BIO_set_accept_ip_family(b: anytype, f: anytype) @TypeOf(BIO_int_ctrl(b, BIO_C_SET_ACCEPT, 4, f)) {
    return BIO_int_ctrl(b, BIO_C_SET_ACCEPT, 4, f);
}
pub inline fn BIO_get_accept_ip_family(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_ACCEPT, 4, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_ACCEPT, 4, NULL);
}
pub const BIO_BIND_NORMAL = 0;
pub const BIO_BIND_REUSEADDR = BIO_SOCK_REUSEADDR;
pub const BIO_BIND_REUSEADDR_IF_UNUSED = BIO_SOCK_REUSEADDR;
pub inline fn BIO_set_bind_mode(b: anytype, mode: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_BIND_MODE, mode, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_BIND_MODE, mode, NULL);
}
pub inline fn BIO_get_bind_mode(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_BIND_MODE, 0, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_BIND_MODE, 0, NULL);
}
pub inline fn BIO_do_connect(b: anytype) @TypeOf(BIO_do_handshake(b)) {
    return BIO_do_handshake(b);
}
pub inline fn BIO_do_accept(b: anytype) @TypeOf(BIO_do_handshake(b)) {
    return BIO_do_handshake(b);
}
pub inline fn BIO_do_handshake(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_DO_STATE_MACHINE, 0, NULL)) {
    return BIO_ctrl(b, BIO_C_DO_STATE_MACHINE, 0, NULL);
}
pub inline fn BIO_set_fd(b: anytype, fd: anytype, c: anytype) @TypeOf(BIO_int_ctrl(b, BIO_C_SET_FD, c, fd)) {
    return BIO_int_ctrl(b, BIO_C_SET_FD, c, fd);
}
pub inline fn BIO_get_fd(b: anytype, c: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_FD, 0, (@import("std").meta.cast([*c]u8, c)))) {
    return BIO_ctrl(b, BIO_C_GET_FD, 0, (@import("std").meta.cast([*c]u8, c)));
}
pub inline fn BIO_set_fp(b: anytype, fp: anytype, c: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_FILE_PTR, c, (@import("std").meta.cast([*c]u8, fp)))) {
    return BIO_ctrl(b, BIO_C_SET_FILE_PTR, c, (@import("std").meta.cast([*c]u8, fp)));
}
pub inline fn BIO_get_fp(b: anytype, fpp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_FILE_PTR, 0, (@import("std").meta.cast([*c]u8, fpp)))) {
    return BIO_ctrl(b, BIO_C_GET_FILE_PTR, 0, (@import("std").meta.cast([*c]u8, fpp)));
}
pub inline fn BIO_seek(b: anytype, ofs: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_FILE_SEEK, ofs, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_FILE_SEEK, ofs, NULL)));
}
pub inline fn BIO_tell(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_FILE_TELL, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_FILE_TELL, 0, NULL)));
}
pub inline fn BIO_read_filename(b: anytype, name: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_READ, (@import("std").meta.cast([*c]u8, name)))))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_READ, (@import("std").meta.cast([*c]u8, name)))));
}
pub inline fn BIO_write_filename(b: anytype, name: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_WRITE, name)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_WRITE, name)));
}
pub inline fn BIO_append_filename(b: anytype, name: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_APPEND, name)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, BIO_CLOSE | BIO_FP_APPEND, name)));
}
pub inline fn BIO_rw_filename(b: anytype, name: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, (BIO_CLOSE | BIO_FP_READ) | BIO_FP_WRITE, name)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_FILENAME, (BIO_CLOSE | BIO_FP_READ) | BIO_FP_WRITE, name)));
}
pub inline fn BIO_set_ssl(b: anytype, ssl: anytype, c: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_SSL, c, (@import("std").meta.cast([*c]u8, ssl)))) {
    return BIO_ctrl(b, BIO_C_SET_SSL, c, (@import("std").meta.cast([*c]u8, ssl)));
}
pub inline fn BIO_get_ssl(b: anytype, sslp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_SSL, 0, (@import("std").meta.cast([*c]u8, sslp)))) {
    return BIO_ctrl(b, BIO_C_GET_SSL, 0, (@import("std").meta.cast([*c]u8, sslp)));
}
pub inline fn BIO_set_ssl_mode(b: anytype, client: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SSL_MODE, client, NULL)) {
    return BIO_ctrl(b, BIO_C_SSL_MODE, client, NULL);
}
pub inline fn BIO_set_ssl_renegotiate_bytes(b: anytype, num: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_SSL_RENEGOTIATE_BYTES, num, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_SSL_RENEGOTIATE_BYTES, num, NULL);
}
pub inline fn BIO_get_num_renegotiates(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_SSL_NUM_RENEGOTIATES, 0, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_SSL_NUM_RENEGOTIATES, 0, NULL);
}
pub inline fn BIO_set_ssl_renegotiate_timeout(b: anytype, seconds: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT, seconds, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT, seconds, NULL);
}
pub inline fn BIO_get_mem_data(b: anytype, pp: anytype) @TypeOf(BIO_ctrl(b, BIO_CTRL_INFO, 0, (@import("std").meta.cast([*c]u8, pp)))) {
    return BIO_ctrl(b, BIO_CTRL_INFO, 0, (@import("std").meta.cast([*c]u8, pp)));
}
pub inline fn BIO_set_mem_buf(b: anytype, bm: anytype, c: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_BUF_MEM, c, (@import("std").meta.cast([*c]u8, bm)))) {
    return BIO_ctrl(b, BIO_C_SET_BUF_MEM, c, (@import("std").meta.cast([*c]u8, bm)));
}
pub inline fn BIO_get_mem_ptr(b: anytype, pp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_BUF_MEM_PTR, 0, (@import("std").meta.cast([*c]u8, pp)))) {
    return BIO_ctrl(b, BIO_C_GET_BUF_MEM_PTR, 0, (@import("std").meta.cast([*c]u8, pp)));
}
pub inline fn BIO_set_mem_eof_return(b: anytype, v: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_BUF_MEM_EOF_RETURN, v, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_BUF_MEM_EOF_RETURN, v, NULL);
}
pub inline fn BIO_get_buffer_num_lines(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_BUFF_NUM_LINES, 0, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_BUFF_NUM_LINES, 0, NULL);
}
pub inline fn BIO_set_buffer_size(b: anytype, size: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_BUFF_SIZE, size, NULL)) {
    return BIO_ctrl(b, BIO_C_SET_BUFF_SIZE, size, NULL);
}
pub inline fn BIO_set_read_buffer_size(b: anytype, size: anytype) @TypeOf(BIO_int_ctrl(b, BIO_C_SET_BUFF_SIZE, size, 0)) {
    return BIO_int_ctrl(b, BIO_C_SET_BUFF_SIZE, size, 0);
}
pub inline fn BIO_set_write_buffer_size(b: anytype, size: anytype) @TypeOf(BIO_int_ctrl(b, BIO_C_SET_BUFF_SIZE, size, 1)) {
    return BIO_int_ctrl(b, BIO_C_SET_BUFF_SIZE, size, 1);
}
pub inline fn BIO_set_buffer_read_data(b: anytype, buf: anytype, num: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_BUFF_READ_DATA, num, buf)) {
    return BIO_ctrl(b, BIO_C_SET_BUFF_READ_DATA, num, buf);
}
pub inline fn BIO_dup_state(b: anytype, ret: anytype) @TypeOf(BIO_ctrl(b, BIO_CTRL_DUP, 0, (@import("std").meta.cast([*c]u8, ret)))) {
    return BIO_ctrl(b, BIO_CTRL_DUP, 0, (@import("std").meta.cast([*c]u8, ret)));
}
pub inline fn BIO_reset(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_RESET, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_RESET, 0, NULL)));
}
pub inline fn BIO_eof(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_EOF, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_EOF, 0, NULL)));
}
pub inline fn BIO_set_close(b: anytype, c: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_SET_CLOSE, c, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_SET_CLOSE, c, NULL)));
}
pub inline fn BIO_get_close(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_GET_CLOSE, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_GET_CLOSE, 0, NULL)));
}
pub inline fn BIO_pending(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_PENDING, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_PENDING, 0, NULL)));
}
pub inline fn BIO_wpending(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_WPENDING, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_WPENDING, 0, NULL)));
}
pub inline fn BIO_flush(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_FLUSH, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_FLUSH, 0, NULL)));
}
pub inline fn BIO_get_info_callback(b: anytype, cbp: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_GET_CALLBACK, 0, cbp)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_GET_CALLBACK, 0, cbp)));
}
pub inline fn BIO_set_info_callback(b: anytype, cb: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_callback_ctrl(b, BIO_CTRL_SET_CALLBACK, cb)))) {
    return (@import("std").meta.cast(c_int, BIO_callback_ctrl(b, BIO_CTRL_SET_CALLBACK, cb)));
}
pub inline fn BIO_buffer_get_num_lines(b: anytype) @TypeOf(BIO_ctrl(b, BIO_CTRL_GET, 0, NULL)) {
    return BIO_ctrl(b, BIO_CTRL_GET, 0, NULL);
}
pub inline fn BIO_buffer_peek(b: anytype, s: anytype, l: anytype) @TypeOf(BIO_ctrl(b, BIO_CTRL_PEEK, l, s)) {
    return BIO_ctrl(b, BIO_CTRL_PEEK, l, s);
}
pub inline fn BIO_set_write_buf_size(b: anytype, size: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_WRITE_BUF_SIZE, size, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SET_WRITE_BUF_SIZE, size, NULL)));
}
pub inline fn BIO_get_write_buf_size(b: anytype, size: anytype) @TypeOf((@import("std").meta.cast(usize, BIO_ctrl(b, BIO_C_GET_WRITE_BUF_SIZE, size, NULL)))) {
    return (@import("std").meta.cast(usize, BIO_ctrl(b, BIO_C_GET_WRITE_BUF_SIZE, size, NULL)));
}
pub inline fn BIO_make_bio_pair(b1: anytype, b2: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b1, BIO_C_MAKE_BIO_PAIR, 0, b2)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b1, BIO_C_MAKE_BIO_PAIR, 0, b2)));
}
pub inline fn BIO_destroy_bio_pair(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_DESTROY_BIO_PAIR, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_DESTROY_BIO_PAIR, 0, NULL)));
}
pub inline fn BIO_shutdown_wr(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SHUTDOWN_WR, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_SHUTDOWN_WR, 0, NULL)));
}
pub inline fn BIO_get_write_guarantee(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_GET_WRITE_GUARANTEE, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_GET_WRITE_GUARANTEE, 0, NULL)));
}
pub inline fn BIO_get_read_request(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_GET_READ_REQUEST, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_C_GET_READ_REQUEST, 0, NULL)));
}
pub inline fn BIO_ctrl_dgram_connect(b: anytype, peer: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_CONNECT, 0, (@import("std").meta.cast([*c]u8, peer)))))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_CONNECT, 0, (@import("std").meta.cast([*c]u8, peer)))));
}
pub inline fn BIO_ctrl_set_connected(b: anytype, peer: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_SET_CONNECTED, 0, (@import("std").meta.cast([*c]u8, peer)))))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_SET_CONNECTED, 0, (@import("std").meta.cast([*c]u8, peer)))));
}
pub inline fn BIO_dgram_recv_timedout(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)));
}
pub inline fn BIO_dgram_send_timedout(b: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)));
}
pub inline fn BIO_dgram_get_peer(b: anytype, peer: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_PEER, 0, (@import("std").meta.cast([*c]u8, peer)))))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_PEER, 0, (@import("std").meta.cast([*c]u8, peer)))));
}
pub inline fn BIO_dgram_set_peer(b: anytype, peer: anytype) @TypeOf((@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_SET_PEER, 0, (@import("std").meta.cast([*c]u8, peer)))))) {
    return (@import("std").meta.cast(c_int, BIO_ctrl(b, BIO_CTRL_DGRAM_SET_PEER, 0, (@import("std").meta.cast([*c]u8, peer)))));
}
pub inline fn BIO_dgram_get_mtu_overhead(b: anytype) @TypeOf((@import("std").meta.cast(c_uint, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_MTU_OVERHEAD, 0, NULL)))) {
    return (@import("std").meta.cast(c_uint, BIO_ctrl(b, BIO_CTRL_DGRAM_GET_MTU_OVERHEAD, 0, NULL)));
}
pub inline fn BIO_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef);
}
pub const BIO_SOCK_REUSEADDR = 0x01;
pub const BIO_SOCK_V6_ONLY = 0x02;
pub const BIO_SOCK_KEEPALIVE = 0x04;
pub const BIO_SOCK_NONBLOCK = 0x08;
pub const BIO_SOCK_NODELAY = 0x10;
pub const ossl_bio__printf__ = __printf__;
pub const BUF_F_BUF_MEM_GROW = 100;
pub const BUF_F_BUF_MEM_GROW_CLEAN = 105;
pub const BUF_F_BUF_MEM_NEW = 101;
pub inline fn offsetof(t: anytype, d: anytype) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub inline fn BUF_strdup(s: anytype) @TypeOf(OPENSSL_strdup(s)) {
    return OPENSSL_strdup(s);
}
pub inline fn BUF_strndup(s: anytype, size: anytype) @TypeOf(OPENSSL_strndup(s, size)) {
    return OPENSSL_strndup(s, size);
}
pub inline fn BUF_memdup(data: anytype, size: anytype) @TypeOf(OPENSSL_memdup(data, size)) {
    return OPENSSL_memdup(data, size);
}
pub inline fn BUF_strlcpy(dst: anytype, src: anytype, size: anytype) @TypeOf(OPENSSL_strlcpy(dst, src, size)) {
    return OPENSSL_strlcpy(dst, src, size);
}
pub inline fn BUF_strlcat(dst: anytype, src: anytype, size: anytype) @TypeOf(OPENSSL_strlcat(dst, src, size)) {
    return OPENSSL_strlcat(dst, src, size);
}
pub inline fn BUF_strnlen(str: anytype, maxlen: anytype) @TypeOf(OPENSSL_strnlen(str, maxlen)) {
    return OPENSSL_strnlen(str, maxlen);
}
pub const BUF_MEM_FLAG_SECURE = 0x01;
pub const EVP_F_AESNI_INIT_KEY = 165;
pub const EVP_F_AESNI_XTS_INIT_KEY = 207;
pub const EVP_F_AES_GCM_CTRL = 196;
pub const EVP_F_AES_INIT_KEY = 133;
pub const EVP_F_AES_OCB_CIPHER = 169;
pub const EVP_F_AES_T4_INIT_KEY = 178;
pub const EVP_F_AES_T4_XTS_INIT_KEY = 208;
pub const EVP_F_AES_WRAP_CIPHER = 170;
pub const EVP_F_AES_XTS_INIT_KEY = 209;
pub const EVP_F_ALG_MODULE_INIT = 177;
pub const EVP_F_ARIA_CCM_INIT_KEY = 175;
pub const EVP_F_ARIA_GCM_CTRL = 197;
pub const EVP_F_ARIA_GCM_INIT_KEY = 176;
pub const EVP_F_ARIA_INIT_KEY = 185;
pub const EVP_F_B64_NEW = 198;
pub const EVP_F_CAMELLIA_INIT_KEY = 159;
pub const EVP_F_CHACHA20_POLY1305_CTRL = 182;
pub const EVP_F_CMLL_T4_INIT_KEY = 179;
pub const EVP_F_DES_EDE3_WRAP_CIPHER = 171;
pub const EVP_F_DO_SIGVER_INIT = 161;
pub const EVP_F_ENC_NEW = 199;
pub const EVP_F_EVP_CIPHERINIT_EX = 123;
pub const EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 204;
pub const EVP_F_EVP_CIPHER_CTX_COPY = 163;
pub const EVP_F_EVP_CIPHER_CTX_CTRL = 124;
pub const EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 122;
pub const EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 205;
pub const EVP_F_EVP_DECRYPTFINAL_EX = 101;
pub const EVP_F_EVP_DECRYPTUPDATE = 166;
pub const EVP_F_EVP_DIGESTFINALXOF = 174;
pub const EVP_F_EVP_DIGESTINIT_EX = 128;
pub const EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 219;
pub const EVP_F_EVP_ENCRYPTFINAL_EX = 127;
pub const EVP_F_EVP_ENCRYPTUPDATE = 167;
pub const EVP_F_EVP_MD_CTX_COPY_EX = 110;
pub const EVP_F_EVP_MD_SIZE = 162;
pub const EVP_F_EVP_OPENINIT = 102;
pub const EVP_F_EVP_PBE_ALG_ADD = 115;
pub const EVP_F_EVP_PBE_ALG_ADD_TYPE = 160;
pub const EVP_F_EVP_PBE_CIPHERINIT = 116;
pub const EVP_F_EVP_PBE_SCRYPT = 181;
pub const EVP_F_EVP_PKCS82PKEY = 111;
pub const EVP_F_EVP_PKEY2PKCS8 = 113;
pub const EVP_F_EVP_PKEY_ASN1_ADD0 = 188;
pub const EVP_F_EVP_PKEY_CHECK = 186;
pub const EVP_F_EVP_PKEY_COPY_PARAMETERS = 103;
pub const EVP_F_EVP_PKEY_CTX_CTRL = 137;
pub const EVP_F_EVP_PKEY_CTX_CTRL_STR = 150;
pub const EVP_F_EVP_PKEY_CTX_DUP = 156;
pub const EVP_F_EVP_PKEY_CTX_MD = 168;
pub const EVP_F_EVP_PKEY_DECRYPT = 104;
pub const EVP_F_EVP_PKEY_DECRYPT_INIT = 138;
pub const EVP_F_EVP_PKEY_DECRYPT_OLD = 151;
pub const EVP_F_EVP_PKEY_DERIVE = 153;
pub const EVP_F_EVP_PKEY_DERIVE_INIT = 154;
pub const EVP_F_EVP_PKEY_DERIVE_SET_PEER = 155;
pub const EVP_F_EVP_PKEY_ENCRYPT = 105;
pub const EVP_F_EVP_PKEY_ENCRYPT_INIT = 139;
pub const EVP_F_EVP_PKEY_ENCRYPT_OLD = 152;
pub const EVP_F_EVP_PKEY_GET0_DH = 119;
pub const EVP_F_EVP_PKEY_GET0_DSA = 120;
pub const EVP_F_EVP_PKEY_GET0_EC_KEY = 131;
pub const EVP_F_EVP_PKEY_GET0_HMAC = 183;
pub const EVP_F_EVP_PKEY_GET0_POLY1305 = 184;
pub const EVP_F_EVP_PKEY_GET0_RSA = 121;
pub const EVP_F_EVP_PKEY_GET0_SIPHASH = 172;
pub const EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 202;
pub const EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 203;
pub const EVP_F_EVP_PKEY_KEYGEN = 146;
pub const EVP_F_EVP_PKEY_KEYGEN_INIT = 147;
pub const EVP_F_EVP_PKEY_METH_ADD0 = 194;
pub const EVP_F_EVP_PKEY_METH_NEW = 195;
pub const EVP_F_EVP_PKEY_NEW = 106;
pub const EVP_F_EVP_PKEY_NEW_CMAC_KEY = 193;
pub const EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 191;
pub const EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 192;
pub const EVP_F_EVP_PKEY_PARAMGEN = 148;
pub const EVP_F_EVP_PKEY_PARAMGEN_INIT = 149;
pub const EVP_F_EVP_PKEY_PARAM_CHECK = 189;
pub const EVP_F_EVP_PKEY_PUBLIC_CHECK = 190;
pub const EVP_F_EVP_PKEY_SET1_ENGINE = 187;
pub const EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 206;
pub const EVP_F_EVP_PKEY_SIGN = 140;
pub const EVP_F_EVP_PKEY_SIGN_INIT = 141;
pub const EVP_F_EVP_PKEY_VERIFY = 142;
pub const EVP_F_EVP_PKEY_VERIFY_INIT = 143;
pub const EVP_F_EVP_PKEY_VERIFY_RECOVER = 144;
pub const EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 145;
pub const EVP_F_EVP_SIGNFINAL = 107;
pub const EVP_F_EVP_VERIFYFINAL = 108;
pub const EVP_F_INT_CTX_NEW = 157;
pub const EVP_F_OK_NEW = 200;
pub const EVP_F_PKCS5_PBE_KEYIVGEN = 117;
pub const EVP_F_PKCS5_V2_PBE_KEYIVGEN = 118;
pub const EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 164;
pub const EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 180;
pub const EVP_F_PKEY_SET_TYPE = 158;
pub const EVP_F_RC2_MAGIC_TO_METH = 109;
pub const EVP_F_RC5_CTRL = 125;
pub const EVP_F_R_32_12_16_INIT_KEY = 242;
pub const EVP_F_S390X_AES_GCM_CTRL = 201;
pub const EVP_F_UPDATE = 173;
pub const EVP_R_AES_KEY_SETUP_FAILED = 143;
pub const EVP_R_ARIA_KEY_SETUP_FAILED = 176;
pub const EVP_R_BAD_DECRYPT = 100;
pub const EVP_R_BAD_KEY_LENGTH = 195;
pub const EVP_R_BUFFER_TOO_SMALL = 155;
pub const EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;
pub const EVP_R_CIPHER_PARAMETER_ERROR = 122;
pub const EVP_R_COMMAND_NOT_SUPPORTED = 147;
pub const EVP_R_COPY_ERROR = 173;
pub const EVP_R_CTRL_NOT_IMPLEMENTED = 132;
pub const EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;
pub const EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;
pub const EVP_R_DECODE_ERROR = 114;
pub const EVP_R_DIFFERENT_KEY_TYPES = 101;
pub const EVP_R_DIFFERENT_PARAMETERS = 153;
pub const EVP_R_ERROR_LOADING_SECTION = 165;
pub const EVP_R_ERROR_SETTING_FIPS_MODE = 166;
pub const EVP_R_EXPECTING_AN_HMAC_KEY = 174;
pub const EVP_R_EXPECTING_AN_RSA_KEY = 127;
pub const EVP_R_EXPECTING_A_DH_KEY = 128;
pub const EVP_R_EXPECTING_A_DSA_KEY = 129;
pub const EVP_R_EXPECTING_A_EC_KEY = 142;
pub const EVP_R_EXPECTING_A_POLY1305_KEY = 164;
pub const EVP_R_EXPECTING_A_SIPHASH_KEY = 175;
pub const EVP_R_FIPS_MODE_NOT_SUPPORTED = 167;
pub const EVP_R_GET_RAW_KEY_FAILED = 182;
pub const EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;
pub const EVP_R_INITIALIZATION_ERROR = 134;
pub const EVP_R_INPUT_NOT_INITIALIZED = 111;
pub const EVP_R_INVALID_DIGEST = 152;
pub const EVP_R_INVALID_FIPS_MODE = 168;
pub const EVP_R_INVALID_IV_LENGTH = 194;
pub const EVP_R_INVALID_KEY = 163;
pub const EVP_R_INVALID_KEY_LENGTH = 130;
pub const EVP_R_INVALID_OPERATION = 148;
pub const EVP_R_KEYGEN_FAILURE = 120;
pub const EVP_R_KEY_SETUP_FAILED = 180;
pub const EVP_R_MEMORY_LIMIT_EXCEEDED = 172;
pub const EVP_R_MESSAGE_DIGEST_IS_NULL = 159;
pub const EVP_R_METHOD_NOT_SUPPORTED = 144;
pub const EVP_R_MISSING_PARAMETERS = 103;
pub const EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;
pub const EVP_R_NO_CIPHER_SET = 131;
pub const EVP_R_NO_DEFAULT_DIGEST = 158;
pub const EVP_R_NO_DIGEST_SET = 139;
pub const EVP_R_NO_KEY_SET = 154;
pub const EVP_R_NO_OPERATION_SET = 149;
pub const EVP_R_ONLY_ONESHOT_SUPPORTED = 177;
pub const EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;
pub const EVP_R_OPERATON_NOT_INITIALIZED = 151;
pub const EVP_R_PARTIALLY_OVERLAPPING = 162;
pub const EVP_R_PBKDF2_ERROR = 181;
pub const EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;
pub const EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;
pub const EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;
pub const EVP_R_PUBLIC_KEY_NOT_RSA = 106;
pub const EVP_R_UNKNOWN_CIPHER = 160;
pub const EVP_R_UNKNOWN_DIGEST = 161;
pub const EVP_R_UNKNOWN_OPTION = 169;
pub const EVP_R_UNKNOWN_PBE_ALGORITHM = 121;
pub const EVP_R_UNSUPPORTED_ALGORITHM = 156;
pub const EVP_R_UNSUPPORTED_CIPHER = 107;
pub const EVP_R_UNSUPPORTED_KEYLENGTH = 123;
pub const EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;
pub const EVP_R_UNSUPPORTED_KEY_SIZE = 108;
pub const EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;
pub const EVP_R_UNSUPPORTED_PRF = 125;
pub const EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;
pub const EVP_R_UNSUPPORTED_SALT_TYPE = 126;
pub const EVP_R_WRAP_MODE_NOT_ALLOWED = 170;
pub const EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;
pub const EVP_R_XTS_DUPLICATED_KEYS = 183;
pub const EVP_MAX_MD_SIZE = 64;
pub const EVP_MAX_KEY_LENGTH = 64;
pub const EVP_MAX_IV_LENGTH = 16;
pub const EVP_MAX_BLOCK_LENGTH = 32;
pub const PKCS5_SALT_LEN = 8;
pub const PKCS5_DEFAULT_ITER = 2048;
pub const SN_undef = "UNDEF";
pub const LN_undef = "undefined";
pub const NID_undef = 0;
pub const OBJ_undef = @as(c_long, 0);
pub const SN_itu_t = "ITU-T";
pub const LN_itu_t = "itu-t";
pub const NID_itu_t = 645;
pub const OBJ_itu_t = @as(c_long, 0);
pub const NID_ccitt = 404;
pub const OBJ_ccitt = OBJ_itu_t;
pub const SN_iso = "ISO";
pub const LN_iso = "iso";
pub const NID_iso = 181;
pub const OBJ_iso = @as(c_long, 1);
pub const SN_joint_iso_itu_t = "JOINT-ISO-ITU-T";
pub const LN_joint_iso_itu_t = "joint-iso-itu-t";
pub const NID_joint_iso_itu_t = 646;
pub const OBJ_joint_iso_itu_t = @as(c_long, 2);
pub const NID_joint_iso_ccitt = 393;
pub const OBJ_joint_iso_ccitt = OBJ_joint_iso_itu_t;
pub const SN_member_body = "member-body";
pub const LN_member_body = "ISO Member Body";
pub const NID_member_body = 182;
pub const OBJ_member_body = blk: {
    _ = OBJ_iso;
    break :blk @as(c_long, 2);
};
pub const SN_identified_organization = "identified-organization";
pub const NID_identified_organization = 676;
pub const OBJ_identified_organization = blk: {
    _ = OBJ_iso;
    break :blk @as(c_long, 3);
};
pub const SN_hmac_md5 = "HMAC-MD5";
pub const LN_hmac_md5 = "hmac-md5";
pub const NID_hmac_md5 = 780;
pub const OBJ_hmac_md5 = blk: {
    _ = OBJ_identified_organization;
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    _ = @as(c_long, 5);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_hmac_sha1 = "HMAC-SHA1";
pub const LN_hmac_sha1 = "hmac-sha1";
pub const NID_hmac_sha1 = 781;
pub const OBJ_hmac_sha1 = blk: {
    _ = OBJ_identified_organization;
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    _ = @as(c_long, 5);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_x509ExtAdmission = "x509ExtAdmission";
pub const LN_x509ExtAdmission = "Professional Information or basis for Admission";
pub const NID_x509ExtAdmission = 1093;
pub const OBJ_x509ExtAdmission = blk: {
    _ = OBJ_identified_organization;
    _ = @as(c_long, 36);
    _ = @as(c_long, 8);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 3);
};
pub const SN_certicom_arc = "certicom-arc";
pub const NID_certicom_arc = 677;
pub const OBJ_certicom_arc = blk: {
    _ = OBJ_identified_organization;
    break :blk @as(c_long, 132);
};
pub const SN_ieee = "ieee";
pub const NID_ieee = 1170;
pub const OBJ_ieee = blk: {
    _ = OBJ_identified_organization;
    break :blk @as(c_long, 111);
};
pub const SN_ieee_siswg = "ieee-siswg";
pub const LN_ieee_siswg = "IEEE Security in Storage Working Group";
pub const NID_ieee_siswg = 1171;
pub const OBJ_ieee_siswg = blk: {
    _ = OBJ_ieee;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 1619);
};
pub const SN_international_organizations = "international-organizations";
pub const LN_international_organizations = "International Organizations";
pub const NID_international_organizations = 647;
pub const OBJ_international_organizations = blk: {
    _ = OBJ_joint_iso_itu_t;
    break :blk @as(c_long, 23);
};
pub const SN_wap = "wap";
pub const NID_wap = 678;
pub const OBJ_wap = blk: {
    _ = OBJ_international_organizations;
    break :blk @as(c_long, 43);
};
pub const SN_wap_wsg = "wap-wsg";
pub const NID_wap_wsg = 679;
pub const OBJ_wap_wsg = blk: {
    _ = OBJ_wap;
    break :blk @as(c_long, 1);
};
pub const SN_selected_attribute_types = "selected-attribute-types";
pub const LN_selected_attribute_types = "Selected Attribute Types";
pub const NID_selected_attribute_types = 394;
pub const OBJ_selected_attribute_types = blk: {
    _ = OBJ_joint_iso_itu_t;
    _ = @as(c_long, 5);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 5);
};
pub const SN_clearance = "clearance";
pub const NID_clearance = 395;
pub const OBJ_clearance = blk: {
    _ = OBJ_selected_attribute_types;
    break :blk @as(c_long, 55);
};
pub const SN_ISO_US = "ISO-US";
pub const LN_ISO_US = "ISO US Member Body";
pub const NID_ISO_US = 183;
pub const OBJ_ISO_US = blk: {
    _ = OBJ_member_body;
    break :blk @as(c_long, 840);
};
pub const SN_X9_57 = "X9-57";
pub const LN_X9_57 = "X9.57";
pub const NID_X9_57 = 184;
pub const OBJ_X9_57 = blk: {
    _ = OBJ_ISO_US;
    break :blk @as(c_long, 10040);
};
pub const SN_X9cm = "X9cm";
pub const LN_X9cm = "X9.57 CM ?";
pub const NID_X9cm = 185;
pub const OBJ_X9cm = blk: {
    _ = OBJ_X9_57;
    break :blk @as(c_long, 4);
};
pub const SN_ISO_CN = "ISO-CN";
pub const LN_ISO_CN = "ISO CN Member Body";
pub const NID_ISO_CN = 1140;
pub const OBJ_ISO_CN = blk: {
    _ = OBJ_member_body;
    break :blk @as(c_long, 156);
};
pub const SN_oscca = "oscca";
pub const NID_oscca = 1141;
pub const OBJ_oscca = blk: {
    _ = OBJ_ISO_CN;
    break :blk @as(c_long, 10197);
};
pub const SN_sm_scheme = "sm-scheme";
pub const NID_sm_scheme = 1142;
pub const OBJ_sm_scheme = blk: {
    _ = OBJ_oscca;
    break :blk @as(c_long, 1);
};
pub const SN_dsa = "DSA";
pub const LN_dsa = "dsaEncryption";
pub const NID_dsa = 116;
pub const OBJ_dsa = blk: {
    _ = OBJ_X9cm;
    break :blk @as(c_long, 1);
};
pub const SN_dsaWithSHA1 = "DSA-SHA1";
pub const LN_dsaWithSHA1 = "dsaWithSHA1";
pub const NID_dsaWithSHA1 = 113;
pub const OBJ_dsaWithSHA1 = blk: {
    _ = OBJ_X9cm;
    break :blk @as(c_long, 3);
};
pub const SN_ansi_X9_62 = "ansi-X9-62";
pub const LN_ansi_X9_62 = "ANSI X9.62";
pub const NID_ansi_X9_62 = 405;
pub const OBJ_ansi_X9_62 = blk: {
    _ = OBJ_ISO_US;
    break :blk @as(c_long, 10045);
};
pub const OBJ_X9_62_id_fieldType = blk: {
    _ = OBJ_ansi_X9_62;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_prime_field = "prime-field";
pub const NID_X9_62_prime_field = 406;
pub const OBJ_X9_62_prime_field = blk: {
    _ = OBJ_X9_62_id_fieldType;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_characteristic_two_field = "characteristic-two-field";
pub const NID_X9_62_characteristic_two_field = 407;
pub const OBJ_X9_62_characteristic_two_field = blk: {
    _ = OBJ_X9_62_id_fieldType;
    break :blk @as(c_long, 2);
};
pub const SN_X9_62_id_characteristic_two_basis = "id-characteristic-two-basis";
pub const NID_X9_62_id_characteristic_two_basis = 680;
pub const OBJ_X9_62_id_characteristic_two_basis = blk: {
    _ = OBJ_X9_62_characteristic_two_field;
    break :blk @as(c_long, 3);
};
pub const SN_X9_62_onBasis = "onBasis";
pub const NID_X9_62_onBasis = 681;
pub const OBJ_X9_62_onBasis = blk: {
    _ = OBJ_X9_62_id_characteristic_two_basis;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_tpBasis = "tpBasis";
pub const NID_X9_62_tpBasis = 682;
pub const OBJ_X9_62_tpBasis = blk: {
    _ = OBJ_X9_62_id_characteristic_two_basis;
    break :blk @as(c_long, 2);
};
pub const SN_X9_62_ppBasis = "ppBasis";
pub const NID_X9_62_ppBasis = 683;
pub const OBJ_X9_62_ppBasis = blk: {
    _ = OBJ_X9_62_id_characteristic_two_basis;
    break :blk @as(c_long, 3);
};
pub const OBJ_X9_62_id_publicKeyType = blk: {
    _ = OBJ_ansi_X9_62;
    break :blk @as(c_long, 2);
};
pub const SN_X9_62_id_ecPublicKey = "id-ecPublicKey";
pub const NID_X9_62_id_ecPublicKey = 408;
pub const OBJ_X9_62_id_ecPublicKey = blk: {
    _ = OBJ_X9_62_id_publicKeyType;
    break :blk @as(c_long, 1);
};
pub const OBJ_X9_62_ellipticCurve = blk: {
    _ = OBJ_ansi_X9_62;
    break :blk @as(c_long, 3);
};
pub const OBJ_X9_62_c_TwoCurve = blk: {
    _ = OBJ_X9_62_ellipticCurve;
    break :blk @as(c_long, 0);
};
pub const SN_X9_62_c2pnb163v1 = "c2pnb163v1";
pub const NID_X9_62_c2pnb163v1 = 684;
pub const OBJ_X9_62_c2pnb163v1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_c2pnb163v2 = "c2pnb163v2";
pub const NID_X9_62_c2pnb163v2 = 685;
pub const OBJ_X9_62_c2pnb163v2 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 2);
};
pub const SN_X9_62_c2pnb163v3 = "c2pnb163v3";
pub const NID_X9_62_c2pnb163v3 = 686;
pub const OBJ_X9_62_c2pnb163v3 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 3);
};
pub const SN_X9_62_c2pnb176v1 = "c2pnb176v1";
pub const NID_X9_62_c2pnb176v1 = 687;
pub const OBJ_X9_62_c2pnb176v1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 4);
};
pub const SN_X9_62_c2tnb191v1 = "c2tnb191v1";
pub const NID_X9_62_c2tnb191v1 = 688;
pub const OBJ_X9_62_c2tnb191v1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 5);
};
pub const SN_X9_62_c2tnb191v2 = "c2tnb191v2";
pub const NID_X9_62_c2tnb191v2 = 689;
pub const OBJ_X9_62_c2tnb191v2 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 6);
};
pub const SN_X9_62_c2tnb191v3 = "c2tnb191v3";
pub const NID_X9_62_c2tnb191v3 = 690;
pub const OBJ_X9_62_c2tnb191v3 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 7);
};
pub const SN_X9_62_c2onb191v4 = "c2onb191v4";
pub const NID_X9_62_c2onb191v4 = 691;
pub const OBJ_X9_62_c2onb191v4 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 8);
};
pub const SN_X9_62_c2onb191v5 = "c2onb191v5";
pub const NID_X9_62_c2onb191v5 = 692;
pub const OBJ_X9_62_c2onb191v5 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 9);
};
pub const SN_X9_62_c2pnb208w1 = "c2pnb208w1";
pub const NID_X9_62_c2pnb208w1 = 693;
pub const OBJ_X9_62_c2pnb208w1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 10);
};
pub const SN_X9_62_c2tnb239v1 = "c2tnb239v1";
pub const NID_X9_62_c2tnb239v1 = 694;
pub const OBJ_X9_62_c2tnb239v1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 11);
};
pub const SN_X9_62_c2tnb239v2 = "c2tnb239v2";
pub const NID_X9_62_c2tnb239v2 = 695;
pub const OBJ_X9_62_c2tnb239v2 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 12);
};
pub const SN_X9_62_c2tnb239v3 = "c2tnb239v3";
pub const NID_X9_62_c2tnb239v3 = 696;
pub const OBJ_X9_62_c2tnb239v3 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 13);
};
pub const SN_X9_62_c2onb239v4 = "c2onb239v4";
pub const NID_X9_62_c2onb239v4 = 697;
pub const OBJ_X9_62_c2onb239v4 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 14);
};
pub const SN_X9_62_c2onb239v5 = "c2onb239v5";
pub const NID_X9_62_c2onb239v5 = 698;
pub const OBJ_X9_62_c2onb239v5 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 15);
};
pub const SN_X9_62_c2pnb272w1 = "c2pnb272w1";
pub const NID_X9_62_c2pnb272w1 = 699;
pub const OBJ_X9_62_c2pnb272w1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 16);
};
pub const SN_X9_62_c2pnb304w1 = "c2pnb304w1";
pub const NID_X9_62_c2pnb304w1 = 700;
pub const OBJ_X9_62_c2pnb304w1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 17);
};
pub const SN_X9_62_c2tnb359v1 = "c2tnb359v1";
pub const NID_X9_62_c2tnb359v1 = 701;
pub const OBJ_X9_62_c2tnb359v1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 18);
};
pub const SN_X9_62_c2pnb368w1 = "c2pnb368w1";
pub const NID_X9_62_c2pnb368w1 = 702;
pub const OBJ_X9_62_c2pnb368w1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 19);
};
pub const SN_X9_62_c2tnb431r1 = "c2tnb431r1";
pub const NID_X9_62_c2tnb431r1 = 703;
pub const OBJ_X9_62_c2tnb431r1 = blk: {
    _ = OBJ_X9_62_c_TwoCurve;
    break :blk @as(c_long, 20);
};
pub const OBJ_X9_62_primeCurve = blk: {
    _ = OBJ_X9_62_ellipticCurve;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_prime192v1 = "prime192v1";
pub const NID_X9_62_prime192v1 = 409;
pub const OBJ_X9_62_prime192v1 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 1);
};
pub const SN_X9_62_prime192v2 = "prime192v2";
pub const NID_X9_62_prime192v2 = 410;
pub const OBJ_X9_62_prime192v2 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 2);
};
pub const SN_X9_62_prime192v3 = "prime192v3";
pub const NID_X9_62_prime192v3 = 411;
pub const OBJ_X9_62_prime192v3 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 3);
};
pub const SN_X9_62_prime239v1 = "prime239v1";
pub const NID_X9_62_prime239v1 = 412;
pub const OBJ_X9_62_prime239v1 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 4);
};
pub const SN_X9_62_prime239v2 = "prime239v2";
pub const NID_X9_62_prime239v2 = 413;
pub const OBJ_X9_62_prime239v2 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 5);
};
pub const SN_X9_62_prime239v3 = "prime239v3";
pub const NID_X9_62_prime239v3 = 414;
pub const OBJ_X9_62_prime239v3 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 6);
};
pub const SN_X9_62_prime256v1 = "prime256v1";
pub const NID_X9_62_prime256v1 = 415;
pub const OBJ_X9_62_prime256v1 = blk: {
    _ = OBJ_X9_62_primeCurve;
    break :blk @as(c_long, 7);
};
pub const OBJ_X9_62_id_ecSigType = blk: {
    _ = OBJ_ansi_X9_62;
    break :blk @as(c_long, 4);
};
pub const SN_ecdsa_with_SHA1 = "ecdsa-with-SHA1";
pub const NID_ecdsa_with_SHA1 = 416;
pub const OBJ_ecdsa_with_SHA1 = blk: {
    _ = OBJ_X9_62_id_ecSigType;
    break :blk @as(c_long, 1);
};
pub const SN_ecdsa_with_Recommended = "ecdsa-with-Recommended";
pub const NID_ecdsa_with_Recommended = 791;
pub const OBJ_ecdsa_with_Recommended = blk: {
    _ = OBJ_X9_62_id_ecSigType;
    break :blk @as(c_long, 2);
};
pub const SN_ecdsa_with_Specified = "ecdsa-with-Specified";
pub const NID_ecdsa_with_Specified = 792;
pub const OBJ_ecdsa_with_Specified = blk: {
    _ = OBJ_X9_62_id_ecSigType;
    break :blk @as(c_long, 3);
};
pub const SN_ecdsa_with_SHA224 = "ecdsa-with-SHA224";
pub const NID_ecdsa_with_SHA224 = 793;
pub const OBJ_ecdsa_with_SHA224 = blk: {
    _ = OBJ_ecdsa_with_Specified;
    break :blk @as(c_long, 1);
};
pub const SN_ecdsa_with_SHA256 = "ecdsa-with-SHA256";
pub const NID_ecdsa_with_SHA256 = 794;
pub const OBJ_ecdsa_with_SHA256 = blk: {
    _ = OBJ_ecdsa_with_Specified;
    break :blk @as(c_long, 2);
};
pub const SN_ecdsa_with_SHA384 = "ecdsa-with-SHA384";
pub const NID_ecdsa_with_SHA384 = 795;
pub const OBJ_ecdsa_with_SHA384 = blk: {
    _ = OBJ_ecdsa_with_Specified;
    break :blk @as(c_long, 3);
};
pub const SN_ecdsa_with_SHA512 = "ecdsa-with-SHA512";
pub const NID_ecdsa_with_SHA512 = 796;
pub const OBJ_ecdsa_with_SHA512 = blk: {
    _ = OBJ_ecdsa_with_Specified;
    break :blk @as(c_long, 4);
};
pub const OBJ_secg_ellipticCurve = blk: {
    _ = OBJ_certicom_arc;
    break :blk @as(c_long, 0);
};
pub const SN_secp112r1 = "secp112r1";
pub const NID_secp112r1 = 704;
pub const OBJ_secp112r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 6);
};
pub const SN_secp112r2 = "secp112r2";
pub const NID_secp112r2 = 705;
pub const OBJ_secp112r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 7);
};
pub const SN_secp128r1 = "secp128r1";
pub const NID_secp128r1 = 706;
pub const OBJ_secp128r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 28);
};
pub const SN_secp128r2 = "secp128r2";
pub const NID_secp128r2 = 707;
pub const OBJ_secp128r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 29);
};
pub const SN_secp160k1 = "secp160k1";
pub const NID_secp160k1 = 708;
pub const OBJ_secp160k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 9);
};
pub const SN_secp160r1 = "secp160r1";
pub const NID_secp160r1 = 709;
pub const OBJ_secp160r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 8);
};
pub const SN_secp160r2 = "secp160r2";
pub const NID_secp160r2 = 710;
pub const OBJ_secp160r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 30);
};
pub const SN_secp192k1 = "secp192k1";
pub const NID_secp192k1 = 711;
pub const OBJ_secp192k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 31);
};
pub const SN_secp224k1 = "secp224k1";
pub const NID_secp224k1 = 712;
pub const OBJ_secp224k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 32);
};
pub const SN_secp224r1 = "secp224r1";
pub const NID_secp224r1 = 713;
pub const OBJ_secp224r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 33);
};
pub const SN_secp256k1 = "secp256k1";
pub const NID_secp256k1 = 714;
pub const OBJ_secp256k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 10);
};
pub const SN_secp384r1 = "secp384r1";
pub const NID_secp384r1 = 715;
pub const OBJ_secp384r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 34);
};
pub const SN_secp521r1 = "secp521r1";
pub const NID_secp521r1 = 716;
pub const OBJ_secp521r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 35);
};
pub const SN_sect113r1 = "sect113r1";
pub const NID_sect113r1 = 717;
pub const OBJ_sect113r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 4);
};
pub const SN_sect113r2 = "sect113r2";
pub const NID_sect113r2 = 718;
pub const OBJ_sect113r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 5);
};
pub const SN_sect131r1 = "sect131r1";
pub const NID_sect131r1 = 719;
pub const OBJ_sect131r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 22);
};
pub const SN_sect131r2 = "sect131r2";
pub const NID_sect131r2 = 720;
pub const OBJ_sect131r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 23);
};
pub const SN_sect163k1 = "sect163k1";
pub const NID_sect163k1 = 721;
pub const OBJ_sect163k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 1);
};
pub const SN_sect163r1 = "sect163r1";
pub const NID_sect163r1 = 722;
pub const OBJ_sect163r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 2);
};
pub const SN_sect163r2 = "sect163r2";
pub const NID_sect163r2 = 723;
pub const OBJ_sect163r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 15);
};
pub const SN_sect193r1 = "sect193r1";
pub const NID_sect193r1 = 724;
pub const OBJ_sect193r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 24);
};
pub const SN_sect193r2 = "sect193r2";
pub const NID_sect193r2 = 725;
pub const OBJ_sect193r2 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 25);
};
pub const SN_sect233k1 = "sect233k1";
pub const NID_sect233k1 = 726;
pub const OBJ_sect233k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 26);
};
pub const SN_sect233r1 = "sect233r1";
pub const NID_sect233r1 = 727;
pub const OBJ_sect233r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 27);
};
pub const SN_sect239k1 = "sect239k1";
pub const NID_sect239k1 = 728;
pub const OBJ_sect239k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 3);
};
pub const SN_sect283k1 = "sect283k1";
pub const NID_sect283k1 = 729;
pub const OBJ_sect283k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 16);
};
pub const SN_sect283r1 = "sect283r1";
pub const NID_sect283r1 = 730;
pub const OBJ_sect283r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 17);
};
pub const SN_sect409k1 = "sect409k1";
pub const NID_sect409k1 = 731;
pub const OBJ_sect409k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 36);
};
pub const SN_sect409r1 = "sect409r1";
pub const NID_sect409r1 = 732;
pub const OBJ_sect409r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 37);
};
pub const SN_sect571k1 = "sect571k1";
pub const NID_sect571k1 = 733;
pub const OBJ_sect571k1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 38);
};
pub const SN_sect571r1 = "sect571r1";
pub const NID_sect571r1 = 734;
pub const OBJ_sect571r1 = blk: {
    _ = OBJ_secg_ellipticCurve;
    break :blk @as(c_long, 39);
};
pub const OBJ_wap_wsg_idm_ecid = blk: {
    _ = OBJ_wap_wsg;
    break :blk @as(c_long, 4);
};
pub const SN_wap_wsg_idm_ecid_wtls1 = "wap-wsg-idm-ecid-wtls1";
pub const NID_wap_wsg_idm_ecid_wtls1 = 735;
pub const OBJ_wap_wsg_idm_ecid_wtls1 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 1);
};
pub const SN_wap_wsg_idm_ecid_wtls3 = "wap-wsg-idm-ecid-wtls3";
pub const NID_wap_wsg_idm_ecid_wtls3 = 736;
pub const OBJ_wap_wsg_idm_ecid_wtls3 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 3);
};
pub const SN_wap_wsg_idm_ecid_wtls4 = "wap-wsg-idm-ecid-wtls4";
pub const NID_wap_wsg_idm_ecid_wtls4 = 737;
pub const OBJ_wap_wsg_idm_ecid_wtls4 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 4);
};
pub const SN_wap_wsg_idm_ecid_wtls5 = "wap-wsg-idm-ecid-wtls5";
pub const NID_wap_wsg_idm_ecid_wtls5 = 738;
pub const OBJ_wap_wsg_idm_ecid_wtls5 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 5);
};
pub const SN_wap_wsg_idm_ecid_wtls6 = "wap-wsg-idm-ecid-wtls6";
pub const NID_wap_wsg_idm_ecid_wtls6 = 739;
pub const OBJ_wap_wsg_idm_ecid_wtls6 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 6);
};
pub const SN_wap_wsg_idm_ecid_wtls7 = "wap-wsg-idm-ecid-wtls7";
pub const NID_wap_wsg_idm_ecid_wtls7 = 740;
pub const OBJ_wap_wsg_idm_ecid_wtls7 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 7);
};
pub const SN_wap_wsg_idm_ecid_wtls8 = "wap-wsg-idm-ecid-wtls8";
pub const NID_wap_wsg_idm_ecid_wtls8 = 741;
pub const OBJ_wap_wsg_idm_ecid_wtls8 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 8);
};
pub const SN_wap_wsg_idm_ecid_wtls9 = "wap-wsg-idm-ecid-wtls9";
pub const NID_wap_wsg_idm_ecid_wtls9 = 742;
pub const OBJ_wap_wsg_idm_ecid_wtls9 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 9);
};
pub const SN_wap_wsg_idm_ecid_wtls10 = "wap-wsg-idm-ecid-wtls10";
pub const NID_wap_wsg_idm_ecid_wtls10 = 743;
pub const OBJ_wap_wsg_idm_ecid_wtls10 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 10);
};
pub const SN_wap_wsg_idm_ecid_wtls11 = "wap-wsg-idm-ecid-wtls11";
pub const NID_wap_wsg_idm_ecid_wtls11 = 744;
pub const OBJ_wap_wsg_idm_ecid_wtls11 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 11);
};
pub const SN_wap_wsg_idm_ecid_wtls12 = "wap-wsg-idm-ecid-wtls12";
pub const NID_wap_wsg_idm_ecid_wtls12 = 745;
pub const OBJ_wap_wsg_idm_ecid_wtls12 = blk: {
    _ = OBJ_wap_wsg_idm_ecid;
    break :blk @as(c_long, 12);
};
pub const SN_cast5_cbc = "CAST5-CBC";
pub const LN_cast5_cbc = "cast5-cbc";
pub const NID_cast5_cbc = 108;
pub const OBJ_cast5_cbc = blk: {
    _ = OBJ_ISO_US;
    _ = @as(c_long, 113533);
    _ = @as(c_long, 7);
    _ = @as(c_long, 66);
    break :blk @as(c_long, 10);
};
pub const SN_cast5_ecb = "CAST5-ECB";
pub const LN_cast5_ecb = "cast5-ecb";
pub const NID_cast5_ecb = 109;
pub const SN_cast5_cfb64 = "CAST5-CFB";
pub const LN_cast5_cfb64 = "cast5-cfb";
pub const NID_cast5_cfb64 = 110;
pub const SN_cast5_ofb64 = "CAST5-OFB";
pub const LN_cast5_ofb64 = "cast5-ofb";
pub const NID_cast5_ofb64 = 111;
pub const LN_pbeWithMD5AndCast5_CBC = "pbeWithMD5AndCast5CBC";
pub const NID_pbeWithMD5AndCast5_CBC = 112;
pub const OBJ_pbeWithMD5AndCast5_CBC = blk: {
    _ = OBJ_ISO_US;
    _ = @as(c_long, 113533);
    _ = @as(c_long, 7);
    _ = @as(c_long, 66);
    break :blk @as(c_long, 12);
};
pub const SN_id_PasswordBasedMAC = "id-PasswordBasedMAC";
pub const LN_id_PasswordBasedMAC = "password based MAC";
pub const NID_id_PasswordBasedMAC = 782;
pub const OBJ_id_PasswordBasedMAC = blk: {
    _ = OBJ_ISO_US;
    _ = @as(c_long, 113533);
    _ = @as(c_long, 7);
    _ = @as(c_long, 66);
    break :blk @as(c_long, 13);
};
pub const SN_id_DHBasedMac = "id-DHBasedMac";
pub const LN_id_DHBasedMac = "Diffie-Hellman based MAC";
pub const NID_id_DHBasedMac = 783;
pub const OBJ_id_DHBasedMac = blk: {
    _ = OBJ_ISO_US;
    _ = @as(c_long, 113533);
    _ = @as(c_long, 7);
    _ = @as(c_long, 66);
    break :blk @as(c_long, 30);
};
pub const SN_rsadsi = "rsadsi";
pub const LN_rsadsi = "RSA Data Security, Inc.";
pub const NID_rsadsi = 1;
pub const OBJ_rsadsi = blk: {
    _ = OBJ_ISO_US;
    break :blk @as(c_long, 113549);
};
pub const SN_pkcs = "pkcs";
pub const LN_pkcs = "RSA Data Security, Inc. PKCS";
pub const NID_pkcs = 2;
pub const OBJ_pkcs = blk: {
    _ = OBJ_rsadsi;
    break :blk @as(c_long, 1);
};
pub const SN_pkcs1 = "pkcs1";
pub const NID_pkcs1 = 186;
pub const OBJ_pkcs1 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 1);
};
pub const LN_rsaEncryption = "rsaEncryption";
pub const NID_rsaEncryption = 6;
pub const OBJ_rsaEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 1);
};
pub const SN_md2WithRSAEncryption = "RSA-MD2";
pub const LN_md2WithRSAEncryption = "md2WithRSAEncryption";
pub const NID_md2WithRSAEncryption = 7;
pub const OBJ_md2WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 2);
};
pub const SN_md4WithRSAEncryption = "RSA-MD4";
pub const LN_md4WithRSAEncryption = "md4WithRSAEncryption";
pub const NID_md4WithRSAEncryption = 396;
pub const OBJ_md4WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 3);
};
pub const SN_md5WithRSAEncryption = "RSA-MD5";
pub const LN_md5WithRSAEncryption = "md5WithRSAEncryption";
pub const NID_md5WithRSAEncryption = 8;
pub const OBJ_md5WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 4);
};
pub const SN_sha1WithRSAEncryption = "RSA-SHA1";
pub const LN_sha1WithRSAEncryption = "sha1WithRSAEncryption";
pub const NID_sha1WithRSAEncryption = 65;
pub const OBJ_sha1WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 5);
};
pub const SN_rsaesOaep = "RSAES-OAEP";
pub const LN_rsaesOaep = "rsaesOaep";
pub const NID_rsaesOaep = 919;
pub const OBJ_rsaesOaep = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 7);
};
pub const SN_mgf1 = "MGF1";
pub const LN_mgf1 = "mgf1";
pub const NID_mgf1 = 911;
pub const OBJ_mgf1 = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 8);
};
pub const SN_pSpecified = "PSPECIFIED";
pub const LN_pSpecified = "pSpecified";
pub const NID_pSpecified = 935;
pub const OBJ_pSpecified = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 9);
};
pub const SN_rsassaPss = "RSASSA-PSS";
pub const LN_rsassaPss = "rsassaPss";
pub const NID_rsassaPss = 912;
pub const OBJ_rsassaPss = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 10);
};
pub const SN_sha256WithRSAEncryption = "RSA-SHA256";
pub const LN_sha256WithRSAEncryption = "sha256WithRSAEncryption";
pub const NID_sha256WithRSAEncryption = 668;
pub const OBJ_sha256WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 11);
};
pub const SN_sha384WithRSAEncryption = "RSA-SHA384";
pub const LN_sha384WithRSAEncryption = "sha384WithRSAEncryption";
pub const NID_sha384WithRSAEncryption = 669;
pub const OBJ_sha384WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 12);
};
pub const SN_sha512WithRSAEncryption = "RSA-SHA512";
pub const LN_sha512WithRSAEncryption = "sha512WithRSAEncryption";
pub const NID_sha512WithRSAEncryption = 670;
pub const OBJ_sha512WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 13);
};
pub const SN_sha224WithRSAEncryption = "RSA-SHA224";
pub const LN_sha224WithRSAEncryption = "sha224WithRSAEncryption";
pub const NID_sha224WithRSAEncryption = 671;
pub const OBJ_sha224WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 14);
};
pub const SN_sha512_224WithRSAEncryption = "RSA-SHA512/224";
pub const LN_sha512_224WithRSAEncryption = "sha512-224WithRSAEncryption";
pub const NID_sha512_224WithRSAEncryption = 1145;
pub const OBJ_sha512_224WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 15);
};
pub const SN_sha512_256WithRSAEncryption = "RSA-SHA512/256";
pub const LN_sha512_256WithRSAEncryption = "sha512-256WithRSAEncryption";
pub const NID_sha512_256WithRSAEncryption = 1146;
pub const OBJ_sha512_256WithRSAEncryption = blk: {
    _ = OBJ_pkcs1;
    break :blk @as(c_long, 16);
};
pub const SN_pkcs3 = "pkcs3";
pub const NID_pkcs3 = 27;
pub const OBJ_pkcs3 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 3);
};
pub const LN_dhKeyAgreement = "dhKeyAgreement";
pub const NID_dhKeyAgreement = 28;
pub const OBJ_dhKeyAgreement = blk: {
    _ = OBJ_pkcs3;
    break :blk @as(c_long, 1);
};
pub const SN_pkcs5 = "pkcs5";
pub const NID_pkcs5 = 187;
pub const OBJ_pkcs5 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 5);
};
pub const SN_pbeWithMD2AndDES_CBC = "PBE-MD2-DES";
pub const LN_pbeWithMD2AndDES_CBC = "pbeWithMD2AndDES-CBC";
pub const NID_pbeWithMD2AndDES_CBC = 9;
pub const OBJ_pbeWithMD2AndDES_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 1);
};
pub const SN_pbeWithMD5AndDES_CBC = "PBE-MD5-DES";
pub const LN_pbeWithMD5AndDES_CBC = "pbeWithMD5AndDES-CBC";
pub const NID_pbeWithMD5AndDES_CBC = 10;
pub const OBJ_pbeWithMD5AndDES_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 3);
};
pub const SN_pbeWithMD2AndRC2_CBC = "PBE-MD2-RC2-64";
pub const LN_pbeWithMD2AndRC2_CBC = "pbeWithMD2AndRC2-CBC";
pub const NID_pbeWithMD2AndRC2_CBC = 168;
pub const OBJ_pbeWithMD2AndRC2_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 4);
};
pub const SN_pbeWithMD5AndRC2_CBC = "PBE-MD5-RC2-64";
pub const LN_pbeWithMD5AndRC2_CBC = "pbeWithMD5AndRC2-CBC";
pub const NID_pbeWithMD5AndRC2_CBC = 169;
pub const OBJ_pbeWithMD5AndRC2_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 6);
};
pub const SN_pbeWithSHA1AndDES_CBC = "PBE-SHA1-DES";
pub const LN_pbeWithSHA1AndDES_CBC = "pbeWithSHA1AndDES-CBC";
pub const NID_pbeWithSHA1AndDES_CBC = 170;
pub const OBJ_pbeWithSHA1AndDES_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 10);
};
pub const SN_pbeWithSHA1AndRC2_CBC = "PBE-SHA1-RC2-64";
pub const LN_pbeWithSHA1AndRC2_CBC = "pbeWithSHA1AndRC2-CBC";
pub const NID_pbeWithSHA1AndRC2_CBC = 68;
pub const OBJ_pbeWithSHA1AndRC2_CBC = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 11);
};
pub const LN_id_pbkdf2 = "PBKDF2";
pub const NID_id_pbkdf2 = 69;
pub const OBJ_id_pbkdf2 = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 12);
};
pub const LN_pbes2 = "PBES2";
pub const NID_pbes2 = 161;
pub const OBJ_pbes2 = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 13);
};
pub const LN_pbmac1 = "PBMAC1";
pub const NID_pbmac1 = 162;
pub const OBJ_pbmac1 = blk: {
    _ = OBJ_pkcs5;
    break :blk @as(c_long, 14);
};
pub const SN_pkcs7 = "pkcs7";
pub const NID_pkcs7 = 20;
pub const OBJ_pkcs7 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 7);
};
pub const LN_pkcs7_data = "pkcs7-data";
pub const NID_pkcs7_data = 21;
pub const OBJ_pkcs7_data = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 1);
};
pub const LN_pkcs7_signed = "pkcs7-signedData";
pub const NID_pkcs7_signed = 22;
pub const OBJ_pkcs7_signed = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 2);
};
pub const LN_pkcs7_enveloped = "pkcs7-envelopedData";
pub const NID_pkcs7_enveloped = 23;
pub const OBJ_pkcs7_enveloped = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 3);
};
pub const LN_pkcs7_signedAndEnveloped = "pkcs7-signedAndEnvelopedData";
pub const NID_pkcs7_signedAndEnveloped = 24;
pub const OBJ_pkcs7_signedAndEnveloped = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 4);
};
pub const LN_pkcs7_digest = "pkcs7-digestData";
pub const NID_pkcs7_digest = 25;
pub const OBJ_pkcs7_digest = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 5);
};
pub const LN_pkcs7_encrypted = "pkcs7-encryptedData";
pub const NID_pkcs7_encrypted = 26;
pub const OBJ_pkcs7_encrypted = blk: {
    _ = OBJ_pkcs7;
    break :blk @as(c_long, 6);
};
pub const SN_pkcs9 = "pkcs9";
pub const NID_pkcs9 = 47;
pub const OBJ_pkcs9 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 9);
};
pub const LN_pkcs9_emailAddress = "emailAddress";
pub const NID_pkcs9_emailAddress = 48;
pub const OBJ_pkcs9_emailAddress = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 1);
};
pub const LN_pkcs9_unstructuredName = "unstructuredName";
pub const NID_pkcs9_unstructuredName = 49;
pub const OBJ_pkcs9_unstructuredName = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 2);
};
pub const LN_pkcs9_contentType = "contentType";
pub const NID_pkcs9_contentType = 50;
pub const OBJ_pkcs9_contentType = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 3);
};
pub const LN_pkcs9_messageDigest = "messageDigest";
pub const NID_pkcs9_messageDigest = 51;
pub const OBJ_pkcs9_messageDigest = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 4);
};
pub const LN_pkcs9_signingTime = "signingTime";
pub const NID_pkcs9_signingTime = 52;
pub const OBJ_pkcs9_signingTime = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 5);
};
pub const LN_pkcs9_countersignature = "countersignature";
pub const NID_pkcs9_countersignature = 53;
pub const OBJ_pkcs9_countersignature = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 6);
};
pub const LN_pkcs9_challengePassword = "challengePassword";
pub const NID_pkcs9_challengePassword = 54;
pub const OBJ_pkcs9_challengePassword = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 7);
};
pub const LN_pkcs9_unstructuredAddress = "unstructuredAddress";
pub const NID_pkcs9_unstructuredAddress = 55;
pub const OBJ_pkcs9_unstructuredAddress = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 8);
};
pub const LN_pkcs9_extCertAttributes = "extendedCertificateAttributes";
pub const NID_pkcs9_extCertAttributes = 56;
pub const OBJ_pkcs9_extCertAttributes = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 9);
};
pub const SN_ext_req = "extReq";
pub const LN_ext_req = "Extension Request";
pub const NID_ext_req = 172;
pub const OBJ_ext_req = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 14);
};
pub const SN_SMIMECapabilities = "SMIME-CAPS";
pub const LN_SMIMECapabilities = "S/MIME Capabilities";
pub const NID_SMIMECapabilities = 167;
pub const OBJ_SMIMECapabilities = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 15);
};
pub const SN_SMIME = "SMIME";
pub const LN_SMIME = "S/MIME";
pub const NID_SMIME = 188;
pub const OBJ_SMIME = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 16);
};
pub const SN_id_smime_mod = "id-smime-mod";
pub const NID_id_smime_mod = 189;
pub const OBJ_id_smime_mod = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 0);
};
pub const SN_id_smime_ct = "id-smime-ct";
pub const NID_id_smime_ct = 190;
pub const OBJ_id_smime_ct = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_aa = "id-smime-aa";
pub const NID_id_smime_aa = 191;
pub const OBJ_id_smime_aa = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_alg = "id-smime-alg";
pub const NID_id_smime_alg = 192;
pub const OBJ_id_smime_alg = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_cd = "id-smime-cd";
pub const NID_id_smime_cd = 193;
pub const OBJ_id_smime_cd = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_spq = "id-smime-spq";
pub const NID_id_smime_spq = 194;
pub const OBJ_id_smime_spq = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_cti = "id-smime-cti";
pub const NID_id_smime_cti = 195;
pub const OBJ_id_smime_cti = blk: {
    _ = OBJ_SMIME;
    break :blk @as(c_long, 6);
};
pub const SN_id_smime_mod_cms = "id-smime-mod-cms";
pub const NID_id_smime_mod_cms = 196;
pub const OBJ_id_smime_mod_cms = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_mod_ess = "id-smime-mod-ess";
pub const NID_id_smime_mod_ess = 197;
pub const OBJ_id_smime_mod_ess = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_mod_oid = "id-smime-mod-oid";
pub const NID_id_smime_mod_oid = 198;
pub const OBJ_id_smime_mod_oid = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_mod_msg_v3 = "id-smime-mod-msg-v3";
pub const NID_id_smime_mod_msg_v3 = 199;
pub const OBJ_id_smime_mod_msg_v3 = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_mod_ets_eSignature_88 = "id-smime-mod-ets-eSignature-88";
pub const NID_id_smime_mod_ets_eSignature_88 = 200;
pub const OBJ_id_smime_mod_ets_eSignature_88 = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_mod_ets_eSignature_97 = "id-smime-mod-ets-eSignature-97";
pub const NID_id_smime_mod_ets_eSignature_97 = 201;
pub const OBJ_id_smime_mod_ets_eSignature_97 = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 6);
};
pub const SN_id_smime_mod_ets_eSigPolicy_88 = "id-smime-mod-ets-eSigPolicy-88";
pub const NID_id_smime_mod_ets_eSigPolicy_88 = 202;
pub const OBJ_id_smime_mod_ets_eSigPolicy_88 = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 7);
};
pub const SN_id_smime_mod_ets_eSigPolicy_97 = "id-smime-mod-ets-eSigPolicy-97";
pub const NID_id_smime_mod_ets_eSigPolicy_97 = 203;
pub const OBJ_id_smime_mod_ets_eSigPolicy_97 = blk: {
    _ = OBJ_id_smime_mod;
    break :blk @as(c_long, 8);
};
pub const SN_id_smime_ct_receipt = "id-smime-ct-receipt";
pub const NID_id_smime_ct_receipt = 204;
pub const OBJ_id_smime_ct_receipt = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_ct_authData = "id-smime-ct-authData";
pub const NID_id_smime_ct_authData = 205;
pub const OBJ_id_smime_ct_authData = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_ct_publishCert = "id-smime-ct-publishCert";
pub const NID_id_smime_ct_publishCert = 206;
pub const OBJ_id_smime_ct_publishCert = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_ct_TSTInfo = "id-smime-ct-TSTInfo";
pub const NID_id_smime_ct_TSTInfo = 207;
pub const OBJ_id_smime_ct_TSTInfo = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_ct_TDTInfo = "id-smime-ct-TDTInfo";
pub const NID_id_smime_ct_TDTInfo = 208;
pub const OBJ_id_smime_ct_TDTInfo = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_ct_contentInfo = "id-smime-ct-contentInfo";
pub const NID_id_smime_ct_contentInfo = 209;
pub const OBJ_id_smime_ct_contentInfo = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 6);
};
pub const SN_id_smime_ct_DVCSRequestData = "id-smime-ct-DVCSRequestData";
pub const NID_id_smime_ct_DVCSRequestData = 210;
pub const OBJ_id_smime_ct_DVCSRequestData = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 7);
};
pub const SN_id_smime_ct_DVCSResponseData = "id-smime-ct-DVCSResponseData";
pub const NID_id_smime_ct_DVCSResponseData = 211;
pub const OBJ_id_smime_ct_DVCSResponseData = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 8);
};
pub const SN_id_smime_ct_compressedData = "id-smime-ct-compressedData";
pub const NID_id_smime_ct_compressedData = 786;
pub const OBJ_id_smime_ct_compressedData = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 9);
};
pub const SN_id_smime_ct_contentCollection = "id-smime-ct-contentCollection";
pub const NID_id_smime_ct_contentCollection = 1058;
pub const OBJ_id_smime_ct_contentCollection = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 19);
};
pub const SN_id_smime_ct_authEnvelopedData = "id-smime-ct-authEnvelopedData";
pub const NID_id_smime_ct_authEnvelopedData = 1059;
pub const OBJ_id_smime_ct_authEnvelopedData = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 23);
};
pub const SN_id_ct_asciiTextWithCRLF = "id-ct-asciiTextWithCRLF";
pub const NID_id_ct_asciiTextWithCRLF = 787;
pub const OBJ_id_ct_asciiTextWithCRLF = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 27);
};
pub const SN_id_ct_xml = "id-ct-xml";
pub const NID_id_ct_xml = 1060;
pub const OBJ_id_ct_xml = blk: {
    _ = OBJ_id_smime_ct;
    break :blk @as(c_long, 28);
};
pub const SN_id_smime_aa_receiptRequest = "id-smime-aa-receiptRequest";
pub const NID_id_smime_aa_receiptRequest = 212;
pub const OBJ_id_smime_aa_receiptRequest = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_aa_securityLabel = "id-smime-aa-securityLabel";
pub const NID_id_smime_aa_securityLabel = 213;
pub const OBJ_id_smime_aa_securityLabel = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_aa_mlExpandHistory = "id-smime-aa-mlExpandHistory";
pub const NID_id_smime_aa_mlExpandHistory = 214;
pub const OBJ_id_smime_aa_mlExpandHistory = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_aa_contentHint = "id-smime-aa-contentHint";
pub const NID_id_smime_aa_contentHint = 215;
pub const OBJ_id_smime_aa_contentHint = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_aa_msgSigDigest = "id-smime-aa-msgSigDigest";
pub const NID_id_smime_aa_msgSigDigest = 216;
pub const OBJ_id_smime_aa_msgSigDigest = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_aa_encapContentType = "id-smime-aa-encapContentType";
pub const NID_id_smime_aa_encapContentType = 217;
pub const OBJ_id_smime_aa_encapContentType = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 6);
};
pub const SN_id_smime_aa_contentIdentifier = "id-smime-aa-contentIdentifier";
pub const NID_id_smime_aa_contentIdentifier = 218;
pub const OBJ_id_smime_aa_contentIdentifier = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 7);
};
pub const SN_id_smime_aa_macValue = "id-smime-aa-macValue";
pub const NID_id_smime_aa_macValue = 219;
pub const OBJ_id_smime_aa_macValue = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 8);
};
pub const SN_id_smime_aa_equivalentLabels = "id-smime-aa-equivalentLabels";
pub const NID_id_smime_aa_equivalentLabels = 220;
pub const OBJ_id_smime_aa_equivalentLabels = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 9);
};
pub const SN_id_smime_aa_contentReference = "id-smime-aa-contentReference";
pub const NID_id_smime_aa_contentReference = 221;
pub const OBJ_id_smime_aa_contentReference = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 10);
};
pub const SN_id_smime_aa_encrypKeyPref = "id-smime-aa-encrypKeyPref";
pub const NID_id_smime_aa_encrypKeyPref = 222;
pub const OBJ_id_smime_aa_encrypKeyPref = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 11);
};
pub const SN_id_smime_aa_signingCertificate = "id-smime-aa-signingCertificate";
pub const NID_id_smime_aa_signingCertificate = 223;
pub const OBJ_id_smime_aa_signingCertificate = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 12);
};
pub const SN_id_smime_aa_smimeEncryptCerts = "id-smime-aa-smimeEncryptCerts";
pub const NID_id_smime_aa_smimeEncryptCerts = 224;
pub const OBJ_id_smime_aa_smimeEncryptCerts = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 13);
};
pub const SN_id_smime_aa_timeStampToken = "id-smime-aa-timeStampToken";
pub const NID_id_smime_aa_timeStampToken = 225;
pub const OBJ_id_smime_aa_timeStampToken = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 14);
};
pub const SN_id_smime_aa_ets_sigPolicyId = "id-smime-aa-ets-sigPolicyId";
pub const NID_id_smime_aa_ets_sigPolicyId = 226;
pub const OBJ_id_smime_aa_ets_sigPolicyId = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 15);
};
pub const SN_id_smime_aa_ets_commitmentType = "id-smime-aa-ets-commitmentType";
pub const NID_id_smime_aa_ets_commitmentType = 227;
pub const OBJ_id_smime_aa_ets_commitmentType = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 16);
};
pub const SN_id_smime_aa_ets_signerLocation = "id-smime-aa-ets-signerLocation";
pub const NID_id_smime_aa_ets_signerLocation = 228;
pub const OBJ_id_smime_aa_ets_signerLocation = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 17);
};
pub const SN_id_smime_aa_ets_signerAttr = "id-smime-aa-ets-signerAttr";
pub const NID_id_smime_aa_ets_signerAttr = 229;
pub const OBJ_id_smime_aa_ets_signerAttr = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 18);
};
pub const SN_id_smime_aa_ets_otherSigCert = "id-smime-aa-ets-otherSigCert";
pub const NID_id_smime_aa_ets_otherSigCert = 230;
pub const OBJ_id_smime_aa_ets_otherSigCert = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 19);
};
pub const SN_id_smime_aa_ets_contentTimestamp = "id-smime-aa-ets-contentTimestamp";
pub const NID_id_smime_aa_ets_contentTimestamp = 231;
pub const OBJ_id_smime_aa_ets_contentTimestamp = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 20);
};
pub const SN_id_smime_aa_ets_CertificateRefs = "id-smime-aa-ets-CertificateRefs";
pub const NID_id_smime_aa_ets_CertificateRefs = 232;
pub const OBJ_id_smime_aa_ets_CertificateRefs = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 21);
};
pub const SN_id_smime_aa_ets_RevocationRefs = "id-smime-aa-ets-RevocationRefs";
pub const NID_id_smime_aa_ets_RevocationRefs = 233;
pub const OBJ_id_smime_aa_ets_RevocationRefs = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 22);
};
pub const SN_id_smime_aa_ets_certValues = "id-smime-aa-ets-certValues";
pub const NID_id_smime_aa_ets_certValues = 234;
pub const OBJ_id_smime_aa_ets_certValues = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 23);
};
pub const SN_id_smime_aa_ets_revocationValues = "id-smime-aa-ets-revocationValues";
pub const NID_id_smime_aa_ets_revocationValues = 235;
pub const OBJ_id_smime_aa_ets_revocationValues = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 24);
};
pub const SN_id_smime_aa_ets_escTimeStamp = "id-smime-aa-ets-escTimeStamp";
pub const NID_id_smime_aa_ets_escTimeStamp = 236;
pub const OBJ_id_smime_aa_ets_escTimeStamp = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 25);
};
pub const SN_id_smime_aa_ets_certCRLTimestamp = "id-smime-aa-ets-certCRLTimestamp";
pub const NID_id_smime_aa_ets_certCRLTimestamp = 237;
pub const OBJ_id_smime_aa_ets_certCRLTimestamp = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 26);
};
pub const SN_id_smime_aa_ets_archiveTimeStamp = "id-smime-aa-ets-archiveTimeStamp";
pub const NID_id_smime_aa_ets_archiveTimeStamp = 238;
pub const OBJ_id_smime_aa_ets_archiveTimeStamp = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 27);
};
pub const SN_id_smime_aa_signatureType = "id-smime-aa-signatureType";
pub const NID_id_smime_aa_signatureType = 239;
pub const OBJ_id_smime_aa_signatureType = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 28);
};
pub const SN_id_smime_aa_dvcs_dvc = "id-smime-aa-dvcs-dvc";
pub const NID_id_smime_aa_dvcs_dvc = 240;
pub const OBJ_id_smime_aa_dvcs_dvc = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 29);
};
pub const SN_id_smime_aa_signingCertificateV2 = "id-smime-aa-signingCertificateV2";
pub const NID_id_smime_aa_signingCertificateV2 = 1086;
pub const OBJ_id_smime_aa_signingCertificateV2 = blk: {
    _ = OBJ_id_smime_aa;
    break :blk @as(c_long, 47);
};
pub const SN_id_smime_alg_ESDHwith3DES = "id-smime-alg-ESDHwith3DES";
pub const NID_id_smime_alg_ESDHwith3DES = 241;
pub const OBJ_id_smime_alg_ESDHwith3DES = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_alg_ESDHwithRC2 = "id-smime-alg-ESDHwithRC2";
pub const NID_id_smime_alg_ESDHwithRC2 = 242;
pub const OBJ_id_smime_alg_ESDHwithRC2 = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_alg_3DESwrap = "id-smime-alg-3DESwrap";
pub const NID_id_smime_alg_3DESwrap = 243;
pub const OBJ_id_smime_alg_3DESwrap = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_alg_RC2wrap = "id-smime-alg-RC2wrap";
pub const NID_id_smime_alg_RC2wrap = 244;
pub const OBJ_id_smime_alg_RC2wrap = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_alg_ESDH = "id-smime-alg-ESDH";
pub const NID_id_smime_alg_ESDH = 245;
pub const OBJ_id_smime_alg_ESDH = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_alg_CMS3DESwrap = "id-smime-alg-CMS3DESwrap";
pub const NID_id_smime_alg_CMS3DESwrap = 246;
pub const OBJ_id_smime_alg_CMS3DESwrap = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 6);
};
pub const SN_id_smime_alg_CMSRC2wrap = "id-smime-alg-CMSRC2wrap";
pub const NID_id_smime_alg_CMSRC2wrap = 247;
pub const OBJ_id_smime_alg_CMSRC2wrap = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 7);
};
pub const SN_id_alg_PWRI_KEK = "id-alg-PWRI-KEK";
pub const NID_id_alg_PWRI_KEK = 893;
pub const OBJ_id_alg_PWRI_KEK = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 9);
};
pub const SN_id_smime_cd_ldap = "id-smime-cd-ldap";
pub const NID_id_smime_cd_ldap = 248;
pub const OBJ_id_smime_cd_ldap = blk: {
    _ = OBJ_id_smime_cd;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_spq_ets_sqt_uri = "id-smime-spq-ets-sqt-uri";
pub const NID_id_smime_spq_ets_sqt_uri = 249;
pub const OBJ_id_smime_spq_ets_sqt_uri = blk: {
    _ = OBJ_id_smime_spq;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_spq_ets_sqt_unotice = "id-smime-spq-ets-sqt-unotice";
pub const NID_id_smime_spq_ets_sqt_unotice = 250;
pub const OBJ_id_smime_spq_ets_sqt_unotice = blk: {
    _ = OBJ_id_smime_spq;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_cti_ets_proofOfOrigin = "id-smime-cti-ets-proofOfOrigin";
pub const NID_id_smime_cti_ets_proofOfOrigin = 251;
pub const OBJ_id_smime_cti_ets_proofOfOrigin = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 1);
};
pub const SN_id_smime_cti_ets_proofOfReceipt = "id-smime-cti-ets-proofOfReceipt";
pub const NID_id_smime_cti_ets_proofOfReceipt = 252;
pub const OBJ_id_smime_cti_ets_proofOfReceipt = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 2);
};
pub const SN_id_smime_cti_ets_proofOfDelivery = "id-smime-cti-ets-proofOfDelivery";
pub const NID_id_smime_cti_ets_proofOfDelivery = 253;
pub const OBJ_id_smime_cti_ets_proofOfDelivery = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 3);
};
pub const SN_id_smime_cti_ets_proofOfSender = "id-smime-cti-ets-proofOfSender";
pub const NID_id_smime_cti_ets_proofOfSender = 254;
pub const OBJ_id_smime_cti_ets_proofOfSender = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 4);
};
pub const SN_id_smime_cti_ets_proofOfApproval = "id-smime-cti-ets-proofOfApproval";
pub const NID_id_smime_cti_ets_proofOfApproval = 255;
pub const OBJ_id_smime_cti_ets_proofOfApproval = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 5);
};
pub const SN_id_smime_cti_ets_proofOfCreation = "id-smime-cti-ets-proofOfCreation";
pub const NID_id_smime_cti_ets_proofOfCreation = 256;
pub const OBJ_id_smime_cti_ets_proofOfCreation = blk: {
    _ = OBJ_id_smime_cti;
    break :blk @as(c_long, 6);
};
pub const LN_friendlyName = "friendlyName";
pub const NID_friendlyName = 156;
pub const OBJ_friendlyName = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 20);
};
pub const LN_localKeyID = "localKeyID";
pub const NID_localKeyID = 157;
pub const OBJ_localKeyID = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 21);
};
pub const SN_ms_csp_name = "CSPName";
pub const LN_ms_csp_name = "Microsoft CSP Name";
pub const NID_ms_csp_name = 417;
pub const OBJ_ms_csp_name = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 17);
    break :blk @as(c_long, 1);
};
pub const SN_LocalKeySet = "LocalKeySet";
pub const LN_LocalKeySet = "Microsoft Local Key set";
pub const NID_LocalKeySet = 856;
pub const OBJ_LocalKeySet = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 17);
    break :blk @as(c_long, 2);
};
pub const OBJ_certTypes = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 22);
};
pub const LN_x509Certificate = "x509Certificate";
pub const NID_x509Certificate = 158;
pub const OBJ_x509Certificate = blk: {
    _ = OBJ_certTypes;
    break :blk @as(c_long, 1);
};
pub const LN_sdsiCertificate = "sdsiCertificate";
pub const NID_sdsiCertificate = 159;
pub const OBJ_sdsiCertificate = blk: {
    _ = OBJ_certTypes;
    break :blk @as(c_long, 2);
};
pub const OBJ_crlTypes = blk: {
    _ = OBJ_pkcs9;
    break :blk @as(c_long, 23);
};
pub const LN_x509Crl = "x509Crl";
pub const NID_x509Crl = 160;
pub const OBJ_x509Crl = blk: {
    _ = OBJ_crlTypes;
    break :blk @as(c_long, 1);
};
pub const OBJ_pkcs12 = blk: {
    _ = OBJ_pkcs;
    break :blk @as(c_long, 12);
};
pub const OBJ_pkcs12_pbeids = blk: {
    _ = OBJ_pkcs12;
    break :blk @as(c_long, 1);
};
pub const SN_pbe_WithSHA1And128BitRC4 = "PBE-SHA1-RC4-128";
pub const LN_pbe_WithSHA1And128BitRC4 = "pbeWithSHA1And128BitRC4";
pub const NID_pbe_WithSHA1And128BitRC4 = 144;
pub const OBJ_pbe_WithSHA1And128BitRC4 = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 1);
};
pub const SN_pbe_WithSHA1And40BitRC4 = "PBE-SHA1-RC4-40";
pub const LN_pbe_WithSHA1And40BitRC4 = "pbeWithSHA1And40BitRC4";
pub const NID_pbe_WithSHA1And40BitRC4 = 145;
pub const OBJ_pbe_WithSHA1And40BitRC4 = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 2);
};
pub const SN_pbe_WithSHA1And3_Key_TripleDES_CBC = "PBE-SHA1-3DES";
pub const LN_pbe_WithSHA1And3_Key_TripleDES_CBC = "pbeWithSHA1And3-KeyTripleDES-CBC";
pub const NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;
pub const OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 3);
};
pub const SN_pbe_WithSHA1And2_Key_TripleDES_CBC = "PBE-SHA1-2DES";
pub const LN_pbe_WithSHA1And2_Key_TripleDES_CBC = "pbeWithSHA1And2-KeyTripleDES-CBC";
pub const NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;
pub const OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 4);
};
pub const SN_pbe_WithSHA1And128BitRC2_CBC = "PBE-SHA1-RC2-128";
pub const LN_pbe_WithSHA1And128BitRC2_CBC = "pbeWithSHA1And128BitRC2-CBC";
pub const NID_pbe_WithSHA1And128BitRC2_CBC = 148;
pub const OBJ_pbe_WithSHA1And128BitRC2_CBC = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 5);
};
pub const SN_pbe_WithSHA1And40BitRC2_CBC = "PBE-SHA1-RC2-40";
pub const LN_pbe_WithSHA1And40BitRC2_CBC = "pbeWithSHA1And40BitRC2-CBC";
pub const NID_pbe_WithSHA1And40BitRC2_CBC = 149;
pub const OBJ_pbe_WithSHA1And40BitRC2_CBC = blk: {
    _ = OBJ_pkcs12_pbeids;
    break :blk @as(c_long, 6);
};
pub const OBJ_pkcs12_Version1 = blk: {
    _ = OBJ_pkcs12;
    break :blk @as(c_long, 10);
};
pub const OBJ_pkcs12_BagIds = blk: {
    _ = OBJ_pkcs12_Version1;
    break :blk @as(c_long, 1);
};
pub const LN_keyBag = "keyBag";
pub const NID_keyBag = 150;
pub const OBJ_keyBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 1);
};
pub const LN_pkcs8ShroudedKeyBag = "pkcs8ShroudedKeyBag";
pub const NID_pkcs8ShroudedKeyBag = 151;
pub const OBJ_pkcs8ShroudedKeyBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 2);
};
pub const LN_certBag = "certBag";
pub const NID_certBag = 152;
pub const OBJ_certBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 3);
};
pub const LN_crlBag = "crlBag";
pub const NID_crlBag = 153;
pub const OBJ_crlBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 4);
};
pub const LN_secretBag = "secretBag";
pub const NID_secretBag = 154;
pub const OBJ_secretBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 5);
};
pub const LN_safeContentsBag = "safeContentsBag";
pub const NID_safeContentsBag = 155;
pub const OBJ_safeContentsBag = blk: {
    _ = OBJ_pkcs12_BagIds;
    break :blk @as(c_long, 6);
};
pub const SN_md2 = "MD2";
pub const LN_md2 = "md2";
pub const NID_md2 = 3;
pub const OBJ_md2 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 2);
};
pub const SN_md4 = "MD4";
pub const LN_md4 = "md4";
pub const NID_md4 = 257;
pub const OBJ_md4 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 4);
};
pub const SN_md5 = "MD5";
pub const LN_md5 = "md5";
pub const NID_md5 = 4;
pub const OBJ_md5 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 5);
};
pub const SN_md5_sha1 = "MD5-SHA1";
pub const LN_md5_sha1 = "md5-sha1";
pub const NID_md5_sha1 = 114;
pub const LN_hmacWithMD5 = "hmacWithMD5";
pub const NID_hmacWithMD5 = 797;
pub const OBJ_hmacWithMD5 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 6);
};
pub const LN_hmacWithSHA1 = "hmacWithSHA1";
pub const NID_hmacWithSHA1 = 163;
pub const OBJ_hmacWithSHA1 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 7);
};
pub const SN_sm2 = "SM2";
pub const LN_sm2 = "sm2";
pub const NID_sm2 = 1172;
pub const OBJ_sm2 = blk: {
    _ = OBJ_sm_scheme;
    break :blk @as(c_long, 301);
};
pub const SN_sm3 = "SM3";
pub const LN_sm3 = "sm3";
pub const NID_sm3 = 1143;
pub const OBJ_sm3 = blk: {
    _ = OBJ_sm_scheme;
    break :blk @as(c_long, 401);
};
pub const SN_sm3WithRSAEncryption = "RSA-SM3";
pub const LN_sm3WithRSAEncryption = "sm3WithRSAEncryption";
pub const NID_sm3WithRSAEncryption = 1144;
pub const OBJ_sm3WithRSAEncryption = blk: {
    _ = OBJ_sm_scheme;
    break :blk @as(c_long, 504);
};
pub const LN_hmacWithSHA224 = "hmacWithSHA224";
pub const NID_hmacWithSHA224 = 798;
pub const OBJ_hmacWithSHA224 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 8);
};
pub const LN_hmacWithSHA256 = "hmacWithSHA256";
pub const NID_hmacWithSHA256 = 799;
pub const OBJ_hmacWithSHA256 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 9);
};
pub const LN_hmacWithSHA384 = "hmacWithSHA384";
pub const NID_hmacWithSHA384 = 800;
pub const OBJ_hmacWithSHA384 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 10);
};
pub const LN_hmacWithSHA512 = "hmacWithSHA512";
pub const NID_hmacWithSHA512 = 801;
pub const OBJ_hmacWithSHA512 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 11);
};
pub const LN_hmacWithSHA512_224 = "hmacWithSHA512-224";
pub const NID_hmacWithSHA512_224 = 1193;
pub const OBJ_hmacWithSHA512_224 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 12);
};
pub const LN_hmacWithSHA512_256 = "hmacWithSHA512-256";
pub const NID_hmacWithSHA512_256 = 1194;
pub const OBJ_hmacWithSHA512_256 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 13);
};
pub const SN_rc2_cbc = "RC2-CBC";
pub const LN_rc2_cbc = "rc2-cbc";
pub const NID_rc2_cbc = 37;
pub const OBJ_rc2_cbc = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 2);
};
pub const SN_rc2_ecb = "RC2-ECB";
pub const LN_rc2_ecb = "rc2-ecb";
pub const NID_rc2_ecb = 38;
pub const SN_rc2_cfb64 = "RC2-CFB";
pub const LN_rc2_cfb64 = "rc2-cfb";
pub const NID_rc2_cfb64 = 39;
pub const SN_rc2_ofb64 = "RC2-OFB";
pub const LN_rc2_ofb64 = "rc2-ofb";
pub const NID_rc2_ofb64 = 40;
pub const SN_rc2_40_cbc = "RC2-40-CBC";
pub const LN_rc2_40_cbc = "rc2-40-cbc";
pub const NID_rc2_40_cbc = 98;
pub const SN_rc2_64_cbc = "RC2-64-CBC";
pub const LN_rc2_64_cbc = "rc2-64-cbc";
pub const NID_rc2_64_cbc = 166;
pub const SN_rc4 = "RC4";
pub const LN_rc4 = "rc4";
pub const NID_rc4 = 5;
pub const OBJ_rc4 = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 4);
};
pub const SN_rc4_40 = "RC4-40";
pub const LN_rc4_40 = "rc4-40";
pub const NID_rc4_40 = 97;
pub const SN_des_ede3_cbc = "DES-EDE3-CBC";
pub const LN_des_ede3_cbc = "des-ede3-cbc";
pub const NID_des_ede3_cbc = 44;
pub const OBJ_des_ede3_cbc = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 7);
};
pub const SN_rc5_cbc = "RC5-CBC";
pub const LN_rc5_cbc = "rc5-cbc";
pub const NID_rc5_cbc = 120;
pub const OBJ_rc5_cbc = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 8);
};
pub const SN_rc5_ecb = "RC5-ECB";
pub const LN_rc5_ecb = "rc5-ecb";
pub const NID_rc5_ecb = 121;
pub const SN_rc5_cfb64 = "RC5-CFB";
pub const LN_rc5_cfb64 = "rc5-cfb";
pub const NID_rc5_cfb64 = 122;
pub const SN_rc5_ofb64 = "RC5-OFB";
pub const LN_rc5_ofb64 = "rc5-ofb";
pub const NID_rc5_ofb64 = 123;
pub const SN_ms_ext_req = "msExtReq";
pub const LN_ms_ext_req = "Microsoft Extension Request";
pub const NID_ms_ext_req = 171;
pub const OBJ_ms_ext_req = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 14);
};
pub const SN_ms_code_ind = "msCodeInd";
pub const LN_ms_code_ind = "Microsoft Individual Code Signing";
pub const NID_ms_code_ind = 134;
pub const OBJ_ms_code_ind = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 21);
};
pub const SN_ms_code_com = "msCodeCom";
pub const LN_ms_code_com = "Microsoft Commercial Code Signing";
pub const NID_ms_code_com = 135;
pub const OBJ_ms_code_com = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 22);
};
pub const SN_ms_ctl_sign = "msCTLSign";
pub const LN_ms_ctl_sign = "Microsoft Trust List Signing";
pub const NID_ms_ctl_sign = 136;
pub const OBJ_ms_ctl_sign = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 10);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 1);
};
pub const SN_ms_sgc = "msSGC";
pub const LN_ms_sgc = "Microsoft Server Gated Crypto";
pub const NID_ms_sgc = 137;
pub const OBJ_ms_sgc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 10);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 3);
};
pub const SN_ms_efs = "msEFS";
pub const LN_ms_efs = "Microsoft Encrypted File System";
pub const NID_ms_efs = 138;
pub const OBJ_ms_efs = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 10);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 4);
};
pub const SN_ms_smartcard_login = "msSmartcardLogin";
pub const LN_ms_smartcard_login = "Microsoft Smartcard Login";
pub const NID_ms_smartcard_login = 648;
pub const OBJ_ms_smartcard_login = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 20);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 2);
};
pub const SN_ms_upn = "msUPN";
pub const LN_ms_upn = "Microsoft User Principal Name";
pub const NID_ms_upn = 649;
pub const OBJ_ms_upn = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 20);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 3);
};
pub const SN_idea_cbc = "IDEA-CBC";
pub const LN_idea_cbc = "idea-cbc";
pub const NID_idea_cbc = 34;
pub const OBJ_idea_cbc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 188);
    _ = @as(c_long, 7);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_idea_ecb = "IDEA-ECB";
pub const LN_idea_ecb = "idea-ecb";
pub const NID_idea_ecb = 36;
pub const SN_idea_cfb64 = "IDEA-CFB";
pub const LN_idea_cfb64 = "idea-cfb";
pub const NID_idea_cfb64 = 35;
pub const SN_idea_ofb64 = "IDEA-OFB";
pub const LN_idea_ofb64 = "idea-ofb";
pub const NID_idea_ofb64 = 46;
pub const SN_bf_cbc = "BF-CBC";
pub const LN_bf_cbc = "bf-cbc";
pub const NID_bf_cbc = 91;
pub const OBJ_bf_cbc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 3029);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_bf_ecb = "BF-ECB";
pub const LN_bf_ecb = "bf-ecb";
pub const NID_bf_ecb = 92;
pub const SN_bf_cfb64 = "BF-CFB";
pub const LN_bf_cfb64 = "bf-cfb";
pub const NID_bf_cfb64 = 93;
pub const SN_bf_ofb64 = "BF-OFB";
pub const LN_bf_ofb64 = "bf-ofb";
pub const NID_bf_ofb64 = 94;
pub const SN_id_pkix = "PKIX";
pub const NID_id_pkix = 127;
pub const OBJ_id_pkix = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    _ = @as(c_long, 5);
    break :blk @as(c_long, 7);
};
pub const SN_id_pkix_mod = "id-pkix-mod";
pub const NID_id_pkix_mod = 258;
pub const OBJ_id_pkix_mod = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 0);
};
pub const SN_id_pe = "id-pe";
pub const NID_id_pe = 175;
pub const OBJ_id_pe = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 1);
};
pub const SN_id_qt = "id-qt";
pub const NID_id_qt = 259;
pub const OBJ_id_qt = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 2);
};
pub const SN_id_kp = "id-kp";
pub const NID_id_kp = 128;
pub const OBJ_id_kp = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 3);
};
pub const SN_id_it = "id-it";
pub const NID_id_it = 260;
pub const OBJ_id_it = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 4);
};
pub const SN_id_pkip = "id-pkip";
pub const NID_id_pkip = 261;
pub const OBJ_id_pkip = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 5);
};
pub const SN_id_alg = "id-alg";
pub const NID_id_alg = 262;
pub const OBJ_id_alg = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 6);
};
pub const SN_id_cmc = "id-cmc";
pub const NID_id_cmc = 263;
pub const OBJ_id_cmc = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 7);
};
pub const SN_id_on = "id-on";
pub const NID_id_on = 264;
pub const OBJ_id_on = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 8);
};
pub const SN_id_pda = "id-pda";
pub const NID_id_pda = 265;
pub const OBJ_id_pda = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 9);
};
pub const SN_id_aca = "id-aca";
pub const NID_id_aca = 266;
pub const OBJ_id_aca = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 10);
};
pub const SN_id_qcs = "id-qcs";
pub const NID_id_qcs = 267;
pub const OBJ_id_qcs = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 11);
};
pub const SN_id_cct = "id-cct";
pub const NID_id_cct = 268;
pub const OBJ_id_cct = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 12);
};
pub const SN_id_ppl = "id-ppl";
pub const NID_id_ppl = 662;
pub const OBJ_id_ppl = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 21);
};
pub const SN_id_ad = "id-ad";
pub const NID_id_ad = 176;
pub const OBJ_id_ad = blk: {
    _ = OBJ_id_pkix;
    break :blk @as(c_long, 48);
};
pub const SN_id_pkix1_explicit_88 = "id-pkix1-explicit-88";
pub const NID_id_pkix1_explicit_88 = 269;
pub const OBJ_id_pkix1_explicit_88 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 1);
};
pub const SN_id_pkix1_implicit_88 = "id-pkix1-implicit-88";
pub const NID_id_pkix1_implicit_88 = 270;
pub const OBJ_id_pkix1_implicit_88 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 2);
};
pub const SN_id_pkix1_explicit_93 = "id-pkix1-explicit-93";
pub const NID_id_pkix1_explicit_93 = 271;
pub const OBJ_id_pkix1_explicit_93 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 3);
};
pub const SN_id_pkix1_implicit_93 = "id-pkix1-implicit-93";
pub const NID_id_pkix1_implicit_93 = 272;
pub const OBJ_id_pkix1_implicit_93 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 4);
};
pub const SN_id_mod_crmf = "id-mod-crmf";
pub const NID_id_mod_crmf = 273;
pub const OBJ_id_mod_crmf = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 5);
};
pub const SN_id_mod_cmc = "id-mod-cmc";
pub const NID_id_mod_cmc = 274;
pub const OBJ_id_mod_cmc = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 6);
};
pub const SN_id_mod_kea_profile_88 = "id-mod-kea-profile-88";
pub const NID_id_mod_kea_profile_88 = 275;
pub const OBJ_id_mod_kea_profile_88 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 7);
};
pub const SN_id_mod_kea_profile_93 = "id-mod-kea-profile-93";
pub const NID_id_mod_kea_profile_93 = 276;
pub const OBJ_id_mod_kea_profile_93 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 8);
};
pub const SN_id_mod_cmp = "id-mod-cmp";
pub const NID_id_mod_cmp = 277;
pub const OBJ_id_mod_cmp = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 9);
};
pub const SN_id_mod_qualified_cert_88 = "id-mod-qualified-cert-88";
pub const NID_id_mod_qualified_cert_88 = 278;
pub const OBJ_id_mod_qualified_cert_88 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 10);
};
pub const SN_id_mod_qualified_cert_93 = "id-mod-qualified-cert-93";
pub const NID_id_mod_qualified_cert_93 = 279;
pub const OBJ_id_mod_qualified_cert_93 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 11);
};
pub const SN_id_mod_attribute_cert = "id-mod-attribute-cert";
pub const NID_id_mod_attribute_cert = 280;
pub const OBJ_id_mod_attribute_cert = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 12);
};
pub const SN_id_mod_timestamp_protocol = "id-mod-timestamp-protocol";
pub const NID_id_mod_timestamp_protocol = 281;
pub const OBJ_id_mod_timestamp_protocol = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 13);
};
pub const SN_id_mod_ocsp = "id-mod-ocsp";
pub const NID_id_mod_ocsp = 282;
pub const OBJ_id_mod_ocsp = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 14);
};
pub const SN_id_mod_dvcs = "id-mod-dvcs";
pub const NID_id_mod_dvcs = 283;
pub const OBJ_id_mod_dvcs = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 15);
};
pub const SN_id_mod_cmp2000 = "id-mod-cmp2000";
pub const NID_id_mod_cmp2000 = 284;
pub const OBJ_id_mod_cmp2000 = blk: {
    _ = OBJ_id_pkix_mod;
    break :blk @as(c_long, 16);
};
pub const SN_info_access = "authorityInfoAccess";
pub const LN_info_access = "Authority Information Access";
pub const NID_info_access = 177;
pub const OBJ_info_access = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 1);
};
pub const SN_biometricInfo = "biometricInfo";
pub const LN_biometricInfo = "Biometric Info";
pub const NID_biometricInfo = 285;
pub const OBJ_biometricInfo = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 2);
};
pub const SN_qcStatements = "qcStatements";
pub const NID_qcStatements = 286;
pub const OBJ_qcStatements = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 3);
};
pub const SN_ac_auditEntity = "ac-auditEntity";
pub const NID_ac_auditEntity = 287;
pub const OBJ_ac_auditEntity = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 4);
};
pub const SN_ac_targeting = "ac-targeting";
pub const NID_ac_targeting = 288;
pub const OBJ_ac_targeting = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 5);
};
pub const SN_aaControls = "aaControls";
pub const NID_aaControls = 289;
pub const OBJ_aaControls = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 6);
};
pub const SN_sbgp_ipAddrBlock = "sbgp-ipAddrBlock";
pub const NID_sbgp_ipAddrBlock = 290;
pub const OBJ_sbgp_ipAddrBlock = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 7);
};
pub const SN_sbgp_autonomousSysNum = "sbgp-autonomousSysNum";
pub const NID_sbgp_autonomousSysNum = 291;
pub const OBJ_sbgp_autonomousSysNum = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 8);
};
pub const SN_sbgp_routerIdentifier = "sbgp-routerIdentifier";
pub const NID_sbgp_routerIdentifier = 292;
pub const OBJ_sbgp_routerIdentifier = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 9);
};
pub const SN_ac_proxying = "ac-proxying";
pub const NID_ac_proxying = 397;
pub const OBJ_ac_proxying = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 10);
};
pub const SN_sinfo_access = "subjectInfoAccess";
pub const LN_sinfo_access = "Subject Information Access";
pub const NID_sinfo_access = 398;
pub const OBJ_sinfo_access = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 11);
};
pub const SN_proxyCertInfo = "proxyCertInfo";
pub const LN_proxyCertInfo = "Proxy Certificate Information";
pub const NID_proxyCertInfo = 663;
pub const OBJ_proxyCertInfo = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 14);
};
pub const SN_tlsfeature = "tlsfeature";
pub const LN_tlsfeature = "TLS Feature";
pub const NID_tlsfeature = 1020;
pub const OBJ_tlsfeature = blk: {
    _ = OBJ_id_pe;
    break :blk @as(c_long, 24);
};
pub const SN_id_qt_cps = "id-qt-cps";
pub const LN_id_qt_cps = "Policy Qualifier CPS";
pub const NID_id_qt_cps = 164;
pub const OBJ_id_qt_cps = blk: {
    _ = OBJ_id_qt;
    break :blk @as(c_long, 1);
};
pub const SN_id_qt_unotice = "id-qt-unotice";
pub const LN_id_qt_unotice = "Policy Qualifier User Notice";
pub const NID_id_qt_unotice = 165;
pub const OBJ_id_qt_unotice = blk: {
    _ = OBJ_id_qt;
    break :blk @as(c_long, 2);
};
pub const SN_textNotice = "textNotice";
pub const NID_textNotice = 293;
pub const OBJ_textNotice = blk: {
    _ = OBJ_id_qt;
    break :blk @as(c_long, 3);
};
pub const SN_server_auth = "serverAuth";
pub const LN_server_auth = "TLS Web Server Authentication";
pub const NID_server_auth = 129;
pub const OBJ_server_auth = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 1);
};
pub const SN_client_auth = "clientAuth";
pub const LN_client_auth = "TLS Web Client Authentication";
pub const NID_client_auth = 130;
pub const OBJ_client_auth = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 2);
};
pub const SN_code_sign = "codeSigning";
pub const LN_code_sign = "Code Signing";
pub const NID_code_sign = 131;
pub const OBJ_code_sign = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 3);
};
pub const SN_email_protect = "emailProtection";
pub const LN_email_protect = "E-mail Protection";
pub const NID_email_protect = 132;
pub const OBJ_email_protect = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 4);
};
pub const SN_ipsecEndSystem = "ipsecEndSystem";
pub const LN_ipsecEndSystem = "IPSec End System";
pub const NID_ipsecEndSystem = 294;
pub const OBJ_ipsecEndSystem = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 5);
};
pub const SN_ipsecTunnel = "ipsecTunnel";
pub const LN_ipsecTunnel = "IPSec Tunnel";
pub const NID_ipsecTunnel = 295;
pub const OBJ_ipsecTunnel = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 6);
};
pub const SN_ipsecUser = "ipsecUser";
pub const LN_ipsecUser = "IPSec User";
pub const NID_ipsecUser = 296;
pub const OBJ_ipsecUser = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 7);
};
pub const SN_time_stamp = "timeStamping";
pub const LN_time_stamp = "Time Stamping";
pub const NID_time_stamp = 133;
pub const OBJ_time_stamp = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 8);
};
pub const SN_OCSP_sign = "OCSPSigning";
pub const LN_OCSP_sign = "OCSP Signing";
pub const NID_OCSP_sign = 180;
pub const OBJ_OCSP_sign = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 9);
};
pub const SN_dvcs = "DVCS";
pub const LN_dvcs = "dvcs";
pub const NID_dvcs = 297;
pub const OBJ_dvcs = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 10);
};
pub const SN_ipsec_IKE = "ipsecIKE";
pub const LN_ipsec_IKE = "ipsec Internet Key Exchange";
pub const NID_ipsec_IKE = 1022;
pub const OBJ_ipsec_IKE = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 17);
};
pub const SN_capwapAC = "capwapAC";
pub const LN_capwapAC = "Ctrl/provision WAP Access";
pub const NID_capwapAC = 1023;
pub const OBJ_capwapAC = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 18);
};
pub const SN_capwapWTP = "capwapWTP";
pub const LN_capwapWTP = "Ctrl/Provision WAP Termination";
pub const NID_capwapWTP = 1024;
pub const OBJ_capwapWTP = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 19);
};
pub const SN_sshClient = "secureShellClient";
pub const LN_sshClient = "SSH Client";
pub const NID_sshClient = 1025;
pub const OBJ_sshClient = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 21);
};
pub const SN_sshServer = "secureShellServer";
pub const LN_sshServer = "SSH Server";
pub const NID_sshServer = 1026;
pub const OBJ_sshServer = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 22);
};
pub const SN_sendRouter = "sendRouter";
pub const LN_sendRouter = "Send Router";
pub const NID_sendRouter = 1027;
pub const OBJ_sendRouter = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 23);
};
pub const SN_sendProxiedRouter = "sendProxiedRouter";
pub const LN_sendProxiedRouter = "Send Proxied Router";
pub const NID_sendProxiedRouter = 1028;
pub const OBJ_sendProxiedRouter = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 24);
};
pub const SN_sendOwner = "sendOwner";
pub const LN_sendOwner = "Send Owner";
pub const NID_sendOwner = 1029;
pub const OBJ_sendOwner = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 25);
};
pub const SN_sendProxiedOwner = "sendProxiedOwner";
pub const LN_sendProxiedOwner = "Send Proxied Owner";
pub const NID_sendProxiedOwner = 1030;
pub const OBJ_sendProxiedOwner = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 26);
};
pub const SN_cmcCA = "cmcCA";
pub const LN_cmcCA = "CMC Certificate Authority";
pub const NID_cmcCA = 1131;
pub const OBJ_cmcCA = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 27);
};
pub const SN_cmcRA = "cmcRA";
pub const LN_cmcRA = "CMC Registration Authority";
pub const NID_cmcRA = 1132;
pub const OBJ_cmcRA = blk: {
    _ = OBJ_id_kp;
    break :blk @as(c_long, 28);
};
pub const SN_id_it_caProtEncCert = "id-it-caProtEncCert";
pub const NID_id_it_caProtEncCert = 298;
pub const OBJ_id_it_caProtEncCert = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 1);
};
pub const SN_id_it_signKeyPairTypes = "id-it-signKeyPairTypes";
pub const NID_id_it_signKeyPairTypes = 299;
pub const OBJ_id_it_signKeyPairTypes = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 2);
};
pub const SN_id_it_encKeyPairTypes = "id-it-encKeyPairTypes";
pub const NID_id_it_encKeyPairTypes = 300;
pub const OBJ_id_it_encKeyPairTypes = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 3);
};
pub const SN_id_it_preferredSymmAlg = "id-it-preferredSymmAlg";
pub const NID_id_it_preferredSymmAlg = 301;
pub const OBJ_id_it_preferredSymmAlg = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 4);
};
pub const SN_id_it_caKeyUpdateInfo = "id-it-caKeyUpdateInfo";
pub const NID_id_it_caKeyUpdateInfo = 302;
pub const OBJ_id_it_caKeyUpdateInfo = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 5);
};
pub const SN_id_it_currentCRL = "id-it-currentCRL";
pub const NID_id_it_currentCRL = 303;
pub const OBJ_id_it_currentCRL = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 6);
};
pub const SN_id_it_unsupportedOIDs = "id-it-unsupportedOIDs";
pub const NID_id_it_unsupportedOIDs = 304;
pub const OBJ_id_it_unsupportedOIDs = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 7);
};
pub const SN_id_it_subscriptionRequest = "id-it-subscriptionRequest";
pub const NID_id_it_subscriptionRequest = 305;
pub const OBJ_id_it_subscriptionRequest = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 8);
};
pub const SN_id_it_subscriptionResponse = "id-it-subscriptionResponse";
pub const NID_id_it_subscriptionResponse = 306;
pub const OBJ_id_it_subscriptionResponse = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 9);
};
pub const SN_id_it_keyPairParamReq = "id-it-keyPairParamReq";
pub const NID_id_it_keyPairParamReq = 307;
pub const OBJ_id_it_keyPairParamReq = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 10);
};
pub const SN_id_it_keyPairParamRep = "id-it-keyPairParamRep";
pub const NID_id_it_keyPairParamRep = 308;
pub const OBJ_id_it_keyPairParamRep = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 11);
};
pub const SN_id_it_revPassphrase = "id-it-revPassphrase";
pub const NID_id_it_revPassphrase = 309;
pub const OBJ_id_it_revPassphrase = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 12);
};
pub const SN_id_it_implicitConfirm = "id-it-implicitConfirm";
pub const NID_id_it_implicitConfirm = 310;
pub const OBJ_id_it_implicitConfirm = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 13);
};
pub const SN_id_it_confirmWaitTime = "id-it-confirmWaitTime";
pub const NID_id_it_confirmWaitTime = 311;
pub const OBJ_id_it_confirmWaitTime = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 14);
};
pub const SN_id_it_origPKIMessage = "id-it-origPKIMessage";
pub const NID_id_it_origPKIMessage = 312;
pub const OBJ_id_it_origPKIMessage = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 15);
};
pub const SN_id_it_suppLangTags = "id-it-suppLangTags";
pub const NID_id_it_suppLangTags = 784;
pub const OBJ_id_it_suppLangTags = blk: {
    _ = OBJ_id_it;
    break :blk @as(c_long, 16);
};
pub const SN_id_regCtrl = "id-regCtrl";
pub const NID_id_regCtrl = 313;
pub const OBJ_id_regCtrl = blk: {
    _ = OBJ_id_pkip;
    break :blk @as(c_long, 1);
};
pub const SN_id_regInfo = "id-regInfo";
pub const NID_id_regInfo = 314;
pub const OBJ_id_regInfo = blk: {
    _ = OBJ_id_pkip;
    break :blk @as(c_long, 2);
};
pub const SN_id_regCtrl_regToken = "id-regCtrl-regToken";
pub const NID_id_regCtrl_regToken = 315;
pub const OBJ_id_regCtrl_regToken = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 1);
};
pub const SN_id_regCtrl_authenticator = "id-regCtrl-authenticator";
pub const NID_id_regCtrl_authenticator = 316;
pub const OBJ_id_regCtrl_authenticator = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 2);
};
pub const SN_id_regCtrl_pkiPublicationInfo = "id-regCtrl-pkiPublicationInfo";
pub const NID_id_regCtrl_pkiPublicationInfo = 317;
pub const OBJ_id_regCtrl_pkiPublicationInfo = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 3);
};
pub const SN_id_regCtrl_pkiArchiveOptions = "id-regCtrl-pkiArchiveOptions";
pub const NID_id_regCtrl_pkiArchiveOptions = 318;
pub const OBJ_id_regCtrl_pkiArchiveOptions = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 4);
};
pub const SN_id_regCtrl_oldCertID = "id-regCtrl-oldCertID";
pub const NID_id_regCtrl_oldCertID = 319;
pub const OBJ_id_regCtrl_oldCertID = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 5);
};
pub const SN_id_regCtrl_protocolEncrKey = "id-regCtrl-protocolEncrKey";
pub const NID_id_regCtrl_protocolEncrKey = 320;
pub const OBJ_id_regCtrl_protocolEncrKey = blk: {
    _ = OBJ_id_regCtrl;
    break :blk @as(c_long, 6);
};
pub const SN_id_regInfo_utf8Pairs = "id-regInfo-utf8Pairs";
pub const NID_id_regInfo_utf8Pairs = 321;
pub const OBJ_id_regInfo_utf8Pairs = blk: {
    _ = OBJ_id_regInfo;
    break :blk @as(c_long, 1);
};
pub const SN_id_regInfo_certReq = "id-regInfo-certReq";
pub const NID_id_regInfo_certReq = 322;
pub const OBJ_id_regInfo_certReq = blk: {
    _ = OBJ_id_regInfo;
    break :blk @as(c_long, 2);
};
pub const SN_id_alg_des40 = "id-alg-des40";
pub const NID_id_alg_des40 = 323;
pub const OBJ_id_alg_des40 = blk: {
    _ = OBJ_id_alg;
    break :blk @as(c_long, 1);
};
pub const SN_id_alg_noSignature = "id-alg-noSignature";
pub const NID_id_alg_noSignature = 324;
pub const OBJ_id_alg_noSignature = blk: {
    _ = OBJ_id_alg;
    break :blk @as(c_long, 2);
};
pub const SN_id_alg_dh_sig_hmac_sha1 = "id-alg-dh-sig-hmac-sha1";
pub const NID_id_alg_dh_sig_hmac_sha1 = 325;
pub const OBJ_id_alg_dh_sig_hmac_sha1 = blk: {
    _ = OBJ_id_alg;
    break :blk @as(c_long, 3);
};
pub const SN_id_alg_dh_pop = "id-alg-dh-pop";
pub const NID_id_alg_dh_pop = 326;
pub const OBJ_id_alg_dh_pop = blk: {
    _ = OBJ_id_alg;
    break :blk @as(c_long, 4);
};
pub const SN_id_cmc_statusInfo = "id-cmc-statusInfo";
pub const NID_id_cmc_statusInfo = 327;
pub const OBJ_id_cmc_statusInfo = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 1);
};
pub const SN_id_cmc_identification = "id-cmc-identification";
pub const NID_id_cmc_identification = 328;
pub const OBJ_id_cmc_identification = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 2);
};
pub const SN_id_cmc_identityProof = "id-cmc-identityProof";
pub const NID_id_cmc_identityProof = 329;
pub const OBJ_id_cmc_identityProof = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 3);
};
pub const SN_id_cmc_dataReturn = "id-cmc-dataReturn";
pub const NID_id_cmc_dataReturn = 330;
pub const OBJ_id_cmc_dataReturn = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 4);
};
pub const SN_id_cmc_transactionId = "id-cmc-transactionId";
pub const NID_id_cmc_transactionId = 331;
pub const OBJ_id_cmc_transactionId = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 5);
};
pub const SN_id_cmc_senderNonce = "id-cmc-senderNonce";
pub const NID_id_cmc_senderNonce = 332;
pub const OBJ_id_cmc_senderNonce = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 6);
};
pub const SN_id_cmc_recipientNonce = "id-cmc-recipientNonce";
pub const NID_id_cmc_recipientNonce = 333;
pub const OBJ_id_cmc_recipientNonce = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 7);
};
pub const SN_id_cmc_addExtensions = "id-cmc-addExtensions";
pub const NID_id_cmc_addExtensions = 334;
pub const OBJ_id_cmc_addExtensions = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 8);
};
pub const SN_id_cmc_encryptedPOP = "id-cmc-encryptedPOP";
pub const NID_id_cmc_encryptedPOP = 335;
pub const OBJ_id_cmc_encryptedPOP = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 9);
};
pub const SN_id_cmc_decryptedPOP = "id-cmc-decryptedPOP";
pub const NID_id_cmc_decryptedPOP = 336;
pub const OBJ_id_cmc_decryptedPOP = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 10);
};
pub const SN_id_cmc_lraPOPWitness = "id-cmc-lraPOPWitness";
pub const NID_id_cmc_lraPOPWitness = 337;
pub const OBJ_id_cmc_lraPOPWitness = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 11);
};
pub const SN_id_cmc_getCert = "id-cmc-getCert";
pub const NID_id_cmc_getCert = 338;
pub const OBJ_id_cmc_getCert = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 15);
};
pub const SN_id_cmc_getCRL = "id-cmc-getCRL";
pub const NID_id_cmc_getCRL = 339;
pub const OBJ_id_cmc_getCRL = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 16);
};
pub const SN_id_cmc_revokeRequest = "id-cmc-revokeRequest";
pub const NID_id_cmc_revokeRequest = 340;
pub const OBJ_id_cmc_revokeRequest = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 17);
};
pub const SN_id_cmc_regInfo = "id-cmc-regInfo";
pub const NID_id_cmc_regInfo = 341;
pub const OBJ_id_cmc_regInfo = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 18);
};
pub const SN_id_cmc_responseInfo = "id-cmc-responseInfo";
pub const NID_id_cmc_responseInfo = 342;
pub const OBJ_id_cmc_responseInfo = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 19);
};
pub const SN_id_cmc_queryPending = "id-cmc-queryPending";
pub const NID_id_cmc_queryPending = 343;
pub const OBJ_id_cmc_queryPending = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 21);
};
pub const SN_id_cmc_popLinkRandom = "id-cmc-popLinkRandom";
pub const NID_id_cmc_popLinkRandom = 344;
pub const OBJ_id_cmc_popLinkRandom = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 22);
};
pub const SN_id_cmc_popLinkWitness = "id-cmc-popLinkWitness";
pub const NID_id_cmc_popLinkWitness = 345;
pub const OBJ_id_cmc_popLinkWitness = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 23);
};
pub const SN_id_cmc_confirmCertAcceptance = "id-cmc-confirmCertAcceptance";
pub const NID_id_cmc_confirmCertAcceptance = 346;
pub const OBJ_id_cmc_confirmCertAcceptance = blk: {
    _ = OBJ_id_cmc;
    break :blk @as(c_long, 24);
};
pub const SN_id_on_personalData = "id-on-personalData";
pub const NID_id_on_personalData = 347;
pub const OBJ_id_on_personalData = blk: {
    _ = OBJ_id_on;
    break :blk @as(c_long, 1);
};
pub const SN_id_on_permanentIdentifier = "id-on-permanentIdentifier";
pub const LN_id_on_permanentIdentifier = "Permanent Identifier";
pub const NID_id_on_permanentIdentifier = 858;
pub const OBJ_id_on_permanentIdentifier = blk: {
    _ = OBJ_id_on;
    break :blk @as(c_long, 3);
};
pub const SN_id_pda_dateOfBirth = "id-pda-dateOfBirth";
pub const NID_id_pda_dateOfBirth = 348;
pub const OBJ_id_pda_dateOfBirth = blk: {
    _ = OBJ_id_pda;
    break :blk @as(c_long, 1);
};
pub const SN_id_pda_placeOfBirth = "id-pda-placeOfBirth";
pub const NID_id_pda_placeOfBirth = 349;
pub const OBJ_id_pda_placeOfBirth = blk: {
    _ = OBJ_id_pda;
    break :blk @as(c_long, 2);
};
pub const SN_id_pda_gender = "id-pda-gender";
pub const NID_id_pda_gender = 351;
pub const OBJ_id_pda_gender = blk: {
    _ = OBJ_id_pda;
    break :blk @as(c_long, 3);
};
pub const SN_id_pda_countryOfCitizenship = "id-pda-countryOfCitizenship";
pub const NID_id_pda_countryOfCitizenship = 352;
pub const OBJ_id_pda_countryOfCitizenship = blk: {
    _ = OBJ_id_pda;
    break :blk @as(c_long, 4);
};
pub const SN_id_pda_countryOfResidence = "id-pda-countryOfResidence";
pub const NID_id_pda_countryOfResidence = 353;
pub const OBJ_id_pda_countryOfResidence = blk: {
    _ = OBJ_id_pda;
    break :blk @as(c_long, 5);
};
pub const SN_id_aca_authenticationInfo = "id-aca-authenticationInfo";
pub const NID_id_aca_authenticationInfo = 354;
pub const OBJ_id_aca_authenticationInfo = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 1);
};
pub const SN_id_aca_accessIdentity = "id-aca-accessIdentity";
pub const NID_id_aca_accessIdentity = 355;
pub const OBJ_id_aca_accessIdentity = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 2);
};
pub const SN_id_aca_chargingIdentity = "id-aca-chargingIdentity";
pub const NID_id_aca_chargingIdentity = 356;
pub const OBJ_id_aca_chargingIdentity = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 3);
};
pub const SN_id_aca_group = "id-aca-group";
pub const NID_id_aca_group = 357;
pub const OBJ_id_aca_group = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 4);
};
pub const SN_id_aca_role = "id-aca-role";
pub const NID_id_aca_role = 358;
pub const OBJ_id_aca_role = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 5);
};
pub const SN_id_aca_encAttrs = "id-aca-encAttrs";
pub const NID_id_aca_encAttrs = 399;
pub const OBJ_id_aca_encAttrs = blk: {
    _ = OBJ_id_aca;
    break :blk @as(c_long, 6);
};
pub const SN_id_qcs_pkixQCSyntax_v1 = "id-qcs-pkixQCSyntax-v1";
pub const NID_id_qcs_pkixQCSyntax_v1 = 359;
pub const OBJ_id_qcs_pkixQCSyntax_v1 = blk: {
    _ = OBJ_id_qcs;
    break :blk @as(c_long, 1);
};
pub const SN_id_cct_crs = "id-cct-crs";
pub const NID_id_cct_crs = 360;
pub const OBJ_id_cct_crs = blk: {
    _ = OBJ_id_cct;
    break :blk @as(c_long, 1);
};
pub const SN_id_cct_PKIData = "id-cct-PKIData";
pub const NID_id_cct_PKIData = 361;
pub const OBJ_id_cct_PKIData = blk: {
    _ = OBJ_id_cct;
    break :blk @as(c_long, 2);
};
pub const SN_id_cct_PKIResponse = "id-cct-PKIResponse";
pub const NID_id_cct_PKIResponse = 362;
pub const OBJ_id_cct_PKIResponse = blk: {
    _ = OBJ_id_cct;
    break :blk @as(c_long, 3);
};
pub const SN_id_ppl_anyLanguage = "id-ppl-anyLanguage";
pub const LN_id_ppl_anyLanguage = "Any language";
pub const NID_id_ppl_anyLanguage = 664;
pub const OBJ_id_ppl_anyLanguage = blk: {
    _ = OBJ_id_ppl;
    break :blk @as(c_long, 0);
};
pub const SN_id_ppl_inheritAll = "id-ppl-inheritAll";
pub const LN_id_ppl_inheritAll = "Inherit all";
pub const NID_id_ppl_inheritAll = 665;
pub const OBJ_id_ppl_inheritAll = blk: {
    _ = OBJ_id_ppl;
    break :blk @as(c_long, 1);
};
pub const SN_Independent = "id-ppl-independent";
pub const LN_Independent = "Independent";
pub const NID_Independent = 667;
pub const OBJ_Independent = blk: {
    _ = OBJ_id_ppl;
    break :blk @as(c_long, 2);
};
pub const SN_ad_OCSP = "OCSP";
pub const LN_ad_OCSP = "OCSP";
pub const NID_ad_OCSP = 178;
pub const OBJ_ad_OCSP = blk: {
    _ = OBJ_id_ad;
    break :blk @as(c_long, 1);
};
pub const SN_ad_ca_issuers = "caIssuers";
pub const LN_ad_ca_issuers = "CA Issuers";
pub const NID_ad_ca_issuers = 179;
pub const OBJ_ad_ca_issuers = blk: {
    _ = OBJ_id_ad;
    break :blk @as(c_long, 2);
};
pub const SN_ad_timeStamping = "ad_timestamping";
pub const LN_ad_timeStamping = "AD Time Stamping";
pub const NID_ad_timeStamping = 363;
pub const OBJ_ad_timeStamping = blk: {
    _ = OBJ_id_ad;
    break :blk @as(c_long, 3);
};
pub const SN_ad_dvcs = "AD_DVCS";
pub const LN_ad_dvcs = "ad dvcs";
pub const NID_ad_dvcs = 364;
pub const OBJ_ad_dvcs = blk: {
    _ = OBJ_id_ad;
    break :blk @as(c_long, 4);
};
pub const SN_caRepository = "caRepository";
pub const LN_caRepository = "CA Repository";
pub const NID_caRepository = 785;
pub const OBJ_caRepository = blk: {
    _ = OBJ_id_ad;
    break :blk @as(c_long, 5);
};
pub const OBJ_id_pkix_OCSP = OBJ_ad_OCSP;
pub const SN_id_pkix_OCSP_basic = "basicOCSPResponse";
pub const LN_id_pkix_OCSP_basic = "Basic OCSP Response";
pub const NID_id_pkix_OCSP_basic = 365;
pub const OBJ_id_pkix_OCSP_basic = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 1);
};
pub const SN_id_pkix_OCSP_Nonce = "Nonce";
pub const LN_id_pkix_OCSP_Nonce = "OCSP Nonce";
pub const NID_id_pkix_OCSP_Nonce = 366;
pub const OBJ_id_pkix_OCSP_Nonce = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 2);
};
pub const SN_id_pkix_OCSP_CrlID = "CrlID";
pub const LN_id_pkix_OCSP_CrlID = "OCSP CRL ID";
pub const NID_id_pkix_OCSP_CrlID = 367;
pub const OBJ_id_pkix_OCSP_CrlID = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 3);
};
pub const SN_id_pkix_OCSP_acceptableResponses = "acceptableResponses";
pub const LN_id_pkix_OCSP_acceptableResponses = "Acceptable OCSP Responses";
pub const NID_id_pkix_OCSP_acceptableResponses = 368;
pub const OBJ_id_pkix_OCSP_acceptableResponses = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 4);
};
pub const SN_id_pkix_OCSP_noCheck = "noCheck";
pub const LN_id_pkix_OCSP_noCheck = "OCSP No Check";
pub const NID_id_pkix_OCSP_noCheck = 369;
pub const OBJ_id_pkix_OCSP_noCheck = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 5);
};
pub const SN_id_pkix_OCSP_archiveCutoff = "archiveCutoff";
pub const LN_id_pkix_OCSP_archiveCutoff = "OCSP Archive Cutoff";
pub const NID_id_pkix_OCSP_archiveCutoff = 370;
pub const OBJ_id_pkix_OCSP_archiveCutoff = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 6);
};
pub const SN_id_pkix_OCSP_serviceLocator = "serviceLocator";
pub const LN_id_pkix_OCSP_serviceLocator = "OCSP Service Locator";
pub const NID_id_pkix_OCSP_serviceLocator = 371;
pub const OBJ_id_pkix_OCSP_serviceLocator = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 7);
};
pub const SN_id_pkix_OCSP_extendedStatus = "extendedStatus";
pub const LN_id_pkix_OCSP_extendedStatus = "Extended OCSP Status";
pub const NID_id_pkix_OCSP_extendedStatus = 372;
pub const OBJ_id_pkix_OCSP_extendedStatus = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 8);
};
pub const SN_id_pkix_OCSP_valid = "valid";
pub const NID_id_pkix_OCSP_valid = 373;
pub const OBJ_id_pkix_OCSP_valid = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 9);
};
pub const SN_id_pkix_OCSP_path = "path";
pub const NID_id_pkix_OCSP_path = 374;
pub const OBJ_id_pkix_OCSP_path = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 10);
};
pub const SN_id_pkix_OCSP_trustRoot = "trustRoot";
pub const LN_id_pkix_OCSP_trustRoot = "Trust Root";
pub const NID_id_pkix_OCSP_trustRoot = 375;
pub const OBJ_id_pkix_OCSP_trustRoot = blk: {
    _ = OBJ_id_pkix_OCSP;
    break :blk @as(c_long, 11);
};
pub const SN_algorithm = "algorithm";
pub const LN_algorithm = "algorithm";
pub const NID_algorithm = 376;
pub const OBJ_algorithm = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 14);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 2);
};
pub const SN_md5WithRSA = "RSA-NP-MD5";
pub const LN_md5WithRSA = "md5WithRSA";
pub const NID_md5WithRSA = 104;
pub const OBJ_md5WithRSA = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 3);
};
pub const SN_des_ecb = "DES-ECB";
pub const LN_des_ecb = "des-ecb";
pub const NID_des_ecb = 29;
pub const OBJ_des_ecb = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 6);
};
pub const SN_des_cbc = "DES-CBC";
pub const LN_des_cbc = "des-cbc";
pub const NID_des_cbc = 31;
pub const OBJ_des_cbc = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 7);
};
pub const SN_des_ofb64 = "DES-OFB";
pub const LN_des_ofb64 = "des-ofb";
pub const NID_des_ofb64 = 45;
pub const OBJ_des_ofb64 = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 8);
};
pub const SN_des_cfb64 = "DES-CFB";
pub const LN_des_cfb64 = "des-cfb";
pub const NID_des_cfb64 = 30;
pub const OBJ_des_cfb64 = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 9);
};
pub const SN_rsaSignature = "rsaSignature";
pub const NID_rsaSignature = 377;
pub const OBJ_rsaSignature = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 11);
};
pub const SN_dsa_2 = "DSA-old";
pub const LN_dsa_2 = "dsaEncryption-old";
pub const NID_dsa_2 = 67;
pub const OBJ_dsa_2 = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 12);
};
pub const SN_dsaWithSHA = "DSA-SHA";
pub const LN_dsaWithSHA = "dsaWithSHA";
pub const NID_dsaWithSHA = 66;
pub const OBJ_dsaWithSHA = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 13);
};
pub const SN_shaWithRSAEncryption = "RSA-SHA";
pub const LN_shaWithRSAEncryption = "shaWithRSAEncryption";
pub const NID_shaWithRSAEncryption = 42;
pub const OBJ_shaWithRSAEncryption = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 15);
};
pub const SN_des_ede_ecb = "DES-EDE";
pub const LN_des_ede_ecb = "des-ede";
pub const NID_des_ede_ecb = 32;
pub const OBJ_des_ede_ecb = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 17);
};
pub const SN_des_ede3_ecb = "DES-EDE3";
pub const LN_des_ede3_ecb = "des-ede3";
pub const NID_des_ede3_ecb = 33;
pub const SN_des_ede_cbc = "DES-EDE-CBC";
pub const LN_des_ede_cbc = "des-ede-cbc";
pub const NID_des_ede_cbc = 43;
pub const SN_des_ede_cfb64 = "DES-EDE-CFB";
pub const LN_des_ede_cfb64 = "des-ede-cfb";
pub const NID_des_ede_cfb64 = 60;
pub const SN_des_ede3_cfb64 = "DES-EDE3-CFB";
pub const LN_des_ede3_cfb64 = "des-ede3-cfb";
pub const NID_des_ede3_cfb64 = 61;
pub const SN_des_ede_ofb64 = "DES-EDE-OFB";
pub const LN_des_ede_ofb64 = "des-ede-ofb";
pub const NID_des_ede_ofb64 = 62;
pub const SN_des_ede3_ofb64 = "DES-EDE3-OFB";
pub const LN_des_ede3_ofb64 = "des-ede3-ofb";
pub const NID_des_ede3_ofb64 = 63;
pub const SN_desx_cbc = "DESX-CBC";
pub const LN_desx_cbc = "desx-cbc";
pub const NID_desx_cbc = 80;
pub const SN_sha = "SHA";
pub const LN_sha = "sha";
pub const NID_sha = 41;
pub const OBJ_sha = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 18);
};
pub const SN_sha1 = "SHA1";
pub const LN_sha1 = "sha1";
pub const NID_sha1 = 64;
pub const OBJ_sha1 = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 26);
};
pub const SN_dsaWithSHA1_2 = "DSA-SHA1-old";
pub const LN_dsaWithSHA1_2 = "dsaWithSHA1-old";
pub const NID_dsaWithSHA1_2 = 70;
pub const OBJ_dsaWithSHA1_2 = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 27);
};
pub const SN_sha1WithRSA = "RSA-SHA1-2";
pub const LN_sha1WithRSA = "sha1WithRSA";
pub const NID_sha1WithRSA = 115;
pub const OBJ_sha1WithRSA = blk: {
    _ = OBJ_algorithm;
    break :blk @as(c_long, 29);
};
pub const SN_ripemd160 = "RIPEMD160";
pub const LN_ripemd160 = "ripemd160";
pub const NID_ripemd160 = 117;
pub const OBJ_ripemd160 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 1);
};
pub const SN_ripemd160WithRSA = "RSA-RIPEMD160";
pub const LN_ripemd160WithRSA = "ripemd160WithRSA";
pub const NID_ripemd160WithRSA = 119;
pub const OBJ_ripemd160WithRSA = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_blake2b512 = "BLAKE2b512";
pub const LN_blake2b512 = "blake2b512";
pub const NID_blake2b512 = 1056;
pub const OBJ_blake2b512 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1722);
    _ = @as(c_long, 12);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 16);
};
pub const SN_blake2s256 = "BLAKE2s256";
pub const LN_blake2s256 = "blake2s256";
pub const NID_blake2s256 = 1057;
pub const OBJ_blake2s256 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1722);
    _ = @as(c_long, 12);
    _ = @as(c_long, 2);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 8);
};
pub const SN_sxnet = "SXNetID";
pub const LN_sxnet = "Strong Extranet ID";
pub const NID_sxnet = 143;
pub const OBJ_sxnet = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 101);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 1);
};
pub const SN_X500 = "X500";
pub const LN_X500 = "directory services (X.500)";
pub const NID_X500 = 11;
pub const OBJ_X500 = blk: {
    _ = @as(c_long, 2);
    break :blk @as(c_long, 5);
};
pub const SN_X509 = "X509";
pub const NID_X509 = 12;
pub const OBJ_X509 = blk: {
    _ = OBJ_X500;
    break :blk @as(c_long, 4);
};
pub const SN_commonName = "CN";
pub const LN_commonName = "commonName";
pub const NID_commonName = 13;
pub const OBJ_commonName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 3);
};
pub const SN_surname = "SN";
pub const LN_surname = "surname";
pub const NID_surname = 100;
pub const OBJ_surname = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 4);
};
pub const LN_serialNumber = "serialNumber";
pub const NID_serialNumber = 105;
pub const OBJ_serialNumber = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 5);
};
pub const SN_countryName = "C";
pub const LN_countryName = "countryName";
pub const NID_countryName = 14;
pub const OBJ_countryName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 6);
};
pub const SN_localityName = "L";
pub const LN_localityName = "localityName";
pub const NID_localityName = 15;
pub const OBJ_localityName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 7);
};
pub const SN_stateOrProvinceName = "ST";
pub const LN_stateOrProvinceName = "stateOrProvinceName";
pub const NID_stateOrProvinceName = 16;
pub const OBJ_stateOrProvinceName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 8);
};
pub const SN_streetAddress = "street";
pub const LN_streetAddress = "streetAddress";
pub const NID_streetAddress = 660;
pub const OBJ_streetAddress = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 9);
};
pub const SN_organizationName = "O";
pub const LN_organizationName = "organizationName";
pub const NID_organizationName = 17;
pub const OBJ_organizationName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 10);
};
pub const SN_organizationalUnitName = "OU";
pub const LN_organizationalUnitName = "organizationalUnitName";
pub const NID_organizationalUnitName = 18;
pub const OBJ_organizationalUnitName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 11);
};
pub const SN_title = "title";
pub const LN_title = "title";
pub const NID_title = 106;
pub const OBJ_title = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 12);
};
pub const LN_description = "description";
pub const NID_description = 107;
pub const OBJ_description = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 13);
};
pub const LN_searchGuide = "searchGuide";
pub const NID_searchGuide = 859;
pub const OBJ_searchGuide = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 14);
};
pub const LN_businessCategory = "businessCategory";
pub const NID_businessCategory = 860;
pub const OBJ_businessCategory = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 15);
};
pub const LN_postalAddress = "postalAddress";
pub const NID_postalAddress = 861;
pub const OBJ_postalAddress = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 16);
};
pub const LN_postalCode = "postalCode";
pub const NID_postalCode = 661;
pub const OBJ_postalCode = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 17);
};
pub const LN_postOfficeBox = "postOfficeBox";
pub const NID_postOfficeBox = 862;
pub const OBJ_postOfficeBox = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 18);
};
pub const LN_physicalDeliveryOfficeName = "physicalDeliveryOfficeName";
pub const NID_physicalDeliveryOfficeName = 863;
pub const OBJ_physicalDeliveryOfficeName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 19);
};
pub const LN_telephoneNumber = "telephoneNumber";
pub const NID_telephoneNumber = 864;
pub const OBJ_telephoneNumber = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 20);
};
pub const LN_telexNumber = "telexNumber";
pub const NID_telexNumber = 865;
pub const OBJ_telexNumber = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 21);
};
pub const LN_teletexTerminalIdentifier = "teletexTerminalIdentifier";
pub const NID_teletexTerminalIdentifier = 866;
pub const OBJ_teletexTerminalIdentifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 22);
};
pub const LN_facsimileTelephoneNumber = "facsimileTelephoneNumber";
pub const NID_facsimileTelephoneNumber = 867;
pub const OBJ_facsimileTelephoneNumber = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 23);
};
pub const LN_x121Address = "x121Address";
pub const NID_x121Address = 868;
pub const OBJ_x121Address = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 24);
};
pub const LN_internationaliSDNNumber = "internationaliSDNNumber";
pub const NID_internationaliSDNNumber = 869;
pub const OBJ_internationaliSDNNumber = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 25);
};
pub const LN_registeredAddress = "registeredAddress";
pub const NID_registeredAddress = 870;
pub const OBJ_registeredAddress = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 26);
};
pub const LN_destinationIndicator = "destinationIndicator";
pub const NID_destinationIndicator = 871;
pub const OBJ_destinationIndicator = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 27);
};
pub const LN_preferredDeliveryMethod = "preferredDeliveryMethod";
pub const NID_preferredDeliveryMethod = 872;
pub const OBJ_preferredDeliveryMethod = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 28);
};
pub const LN_presentationAddress = "presentationAddress";
pub const NID_presentationAddress = 873;
pub const OBJ_presentationAddress = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 29);
};
pub const LN_supportedApplicationContext = "supportedApplicationContext";
pub const NID_supportedApplicationContext = 874;
pub const OBJ_supportedApplicationContext = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 30);
};
pub const SN_member = "member";
pub const NID_member = 875;
pub const OBJ_member = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 31);
};
pub const SN_owner = "owner";
pub const NID_owner = 876;
pub const OBJ_owner = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 32);
};
pub const LN_roleOccupant = "roleOccupant";
pub const NID_roleOccupant = 877;
pub const OBJ_roleOccupant = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 33);
};
pub const SN_seeAlso = "seeAlso";
pub const NID_seeAlso = 878;
pub const OBJ_seeAlso = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 34);
};
pub const LN_userPassword = "userPassword";
pub const NID_userPassword = 879;
pub const OBJ_userPassword = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 35);
};
pub const LN_userCertificate = "userCertificate";
pub const NID_userCertificate = 880;
pub const OBJ_userCertificate = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 36);
};
pub const LN_cACertificate = "cACertificate";
pub const NID_cACertificate = 881;
pub const OBJ_cACertificate = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 37);
};
pub const LN_authorityRevocationList = "authorityRevocationList";
pub const NID_authorityRevocationList = 882;
pub const OBJ_authorityRevocationList = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 38);
};
pub const LN_certificateRevocationList = "certificateRevocationList";
pub const NID_certificateRevocationList = 883;
pub const OBJ_certificateRevocationList = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 39);
};
pub const LN_crossCertificatePair = "crossCertificatePair";
pub const NID_crossCertificatePair = 884;
pub const OBJ_crossCertificatePair = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 40);
};
pub const SN_name = "name";
pub const LN_name = "name";
pub const NID_name = 173;
pub const OBJ_name = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 41);
};
pub const SN_givenName = "GN";
pub const LN_givenName = "givenName";
pub const NID_givenName = 99;
pub const OBJ_givenName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 42);
};
pub const SN_initials = "initials";
pub const LN_initials = "initials";
pub const NID_initials = 101;
pub const OBJ_initials = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 43);
};
pub const LN_generationQualifier = "generationQualifier";
pub const NID_generationQualifier = 509;
pub const OBJ_generationQualifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 44);
};
pub const LN_x500UniqueIdentifier = "x500UniqueIdentifier";
pub const NID_x500UniqueIdentifier = 503;
pub const OBJ_x500UniqueIdentifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 45);
};
pub const SN_dnQualifier = "dnQualifier";
pub const LN_dnQualifier = "dnQualifier";
pub const NID_dnQualifier = 174;
pub const OBJ_dnQualifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 46);
};
pub const LN_enhancedSearchGuide = "enhancedSearchGuide";
pub const NID_enhancedSearchGuide = 885;
pub const OBJ_enhancedSearchGuide = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 47);
};
pub const LN_protocolInformation = "protocolInformation";
pub const NID_protocolInformation = 886;
pub const OBJ_protocolInformation = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 48);
};
pub const LN_distinguishedName = "distinguishedName";
pub const NID_distinguishedName = 887;
pub const OBJ_distinguishedName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 49);
};
pub const LN_uniqueMember = "uniqueMember";
pub const NID_uniqueMember = 888;
pub const OBJ_uniqueMember = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 50);
};
pub const LN_houseIdentifier = "houseIdentifier";
pub const NID_houseIdentifier = 889;
pub const OBJ_houseIdentifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 51);
};
pub const LN_supportedAlgorithms = "supportedAlgorithms";
pub const NID_supportedAlgorithms = 890;
pub const OBJ_supportedAlgorithms = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 52);
};
pub const LN_deltaRevocationList = "deltaRevocationList";
pub const NID_deltaRevocationList = 891;
pub const OBJ_deltaRevocationList = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 53);
};
pub const SN_dmdName = "dmdName";
pub const NID_dmdName = 892;
pub const OBJ_dmdName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 54);
};
pub const LN_pseudonym = "pseudonym";
pub const NID_pseudonym = 510;
pub const OBJ_pseudonym = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 65);
};
pub const SN_role = "role";
pub const LN_role = "role";
pub const NID_role = 400;
pub const OBJ_role = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 72);
};
pub const LN_organizationIdentifier = "organizationIdentifier";
pub const NID_organizationIdentifier = 1089;
pub const OBJ_organizationIdentifier = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 97);
};
pub const SN_countryCode3c = "c3";
pub const LN_countryCode3c = "countryCode3c";
pub const NID_countryCode3c = 1090;
pub const OBJ_countryCode3c = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 98);
};
pub const SN_countryCode3n = "n3";
pub const LN_countryCode3n = "countryCode3n";
pub const NID_countryCode3n = 1091;
pub const OBJ_countryCode3n = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 99);
};
pub const LN_dnsName = "dnsName";
pub const NID_dnsName = 1092;
pub const OBJ_dnsName = blk: {
    _ = OBJ_X509;
    break :blk @as(c_long, 100);
};
pub const SN_X500algorithms = "X500algorithms";
pub const LN_X500algorithms = "directory services - algorithms";
pub const NID_X500algorithms = 378;
pub const OBJ_X500algorithms = blk: {
    _ = OBJ_X500;
    break :blk @as(c_long, 8);
};
pub const SN_rsa = "RSA";
pub const LN_rsa = "rsa";
pub const NID_rsa = 19;
pub const OBJ_rsa = blk: {
    _ = OBJ_X500algorithms;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_mdc2WithRSA = "RSA-MDC2";
pub const LN_mdc2WithRSA = "mdc2WithRSA";
pub const NID_mdc2WithRSA = 96;
pub const OBJ_mdc2WithRSA = blk: {
    _ = OBJ_X500algorithms;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 100);
};
pub const SN_mdc2 = "MDC2";
pub const LN_mdc2 = "mdc2";
pub const NID_mdc2 = 95;
pub const OBJ_mdc2 = blk: {
    _ = OBJ_X500algorithms;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 101);
};
pub const SN_id_ce = "id-ce";
pub const NID_id_ce = 81;
pub const OBJ_id_ce = blk: {
    _ = OBJ_X500;
    break :blk @as(c_long, 29);
};
pub const SN_subject_directory_attributes = "subjectDirectoryAttributes";
pub const LN_subject_directory_attributes = "X509v3 Subject Directory Attributes";
pub const NID_subject_directory_attributes = 769;
pub const OBJ_subject_directory_attributes = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 9);
};
pub const SN_subject_key_identifier = "subjectKeyIdentifier";
pub const LN_subject_key_identifier = "X509v3 Subject Key Identifier";
pub const NID_subject_key_identifier = 82;
pub const OBJ_subject_key_identifier = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 14);
};
pub const SN_key_usage = "keyUsage";
pub const LN_key_usage = "X509v3 Key Usage";
pub const NID_key_usage = 83;
pub const OBJ_key_usage = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 15);
};
pub const SN_private_key_usage_period = "privateKeyUsagePeriod";
pub const LN_private_key_usage_period = "X509v3 Private Key Usage Period";
pub const NID_private_key_usage_period = 84;
pub const OBJ_private_key_usage_period = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 16);
};
pub const SN_subject_alt_name = "subjectAltName";
pub const LN_subject_alt_name = "X509v3 Subject Alternative Name";
pub const NID_subject_alt_name = 85;
pub const OBJ_subject_alt_name = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 17);
};
pub const SN_issuer_alt_name = "issuerAltName";
pub const LN_issuer_alt_name = "X509v3 Issuer Alternative Name";
pub const NID_issuer_alt_name = 86;
pub const OBJ_issuer_alt_name = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 18);
};
pub const SN_basic_constraints = "basicConstraints";
pub const LN_basic_constraints = "X509v3 Basic Constraints";
pub const NID_basic_constraints = 87;
pub const OBJ_basic_constraints = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 19);
};
pub const SN_crl_number = "crlNumber";
pub const LN_crl_number = "X509v3 CRL Number";
pub const NID_crl_number = 88;
pub const OBJ_crl_number = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 20);
};
pub const SN_crl_reason = "CRLReason";
pub const LN_crl_reason = "X509v3 CRL Reason Code";
pub const NID_crl_reason = 141;
pub const OBJ_crl_reason = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 21);
};
pub const SN_invalidity_date = "invalidityDate";
pub const LN_invalidity_date = "Invalidity Date";
pub const NID_invalidity_date = 142;
pub const OBJ_invalidity_date = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 24);
};
pub const SN_delta_crl = "deltaCRL";
pub const LN_delta_crl = "X509v3 Delta CRL Indicator";
pub const NID_delta_crl = 140;
pub const OBJ_delta_crl = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 27);
};
pub const SN_issuing_distribution_point = "issuingDistributionPoint";
pub const LN_issuing_distribution_point = "X509v3 Issuing Distribution Point";
pub const NID_issuing_distribution_point = 770;
pub const OBJ_issuing_distribution_point = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 28);
};
pub const SN_certificate_issuer = "certificateIssuer";
pub const LN_certificate_issuer = "X509v3 Certificate Issuer";
pub const NID_certificate_issuer = 771;
pub const OBJ_certificate_issuer = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 29);
};
pub const SN_name_constraints = "nameConstraints";
pub const LN_name_constraints = "X509v3 Name Constraints";
pub const NID_name_constraints = 666;
pub const OBJ_name_constraints = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 30);
};
pub const SN_crl_distribution_points = "crlDistributionPoints";
pub const LN_crl_distribution_points = "X509v3 CRL Distribution Points";
pub const NID_crl_distribution_points = 103;
pub const OBJ_crl_distribution_points = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 31);
};
pub const SN_certificate_policies = "certificatePolicies";
pub const LN_certificate_policies = "X509v3 Certificate Policies";
pub const NID_certificate_policies = 89;
pub const OBJ_certificate_policies = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 32);
};
pub const SN_any_policy = "anyPolicy";
pub const LN_any_policy = "X509v3 Any Policy";
pub const NID_any_policy = 746;
pub const OBJ_any_policy = blk: {
    _ = OBJ_certificate_policies;
    break :blk @as(c_long, 0);
};
pub const SN_policy_mappings = "policyMappings";
pub const LN_policy_mappings = "X509v3 Policy Mappings";
pub const NID_policy_mappings = 747;
pub const OBJ_policy_mappings = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 33);
};
pub const SN_authority_key_identifier = "authorityKeyIdentifier";
pub const LN_authority_key_identifier = "X509v3 Authority Key Identifier";
pub const NID_authority_key_identifier = 90;
pub const OBJ_authority_key_identifier = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 35);
};
pub const SN_policy_constraints = "policyConstraints";
pub const LN_policy_constraints = "X509v3 Policy Constraints";
pub const NID_policy_constraints = 401;
pub const OBJ_policy_constraints = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 36);
};
pub const SN_ext_key_usage = "extendedKeyUsage";
pub const LN_ext_key_usage = "X509v3 Extended Key Usage";
pub const NID_ext_key_usage = 126;
pub const OBJ_ext_key_usage = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 37);
};
pub const SN_freshest_crl = "freshestCRL";
pub const LN_freshest_crl = "X509v3 Freshest CRL";
pub const NID_freshest_crl = 857;
pub const OBJ_freshest_crl = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 46);
};
pub const SN_inhibit_any_policy = "inhibitAnyPolicy";
pub const LN_inhibit_any_policy = "X509v3 Inhibit Any Policy";
pub const NID_inhibit_any_policy = 748;
pub const OBJ_inhibit_any_policy = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 54);
};
pub const SN_target_information = "targetInformation";
pub const LN_target_information = "X509v3 AC Targeting";
pub const NID_target_information = 402;
pub const OBJ_target_information = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 55);
};
pub const SN_no_rev_avail = "noRevAvail";
pub const LN_no_rev_avail = "X509v3 No Revocation Available";
pub const NID_no_rev_avail = 403;
pub const OBJ_no_rev_avail = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 56);
};
pub const SN_anyExtendedKeyUsage = "anyExtendedKeyUsage";
pub const LN_anyExtendedKeyUsage = "Any Extended Key Usage";
pub const NID_anyExtendedKeyUsage = 910;
pub const OBJ_anyExtendedKeyUsage = blk: {
    _ = OBJ_ext_key_usage;
    break :blk @as(c_long, 0);
};
pub const SN_netscape = "Netscape";
pub const LN_netscape = "Netscape Communications Corp.";
pub const NID_netscape = 57;
pub const OBJ_netscape = blk: {
    _ = @as(c_long, 2);
    _ = @as(c_long, 16);
    _ = @as(c_long, 840);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 113730);
};
pub const SN_netscape_cert_extension = "nsCertExt";
pub const LN_netscape_cert_extension = "Netscape Certificate Extension";
pub const NID_netscape_cert_extension = 58;
pub const OBJ_netscape_cert_extension = blk: {
    _ = OBJ_netscape;
    break :blk @as(c_long, 1);
};
pub const SN_netscape_data_type = "nsDataType";
pub const LN_netscape_data_type = "Netscape Data Type";
pub const NID_netscape_data_type = 59;
pub const OBJ_netscape_data_type = blk: {
    _ = OBJ_netscape;
    break :blk @as(c_long, 2);
};
pub const SN_netscape_cert_type = "nsCertType";
pub const LN_netscape_cert_type = "Netscape Cert Type";
pub const NID_netscape_cert_type = 71;
pub const OBJ_netscape_cert_type = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 1);
};
pub const SN_netscape_base_url = "nsBaseUrl";
pub const LN_netscape_base_url = "Netscape Base Url";
pub const NID_netscape_base_url = 72;
pub const OBJ_netscape_base_url = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 2);
};
pub const SN_netscape_revocation_url = "nsRevocationUrl";
pub const LN_netscape_revocation_url = "Netscape Revocation Url";
pub const NID_netscape_revocation_url = 73;
pub const OBJ_netscape_revocation_url = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 3);
};
pub const SN_netscape_ca_revocation_url = "nsCaRevocationUrl";
pub const LN_netscape_ca_revocation_url = "Netscape CA Revocation Url";
pub const NID_netscape_ca_revocation_url = 74;
pub const OBJ_netscape_ca_revocation_url = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 4);
};
pub const SN_netscape_renewal_url = "nsRenewalUrl";
pub const LN_netscape_renewal_url = "Netscape Renewal Url";
pub const NID_netscape_renewal_url = 75;
pub const OBJ_netscape_renewal_url = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 7);
};
pub const SN_netscape_ca_policy_url = "nsCaPolicyUrl";
pub const LN_netscape_ca_policy_url = "Netscape CA Policy Url";
pub const NID_netscape_ca_policy_url = 76;
pub const OBJ_netscape_ca_policy_url = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 8);
};
pub const SN_netscape_ssl_server_name = "nsSslServerName";
pub const LN_netscape_ssl_server_name = "Netscape SSL Server Name";
pub const NID_netscape_ssl_server_name = 77;
pub const OBJ_netscape_ssl_server_name = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 12);
};
pub const SN_netscape_comment = "nsComment";
pub const LN_netscape_comment = "Netscape Comment";
pub const NID_netscape_comment = 78;
pub const OBJ_netscape_comment = blk: {
    _ = OBJ_netscape_cert_extension;
    break :blk @as(c_long, 13);
};
pub const SN_netscape_cert_sequence = "nsCertSequence";
pub const LN_netscape_cert_sequence = "Netscape Certificate Sequence";
pub const NID_netscape_cert_sequence = 79;
pub const OBJ_netscape_cert_sequence = blk: {
    _ = OBJ_netscape_data_type;
    break :blk @as(c_long, 5);
};
pub const SN_ns_sgc = "nsSGC";
pub const LN_ns_sgc = "Netscape Server Gated Crypto";
pub const NID_ns_sgc = 139;
pub const OBJ_ns_sgc = blk: {
    _ = OBJ_netscape;
    _ = @as(c_long, 4);
    break :blk @as(c_long, 1);
};
pub const SN_org = "ORG";
pub const LN_org = "org";
pub const NID_org = 379;
pub const OBJ_org = blk: {
    _ = OBJ_iso;
    break :blk @as(c_long, 3);
};
pub const SN_dod = "DOD";
pub const LN_dod = "dod";
pub const NID_dod = 380;
pub const OBJ_dod = blk: {
    _ = OBJ_org;
    break :blk @as(c_long, 6);
};
pub const SN_iana = "IANA";
pub const LN_iana = "iana";
pub const NID_iana = 381;
pub const OBJ_iana = blk: {
    _ = OBJ_dod;
    break :blk @as(c_long, 1);
};
pub const OBJ_internet = OBJ_iana;
pub const SN_Directory = "directory";
pub const LN_Directory = "Directory";
pub const NID_Directory = 382;
pub const OBJ_Directory = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 1);
};
pub const SN_Management = "mgmt";
pub const LN_Management = "Management";
pub const NID_Management = 383;
pub const OBJ_Management = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 2);
};
pub const SN_Experimental = "experimental";
pub const LN_Experimental = "Experimental";
pub const NID_Experimental = 384;
pub const OBJ_Experimental = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 3);
};
pub const SN_Private = "private";
pub const LN_Private = "Private";
pub const NID_Private = 385;
pub const OBJ_Private = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 4);
};
pub const SN_Security = "security";
pub const LN_Security = "Security";
pub const NID_Security = 386;
pub const OBJ_Security = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 5);
};
pub const SN_SNMPv2 = "snmpv2";
pub const LN_SNMPv2 = "SNMPv2";
pub const NID_SNMPv2 = 387;
pub const OBJ_SNMPv2 = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 6);
};
pub const LN_Mail = "Mail";
pub const NID_Mail = 388;
pub const OBJ_Mail = blk: {
    _ = OBJ_internet;
    break :blk @as(c_long, 7);
};
pub const SN_Enterprises = "enterprises";
pub const LN_Enterprises = "Enterprises";
pub const NID_Enterprises = 389;
pub const OBJ_Enterprises = blk: {
    _ = OBJ_Private;
    break :blk @as(c_long, 1);
};
pub const SN_dcObject = "dcobject";
pub const LN_dcObject = "dcObject";
pub const NID_dcObject = 390;
pub const OBJ_dcObject = blk: {
    _ = OBJ_Enterprises;
    _ = @as(c_long, 1466);
    break :blk @as(c_long, 344);
};
pub const SN_mime_mhs = "mime-mhs";
pub const LN_mime_mhs = "MIME MHS";
pub const NID_mime_mhs = 504;
pub const OBJ_mime_mhs = blk: {
    _ = OBJ_Mail;
    break :blk @as(c_long, 1);
};
pub const SN_mime_mhs_headings = "mime-mhs-headings";
pub const LN_mime_mhs_headings = "mime-mhs-headings";
pub const NID_mime_mhs_headings = 505;
pub const OBJ_mime_mhs_headings = blk: {
    _ = OBJ_mime_mhs;
    break :blk @as(c_long, 1);
};
pub const SN_mime_mhs_bodies = "mime-mhs-bodies";
pub const LN_mime_mhs_bodies = "mime-mhs-bodies";
pub const NID_mime_mhs_bodies = 506;
pub const OBJ_mime_mhs_bodies = blk: {
    _ = OBJ_mime_mhs;
    break :blk @as(c_long, 2);
};
pub const SN_id_hex_partial_message = "id-hex-partial-message";
pub const LN_id_hex_partial_message = "id-hex-partial-message";
pub const NID_id_hex_partial_message = 507;
pub const OBJ_id_hex_partial_message = blk: {
    _ = OBJ_mime_mhs_headings;
    break :blk @as(c_long, 1);
};
pub const SN_id_hex_multipart_message = "id-hex-multipart-message";
pub const LN_id_hex_multipart_message = "id-hex-multipart-message";
pub const NID_id_hex_multipart_message = 508;
pub const OBJ_id_hex_multipart_message = blk: {
    _ = OBJ_mime_mhs_headings;
    break :blk @as(c_long, 2);
};
pub const SN_zlib_compression = "ZLIB";
pub const LN_zlib_compression = "zlib compression";
pub const NID_zlib_compression = 125;
pub const OBJ_zlib_compression = blk: {
    _ = OBJ_id_smime_alg;
    break :blk @as(c_long, 8);
};
pub const OBJ_csor = blk: {
    _ = @as(c_long, 2);
    _ = @as(c_long, 16);
    _ = @as(c_long, 840);
    _ = @as(c_long, 1);
    _ = @as(c_long, 101);
    break :blk @as(c_long, 3);
};
pub const OBJ_nistAlgorithms = blk: {
    _ = OBJ_csor;
    break :blk @as(c_long, 4);
};
pub const OBJ_aes = blk: {
    _ = OBJ_nistAlgorithms;
    break :blk @as(c_long, 1);
};
pub const SN_aes_128_ecb = "AES-128-ECB";
pub const LN_aes_128_ecb = "aes-128-ecb";
pub const NID_aes_128_ecb = 418;
pub const OBJ_aes_128_ecb = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 1);
};
pub const SN_aes_128_cbc = "AES-128-CBC";
pub const LN_aes_128_cbc = "aes-128-cbc";
pub const NID_aes_128_cbc = 419;
pub const OBJ_aes_128_cbc = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 2);
};
pub const SN_aes_128_ofb128 = "AES-128-OFB";
pub const LN_aes_128_ofb128 = "aes-128-ofb";
pub const NID_aes_128_ofb128 = 420;
pub const OBJ_aes_128_ofb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 3);
};
pub const SN_aes_128_cfb128 = "AES-128-CFB";
pub const LN_aes_128_cfb128 = "aes-128-cfb";
pub const NID_aes_128_cfb128 = 421;
pub const OBJ_aes_128_cfb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 4);
};
pub const SN_id_aes128_wrap = "id-aes128-wrap";
pub const NID_id_aes128_wrap = 788;
pub const OBJ_id_aes128_wrap = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 5);
};
pub const SN_aes_128_gcm = "id-aes128-GCM";
pub const LN_aes_128_gcm = "aes-128-gcm";
pub const NID_aes_128_gcm = 895;
pub const OBJ_aes_128_gcm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 6);
};
pub const SN_aes_128_ccm = "id-aes128-CCM";
pub const LN_aes_128_ccm = "aes-128-ccm";
pub const NID_aes_128_ccm = 896;
pub const OBJ_aes_128_ccm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 7);
};
pub const SN_id_aes128_wrap_pad = "id-aes128-wrap-pad";
pub const NID_id_aes128_wrap_pad = 897;
pub const OBJ_id_aes128_wrap_pad = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 8);
};
pub const SN_aes_192_ecb = "AES-192-ECB";
pub const LN_aes_192_ecb = "aes-192-ecb";
pub const NID_aes_192_ecb = 422;
pub const OBJ_aes_192_ecb = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 21);
};
pub const SN_aes_192_cbc = "AES-192-CBC";
pub const LN_aes_192_cbc = "aes-192-cbc";
pub const NID_aes_192_cbc = 423;
pub const OBJ_aes_192_cbc = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 22);
};
pub const SN_aes_192_ofb128 = "AES-192-OFB";
pub const LN_aes_192_ofb128 = "aes-192-ofb";
pub const NID_aes_192_ofb128 = 424;
pub const OBJ_aes_192_ofb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 23);
};
pub const SN_aes_192_cfb128 = "AES-192-CFB";
pub const LN_aes_192_cfb128 = "aes-192-cfb";
pub const NID_aes_192_cfb128 = 425;
pub const OBJ_aes_192_cfb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 24);
};
pub const SN_id_aes192_wrap = "id-aes192-wrap";
pub const NID_id_aes192_wrap = 789;
pub const OBJ_id_aes192_wrap = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 25);
};
pub const SN_aes_192_gcm = "id-aes192-GCM";
pub const LN_aes_192_gcm = "aes-192-gcm";
pub const NID_aes_192_gcm = 898;
pub const OBJ_aes_192_gcm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 26);
};
pub const SN_aes_192_ccm = "id-aes192-CCM";
pub const LN_aes_192_ccm = "aes-192-ccm";
pub const NID_aes_192_ccm = 899;
pub const OBJ_aes_192_ccm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 27);
};
pub const SN_id_aes192_wrap_pad = "id-aes192-wrap-pad";
pub const NID_id_aes192_wrap_pad = 900;
pub const OBJ_id_aes192_wrap_pad = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 28);
};
pub const SN_aes_256_ecb = "AES-256-ECB";
pub const LN_aes_256_ecb = "aes-256-ecb";
pub const NID_aes_256_ecb = 426;
pub const OBJ_aes_256_ecb = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 41);
};
pub const SN_aes_256_cbc = "AES-256-CBC";
pub const LN_aes_256_cbc = "aes-256-cbc";
pub const NID_aes_256_cbc = 427;
pub const OBJ_aes_256_cbc = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 42);
};
pub const SN_aes_256_ofb128 = "AES-256-OFB";
pub const LN_aes_256_ofb128 = "aes-256-ofb";
pub const NID_aes_256_ofb128 = 428;
pub const OBJ_aes_256_ofb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 43);
};
pub const SN_aes_256_cfb128 = "AES-256-CFB";
pub const LN_aes_256_cfb128 = "aes-256-cfb";
pub const NID_aes_256_cfb128 = 429;
pub const OBJ_aes_256_cfb128 = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 44);
};
pub const SN_id_aes256_wrap = "id-aes256-wrap";
pub const NID_id_aes256_wrap = 790;
pub const OBJ_id_aes256_wrap = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 45);
};
pub const SN_aes_256_gcm = "id-aes256-GCM";
pub const LN_aes_256_gcm = "aes-256-gcm";
pub const NID_aes_256_gcm = 901;
pub const OBJ_aes_256_gcm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 46);
};
pub const SN_aes_256_ccm = "id-aes256-CCM";
pub const LN_aes_256_ccm = "aes-256-ccm";
pub const NID_aes_256_ccm = 902;
pub const OBJ_aes_256_ccm = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 47);
};
pub const SN_id_aes256_wrap_pad = "id-aes256-wrap-pad";
pub const NID_id_aes256_wrap_pad = 903;
pub const OBJ_id_aes256_wrap_pad = blk: {
    _ = OBJ_aes;
    break :blk @as(c_long, 48);
};
pub const SN_aes_128_xts = "AES-128-XTS";
pub const LN_aes_128_xts = "aes-128-xts";
pub const NID_aes_128_xts = 913;
pub const OBJ_aes_128_xts = blk: {
    _ = OBJ_ieee_siswg;
    _ = @as(c_long, 0);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_aes_256_xts = "AES-256-XTS";
pub const LN_aes_256_xts = "aes-256-xts";
pub const NID_aes_256_xts = 914;
pub const OBJ_aes_256_xts = blk: {
    _ = OBJ_ieee_siswg;
    _ = @as(c_long, 0);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_aes_128_cfb1 = "AES-128-CFB1";
pub const LN_aes_128_cfb1 = "aes-128-cfb1";
pub const NID_aes_128_cfb1 = 650;
pub const SN_aes_192_cfb1 = "AES-192-CFB1";
pub const LN_aes_192_cfb1 = "aes-192-cfb1";
pub const NID_aes_192_cfb1 = 651;
pub const SN_aes_256_cfb1 = "AES-256-CFB1";
pub const LN_aes_256_cfb1 = "aes-256-cfb1";
pub const NID_aes_256_cfb1 = 652;
pub const SN_aes_128_cfb8 = "AES-128-CFB8";
pub const LN_aes_128_cfb8 = "aes-128-cfb8";
pub const NID_aes_128_cfb8 = 653;
pub const SN_aes_192_cfb8 = "AES-192-CFB8";
pub const LN_aes_192_cfb8 = "aes-192-cfb8";
pub const NID_aes_192_cfb8 = 654;
pub const SN_aes_256_cfb8 = "AES-256-CFB8";
pub const LN_aes_256_cfb8 = "aes-256-cfb8";
pub const NID_aes_256_cfb8 = 655;
pub const SN_aes_128_ctr = "AES-128-CTR";
pub const LN_aes_128_ctr = "aes-128-ctr";
pub const NID_aes_128_ctr = 904;
pub const SN_aes_192_ctr = "AES-192-CTR";
pub const LN_aes_192_ctr = "aes-192-ctr";
pub const NID_aes_192_ctr = 905;
pub const SN_aes_256_ctr = "AES-256-CTR";
pub const LN_aes_256_ctr = "aes-256-ctr";
pub const NID_aes_256_ctr = 906;
pub const SN_aes_128_ocb = "AES-128-OCB";
pub const LN_aes_128_ocb = "aes-128-ocb";
pub const NID_aes_128_ocb = 958;
pub const SN_aes_192_ocb = "AES-192-OCB";
pub const LN_aes_192_ocb = "aes-192-ocb";
pub const NID_aes_192_ocb = 959;
pub const SN_aes_256_ocb = "AES-256-OCB";
pub const LN_aes_256_ocb = "aes-256-ocb";
pub const NID_aes_256_ocb = 960;
pub const SN_des_cfb1 = "DES-CFB1";
pub const LN_des_cfb1 = "des-cfb1";
pub const NID_des_cfb1 = 656;
pub const SN_des_cfb8 = "DES-CFB8";
pub const LN_des_cfb8 = "des-cfb8";
pub const NID_des_cfb8 = 657;
pub const SN_des_ede3_cfb1 = "DES-EDE3-CFB1";
pub const LN_des_ede3_cfb1 = "des-ede3-cfb1";
pub const NID_des_ede3_cfb1 = 658;
pub const SN_des_ede3_cfb8 = "DES-EDE3-CFB8";
pub const LN_des_ede3_cfb8 = "des-ede3-cfb8";
pub const NID_des_ede3_cfb8 = 659;
pub const OBJ_nist_hashalgs = blk: {
    _ = OBJ_nistAlgorithms;
    break :blk @as(c_long, 2);
};
pub const SN_sha256 = "SHA256";
pub const LN_sha256 = "sha256";
pub const NID_sha256 = 672;
pub const OBJ_sha256 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 1);
};
pub const SN_sha384 = "SHA384";
pub const LN_sha384 = "sha384";
pub const NID_sha384 = 673;
pub const OBJ_sha384 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 2);
};
pub const SN_sha512 = "SHA512";
pub const LN_sha512 = "sha512";
pub const NID_sha512 = 674;
pub const OBJ_sha512 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 3);
};
pub const SN_sha224 = "SHA224";
pub const LN_sha224 = "sha224";
pub const NID_sha224 = 675;
pub const OBJ_sha224 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 4);
};
pub const SN_sha512_224 = "SHA512-224";
pub const LN_sha512_224 = "sha512-224";
pub const NID_sha512_224 = 1094;
pub const OBJ_sha512_224 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 5);
};
pub const SN_sha512_256 = "SHA512-256";
pub const LN_sha512_256 = "sha512-256";
pub const NID_sha512_256 = 1095;
pub const OBJ_sha512_256 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 6);
};
pub const SN_sha3_224 = "SHA3-224";
pub const LN_sha3_224 = "sha3-224";
pub const NID_sha3_224 = 1096;
pub const OBJ_sha3_224 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 7);
};
pub const SN_sha3_256 = "SHA3-256";
pub const LN_sha3_256 = "sha3-256";
pub const NID_sha3_256 = 1097;
pub const OBJ_sha3_256 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 8);
};
pub const SN_sha3_384 = "SHA3-384";
pub const LN_sha3_384 = "sha3-384";
pub const NID_sha3_384 = 1098;
pub const OBJ_sha3_384 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 9);
};
pub const SN_sha3_512 = "SHA3-512";
pub const LN_sha3_512 = "sha3-512";
pub const NID_sha3_512 = 1099;
pub const OBJ_sha3_512 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 10);
};
pub const SN_shake128 = "SHAKE128";
pub const LN_shake128 = "shake128";
pub const NID_shake128 = 1100;
pub const OBJ_shake128 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 11);
};
pub const SN_shake256 = "SHAKE256";
pub const LN_shake256 = "shake256";
pub const NID_shake256 = 1101;
pub const OBJ_shake256 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 12);
};
pub const SN_hmac_sha3_224 = "id-hmacWithSHA3-224";
pub const LN_hmac_sha3_224 = "hmac-sha3-224";
pub const NID_hmac_sha3_224 = 1102;
pub const OBJ_hmac_sha3_224 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 13);
};
pub const SN_hmac_sha3_256 = "id-hmacWithSHA3-256";
pub const LN_hmac_sha3_256 = "hmac-sha3-256";
pub const NID_hmac_sha3_256 = 1103;
pub const OBJ_hmac_sha3_256 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 14);
};
pub const SN_hmac_sha3_384 = "id-hmacWithSHA3-384";
pub const LN_hmac_sha3_384 = "hmac-sha3-384";
pub const NID_hmac_sha3_384 = 1104;
pub const OBJ_hmac_sha3_384 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 15);
};
pub const SN_hmac_sha3_512 = "id-hmacWithSHA3-512";
pub const LN_hmac_sha3_512 = "hmac-sha3-512";
pub const NID_hmac_sha3_512 = 1105;
pub const OBJ_hmac_sha3_512 = blk: {
    _ = OBJ_nist_hashalgs;
    break :blk @as(c_long, 16);
};
pub const OBJ_dsa_with_sha2 = blk: {
    _ = OBJ_nistAlgorithms;
    break :blk @as(c_long, 3);
};
pub const SN_dsa_with_SHA224 = "dsa_with_SHA224";
pub const NID_dsa_with_SHA224 = 802;
pub const OBJ_dsa_with_SHA224 = blk: {
    _ = OBJ_dsa_with_sha2;
    break :blk @as(c_long, 1);
};
pub const SN_dsa_with_SHA256 = "dsa_with_SHA256";
pub const NID_dsa_with_SHA256 = 803;
pub const OBJ_dsa_with_SHA256 = blk: {
    _ = OBJ_dsa_with_sha2;
    break :blk @as(c_long, 2);
};
pub const OBJ_sigAlgs = blk: {
    _ = OBJ_nistAlgorithms;
    break :blk @as(c_long, 3);
};
pub const SN_dsa_with_SHA384 = "id-dsa-with-sha384";
pub const LN_dsa_with_SHA384 = "dsa_with_SHA384";
pub const NID_dsa_with_SHA384 = 1106;
pub const OBJ_dsa_with_SHA384 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 3);
};
pub const SN_dsa_with_SHA512 = "id-dsa-with-sha512";
pub const LN_dsa_with_SHA512 = "dsa_with_SHA512";
pub const NID_dsa_with_SHA512 = 1107;
pub const OBJ_dsa_with_SHA512 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 4);
};
pub const SN_dsa_with_SHA3_224 = "id-dsa-with-sha3-224";
pub const LN_dsa_with_SHA3_224 = "dsa_with_SHA3-224";
pub const NID_dsa_with_SHA3_224 = 1108;
pub const OBJ_dsa_with_SHA3_224 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 5);
};
pub const SN_dsa_with_SHA3_256 = "id-dsa-with-sha3-256";
pub const LN_dsa_with_SHA3_256 = "dsa_with_SHA3-256";
pub const NID_dsa_with_SHA3_256 = 1109;
pub const OBJ_dsa_with_SHA3_256 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 6);
};
pub const SN_dsa_with_SHA3_384 = "id-dsa-with-sha3-384";
pub const LN_dsa_with_SHA3_384 = "dsa_with_SHA3-384";
pub const NID_dsa_with_SHA3_384 = 1110;
pub const OBJ_dsa_with_SHA3_384 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 7);
};
pub const SN_dsa_with_SHA3_512 = "id-dsa-with-sha3-512";
pub const LN_dsa_with_SHA3_512 = "dsa_with_SHA3-512";
pub const NID_dsa_with_SHA3_512 = 1111;
pub const OBJ_dsa_with_SHA3_512 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 8);
};
pub const SN_ecdsa_with_SHA3_224 = "id-ecdsa-with-sha3-224";
pub const LN_ecdsa_with_SHA3_224 = "ecdsa_with_SHA3-224";
pub const NID_ecdsa_with_SHA3_224 = 1112;
pub const OBJ_ecdsa_with_SHA3_224 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 9);
};
pub const SN_ecdsa_with_SHA3_256 = "id-ecdsa-with-sha3-256";
pub const LN_ecdsa_with_SHA3_256 = "ecdsa_with_SHA3-256";
pub const NID_ecdsa_with_SHA3_256 = 1113;
pub const OBJ_ecdsa_with_SHA3_256 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 10);
};
pub const SN_ecdsa_with_SHA3_384 = "id-ecdsa-with-sha3-384";
pub const LN_ecdsa_with_SHA3_384 = "ecdsa_with_SHA3-384";
pub const NID_ecdsa_with_SHA3_384 = 1114;
pub const OBJ_ecdsa_with_SHA3_384 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 11);
};
pub const SN_ecdsa_with_SHA3_512 = "id-ecdsa-with-sha3-512";
pub const LN_ecdsa_with_SHA3_512 = "ecdsa_with_SHA3-512";
pub const NID_ecdsa_with_SHA3_512 = 1115;
pub const OBJ_ecdsa_with_SHA3_512 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 12);
};
pub const SN_RSA_SHA3_224 = "id-rsassa-pkcs1-v1_5-with-sha3-224";
pub const LN_RSA_SHA3_224 = "RSA-SHA3-224";
pub const NID_RSA_SHA3_224 = 1116;
pub const OBJ_RSA_SHA3_224 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 13);
};
pub const SN_RSA_SHA3_256 = "id-rsassa-pkcs1-v1_5-with-sha3-256";
pub const LN_RSA_SHA3_256 = "RSA-SHA3-256";
pub const NID_RSA_SHA3_256 = 1117;
pub const OBJ_RSA_SHA3_256 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 14);
};
pub const SN_RSA_SHA3_384 = "id-rsassa-pkcs1-v1_5-with-sha3-384";
pub const LN_RSA_SHA3_384 = "RSA-SHA3-384";
pub const NID_RSA_SHA3_384 = 1118;
pub const OBJ_RSA_SHA3_384 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 15);
};
pub const SN_RSA_SHA3_512 = "id-rsassa-pkcs1-v1_5-with-sha3-512";
pub const LN_RSA_SHA3_512 = "RSA-SHA3-512";
pub const NID_RSA_SHA3_512 = 1119;
pub const OBJ_RSA_SHA3_512 = blk: {
    _ = OBJ_sigAlgs;
    break :blk @as(c_long, 16);
};
pub const SN_hold_instruction_code = "holdInstructionCode";
pub const LN_hold_instruction_code = "Hold Instruction Code";
pub const NID_hold_instruction_code = 430;
pub const OBJ_hold_instruction_code = blk: {
    _ = OBJ_id_ce;
    break :blk @as(c_long, 23);
};
pub const OBJ_holdInstruction = blk: {
    _ = OBJ_X9_57;
    break :blk @as(c_long, 2);
};
pub const SN_hold_instruction_none = "holdInstructionNone";
pub const LN_hold_instruction_none = "Hold Instruction None";
pub const NID_hold_instruction_none = 431;
pub const OBJ_hold_instruction_none = blk: {
    _ = OBJ_holdInstruction;
    break :blk @as(c_long, 1);
};
pub const SN_hold_instruction_call_issuer = "holdInstructionCallIssuer";
pub const LN_hold_instruction_call_issuer = "Hold Instruction Call Issuer";
pub const NID_hold_instruction_call_issuer = 432;
pub const OBJ_hold_instruction_call_issuer = blk: {
    _ = OBJ_holdInstruction;
    break :blk @as(c_long, 2);
};
pub const SN_hold_instruction_reject = "holdInstructionReject";
pub const LN_hold_instruction_reject = "Hold Instruction Reject";
pub const NID_hold_instruction_reject = 433;
pub const OBJ_hold_instruction_reject = blk: {
    _ = OBJ_holdInstruction;
    break :blk @as(c_long, 3);
};
pub const SN_data = "data";
pub const NID_data = 434;
pub const OBJ_data = blk: {
    _ = OBJ_itu_t;
    break :blk @as(c_long, 9);
};
pub const SN_pss = "pss";
pub const NID_pss = 435;
pub const OBJ_pss = blk: {
    _ = OBJ_data;
    break :blk @as(c_long, 2342);
};
pub const SN_ucl = "ucl";
pub const NID_ucl = 436;
pub const OBJ_ucl = blk: {
    _ = OBJ_pss;
    break :blk @as(c_long, 19200300);
};
pub const SN_pilot = "pilot";
pub const NID_pilot = 437;
pub const OBJ_pilot = blk: {
    _ = OBJ_ucl;
    break :blk @as(c_long, 100);
};
pub const LN_pilotAttributeType = "pilotAttributeType";
pub const NID_pilotAttributeType = 438;
pub const OBJ_pilotAttributeType = blk: {
    _ = OBJ_pilot;
    break :blk @as(c_long, 1);
};
pub const LN_pilotAttributeSyntax = "pilotAttributeSyntax";
pub const NID_pilotAttributeSyntax = 439;
pub const OBJ_pilotAttributeSyntax = blk: {
    _ = OBJ_pilot;
    break :blk @as(c_long, 3);
};
pub const LN_pilotObjectClass = "pilotObjectClass";
pub const NID_pilotObjectClass = 440;
pub const OBJ_pilotObjectClass = blk: {
    _ = OBJ_pilot;
    break :blk @as(c_long, 4);
};
pub const LN_pilotGroups = "pilotGroups";
pub const NID_pilotGroups = 441;
pub const OBJ_pilotGroups = blk: {
    _ = OBJ_pilot;
    break :blk @as(c_long, 10);
};
pub const LN_iA5StringSyntax = "iA5StringSyntax";
pub const NID_iA5StringSyntax = 442;
pub const OBJ_iA5StringSyntax = blk: {
    _ = OBJ_pilotAttributeSyntax;
    break :blk @as(c_long, 4);
};
pub const LN_caseIgnoreIA5StringSyntax = "caseIgnoreIA5StringSyntax";
pub const NID_caseIgnoreIA5StringSyntax = 443;
pub const OBJ_caseIgnoreIA5StringSyntax = blk: {
    _ = OBJ_pilotAttributeSyntax;
    break :blk @as(c_long, 5);
};
pub const LN_pilotObject = "pilotObject";
pub const NID_pilotObject = 444;
pub const OBJ_pilotObject = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 3);
};
pub const LN_pilotPerson = "pilotPerson";
pub const NID_pilotPerson = 445;
pub const OBJ_pilotPerson = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 4);
};
pub const SN_account = "account";
pub const NID_account = 446;
pub const OBJ_account = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 5);
};
pub const SN_document = "document";
pub const NID_document = 447;
pub const OBJ_document = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 6);
};
pub const SN_room = "room";
pub const NID_room = 448;
pub const OBJ_room = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 7);
};
pub const LN_documentSeries = "documentSeries";
pub const NID_documentSeries = 449;
pub const OBJ_documentSeries = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 9);
};
pub const SN_Domain = "domain";
pub const LN_Domain = "Domain";
pub const NID_Domain = 392;
pub const OBJ_Domain = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 13);
};
pub const LN_rFC822localPart = "rFC822localPart";
pub const NID_rFC822localPart = 450;
pub const OBJ_rFC822localPart = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 14);
};
pub const LN_dNSDomain = "dNSDomain";
pub const NID_dNSDomain = 451;
pub const OBJ_dNSDomain = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 15);
};
pub const LN_domainRelatedObject = "domainRelatedObject";
pub const NID_domainRelatedObject = 452;
pub const OBJ_domainRelatedObject = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 17);
};
pub const LN_friendlyCountry = "friendlyCountry";
pub const NID_friendlyCountry = 453;
pub const OBJ_friendlyCountry = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 18);
};
pub const LN_simpleSecurityObject = "simpleSecurityObject";
pub const NID_simpleSecurityObject = 454;
pub const OBJ_simpleSecurityObject = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 19);
};
pub const LN_pilotOrganization = "pilotOrganization";
pub const NID_pilotOrganization = 455;
pub const OBJ_pilotOrganization = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 20);
};
pub const LN_pilotDSA = "pilotDSA";
pub const NID_pilotDSA = 456;
pub const OBJ_pilotDSA = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 21);
};
pub const LN_qualityLabelledData = "qualityLabelledData";
pub const NID_qualityLabelledData = 457;
pub const OBJ_qualityLabelledData = blk: {
    _ = OBJ_pilotObjectClass;
    break :blk @as(c_long, 22);
};
pub const SN_userId = "UID";
pub const LN_userId = "userId";
pub const NID_userId = 458;
pub const OBJ_userId = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 1);
};
pub const LN_textEncodedORAddress = "textEncodedORAddress";
pub const NID_textEncodedORAddress = 459;
pub const OBJ_textEncodedORAddress = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 2);
};
pub const SN_rfc822Mailbox = "mail";
pub const LN_rfc822Mailbox = "rfc822Mailbox";
pub const NID_rfc822Mailbox = 460;
pub const OBJ_rfc822Mailbox = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 3);
};
pub const SN_info = "info";
pub const NID_info = 461;
pub const OBJ_info = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 4);
};
pub const LN_favouriteDrink = "favouriteDrink";
pub const NID_favouriteDrink = 462;
pub const OBJ_favouriteDrink = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 5);
};
pub const LN_roomNumber = "roomNumber";
pub const NID_roomNumber = 463;
pub const OBJ_roomNumber = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 6);
};
pub const SN_photo = "photo";
pub const NID_photo = 464;
pub const OBJ_photo = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 7);
};
pub const LN_userClass = "userClass";
pub const NID_userClass = 465;
pub const OBJ_userClass = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 8);
};
pub const SN_host = "host";
pub const NID_host = 466;
pub const OBJ_host = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 9);
};
pub const SN_manager = "manager";
pub const NID_manager = 467;
pub const OBJ_manager = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 10);
};
pub const LN_documentIdentifier = "documentIdentifier";
pub const NID_documentIdentifier = 468;
pub const OBJ_documentIdentifier = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 11);
};
pub const LN_documentTitle = "documentTitle";
pub const NID_documentTitle = 469;
pub const OBJ_documentTitle = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 12);
};
pub const LN_documentVersion = "documentVersion";
pub const NID_documentVersion = 470;
pub const OBJ_documentVersion = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 13);
};
pub const LN_documentAuthor = "documentAuthor";
pub const NID_documentAuthor = 471;
pub const OBJ_documentAuthor = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 14);
};
pub const LN_documentLocation = "documentLocation";
pub const NID_documentLocation = 472;
pub const OBJ_documentLocation = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 15);
};
pub const LN_homeTelephoneNumber = "homeTelephoneNumber";
pub const NID_homeTelephoneNumber = 473;
pub const OBJ_homeTelephoneNumber = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 20);
};
pub const SN_secretary = "secretary";
pub const NID_secretary = 474;
pub const OBJ_secretary = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 21);
};
pub const LN_otherMailbox = "otherMailbox";
pub const NID_otherMailbox = 475;
pub const OBJ_otherMailbox = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 22);
};
pub const LN_lastModifiedTime = "lastModifiedTime";
pub const NID_lastModifiedTime = 476;
pub const OBJ_lastModifiedTime = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 23);
};
pub const LN_lastModifiedBy = "lastModifiedBy";
pub const NID_lastModifiedBy = 477;
pub const OBJ_lastModifiedBy = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 24);
};
pub const SN_domainComponent = "DC";
pub const LN_domainComponent = "domainComponent";
pub const NID_domainComponent = 391;
pub const OBJ_domainComponent = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 25);
};
pub const LN_aRecord = "aRecord";
pub const NID_aRecord = 478;
pub const OBJ_aRecord = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 26);
};
pub const LN_pilotAttributeType27 = "pilotAttributeType27";
pub const NID_pilotAttributeType27 = 479;
pub const OBJ_pilotAttributeType27 = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 27);
};
pub const LN_mXRecord = "mXRecord";
pub const NID_mXRecord = 480;
pub const OBJ_mXRecord = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 28);
};
pub const LN_nSRecord = "nSRecord";
pub const NID_nSRecord = 481;
pub const OBJ_nSRecord = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 29);
};
pub const LN_sOARecord = "sOARecord";
pub const NID_sOARecord = 482;
pub const OBJ_sOARecord = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 30);
};
pub const LN_cNAMERecord = "cNAMERecord";
pub const NID_cNAMERecord = 483;
pub const OBJ_cNAMERecord = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 31);
};
pub const LN_associatedDomain = "associatedDomain";
pub const NID_associatedDomain = 484;
pub const OBJ_associatedDomain = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 37);
};
pub const LN_associatedName = "associatedName";
pub const NID_associatedName = 485;
pub const OBJ_associatedName = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 38);
};
pub const LN_homePostalAddress = "homePostalAddress";
pub const NID_homePostalAddress = 486;
pub const OBJ_homePostalAddress = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 39);
};
pub const LN_personalTitle = "personalTitle";
pub const NID_personalTitle = 487;
pub const OBJ_personalTitle = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 40);
};
pub const LN_mobileTelephoneNumber = "mobileTelephoneNumber";
pub const NID_mobileTelephoneNumber = 488;
pub const OBJ_mobileTelephoneNumber = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 41);
};
pub const LN_pagerTelephoneNumber = "pagerTelephoneNumber";
pub const NID_pagerTelephoneNumber = 489;
pub const OBJ_pagerTelephoneNumber = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 42);
};
pub const LN_friendlyCountryName = "friendlyCountryName";
pub const NID_friendlyCountryName = 490;
pub const OBJ_friendlyCountryName = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 43);
};
pub const SN_uniqueIdentifier = "uid";
pub const LN_uniqueIdentifier = "uniqueIdentifier";
pub const NID_uniqueIdentifier = 102;
pub const OBJ_uniqueIdentifier = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 44);
};
pub const LN_organizationalStatus = "organizationalStatus";
pub const NID_organizationalStatus = 491;
pub const OBJ_organizationalStatus = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 45);
};
pub const LN_janetMailbox = "janetMailbox";
pub const NID_janetMailbox = 492;
pub const OBJ_janetMailbox = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 46);
};
pub const LN_mailPreferenceOption = "mailPreferenceOption";
pub const NID_mailPreferenceOption = 493;
pub const OBJ_mailPreferenceOption = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 47);
};
pub const LN_buildingName = "buildingName";
pub const NID_buildingName = 494;
pub const OBJ_buildingName = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 48);
};
pub const LN_dSAQuality = "dSAQuality";
pub const NID_dSAQuality = 495;
pub const OBJ_dSAQuality = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 49);
};
pub const LN_singleLevelQuality = "singleLevelQuality";
pub const NID_singleLevelQuality = 496;
pub const OBJ_singleLevelQuality = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 50);
};
pub const LN_subtreeMinimumQuality = "subtreeMinimumQuality";
pub const NID_subtreeMinimumQuality = 497;
pub const OBJ_subtreeMinimumQuality = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 51);
};
pub const LN_subtreeMaximumQuality = "subtreeMaximumQuality";
pub const NID_subtreeMaximumQuality = 498;
pub const OBJ_subtreeMaximumQuality = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 52);
};
pub const LN_personalSignature = "personalSignature";
pub const NID_personalSignature = 499;
pub const OBJ_personalSignature = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 53);
};
pub const LN_dITRedirect = "dITRedirect";
pub const NID_dITRedirect = 500;
pub const OBJ_dITRedirect = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 54);
};
pub const SN_audio = "audio";
pub const NID_audio = 501;
pub const OBJ_audio = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 55);
};
pub const LN_documentPublisher = "documentPublisher";
pub const NID_documentPublisher = 502;
pub const OBJ_documentPublisher = blk: {
    _ = OBJ_pilotAttributeType;
    break :blk @as(c_long, 56);
};
pub const SN_id_set = "id-set";
pub const LN_id_set = "Secure Electronic Transactions";
pub const NID_id_set = 512;
pub const OBJ_id_set = blk: {
    _ = OBJ_international_organizations;
    break :blk @as(c_long, 42);
};
pub const SN_set_ctype = "set-ctype";
pub const LN_set_ctype = "content types";
pub const NID_set_ctype = 513;
pub const OBJ_set_ctype = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 0);
};
pub const SN_set_msgExt = "set-msgExt";
pub const LN_set_msgExt = "message extensions";
pub const NID_set_msgExt = 514;
pub const OBJ_set_msgExt = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 1);
};
pub const SN_set_attr = "set-attr";
pub const NID_set_attr = 515;
pub const OBJ_set_attr = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 3);
};
pub const SN_set_policy = "set-policy";
pub const NID_set_policy = 516;
pub const OBJ_set_policy = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 5);
};
pub const SN_set_certExt = "set-certExt";
pub const LN_set_certExt = "certificate extensions";
pub const NID_set_certExt = 517;
pub const OBJ_set_certExt = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 7);
};
pub const SN_set_brand = "set-brand";
pub const NID_set_brand = 518;
pub const OBJ_set_brand = blk: {
    _ = OBJ_id_set;
    break :blk @as(c_long, 8);
};
pub const SN_setct_PANData = "setct-PANData";
pub const NID_setct_PANData = 519;
pub const OBJ_setct_PANData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 0);
};
pub const SN_setct_PANToken = "setct-PANToken";
pub const NID_setct_PANToken = 520;
pub const OBJ_setct_PANToken = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 1);
};
pub const SN_setct_PANOnly = "setct-PANOnly";
pub const NID_setct_PANOnly = 521;
pub const OBJ_setct_PANOnly = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 2);
};
pub const SN_setct_OIData = "setct-OIData";
pub const NID_setct_OIData = 522;
pub const OBJ_setct_OIData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 3);
};
pub const SN_setct_PI = "setct-PI";
pub const NID_setct_PI = 523;
pub const OBJ_setct_PI = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 4);
};
pub const SN_setct_PIData = "setct-PIData";
pub const NID_setct_PIData = 524;
pub const OBJ_setct_PIData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 5);
};
pub const SN_setct_PIDataUnsigned = "setct-PIDataUnsigned";
pub const NID_setct_PIDataUnsigned = 525;
pub const OBJ_setct_PIDataUnsigned = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 6);
};
pub const SN_setct_HODInput = "setct-HODInput";
pub const NID_setct_HODInput = 526;
pub const OBJ_setct_HODInput = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 7);
};
pub const SN_setct_AuthResBaggage = "setct-AuthResBaggage";
pub const NID_setct_AuthResBaggage = 527;
pub const OBJ_setct_AuthResBaggage = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 8);
};
pub const SN_setct_AuthRevReqBaggage = "setct-AuthRevReqBaggage";
pub const NID_setct_AuthRevReqBaggage = 528;
pub const OBJ_setct_AuthRevReqBaggage = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 9);
};
pub const SN_setct_AuthRevResBaggage = "setct-AuthRevResBaggage";
pub const NID_setct_AuthRevResBaggage = 529;
pub const OBJ_setct_AuthRevResBaggage = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 10);
};
pub const SN_setct_CapTokenSeq = "setct-CapTokenSeq";
pub const NID_setct_CapTokenSeq = 530;
pub const OBJ_setct_CapTokenSeq = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 11);
};
pub const SN_setct_PInitResData = "setct-PInitResData";
pub const NID_setct_PInitResData = 531;
pub const OBJ_setct_PInitResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 12);
};
pub const SN_setct_PI_TBS = "setct-PI-TBS";
pub const NID_setct_PI_TBS = 532;
pub const OBJ_setct_PI_TBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 13);
};
pub const SN_setct_PResData = "setct-PResData";
pub const NID_setct_PResData = 533;
pub const OBJ_setct_PResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 14);
};
pub const SN_setct_AuthReqTBS = "setct-AuthReqTBS";
pub const NID_setct_AuthReqTBS = 534;
pub const OBJ_setct_AuthReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 16);
};
pub const SN_setct_AuthResTBS = "setct-AuthResTBS";
pub const NID_setct_AuthResTBS = 535;
pub const OBJ_setct_AuthResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 17);
};
pub const SN_setct_AuthResTBSX = "setct-AuthResTBSX";
pub const NID_setct_AuthResTBSX = 536;
pub const OBJ_setct_AuthResTBSX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 18);
};
pub const SN_setct_AuthTokenTBS = "setct-AuthTokenTBS";
pub const NID_setct_AuthTokenTBS = 537;
pub const OBJ_setct_AuthTokenTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 19);
};
pub const SN_setct_CapTokenData = "setct-CapTokenData";
pub const NID_setct_CapTokenData = 538;
pub const OBJ_setct_CapTokenData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 20);
};
pub const SN_setct_CapTokenTBS = "setct-CapTokenTBS";
pub const NID_setct_CapTokenTBS = 539;
pub const OBJ_setct_CapTokenTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 21);
};
pub const SN_setct_AcqCardCodeMsg = "setct-AcqCardCodeMsg";
pub const NID_setct_AcqCardCodeMsg = 540;
pub const OBJ_setct_AcqCardCodeMsg = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 22);
};
pub const SN_setct_AuthRevReqTBS = "setct-AuthRevReqTBS";
pub const NID_setct_AuthRevReqTBS = 541;
pub const OBJ_setct_AuthRevReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 23);
};
pub const SN_setct_AuthRevResData = "setct-AuthRevResData";
pub const NID_setct_AuthRevResData = 542;
pub const OBJ_setct_AuthRevResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 24);
};
pub const SN_setct_AuthRevResTBS = "setct-AuthRevResTBS";
pub const NID_setct_AuthRevResTBS = 543;
pub const OBJ_setct_AuthRevResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 25);
};
pub const SN_setct_CapReqTBS = "setct-CapReqTBS";
pub const NID_setct_CapReqTBS = 544;
pub const OBJ_setct_CapReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 26);
};
pub const SN_setct_CapReqTBSX = "setct-CapReqTBSX";
pub const NID_setct_CapReqTBSX = 545;
pub const OBJ_setct_CapReqTBSX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 27);
};
pub const SN_setct_CapResData = "setct-CapResData";
pub const NID_setct_CapResData = 546;
pub const OBJ_setct_CapResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 28);
};
pub const SN_setct_CapRevReqTBS = "setct-CapRevReqTBS";
pub const NID_setct_CapRevReqTBS = 547;
pub const OBJ_setct_CapRevReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 29);
};
pub const SN_setct_CapRevReqTBSX = "setct-CapRevReqTBSX";
pub const NID_setct_CapRevReqTBSX = 548;
pub const OBJ_setct_CapRevReqTBSX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 30);
};
pub const SN_setct_CapRevResData = "setct-CapRevResData";
pub const NID_setct_CapRevResData = 549;
pub const OBJ_setct_CapRevResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 31);
};
pub const SN_setct_CredReqTBS = "setct-CredReqTBS";
pub const NID_setct_CredReqTBS = 550;
pub const OBJ_setct_CredReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 32);
};
pub const SN_setct_CredReqTBSX = "setct-CredReqTBSX";
pub const NID_setct_CredReqTBSX = 551;
pub const OBJ_setct_CredReqTBSX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 33);
};
pub const SN_setct_CredResData = "setct-CredResData";
pub const NID_setct_CredResData = 552;
pub const OBJ_setct_CredResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 34);
};
pub const SN_setct_CredRevReqTBS = "setct-CredRevReqTBS";
pub const NID_setct_CredRevReqTBS = 553;
pub const OBJ_setct_CredRevReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 35);
};
pub const SN_setct_CredRevReqTBSX = "setct-CredRevReqTBSX";
pub const NID_setct_CredRevReqTBSX = 554;
pub const OBJ_setct_CredRevReqTBSX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 36);
};
pub const SN_setct_CredRevResData = "setct-CredRevResData";
pub const NID_setct_CredRevResData = 555;
pub const OBJ_setct_CredRevResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 37);
};
pub const SN_setct_PCertReqData = "setct-PCertReqData";
pub const NID_setct_PCertReqData = 556;
pub const OBJ_setct_PCertReqData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 38);
};
pub const SN_setct_PCertResTBS = "setct-PCertResTBS";
pub const NID_setct_PCertResTBS = 557;
pub const OBJ_setct_PCertResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 39);
};
pub const SN_setct_BatchAdminReqData = "setct-BatchAdminReqData";
pub const NID_setct_BatchAdminReqData = 558;
pub const OBJ_setct_BatchAdminReqData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 40);
};
pub const SN_setct_BatchAdminResData = "setct-BatchAdminResData";
pub const NID_setct_BatchAdminResData = 559;
pub const OBJ_setct_BatchAdminResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 41);
};
pub const SN_setct_CardCInitResTBS = "setct-CardCInitResTBS";
pub const NID_setct_CardCInitResTBS = 560;
pub const OBJ_setct_CardCInitResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 42);
};
pub const SN_setct_MeAqCInitResTBS = "setct-MeAqCInitResTBS";
pub const NID_setct_MeAqCInitResTBS = 561;
pub const OBJ_setct_MeAqCInitResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 43);
};
pub const SN_setct_RegFormResTBS = "setct-RegFormResTBS";
pub const NID_setct_RegFormResTBS = 562;
pub const OBJ_setct_RegFormResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 44);
};
pub const SN_setct_CertReqData = "setct-CertReqData";
pub const NID_setct_CertReqData = 563;
pub const OBJ_setct_CertReqData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 45);
};
pub const SN_setct_CertReqTBS = "setct-CertReqTBS";
pub const NID_setct_CertReqTBS = 564;
pub const OBJ_setct_CertReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 46);
};
pub const SN_setct_CertResData = "setct-CertResData";
pub const NID_setct_CertResData = 565;
pub const OBJ_setct_CertResData = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 47);
};
pub const SN_setct_CertInqReqTBS = "setct-CertInqReqTBS";
pub const NID_setct_CertInqReqTBS = 566;
pub const OBJ_setct_CertInqReqTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 48);
};
pub const SN_setct_ErrorTBS = "setct-ErrorTBS";
pub const NID_setct_ErrorTBS = 567;
pub const OBJ_setct_ErrorTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 49);
};
pub const SN_setct_PIDualSignedTBE = "setct-PIDualSignedTBE";
pub const NID_setct_PIDualSignedTBE = 568;
pub const OBJ_setct_PIDualSignedTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 50);
};
pub const SN_setct_PIUnsignedTBE = "setct-PIUnsignedTBE";
pub const NID_setct_PIUnsignedTBE = 569;
pub const OBJ_setct_PIUnsignedTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 51);
};
pub const SN_setct_AuthReqTBE = "setct-AuthReqTBE";
pub const NID_setct_AuthReqTBE = 570;
pub const OBJ_setct_AuthReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 52);
};
pub const SN_setct_AuthResTBE = "setct-AuthResTBE";
pub const NID_setct_AuthResTBE = 571;
pub const OBJ_setct_AuthResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 53);
};
pub const SN_setct_AuthResTBEX = "setct-AuthResTBEX";
pub const NID_setct_AuthResTBEX = 572;
pub const OBJ_setct_AuthResTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 54);
};
pub const SN_setct_AuthTokenTBE = "setct-AuthTokenTBE";
pub const NID_setct_AuthTokenTBE = 573;
pub const OBJ_setct_AuthTokenTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 55);
};
pub const SN_setct_CapTokenTBE = "setct-CapTokenTBE";
pub const NID_setct_CapTokenTBE = 574;
pub const OBJ_setct_CapTokenTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 56);
};
pub const SN_setct_CapTokenTBEX = "setct-CapTokenTBEX";
pub const NID_setct_CapTokenTBEX = 575;
pub const OBJ_setct_CapTokenTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 57);
};
pub const SN_setct_AcqCardCodeMsgTBE = "setct-AcqCardCodeMsgTBE";
pub const NID_setct_AcqCardCodeMsgTBE = 576;
pub const OBJ_setct_AcqCardCodeMsgTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 58);
};
pub const SN_setct_AuthRevReqTBE = "setct-AuthRevReqTBE";
pub const NID_setct_AuthRevReqTBE = 577;
pub const OBJ_setct_AuthRevReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 59);
};
pub const SN_setct_AuthRevResTBE = "setct-AuthRevResTBE";
pub const NID_setct_AuthRevResTBE = 578;
pub const OBJ_setct_AuthRevResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 60);
};
pub const SN_setct_AuthRevResTBEB = "setct-AuthRevResTBEB";
pub const NID_setct_AuthRevResTBEB = 579;
pub const OBJ_setct_AuthRevResTBEB = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 61);
};
pub const SN_setct_CapReqTBE = "setct-CapReqTBE";
pub const NID_setct_CapReqTBE = 580;
pub const OBJ_setct_CapReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 62);
};
pub const SN_setct_CapReqTBEX = "setct-CapReqTBEX";
pub const NID_setct_CapReqTBEX = 581;
pub const OBJ_setct_CapReqTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 63);
};
pub const SN_setct_CapResTBE = "setct-CapResTBE";
pub const NID_setct_CapResTBE = 582;
pub const OBJ_setct_CapResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 64);
};
pub const SN_setct_CapRevReqTBE = "setct-CapRevReqTBE";
pub const NID_setct_CapRevReqTBE = 583;
pub const OBJ_setct_CapRevReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 65);
};
pub const SN_setct_CapRevReqTBEX = "setct-CapRevReqTBEX";
pub const NID_setct_CapRevReqTBEX = 584;
pub const OBJ_setct_CapRevReqTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 66);
};
pub const SN_setct_CapRevResTBE = "setct-CapRevResTBE";
pub const NID_setct_CapRevResTBE = 585;
pub const OBJ_setct_CapRevResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 67);
};
pub const SN_setct_CredReqTBE = "setct-CredReqTBE";
pub const NID_setct_CredReqTBE = 586;
pub const OBJ_setct_CredReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 68);
};
pub const SN_setct_CredReqTBEX = "setct-CredReqTBEX";
pub const NID_setct_CredReqTBEX = 587;
pub const OBJ_setct_CredReqTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 69);
};
pub const SN_setct_CredResTBE = "setct-CredResTBE";
pub const NID_setct_CredResTBE = 588;
pub const OBJ_setct_CredResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 70);
};
pub const SN_setct_CredRevReqTBE = "setct-CredRevReqTBE";
pub const NID_setct_CredRevReqTBE = 589;
pub const OBJ_setct_CredRevReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 71);
};
pub const SN_setct_CredRevReqTBEX = "setct-CredRevReqTBEX";
pub const NID_setct_CredRevReqTBEX = 590;
pub const OBJ_setct_CredRevReqTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 72);
};
pub const SN_setct_CredRevResTBE = "setct-CredRevResTBE";
pub const NID_setct_CredRevResTBE = 591;
pub const OBJ_setct_CredRevResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 73);
};
pub const SN_setct_BatchAdminReqTBE = "setct-BatchAdminReqTBE";
pub const NID_setct_BatchAdminReqTBE = 592;
pub const OBJ_setct_BatchAdminReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 74);
};
pub const SN_setct_BatchAdminResTBE = "setct-BatchAdminResTBE";
pub const NID_setct_BatchAdminResTBE = 593;
pub const OBJ_setct_BatchAdminResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 75);
};
pub const SN_setct_RegFormReqTBE = "setct-RegFormReqTBE";
pub const NID_setct_RegFormReqTBE = 594;
pub const OBJ_setct_RegFormReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 76);
};
pub const SN_setct_CertReqTBE = "setct-CertReqTBE";
pub const NID_setct_CertReqTBE = 595;
pub const OBJ_setct_CertReqTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 77);
};
pub const SN_setct_CertReqTBEX = "setct-CertReqTBEX";
pub const NID_setct_CertReqTBEX = 596;
pub const OBJ_setct_CertReqTBEX = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 78);
};
pub const SN_setct_CertResTBE = "setct-CertResTBE";
pub const NID_setct_CertResTBE = 597;
pub const OBJ_setct_CertResTBE = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 79);
};
pub const SN_setct_CRLNotificationTBS = "setct-CRLNotificationTBS";
pub const NID_setct_CRLNotificationTBS = 598;
pub const OBJ_setct_CRLNotificationTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 80);
};
pub const SN_setct_CRLNotificationResTBS = "setct-CRLNotificationResTBS";
pub const NID_setct_CRLNotificationResTBS = 599;
pub const OBJ_setct_CRLNotificationResTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 81);
};
pub const SN_setct_BCIDistributionTBS = "setct-BCIDistributionTBS";
pub const NID_setct_BCIDistributionTBS = 600;
pub const OBJ_setct_BCIDistributionTBS = blk: {
    _ = OBJ_set_ctype;
    break :blk @as(c_long, 82);
};
pub const SN_setext_genCrypt = "setext-genCrypt";
pub const LN_setext_genCrypt = "generic cryptogram";
pub const NID_setext_genCrypt = 601;
pub const OBJ_setext_genCrypt = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 1);
};
pub const SN_setext_miAuth = "setext-miAuth";
pub const LN_setext_miAuth = "merchant initiated auth";
pub const NID_setext_miAuth = 602;
pub const OBJ_setext_miAuth = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 3);
};
pub const SN_setext_pinSecure = "setext-pinSecure";
pub const NID_setext_pinSecure = 603;
pub const OBJ_setext_pinSecure = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 4);
};
pub const SN_setext_pinAny = "setext-pinAny";
pub const NID_setext_pinAny = 604;
pub const OBJ_setext_pinAny = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 5);
};
pub const SN_setext_track2 = "setext-track2";
pub const NID_setext_track2 = 605;
pub const OBJ_setext_track2 = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 7);
};
pub const SN_setext_cv = "setext-cv";
pub const LN_setext_cv = "additional verification";
pub const NID_setext_cv = 606;
pub const OBJ_setext_cv = blk: {
    _ = OBJ_set_msgExt;
    break :blk @as(c_long, 8);
};
pub const SN_set_policy_root = "set-policy-root";
pub const NID_set_policy_root = 607;
pub const OBJ_set_policy_root = blk: {
    _ = OBJ_set_policy;
    break :blk @as(c_long, 0);
};
pub const SN_setCext_hashedRoot = "setCext-hashedRoot";
pub const NID_setCext_hashedRoot = 608;
pub const OBJ_setCext_hashedRoot = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 0);
};
pub const SN_setCext_certType = "setCext-certType";
pub const NID_setCext_certType = 609;
pub const OBJ_setCext_certType = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 1);
};
pub const SN_setCext_merchData = "setCext-merchData";
pub const NID_setCext_merchData = 610;
pub const OBJ_setCext_merchData = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 2);
};
pub const SN_setCext_cCertRequired = "setCext-cCertRequired";
pub const NID_setCext_cCertRequired = 611;
pub const OBJ_setCext_cCertRequired = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 3);
};
pub const SN_setCext_tunneling = "setCext-tunneling";
pub const NID_setCext_tunneling = 612;
pub const OBJ_setCext_tunneling = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 4);
};
pub const SN_setCext_setExt = "setCext-setExt";
pub const NID_setCext_setExt = 613;
pub const OBJ_setCext_setExt = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 5);
};
pub const SN_setCext_setQualf = "setCext-setQualf";
pub const NID_setCext_setQualf = 614;
pub const OBJ_setCext_setQualf = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 6);
};
pub const SN_setCext_PGWYcapabilities = "setCext-PGWYcapabilities";
pub const NID_setCext_PGWYcapabilities = 615;
pub const OBJ_setCext_PGWYcapabilities = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 7);
};
pub const SN_setCext_TokenIdentifier = "setCext-TokenIdentifier";
pub const NID_setCext_TokenIdentifier = 616;
pub const OBJ_setCext_TokenIdentifier = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 8);
};
pub const SN_setCext_Track2Data = "setCext-Track2Data";
pub const NID_setCext_Track2Data = 617;
pub const OBJ_setCext_Track2Data = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 9);
};
pub const SN_setCext_TokenType = "setCext-TokenType";
pub const NID_setCext_TokenType = 618;
pub const OBJ_setCext_TokenType = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 10);
};
pub const SN_setCext_IssuerCapabilities = "setCext-IssuerCapabilities";
pub const NID_setCext_IssuerCapabilities = 619;
pub const OBJ_setCext_IssuerCapabilities = blk: {
    _ = OBJ_set_certExt;
    break :blk @as(c_long, 11);
};
pub const SN_setAttr_Cert = "setAttr-Cert";
pub const NID_setAttr_Cert = 620;
pub const OBJ_setAttr_Cert = blk: {
    _ = OBJ_set_attr;
    break :blk @as(c_long, 0);
};
pub const SN_setAttr_PGWYcap = "setAttr-PGWYcap";
pub const LN_setAttr_PGWYcap = "payment gateway capabilities";
pub const NID_setAttr_PGWYcap = 621;
pub const OBJ_setAttr_PGWYcap = blk: {
    _ = OBJ_set_attr;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_TokenType = "setAttr-TokenType";
pub const NID_setAttr_TokenType = 622;
pub const OBJ_setAttr_TokenType = blk: {
    _ = OBJ_set_attr;
    break :blk @as(c_long, 2);
};
pub const SN_setAttr_IssCap = "setAttr-IssCap";
pub const LN_setAttr_IssCap = "issuer capabilities";
pub const NID_setAttr_IssCap = 623;
pub const OBJ_setAttr_IssCap = blk: {
    _ = OBJ_set_attr;
    break :blk @as(c_long, 3);
};
pub const SN_set_rootKeyThumb = "set-rootKeyThumb";
pub const NID_set_rootKeyThumb = 624;
pub const OBJ_set_rootKeyThumb = blk: {
    _ = OBJ_setAttr_Cert;
    break :blk @as(c_long, 0);
};
pub const SN_set_addPolicy = "set-addPolicy";
pub const NID_set_addPolicy = 625;
pub const OBJ_set_addPolicy = blk: {
    _ = OBJ_setAttr_Cert;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_Token_EMV = "setAttr-Token-EMV";
pub const NID_setAttr_Token_EMV = 626;
pub const OBJ_setAttr_Token_EMV = blk: {
    _ = OBJ_setAttr_TokenType;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_Token_B0Prime = "setAttr-Token-B0Prime";
pub const NID_setAttr_Token_B0Prime = 627;
pub const OBJ_setAttr_Token_B0Prime = blk: {
    _ = OBJ_setAttr_TokenType;
    break :blk @as(c_long, 2);
};
pub const SN_setAttr_IssCap_CVM = "setAttr-IssCap-CVM";
pub const NID_setAttr_IssCap_CVM = 628;
pub const OBJ_setAttr_IssCap_CVM = blk: {
    _ = OBJ_setAttr_IssCap;
    break :blk @as(c_long, 3);
};
pub const SN_setAttr_IssCap_T2 = "setAttr-IssCap-T2";
pub const NID_setAttr_IssCap_T2 = 629;
pub const OBJ_setAttr_IssCap_T2 = blk: {
    _ = OBJ_setAttr_IssCap;
    break :blk @as(c_long, 4);
};
pub const SN_setAttr_IssCap_Sig = "setAttr-IssCap-Sig";
pub const NID_setAttr_IssCap_Sig = 630;
pub const OBJ_setAttr_IssCap_Sig = blk: {
    _ = OBJ_setAttr_IssCap;
    break :blk @as(c_long, 5);
};
pub const SN_setAttr_GenCryptgrm = "setAttr-GenCryptgrm";
pub const LN_setAttr_GenCryptgrm = "generate cryptogram";
pub const NID_setAttr_GenCryptgrm = 631;
pub const OBJ_setAttr_GenCryptgrm = blk: {
    _ = OBJ_setAttr_IssCap_CVM;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_T2Enc = "setAttr-T2Enc";
pub const LN_setAttr_T2Enc = "encrypted track 2";
pub const NID_setAttr_T2Enc = 632;
pub const OBJ_setAttr_T2Enc = blk: {
    _ = OBJ_setAttr_IssCap_T2;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_T2cleartxt = "setAttr-T2cleartxt";
pub const LN_setAttr_T2cleartxt = "cleartext track 2";
pub const NID_setAttr_T2cleartxt = 633;
pub const OBJ_setAttr_T2cleartxt = blk: {
    _ = OBJ_setAttr_IssCap_T2;
    break :blk @as(c_long, 2);
};
pub const SN_setAttr_TokICCsig = "setAttr-TokICCsig";
pub const LN_setAttr_TokICCsig = "ICC or token signature";
pub const NID_setAttr_TokICCsig = 634;
pub const OBJ_setAttr_TokICCsig = blk: {
    _ = OBJ_setAttr_IssCap_Sig;
    break :blk @as(c_long, 1);
};
pub const SN_setAttr_SecDevSig = "setAttr-SecDevSig";
pub const LN_setAttr_SecDevSig = "secure device signature";
pub const NID_setAttr_SecDevSig = 635;
pub const OBJ_setAttr_SecDevSig = blk: {
    _ = OBJ_setAttr_IssCap_Sig;
    break :blk @as(c_long, 2);
};
pub const SN_set_brand_IATA_ATA = "set-brand-IATA-ATA";
pub const NID_set_brand_IATA_ATA = 636;
pub const OBJ_set_brand_IATA_ATA = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 1);
};
pub const SN_set_brand_Diners = "set-brand-Diners";
pub const NID_set_brand_Diners = 637;
pub const OBJ_set_brand_Diners = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 30);
};
pub const SN_set_brand_AmericanExpress = "set-brand-AmericanExpress";
pub const NID_set_brand_AmericanExpress = 638;
pub const OBJ_set_brand_AmericanExpress = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 34);
};
pub const SN_set_brand_JCB = "set-brand-JCB";
pub const NID_set_brand_JCB = 639;
pub const OBJ_set_brand_JCB = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 35);
};
pub const SN_set_brand_Visa = "set-brand-Visa";
pub const NID_set_brand_Visa = 640;
pub const OBJ_set_brand_Visa = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 4);
};
pub const SN_set_brand_MasterCard = "set-brand-MasterCard";
pub const NID_set_brand_MasterCard = 641;
pub const OBJ_set_brand_MasterCard = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 5);
};
pub const SN_set_brand_Novus = "set-brand-Novus";
pub const NID_set_brand_Novus = 642;
pub const OBJ_set_brand_Novus = blk: {
    _ = OBJ_set_brand;
    break :blk @as(c_long, 6011);
};
pub const SN_des_cdmf = "DES-CDMF";
pub const LN_des_cdmf = "des-cdmf";
pub const NID_des_cdmf = 643;
pub const OBJ_des_cdmf = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 3);
    break :blk @as(c_long, 10);
};
pub const SN_rsaOAEPEncryptionSET = "rsaOAEPEncryptionSET";
pub const NID_rsaOAEPEncryptionSET = 644;
pub const OBJ_rsaOAEPEncryptionSET = blk: {
    _ = OBJ_rsadsi;
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 6);
};
pub const SN_ipsec3 = "Oakley-EC2N-3";
pub const LN_ipsec3 = "ipsec3";
pub const NID_ipsec3 = 749;
pub const SN_ipsec4 = "Oakley-EC2N-4";
pub const LN_ipsec4 = "ipsec4";
pub const NID_ipsec4 = 750;
pub const SN_whirlpool = "whirlpool";
pub const NID_whirlpool = 804;
pub const OBJ_whirlpool = blk: {
    _ = OBJ_iso;
    _ = @as(c_long, 0);
    _ = @as(c_long, 10118);
    _ = @as(c_long, 3);
    _ = @as(c_long, 0);
    break :blk @as(c_long, 55);
};
pub const SN_cryptopro = "cryptopro";
pub const NID_cryptopro = 805;
pub const OBJ_cryptopro = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 2);
};
pub const SN_cryptocom = "cryptocom";
pub const NID_cryptocom = 806;
pub const OBJ_cryptocom = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 9);
};
pub const SN_id_tc26 = "id-tc26";
pub const NID_id_tc26 = 974;
pub const OBJ_id_tc26 = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 7);
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3411_94_with_GostR3410_2001 = "id-GostR3411-94-with-GostR3410-2001";
pub const LN_id_GostR3411_94_with_GostR3410_2001 = "GOST R 34.11-94 with GOST R 34.10-2001";
pub const NID_id_GostR3411_94_with_GostR3410_2001 = 807;
pub const OBJ_id_GostR3411_94_with_GostR3410_2001 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3411_94_with_GostR3410_94 = "id-GostR3411-94-with-GostR3410-94";
pub const LN_id_GostR3411_94_with_GostR3410_94 = "GOST R 34.11-94 with GOST R 34.10-94";
pub const NID_id_GostR3411_94_with_GostR3410_94 = 808;
pub const OBJ_id_GostR3411_94_with_GostR3410_94 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 4);
};
pub const SN_id_GostR3411_94 = "md_gost94";
pub const LN_id_GostR3411_94 = "GOST R 34.11-94";
pub const NID_id_GostR3411_94 = 809;
pub const OBJ_id_GostR3411_94 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 9);
};
pub const SN_id_HMACGostR3411_94 = "id-HMACGostR3411-94";
pub const LN_id_HMACGostR3411_94 = "HMAC GOST 34.11-94";
pub const NID_id_HMACGostR3411_94 = 810;
pub const OBJ_id_HMACGostR3411_94 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 10);
};
pub const SN_id_GostR3410_2001 = "gost2001";
pub const LN_id_GostR3410_2001 = "GOST R 34.10-2001";
pub const NID_id_GostR3410_2001 = 811;
pub const OBJ_id_GostR3410_2001 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 19);
};
pub const SN_id_GostR3410_94 = "gost94";
pub const LN_id_GostR3410_94 = "GOST R 34.10-94";
pub const NID_id_GostR3410_94 = 812;
pub const OBJ_id_GostR3410_94 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 20);
};
pub const SN_id_Gost28147_89 = "gost89";
pub const LN_id_Gost28147_89 = "GOST 28147-89";
pub const NID_id_Gost28147_89 = 813;
pub const OBJ_id_Gost28147_89 = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 21);
};
pub const SN_gost89_cnt = "gost89-cnt";
pub const NID_gost89_cnt = 814;
pub const SN_gost89_cnt_12 = "gost89-cnt-12";
pub const NID_gost89_cnt_12 = 975;
pub const SN_gost89_cbc = "gost89-cbc";
pub const NID_gost89_cbc = 1009;
pub const SN_gost89_ecb = "gost89-ecb";
pub const NID_gost89_ecb = 1010;
pub const SN_gost89_ctr = "gost89-ctr";
pub const NID_gost89_ctr = 1011;
pub const SN_id_Gost28147_89_MAC = "gost-mac";
pub const LN_id_Gost28147_89_MAC = "GOST 28147-89 MAC";
pub const NID_id_Gost28147_89_MAC = 815;
pub const OBJ_id_Gost28147_89_MAC = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 22);
};
pub const SN_gost_mac_12 = "gost-mac-12";
pub const NID_gost_mac_12 = 976;
pub const SN_id_GostR3411_94_prf = "prf-gostr3411-94";
pub const LN_id_GostR3411_94_prf = "GOST R 34.11-94 PRF";
pub const NID_id_GostR3411_94_prf = 816;
pub const OBJ_id_GostR3411_94_prf = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 23);
};
pub const SN_id_GostR3410_2001DH = "id-GostR3410-2001DH";
pub const LN_id_GostR3410_2001DH = "GOST R 34.10-2001 DH";
pub const NID_id_GostR3410_2001DH = 817;
pub const OBJ_id_GostR3410_2001DH = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 98);
};
pub const SN_id_GostR3410_94DH = "id-GostR3410-94DH";
pub const LN_id_GostR3410_94DH = "GOST R 34.10-94 DH";
pub const NID_id_GostR3410_94DH = 818;
pub const OBJ_id_GostR3410_94DH = blk: {
    _ = OBJ_cryptopro;
    break :blk @as(c_long, 99);
};
pub const SN_id_Gost28147_89_CryptoPro_KeyMeshing = "id-Gost28147-89-CryptoPro-KeyMeshing";
pub const NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;
pub const OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 1);
};
pub const SN_id_Gost28147_89_None_KeyMeshing = "id-Gost28147-89-None-KeyMeshing";
pub const NID_id_Gost28147_89_None_KeyMeshing = 820;
pub const OBJ_id_Gost28147_89_None_KeyMeshing = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 0);
};
pub const SN_id_GostR3411_94_TestParamSet = "id-GostR3411-94-TestParamSet";
pub const NID_id_GostR3411_94_TestParamSet = 821;
pub const OBJ_id_GostR3411_94_TestParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 30);
    break :blk @as(c_long, 0);
};
pub const SN_id_GostR3411_94_CryptoProParamSet = "id-GostR3411-94-CryptoProParamSet";
pub const NID_id_GostR3411_94_CryptoProParamSet = 822;
pub const OBJ_id_GostR3411_94_CryptoProParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 30);
    break :blk @as(c_long, 1);
};
pub const SN_id_Gost28147_89_TestParamSet = "id-Gost28147-89-TestParamSet";
pub const NID_id_Gost28147_89_TestParamSet = 823;
pub const OBJ_id_Gost28147_89_TestParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 0);
};
pub const SN_id_Gost28147_89_CryptoPro_A_ParamSet = "id-Gost28147-89-CryptoPro-A-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;
pub const OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 1);
};
pub const SN_id_Gost28147_89_CryptoPro_B_ParamSet = "id-Gost28147-89-CryptoPro-B-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;
pub const OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 2);
};
pub const SN_id_Gost28147_89_CryptoPro_C_ParamSet = "id-Gost28147-89-CryptoPro-C-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;
pub const OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 3);
};
pub const SN_id_Gost28147_89_CryptoPro_D_ParamSet = "id-Gost28147-89-CryptoPro-D-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;
pub const OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 4);
};
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;
pub const OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 5);
};
pub const SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;
pub const OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 6);
};
pub const SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = "id-Gost28147-89-CryptoPro-RIC-1-ParamSet";
pub const NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;
pub const OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 31);
    break :blk @as(c_long, 7);
};
pub const SN_id_GostR3410_94_TestParamSet = "id-GostR3410-94-TestParamSet";
pub const NID_id_GostR3410_94_TestParamSet = 831;
pub const OBJ_id_GostR3410_94_TestParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 32);
    break :blk @as(c_long, 0);
};
pub const SN_id_GostR3410_94_CryptoPro_A_ParamSet = "id-GostR3410-94-CryptoPro-A-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;
pub const OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 32);
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3410_94_CryptoPro_B_ParamSet = "id-GostR3410-94-CryptoPro-B-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;
pub const OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 32);
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3410_94_CryptoPro_C_ParamSet = "id-GostR3410-94-CryptoPro-C-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;
pub const OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 32);
    break :blk @as(c_long, 4);
};
pub const SN_id_GostR3410_94_CryptoPro_D_ParamSet = "id-GostR3410-94-CryptoPro-D-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;
pub const OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 32);
    break :blk @as(c_long, 5);
};
pub const SN_id_GostR3410_94_CryptoPro_XchA_ParamSet = "id-GostR3410-94-CryptoPro-XchA-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;
pub const OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 33);
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_94_CryptoPro_XchB_ParamSet = "id-GostR3410-94-CryptoPro-XchB-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;
pub const OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 33);
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3410_94_CryptoPro_XchC_ParamSet = "id-GostR3410-94-CryptoPro-XchC-ParamSet";
pub const NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;
pub const OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 33);
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3410_2001_TestParamSet = "id-GostR3410-2001-TestParamSet";
pub const NID_id_GostR3410_2001_TestParamSet = 839;
pub const OBJ_id_GostR3410_2001_TestParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 35);
    break :blk @as(c_long, 0);
};
pub const SN_id_GostR3410_2001_CryptoPro_A_ParamSet = "id-GostR3410-2001-CryptoPro-A-ParamSet";
pub const NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;
pub const OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 35);
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_2001_CryptoPro_B_ParamSet = "id-GostR3410-2001-CryptoPro-B-ParamSet";
pub const NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;
pub const OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 35);
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3410_2001_CryptoPro_C_ParamSet = "id-GostR3410-2001-CryptoPro-C-ParamSet";
pub const NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;
pub const OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 35);
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet = "id-GostR3410-2001-CryptoPro-XchA-ParamSet";
pub const NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;
pub const OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 36);
    break :blk @as(c_long, 0);
};
pub const SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet = "id-GostR3410-2001-CryptoPro-XchB-ParamSet";
pub const NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;
pub const OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = blk: {
    _ = OBJ_cryptopro;
    _ = @as(c_long, 36);
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_94_a = "id-GostR3410-94-a";
pub const NID_id_GostR3410_94_a = 845;
pub const OBJ_id_GostR3410_94_a = blk: {
    _ = OBJ_id_GostR3410_94;
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_94_aBis = "id-GostR3410-94-aBis";
pub const NID_id_GostR3410_94_aBis = 846;
pub const OBJ_id_GostR3410_94_aBis = blk: {
    _ = OBJ_id_GostR3410_94;
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3410_94_b = "id-GostR3410-94-b";
pub const NID_id_GostR3410_94_b = 847;
pub const OBJ_id_GostR3410_94_b = blk: {
    _ = OBJ_id_GostR3410_94;
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3410_94_bBis = "id-GostR3410-94-bBis";
pub const NID_id_GostR3410_94_bBis = 848;
pub const OBJ_id_GostR3410_94_bBis = blk: {
    _ = OBJ_id_GostR3410_94;
    break :blk @as(c_long, 4);
};
pub const SN_id_Gost28147_89_cc = "id-Gost28147-89-cc";
pub const LN_id_Gost28147_89_cc = "GOST 28147-89 Cryptocom ParamSet";
pub const NID_id_Gost28147_89_cc = 849;
pub const OBJ_id_Gost28147_89_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 6);
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_94_cc = "gost94cc";
pub const LN_id_GostR3410_94_cc = "GOST 34.10-94 Cryptocom";
pub const NID_id_GostR3410_94_cc = 850;
pub const OBJ_id_GostR3410_94_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3410_2001_cc = "gost2001cc";
pub const LN_id_GostR3410_2001_cc = "GOST 34.10-2001 Cryptocom";
pub const NID_id_GostR3410_2001_cc = 851;
pub const OBJ_id_GostR3410_2001_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    break :blk @as(c_long, 4);
};
pub const SN_id_GostR3411_94_with_GostR3410_94_cc = "id-GostR3411-94-with-GostR3410-94-cc";
pub const LN_id_GostR3411_94_with_GostR3410_94_cc = "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom";
pub const NID_id_GostR3411_94_with_GostR3410_94_cc = 852;
pub const OBJ_id_GostR3411_94_with_GostR3410_94_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 3);
};
pub const SN_id_GostR3411_94_with_GostR3410_2001_cc = "id-GostR3411-94-with-GostR3410-2001-cc";
pub const LN_id_GostR3411_94_with_GostR3410_2001_cc = "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom";
pub const NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;
pub const OBJ_id_GostR3411_94_with_GostR3410_2001_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 4);
};
pub const SN_id_GostR3410_2001_ParamSet_cc = "id-GostR3410-2001-ParamSet-cc";
pub const LN_id_GostR3410_2001_ParamSet_cc = "GOST R 3410-2001 Parameter Set Cryptocom";
pub const NID_id_GostR3410_2001_ParamSet_cc = 854;
pub const OBJ_id_GostR3410_2001_ParamSet_cc = blk: {
    _ = OBJ_cryptocom;
    _ = @as(c_long, 1);
    _ = @as(c_long, 8);
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_algorithms = "id-tc26-algorithms";
pub const NID_id_tc26_algorithms = 977;
pub const OBJ_id_tc26_algorithms = blk: {
    _ = OBJ_id_tc26;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_sign = "id-tc26-sign";
pub const NID_id_tc26_sign = 978;
pub const OBJ_id_tc26_sign = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_2012_256 = "gost2012_256";
pub const LN_id_GostR3410_2012_256 = "GOST R 34.10-2012 with 256 bit modulus";
pub const NID_id_GostR3410_2012_256 = 979;
pub const OBJ_id_GostR3410_2012_256 = blk: {
    _ = OBJ_id_tc26_sign;
    break :blk @as(c_long, 1);
};
pub const SN_id_GostR3410_2012_512 = "gost2012_512";
pub const LN_id_GostR3410_2012_512 = "GOST R 34.10-2012 with 512 bit modulus";
pub const NID_id_GostR3410_2012_512 = 980;
pub const OBJ_id_GostR3410_2012_512 = blk: {
    _ = OBJ_id_tc26_sign;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_digest = "id-tc26-digest";
pub const NID_id_tc26_digest = 981;
pub const OBJ_id_tc26_digest = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3411_2012_256 = "md_gost12_256";
pub const LN_id_GostR3411_2012_256 = "GOST R 34.11-2012 with 256 bit hash";
pub const NID_id_GostR3411_2012_256 = 982;
pub const OBJ_id_GostR3411_2012_256 = blk: {
    _ = OBJ_id_tc26_digest;
    break :blk @as(c_long, 2);
};
pub const SN_id_GostR3411_2012_512 = "md_gost12_512";
pub const LN_id_GostR3411_2012_512 = "GOST R 34.11-2012 with 512 bit hash";
pub const NID_id_GostR3411_2012_512 = 983;
pub const OBJ_id_GostR3411_2012_512 = blk: {
    _ = OBJ_id_tc26_digest;
    break :blk @as(c_long, 3);
};
pub const SN_id_tc26_signwithdigest = "id-tc26-signwithdigest";
pub const NID_id_tc26_signwithdigest = 984;
pub const OBJ_id_tc26_signwithdigest = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 3);
};
pub const SN_id_tc26_signwithdigest_gost3410_2012_256 = "id-tc26-signwithdigest-gost3410-2012-256";
pub const LN_id_tc26_signwithdigest_gost3410_2012_256 = "GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)";
pub const NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;
pub const OBJ_id_tc26_signwithdigest_gost3410_2012_256 = blk: {
    _ = OBJ_id_tc26_signwithdigest;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_signwithdigest_gost3410_2012_512 = "id-tc26-signwithdigest-gost3410-2012-512";
pub const LN_id_tc26_signwithdigest_gost3410_2012_512 = "GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)";
pub const NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;
pub const OBJ_id_tc26_signwithdigest_gost3410_2012_512 = blk: {
    _ = OBJ_id_tc26_signwithdigest;
    break :blk @as(c_long, 3);
};
pub const SN_id_tc26_mac = "id-tc26-mac";
pub const NID_id_tc26_mac = 987;
pub const OBJ_id_tc26_mac = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 4);
};
pub const SN_id_tc26_hmac_gost_3411_2012_256 = "id-tc26-hmac-gost-3411-2012-256";
pub const LN_id_tc26_hmac_gost_3411_2012_256 = "HMAC GOST 34.11-2012 256 bit";
pub const NID_id_tc26_hmac_gost_3411_2012_256 = 988;
pub const OBJ_id_tc26_hmac_gost_3411_2012_256 = blk: {
    _ = OBJ_id_tc26_mac;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_hmac_gost_3411_2012_512 = "id-tc26-hmac-gost-3411-2012-512";
pub const LN_id_tc26_hmac_gost_3411_2012_512 = "HMAC GOST 34.11-2012 512 bit";
pub const NID_id_tc26_hmac_gost_3411_2012_512 = 989;
pub const OBJ_id_tc26_hmac_gost_3411_2012_512 = blk: {
    _ = OBJ_id_tc26_mac;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_cipher = "id-tc26-cipher";
pub const NID_id_tc26_cipher = 990;
pub const OBJ_id_tc26_cipher = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 5);
};
pub const SN_id_tc26_cipher_gostr3412_2015_magma = "id-tc26-cipher-gostr3412-2015-magma";
pub const NID_id_tc26_cipher_gostr3412_2015_magma = 1173;
pub const OBJ_id_tc26_cipher_gostr3412_2015_magma = blk: {
    _ = OBJ_id_tc26_cipher;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = "id-tc26-cipher-gostr3412-2015-magma-ctracpkm";
pub const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;
pub const OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = blk: {
    _ = OBJ_id_tc26_cipher_gostr3412_2015_magma;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = "id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac";
pub const NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;
pub const OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = blk: {
    _ = OBJ_id_tc26_cipher_gostr3412_2015_magma;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik = "id-tc26-cipher-gostr3412-2015-kuznyechik";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;
pub const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = blk: {
    _ = OBJ_id_tc26_cipher;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;
pub const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = blk: {
    _ = OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac";
pub const NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;
pub const OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = blk: {
    _ = OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_agreement = "id-tc26-agreement";
pub const NID_id_tc26_agreement = 991;
pub const OBJ_id_tc26_agreement = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 6);
};
pub const SN_id_tc26_agreement_gost_3410_2012_256 = "id-tc26-agreement-gost-3410-2012-256";
pub const NID_id_tc26_agreement_gost_3410_2012_256 = 992;
pub const OBJ_id_tc26_agreement_gost_3410_2012_256 = blk: {
    _ = OBJ_id_tc26_agreement;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_agreement_gost_3410_2012_512 = "id-tc26-agreement-gost-3410-2012-512";
pub const NID_id_tc26_agreement_gost_3410_2012_512 = 993;
pub const OBJ_id_tc26_agreement_gost_3410_2012_512 = blk: {
    _ = OBJ_id_tc26_agreement;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_wrap = "id-tc26-wrap";
pub const NID_id_tc26_wrap = 1179;
pub const OBJ_id_tc26_wrap = blk: {
    _ = OBJ_id_tc26_algorithms;
    break :blk @as(c_long, 7);
};
pub const SN_id_tc26_wrap_gostr3412_2015_magma = "id-tc26-wrap-gostr3412-2015-magma";
pub const NID_id_tc26_wrap_gostr3412_2015_magma = 1180;
pub const OBJ_id_tc26_wrap_gostr3412_2015_magma = blk: {
    _ = OBJ_id_tc26_wrap;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = "id-tc26-wrap-gostr3412-2015-magma-kexp15";
pub const NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;
pub const OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = blk: {
    _ = OBJ_id_tc26_wrap_gostr3412_2015_magma;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_wrap_gostr3412_2015_kuznyechik = "id-tc26-wrap-gostr3412-2015-kuznyechik";
pub const NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;
pub const OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = blk: {
    _ = OBJ_id_tc26_wrap;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = "id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15";
pub const NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;
pub const OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = blk: {
    _ = OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_constants = "id-tc26-constants";
pub const NID_id_tc26_constants = 994;
pub const OBJ_id_tc26_constants = blk: {
    _ = OBJ_id_tc26;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_sign_constants = "id-tc26-sign-constants";
pub const NID_id_tc26_sign_constants = 995;
pub const OBJ_id_tc26_sign_constants = blk: {
    _ = OBJ_id_tc26_constants;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_gost_3410_2012_256_constants = "id-tc26-gost-3410-2012-256-constants";
pub const NID_id_tc26_gost_3410_2012_256_constants = 1147;
pub const OBJ_id_tc26_gost_3410_2012_256_constants = blk: {
    _ = OBJ_id_tc26_sign_constants;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_gost_3410_2012_256_paramSetA = "id-tc26-gost-3410-2012-256-paramSetA";
pub const LN_id_tc26_gost_3410_2012_256_paramSetA = "GOST R 34.10-2012 (256 bit) ParamSet A";
pub const NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;
pub const OBJ_id_tc26_gost_3410_2012_256_paramSetA = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_256_constants;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_gost_3410_2012_256_paramSetB = "id-tc26-gost-3410-2012-256-paramSetB";
pub const LN_id_tc26_gost_3410_2012_256_paramSetB = "GOST R 34.10-2012 (256 bit) ParamSet B";
pub const NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;
pub const OBJ_id_tc26_gost_3410_2012_256_paramSetB = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_256_constants;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_gost_3410_2012_256_paramSetC = "id-tc26-gost-3410-2012-256-paramSetC";
pub const LN_id_tc26_gost_3410_2012_256_paramSetC = "GOST R 34.10-2012 (256 bit) ParamSet C";
pub const NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;
pub const OBJ_id_tc26_gost_3410_2012_256_paramSetC = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_256_constants;
    break :blk @as(c_long, 3);
};
pub const SN_id_tc26_gost_3410_2012_256_paramSetD = "id-tc26-gost-3410-2012-256-paramSetD";
pub const LN_id_tc26_gost_3410_2012_256_paramSetD = "GOST R 34.10-2012 (256 bit) ParamSet D";
pub const NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;
pub const OBJ_id_tc26_gost_3410_2012_256_paramSetD = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_256_constants;
    break :blk @as(c_long, 4);
};
pub const SN_id_tc26_gost_3410_2012_512_constants = "id-tc26-gost-3410-2012-512-constants";
pub const NID_id_tc26_gost_3410_2012_512_constants = 996;
pub const OBJ_id_tc26_gost_3410_2012_512_constants = blk: {
    _ = OBJ_id_tc26_sign_constants;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_gost_3410_2012_512_paramSetTest = "id-tc26-gost-3410-2012-512-paramSetTest";
pub const LN_id_tc26_gost_3410_2012_512_paramSetTest = "GOST R 34.10-2012 (512 bit) testing parameter set";
pub const NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;
pub const OBJ_id_tc26_gost_3410_2012_512_paramSetTest = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_512_constants;
    break :blk @as(c_long, 0);
};
pub const SN_id_tc26_gost_3410_2012_512_paramSetA = "id-tc26-gost-3410-2012-512-paramSetA";
pub const LN_id_tc26_gost_3410_2012_512_paramSetA = "GOST R 34.10-2012 (512 bit) ParamSet A";
pub const NID_id_tc26_gost_3410_2012_512_paramSetA = 998;
pub const OBJ_id_tc26_gost_3410_2012_512_paramSetA = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_512_constants;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_gost_3410_2012_512_paramSetB = "id-tc26-gost-3410-2012-512-paramSetB";
pub const LN_id_tc26_gost_3410_2012_512_paramSetB = "GOST R 34.10-2012 (512 bit) ParamSet B";
pub const NID_id_tc26_gost_3410_2012_512_paramSetB = 999;
pub const OBJ_id_tc26_gost_3410_2012_512_paramSetB = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_512_constants;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_gost_3410_2012_512_paramSetC = "id-tc26-gost-3410-2012-512-paramSetC";
pub const LN_id_tc26_gost_3410_2012_512_paramSetC = "GOST R 34.10-2012 (512 bit) ParamSet C";
pub const NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;
pub const OBJ_id_tc26_gost_3410_2012_512_paramSetC = blk: {
    _ = OBJ_id_tc26_gost_3410_2012_512_constants;
    break :blk @as(c_long, 3);
};
pub const SN_id_tc26_digest_constants = "id-tc26-digest-constants";
pub const NID_id_tc26_digest_constants = 1000;
pub const OBJ_id_tc26_digest_constants = blk: {
    _ = OBJ_id_tc26_constants;
    break :blk @as(c_long, 2);
};
pub const SN_id_tc26_cipher_constants = "id-tc26-cipher-constants";
pub const NID_id_tc26_cipher_constants = 1001;
pub const OBJ_id_tc26_cipher_constants = blk: {
    _ = OBJ_id_tc26_constants;
    break :blk @as(c_long, 5);
};
pub const SN_id_tc26_gost_28147_constants = "id-tc26-gost-28147-constants";
pub const NID_id_tc26_gost_28147_constants = 1002;
pub const OBJ_id_tc26_gost_28147_constants = blk: {
    _ = OBJ_id_tc26_cipher_constants;
    break :blk @as(c_long, 1);
};
pub const SN_id_tc26_gost_28147_param_Z = "id-tc26-gost-28147-param-Z";
pub const LN_id_tc26_gost_28147_param_Z = "GOST 28147-89 TC26 parameter set";
pub const NID_id_tc26_gost_28147_param_Z = 1003;
pub const OBJ_id_tc26_gost_28147_param_Z = blk: {
    _ = OBJ_id_tc26_gost_28147_constants;
    break :blk @as(c_long, 1);
};
pub const SN_INN = "INN";
pub const LN_INN = "INN";
pub const NID_INN = 1004;
pub const OBJ_INN = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 3);
    _ = @as(c_long, 131);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_OGRN = "OGRN";
pub const LN_OGRN = "OGRN";
pub const NID_OGRN = 1005;
pub const OBJ_OGRN = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 100);
    break :blk @as(c_long, 1);
};
pub const SN_SNILS = "SNILS";
pub const LN_SNILS = "SNILS";
pub const NID_SNILS = 1006;
pub const OBJ_SNILS = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 100);
    break :blk @as(c_long, 3);
};
pub const SN_subjectSignTool = "subjectSignTool";
pub const LN_subjectSignTool = "Signing Tool of Subject";
pub const NID_subjectSignTool = 1007;
pub const OBJ_subjectSignTool = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 100);
    break :blk @as(c_long, 111);
};
pub const SN_issuerSignTool = "issuerSignTool";
pub const LN_issuerSignTool = "Signing Tool of Issuer";
pub const NID_issuerSignTool = 1008;
pub const OBJ_issuerSignTool = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 643);
    _ = @as(c_long, 100);
    break :blk @as(c_long, 112);
};
pub const SN_grasshopper_ecb = "grasshopper-ecb";
pub const NID_grasshopper_ecb = 1012;
pub const SN_grasshopper_ctr = "grasshopper-ctr";
pub const NID_grasshopper_ctr = 1013;
pub const SN_grasshopper_ofb = "grasshopper-ofb";
pub const NID_grasshopper_ofb = 1014;
pub const SN_grasshopper_cbc = "grasshopper-cbc";
pub const NID_grasshopper_cbc = 1015;
pub const SN_grasshopper_cfb = "grasshopper-cfb";
pub const NID_grasshopper_cfb = 1016;
pub const SN_grasshopper_mac = "grasshopper-mac";
pub const NID_grasshopper_mac = 1017;
pub const SN_magma_ecb = "magma-ecb";
pub const NID_magma_ecb = 1187;
pub const SN_magma_ctr = "magma-ctr";
pub const NID_magma_ctr = 1188;
pub const SN_magma_ofb = "magma-ofb";
pub const NID_magma_ofb = 1189;
pub const SN_magma_cbc = "magma-cbc";
pub const NID_magma_cbc = 1190;
pub const SN_magma_cfb = "magma-cfb";
pub const NID_magma_cfb = 1191;
pub const SN_magma_mac = "magma-mac";
pub const NID_magma_mac = 1192;
pub const SN_camellia_128_cbc = "CAMELLIA-128-CBC";
pub const LN_camellia_128_cbc = "camellia-128-cbc";
pub const NID_camellia_128_cbc = 751;
pub const OBJ_camellia_128_cbc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_camellia_192_cbc = "CAMELLIA-192-CBC";
pub const LN_camellia_192_cbc = "camellia-192-cbc";
pub const NID_camellia_192_cbc = 752;
pub const OBJ_camellia_192_cbc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 3);
};
pub const SN_camellia_256_cbc = "CAMELLIA-256-CBC";
pub const LN_camellia_256_cbc = "camellia-256-cbc";
pub const NID_camellia_256_cbc = 753;
pub const OBJ_camellia_256_cbc = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 4);
};
pub const SN_id_camellia128_wrap = "id-camellia128-wrap";
pub const NID_id_camellia128_wrap = 907;
pub const OBJ_id_camellia128_wrap = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 2);
};
pub const SN_id_camellia192_wrap = "id-camellia192-wrap";
pub const NID_id_camellia192_wrap = 908;
pub const OBJ_id_camellia192_wrap = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 3);
};
pub const SN_id_camellia256_wrap = "id-camellia256-wrap";
pub const NID_id_camellia256_wrap = 909;
pub const OBJ_id_camellia256_wrap = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 392);
    _ = @as(c_long, 200011);
    _ = @as(c_long, 61);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    break :blk @as(c_long, 4);
};
pub const OBJ_ntt_ds = blk: {
    _ = @as(c_long, 0);
    _ = @as(c_long, 3);
    _ = @as(c_long, 4401);
    break :blk @as(c_long, 5);
};
pub const OBJ_camellia = blk: {
    _ = OBJ_ntt_ds;
    _ = @as(c_long, 3);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 9);
};
pub const SN_camellia_128_ecb = "CAMELLIA-128-ECB";
pub const LN_camellia_128_ecb = "camellia-128-ecb";
pub const NID_camellia_128_ecb = 754;
pub const OBJ_camellia_128_ecb = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 1);
};
pub const SN_camellia_128_ofb128 = "CAMELLIA-128-OFB";
pub const LN_camellia_128_ofb128 = "camellia-128-ofb";
pub const NID_camellia_128_ofb128 = 766;
pub const OBJ_camellia_128_ofb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 3);
};
pub const SN_camellia_128_cfb128 = "CAMELLIA-128-CFB";
pub const LN_camellia_128_cfb128 = "camellia-128-cfb";
pub const NID_camellia_128_cfb128 = 757;
pub const OBJ_camellia_128_cfb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 4);
};
pub const SN_camellia_128_gcm = "CAMELLIA-128-GCM";
pub const LN_camellia_128_gcm = "camellia-128-gcm";
pub const NID_camellia_128_gcm = 961;
pub const OBJ_camellia_128_gcm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 6);
};
pub const SN_camellia_128_ccm = "CAMELLIA-128-CCM";
pub const LN_camellia_128_ccm = "camellia-128-ccm";
pub const NID_camellia_128_ccm = 962;
pub const OBJ_camellia_128_ccm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 7);
};
pub const SN_camellia_128_ctr = "CAMELLIA-128-CTR";
pub const LN_camellia_128_ctr = "camellia-128-ctr";
pub const NID_camellia_128_ctr = 963;
pub const OBJ_camellia_128_ctr = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 9);
};
pub const SN_camellia_128_cmac = "CAMELLIA-128-CMAC";
pub const LN_camellia_128_cmac = "camellia-128-cmac";
pub const NID_camellia_128_cmac = 964;
pub const OBJ_camellia_128_cmac = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 10);
};
pub const SN_camellia_192_ecb = "CAMELLIA-192-ECB";
pub const LN_camellia_192_ecb = "camellia-192-ecb";
pub const NID_camellia_192_ecb = 755;
pub const OBJ_camellia_192_ecb = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 21);
};
pub const SN_camellia_192_ofb128 = "CAMELLIA-192-OFB";
pub const LN_camellia_192_ofb128 = "camellia-192-ofb";
pub const NID_camellia_192_ofb128 = 767;
pub const OBJ_camellia_192_ofb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 23);
};
pub const SN_camellia_192_cfb128 = "CAMELLIA-192-CFB";
pub const LN_camellia_192_cfb128 = "camellia-192-cfb";
pub const NID_camellia_192_cfb128 = 758;
pub const OBJ_camellia_192_cfb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 24);
};
pub const SN_camellia_192_gcm = "CAMELLIA-192-GCM";
pub const LN_camellia_192_gcm = "camellia-192-gcm";
pub const NID_camellia_192_gcm = 965;
pub const OBJ_camellia_192_gcm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 26);
};
pub const SN_camellia_192_ccm = "CAMELLIA-192-CCM";
pub const LN_camellia_192_ccm = "camellia-192-ccm";
pub const NID_camellia_192_ccm = 966;
pub const OBJ_camellia_192_ccm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 27);
};
pub const SN_camellia_192_ctr = "CAMELLIA-192-CTR";
pub const LN_camellia_192_ctr = "camellia-192-ctr";
pub const NID_camellia_192_ctr = 967;
pub const OBJ_camellia_192_ctr = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 29);
};
pub const SN_camellia_192_cmac = "CAMELLIA-192-CMAC";
pub const LN_camellia_192_cmac = "camellia-192-cmac";
pub const NID_camellia_192_cmac = 968;
pub const OBJ_camellia_192_cmac = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 30);
};
pub const SN_camellia_256_ecb = "CAMELLIA-256-ECB";
pub const LN_camellia_256_ecb = "camellia-256-ecb";
pub const NID_camellia_256_ecb = 756;
pub const OBJ_camellia_256_ecb = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 41);
};
pub const SN_camellia_256_ofb128 = "CAMELLIA-256-OFB";
pub const LN_camellia_256_ofb128 = "camellia-256-ofb";
pub const NID_camellia_256_ofb128 = 768;
pub const OBJ_camellia_256_ofb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 43);
};
pub const SN_camellia_256_cfb128 = "CAMELLIA-256-CFB";
pub const LN_camellia_256_cfb128 = "camellia-256-cfb";
pub const NID_camellia_256_cfb128 = 759;
pub const OBJ_camellia_256_cfb128 = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 44);
};
pub const SN_camellia_256_gcm = "CAMELLIA-256-GCM";
pub const LN_camellia_256_gcm = "camellia-256-gcm";
pub const NID_camellia_256_gcm = 969;
pub const OBJ_camellia_256_gcm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 46);
};
pub const SN_camellia_256_ccm = "CAMELLIA-256-CCM";
pub const LN_camellia_256_ccm = "camellia-256-ccm";
pub const NID_camellia_256_ccm = 970;
pub const OBJ_camellia_256_ccm = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 47);
};
pub const SN_camellia_256_ctr = "CAMELLIA-256-CTR";
pub const LN_camellia_256_ctr = "camellia-256-ctr";
pub const NID_camellia_256_ctr = 971;
pub const OBJ_camellia_256_ctr = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 49);
};
pub const SN_camellia_256_cmac = "CAMELLIA-256-CMAC";
pub const LN_camellia_256_cmac = "camellia-256-cmac";
pub const NID_camellia_256_cmac = 972;
pub const OBJ_camellia_256_cmac = blk: {
    _ = OBJ_camellia;
    break :blk @as(c_long, 50);
};
pub const SN_camellia_128_cfb1 = "CAMELLIA-128-CFB1";
pub const LN_camellia_128_cfb1 = "camellia-128-cfb1";
pub const NID_camellia_128_cfb1 = 760;
pub const SN_camellia_192_cfb1 = "CAMELLIA-192-CFB1";
pub const LN_camellia_192_cfb1 = "camellia-192-cfb1";
pub const NID_camellia_192_cfb1 = 761;
pub const SN_camellia_256_cfb1 = "CAMELLIA-256-CFB1";
pub const LN_camellia_256_cfb1 = "camellia-256-cfb1";
pub const NID_camellia_256_cfb1 = 762;
pub const SN_camellia_128_cfb8 = "CAMELLIA-128-CFB8";
pub const LN_camellia_128_cfb8 = "camellia-128-cfb8";
pub const NID_camellia_128_cfb8 = 763;
pub const SN_camellia_192_cfb8 = "CAMELLIA-192-CFB8";
pub const LN_camellia_192_cfb8 = "camellia-192-cfb8";
pub const NID_camellia_192_cfb8 = 764;
pub const SN_camellia_256_cfb8 = "CAMELLIA-256-CFB8";
pub const LN_camellia_256_cfb8 = "camellia-256-cfb8";
pub const NID_camellia_256_cfb8 = 765;
pub const OBJ_aria = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    _ = @as(c_long, 410);
    _ = @as(c_long, 200046);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_aria_128_ecb = "ARIA-128-ECB";
pub const LN_aria_128_ecb = "aria-128-ecb";
pub const NID_aria_128_ecb = 1065;
pub const OBJ_aria_128_ecb = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 1);
};
pub const SN_aria_128_cbc = "ARIA-128-CBC";
pub const LN_aria_128_cbc = "aria-128-cbc";
pub const NID_aria_128_cbc = 1066;
pub const OBJ_aria_128_cbc = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 2);
};
pub const SN_aria_128_cfb128 = "ARIA-128-CFB";
pub const LN_aria_128_cfb128 = "aria-128-cfb";
pub const NID_aria_128_cfb128 = 1067;
pub const OBJ_aria_128_cfb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 3);
};
pub const SN_aria_128_ofb128 = "ARIA-128-OFB";
pub const LN_aria_128_ofb128 = "aria-128-ofb";
pub const NID_aria_128_ofb128 = 1068;
pub const OBJ_aria_128_ofb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 4);
};
pub const SN_aria_128_ctr = "ARIA-128-CTR";
pub const LN_aria_128_ctr = "aria-128-ctr";
pub const NID_aria_128_ctr = 1069;
pub const OBJ_aria_128_ctr = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 5);
};
pub const SN_aria_192_ecb = "ARIA-192-ECB";
pub const LN_aria_192_ecb = "aria-192-ecb";
pub const NID_aria_192_ecb = 1070;
pub const OBJ_aria_192_ecb = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 6);
};
pub const SN_aria_192_cbc = "ARIA-192-CBC";
pub const LN_aria_192_cbc = "aria-192-cbc";
pub const NID_aria_192_cbc = 1071;
pub const OBJ_aria_192_cbc = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 7);
};
pub const SN_aria_192_cfb128 = "ARIA-192-CFB";
pub const LN_aria_192_cfb128 = "aria-192-cfb";
pub const NID_aria_192_cfb128 = 1072;
pub const OBJ_aria_192_cfb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 8);
};
pub const SN_aria_192_ofb128 = "ARIA-192-OFB";
pub const LN_aria_192_ofb128 = "aria-192-ofb";
pub const NID_aria_192_ofb128 = 1073;
pub const OBJ_aria_192_ofb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 9);
};
pub const SN_aria_192_ctr = "ARIA-192-CTR";
pub const LN_aria_192_ctr = "aria-192-ctr";
pub const NID_aria_192_ctr = 1074;
pub const OBJ_aria_192_ctr = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 10);
};
pub const SN_aria_256_ecb = "ARIA-256-ECB";
pub const LN_aria_256_ecb = "aria-256-ecb";
pub const NID_aria_256_ecb = 1075;
pub const OBJ_aria_256_ecb = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 11);
};
pub const SN_aria_256_cbc = "ARIA-256-CBC";
pub const LN_aria_256_cbc = "aria-256-cbc";
pub const NID_aria_256_cbc = 1076;
pub const OBJ_aria_256_cbc = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 12);
};
pub const SN_aria_256_cfb128 = "ARIA-256-CFB";
pub const LN_aria_256_cfb128 = "aria-256-cfb";
pub const NID_aria_256_cfb128 = 1077;
pub const OBJ_aria_256_cfb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 13);
};
pub const SN_aria_256_ofb128 = "ARIA-256-OFB";
pub const LN_aria_256_ofb128 = "aria-256-ofb";
pub const NID_aria_256_ofb128 = 1078;
pub const OBJ_aria_256_ofb128 = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 14);
};
pub const SN_aria_256_ctr = "ARIA-256-CTR";
pub const LN_aria_256_ctr = "aria-256-ctr";
pub const NID_aria_256_ctr = 1079;
pub const OBJ_aria_256_ctr = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 15);
};
pub const SN_aria_128_cfb1 = "ARIA-128-CFB1";
pub const LN_aria_128_cfb1 = "aria-128-cfb1";
pub const NID_aria_128_cfb1 = 1080;
pub const SN_aria_192_cfb1 = "ARIA-192-CFB1";
pub const LN_aria_192_cfb1 = "aria-192-cfb1";
pub const NID_aria_192_cfb1 = 1081;
pub const SN_aria_256_cfb1 = "ARIA-256-CFB1";
pub const LN_aria_256_cfb1 = "aria-256-cfb1";
pub const NID_aria_256_cfb1 = 1082;
pub const SN_aria_128_cfb8 = "ARIA-128-CFB8";
pub const LN_aria_128_cfb8 = "aria-128-cfb8";
pub const NID_aria_128_cfb8 = 1083;
pub const SN_aria_192_cfb8 = "ARIA-192-CFB8";
pub const LN_aria_192_cfb8 = "aria-192-cfb8";
pub const NID_aria_192_cfb8 = 1084;
pub const SN_aria_256_cfb8 = "ARIA-256-CFB8";
pub const LN_aria_256_cfb8 = "aria-256-cfb8";
pub const NID_aria_256_cfb8 = 1085;
pub const SN_aria_128_ccm = "ARIA-128-CCM";
pub const LN_aria_128_ccm = "aria-128-ccm";
pub const NID_aria_128_ccm = 1120;
pub const OBJ_aria_128_ccm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 37);
};
pub const SN_aria_192_ccm = "ARIA-192-CCM";
pub const LN_aria_192_ccm = "aria-192-ccm";
pub const NID_aria_192_ccm = 1121;
pub const OBJ_aria_192_ccm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 38);
};
pub const SN_aria_256_ccm = "ARIA-256-CCM";
pub const LN_aria_256_ccm = "aria-256-ccm";
pub const NID_aria_256_ccm = 1122;
pub const OBJ_aria_256_ccm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 39);
};
pub const SN_aria_128_gcm = "ARIA-128-GCM";
pub const LN_aria_128_gcm = "aria-128-gcm";
pub const NID_aria_128_gcm = 1123;
pub const OBJ_aria_128_gcm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 34);
};
pub const SN_aria_192_gcm = "ARIA-192-GCM";
pub const LN_aria_192_gcm = "aria-192-gcm";
pub const NID_aria_192_gcm = 1124;
pub const OBJ_aria_192_gcm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 35);
};
pub const SN_aria_256_gcm = "ARIA-256-GCM";
pub const LN_aria_256_gcm = "aria-256-gcm";
pub const NID_aria_256_gcm = 1125;
pub const OBJ_aria_256_gcm = blk: {
    _ = OBJ_aria;
    break :blk @as(c_long, 36);
};
pub const SN_kisa = "KISA";
pub const LN_kisa = "kisa";
pub const NID_kisa = 773;
pub const OBJ_kisa = blk: {
    _ = OBJ_member_body;
    _ = @as(c_long, 410);
    break :blk @as(c_long, 200004);
};
pub const SN_seed_ecb = "SEED-ECB";
pub const LN_seed_ecb = "seed-ecb";
pub const NID_seed_ecb = 776;
pub const OBJ_seed_ecb = blk: {
    _ = OBJ_kisa;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 3);
};
pub const SN_seed_cbc = "SEED-CBC";
pub const LN_seed_cbc = "seed-cbc";
pub const NID_seed_cbc = 777;
pub const OBJ_seed_cbc = blk: {
    _ = OBJ_kisa;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 4);
};
pub const SN_seed_cfb128 = "SEED-CFB";
pub const LN_seed_cfb128 = "seed-cfb";
pub const NID_seed_cfb128 = 779;
pub const OBJ_seed_cfb128 = blk: {
    _ = OBJ_kisa;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 5);
};
pub const SN_seed_ofb128 = "SEED-OFB";
pub const LN_seed_ofb128 = "seed-ofb";
pub const NID_seed_ofb128 = 778;
pub const OBJ_seed_ofb128 = blk: {
    _ = OBJ_kisa;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 6);
};
pub const SN_sm4_ecb = "SM4-ECB";
pub const LN_sm4_ecb = "sm4-ecb";
pub const NID_sm4_ecb = 1133;
pub const OBJ_sm4_ecb = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 1);
};
pub const SN_sm4_cbc = "SM4-CBC";
pub const LN_sm4_cbc = "sm4-cbc";
pub const NID_sm4_cbc = 1134;
pub const OBJ_sm4_cbc = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 2);
};
pub const SN_sm4_ofb128 = "SM4-OFB";
pub const LN_sm4_ofb128 = "sm4-ofb";
pub const NID_sm4_ofb128 = 1135;
pub const OBJ_sm4_ofb128 = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 3);
};
pub const SN_sm4_cfb128 = "SM4-CFB";
pub const LN_sm4_cfb128 = "sm4-cfb";
pub const NID_sm4_cfb128 = 1137;
pub const OBJ_sm4_cfb128 = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 4);
};
pub const SN_sm4_cfb1 = "SM4-CFB1";
pub const LN_sm4_cfb1 = "sm4-cfb1";
pub const NID_sm4_cfb1 = 1136;
pub const OBJ_sm4_cfb1 = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 5);
};
pub const SN_sm4_cfb8 = "SM4-CFB8";
pub const LN_sm4_cfb8 = "sm4-cfb8";
pub const NID_sm4_cfb8 = 1138;
pub const OBJ_sm4_cfb8 = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 6);
};
pub const SN_sm4_ctr = "SM4-CTR";
pub const LN_sm4_ctr = "sm4-ctr";
pub const NID_sm4_ctr = 1139;
pub const OBJ_sm4_ctr = blk: {
    _ = OBJ_sm_scheme;
    _ = @as(c_long, 104);
    break :blk @as(c_long, 7);
};
pub const SN_hmac = "HMAC";
pub const LN_hmac = "hmac";
pub const NID_hmac = 855;
pub const SN_cmac = "CMAC";
pub const LN_cmac = "cmac";
pub const NID_cmac = 894;
pub const SN_rc4_hmac_md5 = "RC4-HMAC-MD5";
pub const LN_rc4_hmac_md5 = "rc4-hmac-md5";
pub const NID_rc4_hmac_md5 = 915;
pub const SN_aes_128_cbc_hmac_sha1 = "AES-128-CBC-HMAC-SHA1";
pub const LN_aes_128_cbc_hmac_sha1 = "aes-128-cbc-hmac-sha1";
pub const NID_aes_128_cbc_hmac_sha1 = 916;
pub const SN_aes_192_cbc_hmac_sha1 = "AES-192-CBC-HMAC-SHA1";
pub const LN_aes_192_cbc_hmac_sha1 = "aes-192-cbc-hmac-sha1";
pub const NID_aes_192_cbc_hmac_sha1 = 917;
pub const SN_aes_256_cbc_hmac_sha1 = "AES-256-CBC-HMAC-SHA1";
pub const LN_aes_256_cbc_hmac_sha1 = "aes-256-cbc-hmac-sha1";
pub const NID_aes_256_cbc_hmac_sha1 = 918;
pub const SN_aes_128_cbc_hmac_sha256 = "AES-128-CBC-HMAC-SHA256";
pub const LN_aes_128_cbc_hmac_sha256 = "aes-128-cbc-hmac-sha256";
pub const NID_aes_128_cbc_hmac_sha256 = 948;
pub const SN_aes_192_cbc_hmac_sha256 = "AES-192-CBC-HMAC-SHA256";
pub const LN_aes_192_cbc_hmac_sha256 = "aes-192-cbc-hmac-sha256";
pub const NID_aes_192_cbc_hmac_sha256 = 949;
pub const SN_aes_256_cbc_hmac_sha256 = "AES-256-CBC-HMAC-SHA256";
pub const LN_aes_256_cbc_hmac_sha256 = "aes-256-cbc-hmac-sha256";
pub const NID_aes_256_cbc_hmac_sha256 = 950;
pub const SN_chacha20_poly1305 = "ChaCha20-Poly1305";
pub const LN_chacha20_poly1305 = "chacha20-poly1305";
pub const NID_chacha20_poly1305 = 1018;
pub const SN_chacha20 = "ChaCha20";
pub const LN_chacha20 = "chacha20";
pub const NID_chacha20 = 1019;
pub const SN_dhpublicnumber = "dhpublicnumber";
pub const LN_dhpublicnumber = "X9.42 DH";
pub const NID_dhpublicnumber = 920;
pub const OBJ_dhpublicnumber = blk: {
    _ = OBJ_ISO_US;
    _ = @as(c_long, 10046);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 1);
};
pub const SN_brainpoolP160r1 = "brainpoolP160r1";
pub const NID_brainpoolP160r1 = 921;
pub const OBJ_brainpoolP160r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_brainpoolP160t1 = "brainpoolP160t1";
pub const NID_brainpoolP160t1 = 922;
pub const OBJ_brainpoolP160t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_brainpoolP192r1 = "brainpoolP192r1";
pub const NID_brainpoolP192r1 = 923;
pub const OBJ_brainpoolP192r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 3);
};
pub const SN_brainpoolP192t1 = "brainpoolP192t1";
pub const NID_brainpoolP192t1 = 924;
pub const OBJ_brainpoolP192t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 4);
};
pub const SN_brainpoolP224r1 = "brainpoolP224r1";
pub const NID_brainpoolP224r1 = 925;
pub const OBJ_brainpoolP224r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 5);
};
pub const SN_brainpoolP224t1 = "brainpoolP224t1";
pub const NID_brainpoolP224t1 = 926;
pub const OBJ_brainpoolP224t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 6);
};
pub const SN_brainpoolP256r1 = "brainpoolP256r1";
pub const NID_brainpoolP256r1 = 927;
pub const OBJ_brainpoolP256r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 7);
};
pub const SN_brainpoolP256t1 = "brainpoolP256t1";
pub const NID_brainpoolP256t1 = 928;
pub const OBJ_brainpoolP256t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 8);
};
pub const SN_brainpoolP320r1 = "brainpoolP320r1";
pub const NID_brainpoolP320r1 = 929;
pub const OBJ_brainpoolP320r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 9);
};
pub const SN_brainpoolP320t1 = "brainpoolP320t1";
pub const NID_brainpoolP320t1 = 930;
pub const OBJ_brainpoolP320t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 10);
};
pub const SN_brainpoolP384r1 = "brainpoolP384r1";
pub const NID_brainpoolP384r1 = 931;
pub const OBJ_brainpoolP384r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 11);
};
pub const SN_brainpoolP384t1 = "brainpoolP384t1";
pub const NID_brainpoolP384t1 = 932;
pub const OBJ_brainpoolP384t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 12);
};
pub const SN_brainpoolP512r1 = "brainpoolP512r1";
pub const NID_brainpoolP512r1 = 933;
pub const OBJ_brainpoolP512r1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 13);
};
pub const SN_brainpoolP512t1 = "brainpoolP512t1";
pub const NID_brainpoolP512t1 = 934;
pub const OBJ_brainpoolP512t1 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 36);
    _ = @as(c_long, 3);
    _ = @as(c_long, 3);
    _ = @as(c_long, 2);
    _ = @as(c_long, 8);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 14);
};
pub const OBJ_x9_63_scheme = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 133);
    _ = @as(c_long, 16);
    _ = @as(c_long, 840);
    _ = @as(c_long, 63);
    break :blk @as(c_long, 0);
};
pub const OBJ_secg_scheme = blk: {
    _ = OBJ_certicom_arc;
    break :blk @as(c_long, 1);
};
pub const SN_dhSinglePass_stdDH_sha1kdf_scheme = "dhSinglePass-stdDH-sha1kdf-scheme";
pub const NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;
pub const OBJ_dhSinglePass_stdDH_sha1kdf_scheme = blk: {
    _ = OBJ_x9_63_scheme;
    break :blk @as(c_long, 2);
};
pub const SN_dhSinglePass_stdDH_sha224kdf_scheme = "dhSinglePass-stdDH-sha224kdf-scheme";
pub const NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;
pub const OBJ_dhSinglePass_stdDH_sha224kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 11);
    break :blk @as(c_long, 0);
};
pub const SN_dhSinglePass_stdDH_sha256kdf_scheme = "dhSinglePass-stdDH-sha256kdf-scheme";
pub const NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;
pub const OBJ_dhSinglePass_stdDH_sha256kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 11);
    break :blk @as(c_long, 1);
};
pub const SN_dhSinglePass_stdDH_sha384kdf_scheme = "dhSinglePass-stdDH-sha384kdf-scheme";
pub const NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;
pub const OBJ_dhSinglePass_stdDH_sha384kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 11);
    break :blk @as(c_long, 2);
};
pub const SN_dhSinglePass_stdDH_sha512kdf_scheme = "dhSinglePass-stdDH-sha512kdf-scheme";
pub const NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;
pub const OBJ_dhSinglePass_stdDH_sha512kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 11);
    break :blk @as(c_long, 3);
};
pub const SN_dhSinglePass_cofactorDH_sha1kdf_scheme = "dhSinglePass-cofactorDH-sha1kdf-scheme";
pub const NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;
pub const OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = blk: {
    _ = OBJ_x9_63_scheme;
    break :blk @as(c_long, 3);
};
pub const SN_dhSinglePass_cofactorDH_sha224kdf_scheme = "dhSinglePass-cofactorDH-sha224kdf-scheme";
pub const NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;
pub const OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 0);
};
pub const SN_dhSinglePass_cofactorDH_sha256kdf_scheme = "dhSinglePass-cofactorDH-sha256kdf-scheme";
pub const NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;
pub const OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 1);
};
pub const SN_dhSinglePass_cofactorDH_sha384kdf_scheme = "dhSinglePass-cofactorDH-sha384kdf-scheme";
pub const NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;
pub const OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 2);
};
pub const SN_dhSinglePass_cofactorDH_sha512kdf_scheme = "dhSinglePass-cofactorDH-sha512kdf-scheme";
pub const NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;
pub const OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = blk: {
    _ = OBJ_secg_scheme;
    _ = @as(c_long, 14);
    break :blk @as(c_long, 3);
};
pub const SN_dh_std_kdf = "dh-std-kdf";
pub const NID_dh_std_kdf = 946;
pub const SN_dh_cofactor_kdf = "dh-cofactor-kdf";
pub const NID_dh_cofactor_kdf = 947;
pub const SN_ct_precert_scts = "ct_precert_scts";
pub const LN_ct_precert_scts = "CT Precertificate SCTs";
pub const NID_ct_precert_scts = 951;
pub const OBJ_ct_precert_scts = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 11129);
    _ = @as(c_long, 2);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 2);
};
pub const SN_ct_precert_poison = "ct_precert_poison";
pub const LN_ct_precert_poison = "CT Precertificate Poison";
pub const NID_ct_precert_poison = 952;
pub const OBJ_ct_precert_poison = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 11129);
    _ = @as(c_long, 2);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 3);
};
pub const SN_ct_precert_signer = "ct_precert_signer";
pub const LN_ct_precert_signer = "CT Precertificate Signer";
pub const NID_ct_precert_signer = 953;
pub const OBJ_ct_precert_signer = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 11129);
    _ = @as(c_long, 2);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 4);
};
pub const SN_ct_cert_scts = "ct_cert_scts";
pub const LN_ct_cert_scts = "CT Certificate SCTs";
pub const NID_ct_cert_scts = 954;
pub const OBJ_ct_cert_scts = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 11129);
    _ = @as(c_long, 2);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 5);
};
pub const SN_jurisdictionLocalityName = "jurisdictionL";
pub const LN_jurisdictionLocalityName = "jurisdictionLocalityName";
pub const NID_jurisdictionLocalityName = 955;
pub const OBJ_jurisdictionLocalityName = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 60);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_jurisdictionStateOrProvinceName = "jurisdictionST";
pub const LN_jurisdictionStateOrProvinceName = "jurisdictionStateOrProvinceName";
pub const NID_jurisdictionStateOrProvinceName = 956;
pub const OBJ_jurisdictionStateOrProvinceName = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 60);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_jurisdictionCountryName = "jurisdictionC";
pub const LN_jurisdictionCountryName = "jurisdictionCountryName";
pub const NID_jurisdictionCountryName = 957;
pub const OBJ_jurisdictionCountryName = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 311);
    _ = @as(c_long, 60);
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 3);
};
pub const SN_id_scrypt = "id-scrypt";
pub const LN_id_scrypt = "scrypt";
pub const NID_id_scrypt = 973;
pub const OBJ_id_scrypt = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 4);
    _ = @as(c_long, 1);
    _ = @as(c_long, 11591);
    _ = @as(c_long, 4);
    break :blk @as(c_long, 11);
};
pub const SN_tls1_prf = "TLS1-PRF";
pub const LN_tls1_prf = "tls1-prf";
pub const NID_tls1_prf = 1021;
pub const SN_hkdf = "HKDF";
pub const LN_hkdf = "hkdf";
pub const NID_hkdf = 1036;
pub const SN_id_pkinit = "id-pkinit";
pub const NID_id_pkinit = 1031;
pub const OBJ_id_pkinit = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 6);
    _ = @as(c_long, 1);
    _ = @as(c_long, 5);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 3);
};
pub const SN_pkInitClientAuth = "pkInitClientAuth";
pub const LN_pkInitClientAuth = "PKINIT Client Auth";
pub const NID_pkInitClientAuth = 1032;
pub const OBJ_pkInitClientAuth = blk: {
    _ = OBJ_id_pkinit;
    break :blk @as(c_long, 4);
};
pub const SN_pkInitKDC = "pkInitKDC";
pub const LN_pkInitKDC = "Signing KDC Response";
pub const NID_pkInitKDC = 1033;
pub const OBJ_pkInitKDC = blk: {
    _ = OBJ_id_pkinit;
    break :blk @as(c_long, 5);
};
pub const SN_X25519 = "X25519";
pub const NID_X25519 = 1034;
pub const OBJ_X25519 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 101);
    break :blk @as(c_long, 110);
};
pub const SN_X448 = "X448";
pub const NID_X448 = 1035;
pub const OBJ_X448 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 101);
    break :blk @as(c_long, 111);
};
pub const SN_ED25519 = "ED25519";
pub const NID_ED25519 = 1087;
pub const OBJ_ED25519 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 101);
    break :blk @as(c_long, 112);
};
pub const SN_ED448 = "ED448";
pub const NID_ED448 = 1088;
pub const OBJ_ED448 = blk: {
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 101);
    break :blk @as(c_long, 113);
};
pub const SN_kx_rsa = "KxRSA";
pub const LN_kx_rsa = "kx-rsa";
pub const NID_kx_rsa = 1037;
pub const SN_kx_ecdhe = "KxECDHE";
pub const LN_kx_ecdhe = "kx-ecdhe";
pub const NID_kx_ecdhe = 1038;
pub const SN_kx_dhe = "KxDHE";
pub const LN_kx_dhe = "kx-dhe";
pub const NID_kx_dhe = 1039;
pub const SN_kx_ecdhe_psk = "KxECDHE-PSK";
pub const LN_kx_ecdhe_psk = "kx-ecdhe-psk";
pub const NID_kx_ecdhe_psk = 1040;
pub const SN_kx_dhe_psk = "KxDHE-PSK";
pub const LN_kx_dhe_psk = "kx-dhe-psk";
pub const NID_kx_dhe_psk = 1041;
pub const SN_kx_rsa_psk = "KxRSA_PSK";
pub const LN_kx_rsa_psk = "kx-rsa-psk";
pub const NID_kx_rsa_psk = 1042;
pub const SN_kx_psk = "KxPSK";
pub const LN_kx_psk = "kx-psk";
pub const NID_kx_psk = 1043;
pub const SN_kx_srp = "KxSRP";
pub const LN_kx_srp = "kx-srp";
pub const NID_kx_srp = 1044;
pub const SN_kx_gost = "KxGOST";
pub const LN_kx_gost = "kx-gost";
pub const NID_kx_gost = 1045;
pub const SN_kx_any = "KxANY";
pub const LN_kx_any = "kx-any";
pub const NID_kx_any = 1063;
pub const SN_auth_rsa = "AuthRSA";
pub const LN_auth_rsa = "auth-rsa";
pub const NID_auth_rsa = 1046;
pub const SN_auth_ecdsa = "AuthECDSA";
pub const LN_auth_ecdsa = "auth-ecdsa";
pub const NID_auth_ecdsa = 1047;
pub const SN_auth_psk = "AuthPSK";
pub const LN_auth_psk = "auth-psk";
pub const NID_auth_psk = 1048;
pub const SN_auth_dss = "AuthDSS";
pub const LN_auth_dss = "auth-dss";
pub const NID_auth_dss = 1049;
pub const SN_auth_gost01 = "AuthGOST01";
pub const LN_auth_gost01 = "auth-gost01";
pub const NID_auth_gost01 = 1050;
pub const SN_auth_gost12 = "AuthGOST12";
pub const LN_auth_gost12 = "auth-gost12";
pub const NID_auth_gost12 = 1051;
pub const SN_auth_srp = "AuthSRP";
pub const LN_auth_srp = "auth-srp";
pub const NID_auth_srp = 1052;
pub const SN_auth_null = "AuthNULL";
pub const LN_auth_null = "auth-null";
pub const NID_auth_null = 1053;
pub const SN_auth_any = "AuthANY";
pub const LN_auth_any = "auth-any";
pub const NID_auth_any = 1064;
pub const SN_poly1305 = "Poly1305";
pub const LN_poly1305 = "poly1305";
pub const NID_poly1305 = 1061;
pub const SN_siphash = "SipHash";
pub const LN_siphash = "siphash";
pub const NID_siphash = 1062;
pub const SN_ffdhe2048 = "ffdhe2048";
pub const NID_ffdhe2048 = 1126;
pub const SN_ffdhe3072 = "ffdhe3072";
pub const NID_ffdhe3072 = 1127;
pub const SN_ffdhe4096 = "ffdhe4096";
pub const NID_ffdhe4096 = 1128;
pub const SN_ffdhe6144 = "ffdhe6144";
pub const NID_ffdhe6144 = 1129;
pub const SN_ffdhe8192 = "ffdhe8192";
pub const NID_ffdhe8192 = 1130;
pub const SN_ISO_UA = "ISO-UA";
pub const NID_ISO_UA = 1150;
pub const OBJ_ISO_UA = blk: {
    _ = OBJ_member_body;
    break :blk @as(c_long, 804);
};
pub const SN_ua_pki = "ua-pki";
pub const NID_ua_pki = 1151;
pub const OBJ_ua_pki = blk: {
    _ = OBJ_ISO_UA;
    _ = @as(c_long, 2);
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_dstu28147 = "dstu28147";
pub const LN_dstu28147 = "DSTU Gost 28147-2009";
pub const NID_dstu28147 = 1152;
pub const OBJ_dstu28147 = blk: {
    _ = OBJ_ua_pki;
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_dstu28147_ofb = "dstu28147-ofb";
pub const LN_dstu28147_ofb = "DSTU Gost 28147-2009 OFB mode";
pub const NID_dstu28147_ofb = 1153;
pub const OBJ_dstu28147_ofb = blk: {
    _ = OBJ_dstu28147;
    break :blk @as(c_long, 2);
};
pub const SN_dstu28147_cfb = "dstu28147-cfb";
pub const LN_dstu28147_cfb = "DSTU Gost 28147-2009 CFB mode";
pub const NID_dstu28147_cfb = 1154;
pub const OBJ_dstu28147_cfb = blk: {
    _ = OBJ_dstu28147;
    break :blk @as(c_long, 3);
};
pub const SN_dstu28147_wrap = "dstu28147-wrap";
pub const LN_dstu28147_wrap = "DSTU Gost 28147-2009 key wrap";
pub const NID_dstu28147_wrap = 1155;
pub const OBJ_dstu28147_wrap = blk: {
    _ = OBJ_dstu28147;
    break :blk @as(c_long, 5);
};
pub const SN_hmacWithDstu34311 = "hmacWithDstu34311";
pub const LN_hmacWithDstu34311 = "HMAC DSTU Gost 34311-95";
pub const NID_hmacWithDstu34311 = 1156;
pub const OBJ_hmacWithDstu34311 = blk: {
    _ = OBJ_ua_pki;
    _ = @as(c_long, 1);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 2);
};
pub const SN_dstu34311 = "dstu34311";
pub const LN_dstu34311 = "DSTU Gost 34311-95";
pub const NID_dstu34311 = 1157;
pub const OBJ_dstu34311 = blk: {
    _ = OBJ_ua_pki;
    _ = @as(c_long, 1);
    _ = @as(c_long, 2);
    break :blk @as(c_long, 1);
};
pub const SN_dstu4145le = "dstu4145le";
pub const LN_dstu4145le = "DSTU 4145-2002 little endian";
pub const NID_dstu4145le = 1158;
pub const OBJ_dstu4145le = blk: {
    _ = OBJ_ua_pki;
    _ = @as(c_long, 1);
    _ = @as(c_long, 3);
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_dstu4145be = "dstu4145be";
pub const LN_dstu4145be = "DSTU 4145-2002 big endian";
pub const NID_dstu4145be = 1159;
pub const OBJ_dstu4145be = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 1);
    break :blk @as(c_long, 1);
};
pub const SN_uacurve0 = "uacurve0";
pub const LN_uacurve0 = "DSTU curve 0";
pub const NID_uacurve0 = 1160;
pub const OBJ_uacurve0 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 0);
};
pub const SN_uacurve1 = "uacurve1";
pub const LN_uacurve1 = "DSTU curve 1";
pub const NID_uacurve1 = 1161;
pub const OBJ_uacurve1 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 1);
};
pub const SN_uacurve2 = "uacurve2";
pub const LN_uacurve2 = "DSTU curve 2";
pub const NID_uacurve2 = 1162;
pub const OBJ_uacurve2 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 2);
};
pub const SN_uacurve3 = "uacurve3";
pub const LN_uacurve3 = "DSTU curve 3";
pub const NID_uacurve3 = 1163;
pub const OBJ_uacurve3 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 3);
};
pub const SN_uacurve4 = "uacurve4";
pub const LN_uacurve4 = "DSTU curve 4";
pub const NID_uacurve4 = 1164;
pub const OBJ_uacurve4 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 4);
};
pub const SN_uacurve5 = "uacurve5";
pub const LN_uacurve5 = "DSTU curve 5";
pub const NID_uacurve5 = 1165;
pub const OBJ_uacurve5 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 5);
};
pub const SN_uacurve6 = "uacurve6";
pub const LN_uacurve6 = "DSTU curve 6";
pub const NID_uacurve6 = 1166;
pub const OBJ_uacurve6 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 6);
};
pub const SN_uacurve7 = "uacurve7";
pub const LN_uacurve7 = "DSTU curve 7";
pub const NID_uacurve7 = 1167;
pub const OBJ_uacurve7 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 7);
};
pub const SN_uacurve8 = "uacurve8";
pub const LN_uacurve8 = "DSTU curve 8";
pub const NID_uacurve8 = 1168;
pub const OBJ_uacurve8 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 8);
};
pub const SN_uacurve9 = "uacurve9";
pub const LN_uacurve9 = "DSTU curve 9";
pub const NID_uacurve9 = 1169;
pub const OBJ_uacurve9 = blk: {
    _ = OBJ_dstu4145le;
    _ = @as(c_long, 2);
    break :blk @as(c_long, 9);
};
pub const ASN1_F_A2D_ASN1_OBJECT = 100;
pub const ASN1_F_A2I_ASN1_INTEGER = 102;
pub const ASN1_F_A2I_ASN1_STRING = 103;
pub const ASN1_F_APPEND_EXP = 176;
pub const ASN1_F_ASN1_BIO_INIT = 113;
pub const ASN1_F_ASN1_BIT_STRING_SET_BIT = 183;
pub const ASN1_F_ASN1_CB = 177;
pub const ASN1_F_ASN1_CHECK_TLEN = 104;
pub const ASN1_F_ASN1_COLLECT = 106;
pub const ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108;
pub const ASN1_F_ASN1_D2I_FP = 109;
pub const ASN1_F_ASN1_D2I_READ_BIO = 107;
pub const ASN1_F_ASN1_DIGEST = 184;
pub const ASN1_F_ASN1_DO_ADB = 110;
pub const ASN1_F_ASN1_DO_LOCK = 233;
pub const ASN1_F_ASN1_DUP = 111;
pub const ASN1_F_ASN1_ENC_SAVE = 115;
pub const ASN1_F_ASN1_EX_C2I = 204;
pub const ASN1_F_ASN1_FIND_END = 190;
pub const ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 216;
pub const ASN1_F_ASN1_GENERATE_V3 = 178;
pub const ASN1_F_ASN1_GET_INT64 = 224;
pub const ASN1_F_ASN1_GET_OBJECT = 114;
pub const ASN1_F_ASN1_GET_UINT64 = 225;
pub const ASN1_F_ASN1_I2D_BIO = 116;
pub const ASN1_F_ASN1_I2D_FP = 117;
pub const ASN1_F_ASN1_ITEM_D2I_FP = 206;
pub const ASN1_F_ASN1_ITEM_DUP = 191;
pub const ASN1_F_ASN1_ITEM_EMBED_D2I = 120;
pub const ASN1_F_ASN1_ITEM_EMBED_NEW = 121;
pub const ASN1_F_ASN1_ITEM_FLAGS_I2D = 118;
pub const ASN1_F_ASN1_ITEM_I2D_BIO = 192;
pub const ASN1_F_ASN1_ITEM_I2D_FP = 193;
pub const ASN1_F_ASN1_ITEM_PACK = 198;
pub const ASN1_F_ASN1_ITEM_SIGN = 195;
pub const ASN1_F_ASN1_ITEM_SIGN_CTX = 220;
pub const ASN1_F_ASN1_ITEM_UNPACK = 199;
pub const ASN1_F_ASN1_ITEM_VERIFY = 197;
pub const ASN1_F_ASN1_MBSTRING_NCOPY = 122;
pub const ASN1_F_ASN1_OBJECT_NEW = 123;
pub const ASN1_F_ASN1_OUTPUT_DATA = 214;
pub const ASN1_F_ASN1_PCTX_NEW = 205;
pub const ASN1_F_ASN1_PRIMITIVE_NEW = 119;
pub const ASN1_F_ASN1_SCTX_NEW = 221;
pub const ASN1_F_ASN1_SIGN = 128;
pub const ASN1_F_ASN1_STR2TYPE = 179;
pub const ASN1_F_ASN1_STRING_GET_INT64 = 227;
pub const ASN1_F_ASN1_STRING_GET_UINT64 = 230;
pub const ASN1_F_ASN1_STRING_SET = 186;
pub const ASN1_F_ASN1_STRING_TABLE_ADD = 129;
pub const ASN1_F_ASN1_STRING_TO_BN = 228;
pub const ASN1_F_ASN1_STRING_TYPE_NEW = 130;
pub const ASN1_F_ASN1_TEMPLATE_EX_D2I = 132;
pub const ASN1_F_ASN1_TEMPLATE_NEW = 133;
pub const ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131;
pub const ASN1_F_ASN1_TIME_ADJ = 217;
pub const ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134;
pub const ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135;
pub const ASN1_F_ASN1_UTCTIME_ADJ = 218;
pub const ASN1_F_ASN1_VERIFY = 137;
pub const ASN1_F_B64_READ_ASN1 = 209;
pub const ASN1_F_B64_WRITE_ASN1 = 210;
pub const ASN1_F_BIO_NEW_NDEF = 208;
pub const ASN1_F_BITSTR_CB = 180;
pub const ASN1_F_BN_TO_ASN1_STRING = 229;
pub const ASN1_F_C2I_ASN1_BIT_STRING = 189;
pub const ASN1_F_C2I_ASN1_INTEGER = 194;
pub const ASN1_F_C2I_ASN1_OBJECT = 196;
pub const ASN1_F_C2I_IBUF = 226;
pub const ASN1_F_C2I_UINT64_INT = 101;
pub const ASN1_F_COLLECT_DATA = 140;
pub const ASN1_F_D2I_ASN1_OBJECT = 147;
pub const ASN1_F_D2I_ASN1_UINTEGER = 150;
pub const ASN1_F_D2I_AUTOPRIVATEKEY = 207;
pub const ASN1_F_D2I_PRIVATEKEY = 154;
pub const ASN1_F_D2I_PUBLICKEY = 155;
pub const ASN1_F_DO_BUF = 142;
pub const ASN1_F_DO_CREATE = 124;
pub const ASN1_F_DO_DUMP = 125;
pub const ASN1_F_DO_TCREATE = 222;
pub const ASN1_F_I2A_ASN1_OBJECT = 126;
pub const ASN1_F_I2D_ASN1_BIO_STREAM = 211;
pub const ASN1_F_I2D_ASN1_OBJECT = 143;
pub const ASN1_F_I2D_DSA_PUBKEY = 161;
pub const ASN1_F_I2D_EC_PUBKEY = 181;
pub const ASN1_F_I2D_PRIVATEKEY = 163;
pub const ASN1_F_I2D_PUBLICKEY = 164;
pub const ASN1_F_I2D_RSA_PUBKEY = 165;
pub const ASN1_F_LONG_C2I = 166;
pub const ASN1_F_NDEF_PREFIX = 127;
pub const ASN1_F_NDEF_SUFFIX = 136;
pub const ASN1_F_OID_MODULE_INIT = 174;
pub const ASN1_F_PARSE_TAGGING = 182;
pub const ASN1_F_PKCS5_PBE2_SET_IV = 167;
pub const ASN1_F_PKCS5_PBE2_SET_SCRYPT = 231;
pub const ASN1_F_PKCS5_PBE_SET = 202;
pub const ASN1_F_PKCS5_PBE_SET0_ALGOR = 215;
pub const ASN1_F_PKCS5_PBKDF2_SET = 219;
pub const ASN1_F_PKCS5_SCRYPT_SET = 232;
pub const ASN1_F_SMIME_READ_ASN1 = 212;
pub const ASN1_F_SMIME_TEXT = 213;
pub const ASN1_F_STABLE_GET = 138;
pub const ASN1_F_STBL_MODULE_INIT = 223;
pub const ASN1_F_UINT32_C2I = 105;
pub const ASN1_F_UINT32_NEW = 139;
pub const ASN1_F_UINT64_C2I = 112;
pub const ASN1_F_UINT64_NEW = 141;
pub const ASN1_F_X509_CRL_ADD0_REVOKED = 169;
pub const ASN1_F_X509_INFO_NEW = 170;
pub const ASN1_F_X509_NAME_ENCODE = 203;
pub const ASN1_F_X509_NAME_EX_D2I = 158;
pub const ASN1_F_X509_NAME_EX_NEW = 171;
pub const ASN1_F_X509_PKEY_NEW = 173;
pub const ASN1_R_ADDING_OBJECT = 171;
pub const ASN1_R_ASN1_PARSE_ERROR = 203;
pub const ASN1_R_ASN1_SIG_PARSE_ERROR = 204;
pub const ASN1_R_AUX_ERROR = 100;
pub const ASN1_R_BAD_OBJECT_HEADER = 102;
pub const ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;
pub const ASN1_R_BN_LIB = 105;
pub const ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;
pub const ASN1_R_BUFFER_TOO_SMALL = 107;
pub const ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;
pub const ASN1_R_CONTEXT_NOT_INITIALISED = 217;
pub const ASN1_R_DATA_IS_WRONG = 109;
pub const ASN1_R_DECODE_ERROR = 110;
pub const ASN1_R_DEPTH_EXCEEDED = 174;
pub const ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;
pub const ASN1_R_ENCODE_ERROR = 112;
pub const ASN1_R_ERROR_GETTING_TIME = 173;
pub const ASN1_R_ERROR_LOADING_SECTION = 172;
pub const ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;
pub const ASN1_R_EXPECTING_AN_INTEGER = 115;
pub const ASN1_R_EXPECTING_AN_OBJECT = 116;
pub const ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;
pub const ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;
pub const ASN1_R_FIELD_MISSING = 121;
pub const ASN1_R_FIRST_NUM_TOO_LARGE = 122;
pub const ASN1_R_HEADER_TOO_LONG = 123;
pub const ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;
pub const ASN1_R_ILLEGAL_BOOLEAN = 176;
pub const ASN1_R_ILLEGAL_CHARACTERS = 124;
pub const ASN1_R_ILLEGAL_FORMAT = 177;
pub const ASN1_R_ILLEGAL_HEX = 178;
pub const ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;
pub const ASN1_R_ILLEGAL_INTEGER = 180;
pub const ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;
pub const ASN1_R_ILLEGAL_NESTED_TAGGING = 181;
pub const ASN1_R_ILLEGAL_NULL = 125;
pub const ASN1_R_ILLEGAL_NULL_VALUE = 182;
pub const ASN1_R_ILLEGAL_OBJECT = 183;
pub const ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;
pub const ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;
pub const ASN1_R_ILLEGAL_PADDING = 221;
pub const ASN1_R_ILLEGAL_TAGGED_ANY = 127;
pub const ASN1_R_ILLEGAL_TIME_VALUE = 184;
pub const ASN1_R_ILLEGAL_ZERO_CONTENT = 222;
pub const ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;
pub const ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;
pub const ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;
pub const ASN1_R_INVALID_BMPSTRING_LENGTH = 129;
pub const ASN1_R_INVALID_DIGIT = 130;
pub const ASN1_R_INVALID_MIME_TYPE = 205;
pub const ASN1_R_INVALID_MODIFIER = 186;
pub const ASN1_R_INVALID_NUMBER = 187;
pub const ASN1_R_INVALID_OBJECT_ENCODING = 216;
pub const ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;
pub const ASN1_R_INVALID_SEPARATOR = 131;
pub const ASN1_R_INVALID_STRING_TABLE_VALUE = 218;
pub const ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;
pub const ASN1_R_INVALID_UTF8STRING = 134;
pub const ASN1_R_INVALID_VALUE = 219;
pub const ASN1_R_LIST_ERROR = 188;
pub const ASN1_R_MIME_NO_CONTENT_TYPE = 206;
pub const ASN1_R_MIME_PARSE_ERROR = 207;
pub const ASN1_R_MIME_SIG_PARSE_ERROR = 208;
pub const ASN1_R_MISSING_EOC = 137;
pub const ASN1_R_MISSING_SECOND_NUMBER = 138;
pub const ASN1_R_MISSING_VALUE = 189;
pub const ASN1_R_MSTRING_NOT_UNIVERSAL = 139;
pub const ASN1_R_MSTRING_WRONG_TAG = 140;
pub const ASN1_R_NESTED_ASN1_STRING = 197;
pub const ASN1_R_NESTED_TOO_DEEP = 201;
pub const ASN1_R_NON_HEX_CHARACTERS = 141;
pub const ASN1_R_NOT_ASCII_FORMAT = 190;
pub const ASN1_R_NOT_ENOUGH_DATA = 142;
pub const ASN1_R_NO_CONTENT_TYPE = 209;
pub const ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;
pub const ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;
pub const ASN1_R_NO_MULTIPART_BOUNDARY = 211;
pub const ASN1_R_NO_SIG_CONTENT_TYPE = 212;
pub const ASN1_R_NULL_IS_WRONG_LENGTH = 144;
pub const ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;
pub const ASN1_R_ODD_NUMBER_OF_CHARS = 145;
pub const ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;
pub const ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;
pub const ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;
pub const ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;
pub const ASN1_R_SHORT_LINE = 150;
pub const ASN1_R_SIG_INVALID_MIME_TYPE = 213;
pub const ASN1_R_STREAMING_NOT_SUPPORTED = 202;
pub const ASN1_R_STRING_TOO_LONG = 151;
pub const ASN1_R_STRING_TOO_SHORT = 152;
pub const ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;
pub const ASN1_R_TIME_NOT_ASCII_FORMAT = 193;
pub const ASN1_R_TOO_LARGE = 223;
pub const ASN1_R_TOO_LONG = 155;
pub const ASN1_R_TOO_SMALL = 224;
pub const ASN1_R_TYPE_NOT_CONSTRUCTED = 156;
pub const ASN1_R_TYPE_NOT_PRIMITIVE = 195;
pub const ASN1_R_UNEXPECTED_EOC = 159;
pub const ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;
pub const ASN1_R_UNKNOWN_FORMAT = 160;
pub const ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;
pub const ASN1_R_UNKNOWN_OBJECT_TYPE = 162;
pub const ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;
pub const ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;
pub const ASN1_R_UNKNOWN_TAG = 194;
pub const ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;
pub const ASN1_R_UNSUPPORTED_CIPHER = 228;
pub const ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;
pub const ASN1_R_UNSUPPORTED_TYPE = 196;
pub const ASN1_R_WRONG_INTEGER_TYPE = 225;
pub const ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;
pub const ASN1_R_WRONG_TAG = 168;
pub const BN_F_BNRAND = 127;
pub const BN_F_BNRAND_RANGE = 138;
pub const BN_F_BN_BLINDING_CONVERT_EX = 100;
pub const BN_F_BN_BLINDING_CREATE_PARAM = 128;
pub const BN_F_BN_BLINDING_INVERT_EX = 101;
pub const BN_F_BN_BLINDING_NEW = 102;
pub const BN_F_BN_BLINDING_UPDATE = 103;
pub const BN_F_BN_BN2DEC = 104;
pub const BN_F_BN_BN2HEX = 105;
pub const BN_F_BN_COMPUTE_WNAF = 142;
pub const BN_F_BN_CTX_GET = 116;
pub const BN_F_BN_CTX_NEW = 106;
pub const BN_F_BN_CTX_START = 129;
pub const BN_F_BN_DIV = 107;
pub const BN_F_BN_DIV_RECP = 130;
pub const BN_F_BN_EXP = 123;
pub const BN_F_BN_EXPAND_INTERNAL = 120;
pub const BN_F_BN_GENCB_NEW = 143;
pub const BN_F_BN_GENERATE_DSA_NONCE = 140;
pub const BN_F_BN_GENERATE_PRIME_EX = 141;
pub const BN_F_BN_GF2M_MOD = 131;
pub const BN_F_BN_GF2M_MOD_EXP = 132;
pub const BN_F_BN_GF2M_MOD_MUL = 133;
pub const BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134;
pub const BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135;
pub const BN_F_BN_GF2M_MOD_SQR = 136;
pub const BN_F_BN_GF2M_MOD_SQRT = 137;
pub const BN_F_BN_LSHIFT = 145;
pub const BN_F_BN_MOD_EXP2_MONT = 118;
pub const BN_F_BN_MOD_EXP_MONT = 109;
pub const BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124;
pub const BN_F_BN_MOD_EXP_MONT_WORD = 117;
pub const BN_F_BN_MOD_EXP_RECP = 125;
pub const BN_F_BN_MOD_EXP_SIMPLE = 126;
pub const BN_F_BN_MOD_INVERSE = 110;
pub const BN_F_BN_MOD_INVERSE_NO_BRANCH = 139;
pub const BN_F_BN_MOD_LSHIFT_QUICK = 119;
pub const BN_F_BN_MOD_SQRT = 121;
pub const BN_F_BN_MONT_CTX_NEW = 149;
pub const BN_F_BN_MPI2BN = 112;
pub const BN_F_BN_NEW = 113;
pub const BN_F_BN_POOL_GET = 147;
pub const BN_F_BN_RAND = 114;
pub const BN_F_BN_RAND_RANGE = 122;
pub const BN_F_BN_RECP_CTX_NEW = 150;
pub const BN_F_BN_RSHIFT = 146;
pub const BN_F_BN_SET_WORDS = 144;
pub const BN_F_BN_STACK_PUSH = 148;
pub const BN_F_BN_USUB = 115;
pub const BN_R_ARG2_LT_ARG3 = 100;
pub const BN_R_BAD_RECIPROCAL = 101;
pub const BN_R_BIGNUM_TOO_LONG = 114;
pub const BN_R_BITS_TOO_SMALL = 118;
pub const BN_R_CALLED_WITH_EVEN_MODULUS = 102;
pub const BN_R_DIV_BY_ZERO = 103;
pub const BN_R_ENCODING_ERROR = 104;
pub const BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;
pub const BN_R_INPUT_NOT_REDUCED = 110;
pub const BN_R_INVALID_LENGTH = 106;
pub const BN_R_INVALID_RANGE = 115;
pub const BN_R_INVALID_SHIFT = 119;
pub const BN_R_NOT_A_SQUARE = 111;
pub const BN_R_NOT_INITIALIZED = 107;
pub const BN_R_NO_INVERSE = 108;
pub const BN_R_NO_SOLUTION = 116;
pub const BN_R_PRIVATE_KEY_TOO_LARGE = 117;
pub const BN_R_P_IS_NOT_PRIME = 112;
pub const BN_R_TOO_MANY_ITERATIONS = 113;
pub const BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;
pub const BN_ULONG = c_ulong;
pub const BN_BYTES = 8;
pub const BN_BITS2 = BN_BYTES * 8;
pub const BN_BITS = BN_BITS2 * 2;
pub const BN_TBIT = (@import("std").meta.cast(BN_ULONG, 1 << (BN_BITS2 - 1)));
pub const BN_FLG_MALLOCED = 0x01;
pub const BN_FLG_STATIC_DATA = 0x02;
pub const BN_FLG_CONSTTIME = 0x04;
pub const BN_FLG_SECURE = 0x08;
pub const BN_FLG_EXP_CONSTTIME = BN_FLG_CONSTTIME;
pub const BN_FLG_FREE = 0x8000;
pub const BN_RAND_TOP_ANY = -1;
pub const BN_RAND_TOP_ONE = 0;
pub const BN_RAND_TOP_TWO = 1;
pub const BN_RAND_BOTTOM_ANY = 0;
pub const BN_RAND_BOTTOM_ODD = 1;
pub const BN_prime_checks = 0;
pub inline fn BN_prime_checks_for_size(b: anytype) @TypeOf(if (b >= 3747) 3 else if (b >= 1345) 4 else if (b >= 476) 5 else if (b >= 400) 6 else if (b >= 347) 7 else if (b >= 308) 8 else if (b >= 55) 27 else 34) {
    return if (b >= 3747) 3 else if (b >= 1345) 4 else if (b >= 476) 5 else if (b >= 400) 6 else if (b >= 347) 7 else if (b >= 308) 8 else if (b >= 55) 27 else 34;
}
pub inline fn BN_num_bytes(a: anytype) @TypeOf((BN_num_bits(a) + 7) / 8) {
    return (BN_num_bits(a) + 7) / 8;
}
pub inline fn BN_one(a: anytype) @TypeOf(BN_set_word(a, 1)) {
    return BN_set_word(a, 1);
}
pub inline fn BN_zero(a: anytype) @TypeOf(BN_set_word(a, 0)) {
    return BN_set_word(a, 0);
}
pub inline fn BN_mod(rem: anytype, m: anytype, d: anytype, ctx: anytype) @TypeOf(BN_div(NULL, rem, m, d, ctx)) {
    return BN_div(NULL, rem, m, d, ctx);
}
pub const BN_BLINDING_NO_UPDATE = 0x00000001;
pub const BN_BLINDING_NO_RECREATE = 0x00000002;
pub inline fn BN_GF2m_sub(r: anytype, a: anytype, b: anytype) @TypeOf(BN_GF2m_add(r, a, b)) {
    return BN_GF2m_add(r, a, b);
}
pub inline fn BN_GF2m_cmp(a: anytype, b: anytype) @TypeOf(BN_ucmp(a, b)) {
    return BN_ucmp(a, b);
}
pub const get_rfc2409_prime_768 = BN_get_rfc2409_prime_768;
pub const get_rfc2409_prime_1024 = BN_get_rfc2409_prime_1024;
pub const get_rfc3526_prime_1536 = BN_get_rfc3526_prime_1536;
pub const get_rfc3526_prime_2048 = BN_get_rfc3526_prime_2048;
pub const get_rfc3526_prime_3072 = BN_get_rfc3526_prime_3072;
pub const get_rfc3526_prime_4096 = BN_get_rfc3526_prime_4096;
pub const get_rfc3526_prime_6144 = BN_get_rfc3526_prime_6144;
pub const get_rfc3526_prime_8192 = BN_get_rfc3526_prime_8192;
pub const V_ASN1_UNIVERSAL = 0x00;
pub const V_ASN1_APPLICATION = 0x40;
pub const V_ASN1_CONTEXT_SPECIFIC = 0x80;
pub const V_ASN1_PRIVATE = 0xc0;
pub const V_ASN1_CONSTRUCTED = 0x20;
pub const V_ASN1_PRIMITIVE_TAG = 0x1f;
pub const V_ASN1_PRIMATIVE_TAG = V_ASN1_PRIMITIVE_TAG;
pub const V_ASN1_APP_CHOOSE = -2;
pub const V_ASN1_OTHER = -3;
pub const V_ASN1_ANY = -4;
pub const V_ASN1_UNDEF = -1;
pub const V_ASN1_EOC = 0;
pub const V_ASN1_BOOLEAN = 1;
pub const V_ASN1_INTEGER = 2;
pub const V_ASN1_BIT_STRING = 3;
pub const V_ASN1_OCTET_STRING = 4;
pub const V_ASN1_NULL = 5;
pub const V_ASN1_OBJECT = 6;
pub const V_ASN1_OBJECT_DESCRIPTOR = 7;
pub const V_ASN1_EXTERNAL = 8;
pub const V_ASN1_REAL = 9;
pub const V_ASN1_ENUMERATED = 10;
pub const V_ASN1_UTF8STRING = 12;
pub const V_ASN1_SEQUENCE = 16;
pub const V_ASN1_SET = 17;
pub const V_ASN1_NUMERICSTRING = 18;
pub const V_ASN1_PRINTABLESTRING = 19;
pub const V_ASN1_T61STRING = 20;
pub const V_ASN1_TELETEXSTRING = 20;
pub const V_ASN1_VIDEOTEXSTRING = 21;
pub const V_ASN1_IA5STRING = 22;
pub const V_ASN1_UTCTIME = 23;
pub const V_ASN1_GENERALIZEDTIME = 24;
pub const V_ASN1_GRAPHICSTRING = 25;
pub const V_ASN1_ISO64STRING = 26;
pub const V_ASN1_VISIBLESTRING = 26;
pub const V_ASN1_GENERALSTRING = 27;
pub const V_ASN1_UNIVERSALSTRING = 28;
pub const V_ASN1_BMPSTRING = 30;
pub const V_ASN1_NEG = 0x100;
pub const V_ASN1_NEG_INTEGER = 2 | V_ASN1_NEG;
pub const V_ASN1_NEG_ENUMERATED = 10 | V_ASN1_NEG;
pub const B_ASN1_NUMERICSTRING = 0x0001;
pub const B_ASN1_PRINTABLESTRING = 0x0002;
pub const B_ASN1_T61STRING = 0x0004;
pub const B_ASN1_TELETEXSTRING = 0x0004;
pub const B_ASN1_VIDEOTEXSTRING = 0x0008;
pub const B_ASN1_IA5STRING = 0x0010;
pub const B_ASN1_GRAPHICSTRING = 0x0020;
pub const B_ASN1_ISO64STRING = 0x0040;
pub const B_ASN1_VISIBLESTRING = 0x0040;
pub const B_ASN1_GENERALSTRING = 0x0080;
pub const B_ASN1_UNIVERSALSTRING = 0x0100;
pub const B_ASN1_OCTET_STRING = 0x0200;
pub const B_ASN1_BIT_STRING = 0x0400;
pub const B_ASN1_BMPSTRING = 0x0800;
pub const B_ASN1_UNKNOWN = 0x1000;
pub const B_ASN1_UTF8STRING = 0x2000;
pub const B_ASN1_UTCTIME = 0x4000;
pub const B_ASN1_GENERALIZEDTIME = 0x8000;
pub const B_ASN1_SEQUENCE = 0x10000;
pub const MBSTRING_FLAG = 0x1000;
pub const MBSTRING_UTF8 = MBSTRING_FLAG;
pub const MBSTRING_ASC = MBSTRING_FLAG | 1;
pub const MBSTRING_BMP = MBSTRING_FLAG | 2;
pub const MBSTRING_UNIV = MBSTRING_FLAG | 4;
pub const SMIME_OLDMIME = 0x400;
pub const SMIME_CRLFEOL = 0x800;
pub const SMIME_STREAM = 0x1000;
pub const ASN1_STRING_FLAG_BITS_LEFT = 0x08;
pub const ASN1_STRING_FLAG_NDEF = 0x010;
pub const ASN1_STRING_FLAG_CONT = 0x020;
pub const ASN1_STRING_FLAG_MSTRING = 0x040;
pub const ASN1_STRING_FLAG_EMBED = 0x080;
pub const ASN1_STRING_FLAG_X509_TIME = 0x100;
pub const ASN1_LONG_UNDEF = @as(c_long, 0x7fffffff);
pub const STABLE_FLAGS_MALLOC = 0x01;
pub const STABLE_FLAGS_CLEAR = STABLE_FLAGS_MALLOC;
pub const STABLE_NO_MASK = 0x02;
pub const DIRSTRING_TYPE = ((B_ASN1_PRINTABLESTRING | B_ASN1_T61STRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING;
pub const PKCS9STRING_TYPE = DIRSTRING_TYPE | B_ASN1_IA5STRING;
pub const ub_name = 32768;
pub const ub_common_name = 64;
pub const ub_locality_name = 128;
pub const ub_state_name = 128;
pub const ub_organization_name = 64;
pub const ub_organization_unit_name = 64;
pub const ub_title = 64;
pub const ub_email_address = 128;
pub inline fn DECLARE_ASN1_FUNCTIONS(type_1: anytype) @TypeOf(DECLARE_ASN1_FUNCTIONS_name(type_1, type_1)) {
    return DECLARE_ASN1_FUNCTIONS_name(type_1, type_1);
}
pub inline fn DECLARE_ASN1_ALLOC_FUNCTIONS(type_1: anytype) @TypeOf(DECLARE_ASN1_ALLOC_FUNCTIONS_name(type_1, type_1)) {
    return DECLARE_ASN1_ALLOC_FUNCTIONS_name(type_1, type_1);
}
pub inline fn DECLARE_ASN1_PRINT_FUNCTION(stname: anytype) @TypeOf(DECLARE_ASN1_PRINT_FUNCTION_fname(stname, stname)) {
    return DECLARE_ASN1_PRINT_FUNCTION_fname(stname, stname);
}
pub inline fn CHECKED_D2I_OF(type_1: anytype, d2i: anytype) @TypeOf((@import("std").meta.cast([*c]d2i_of_void, if (1) d2i else (@import("std").meta.cast(D2I_OF(type_1), 0))))) {
    return (@import("std").meta.cast([*c]d2i_of_void, if (1) d2i else (@import("std").meta.cast(D2I_OF(type_1), 0))));
}
pub inline fn CHECKED_I2D_OF(type_1: anytype, i2d: anytype) @TypeOf((@import("std").meta.cast([*c]i2d_of_void, if (1) i2d else (@import("std").meta.cast(I2D_OF(type_1), 0))))) {
    return (@import("std").meta.cast([*c]i2d_of_void, if (1) i2d else (@import("std").meta.cast(I2D_OF(type_1), 0))));
}
pub inline fn CHECKED_PTR_OF(type_1: anytype, p: anytype) @TypeOf((@import("std").meta.cast(?*c_void, if (1) p else (@import("std").meta.cast([*c]type_1, 0))))) {
    return (@import("std").meta.cast(?*c_void, if (1) p else (@import("std").meta.cast([*c]type_1, 0))));
}
pub inline fn ASN1_ITEM_ptr(iptr: anytype) @TypeOf(iptr) {
    return iptr;
}
pub const ASN1_STRFLGS_ESC_2253 = 1;
pub const ASN1_STRFLGS_ESC_CTRL = 2;
pub const ASN1_STRFLGS_ESC_MSB = 4;
pub const ASN1_STRFLGS_ESC_QUOTE = 8;
pub const CHARTYPE_PRINTABLESTRING = 0x10;
pub const CHARTYPE_FIRST_ESC_2253 = 0x20;
pub const CHARTYPE_LAST_ESC_2253 = 0x40;
pub const ASN1_STRFLGS_UTF8_CONVERT = 0x10;
pub const ASN1_STRFLGS_IGNORE_TYPE = 0x20;
pub const ASN1_STRFLGS_SHOW_TYPE = 0x40;
pub const ASN1_STRFLGS_DUMP_ALL = 0x80;
pub const ASN1_STRFLGS_DUMP_UNKNOWN = 0x100;
pub const ASN1_STRFLGS_DUMP_DER = 0x200;
pub const ASN1_STRFLGS_ESC_2254 = 0x400;
pub const ASN1_STRFLGS_RFC2253 = ((((ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL) | ASN1_STRFLGS_ESC_MSB) | ASN1_STRFLGS_UTF8_CONVERT) | ASN1_STRFLGS_DUMP_UNKNOWN) | ASN1_STRFLGS_DUMP_DER;
pub const B_ASN1_TIME = B_ASN1_UTCTIME | B_ASN1_GENERALIZEDTIME;
pub const B_ASN1_PRINTABLE = ((((((((B_ASN1_NUMERICSTRING | B_ASN1_PRINTABLESTRING) | B_ASN1_T61STRING) | B_ASN1_IA5STRING) | B_ASN1_BIT_STRING) | B_ASN1_UNIVERSALSTRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING) | B_ASN1_SEQUENCE) | B_ASN1_UNKNOWN;
pub const B_ASN1_DIRECTORYSTRING = (((B_ASN1_PRINTABLESTRING | B_ASN1_TELETEXSTRING) | B_ASN1_BMPSTRING) | B_ASN1_UNIVERSALSTRING) | B_ASN1_UTF8STRING;
pub const B_ASN1_DISPLAYTEXT = ((B_ASN1_IA5STRING | B_ASN1_VISIBLESTRING) | B_ASN1_BMPSTRING) | B_ASN1_UTF8STRING;
pub inline fn ASN1_dup_of(type_1: anytype, i2d: anytype, d2i: anytype, x: anytype) @TypeOf((@import("std").meta.cast([*c]type_1, ASN1_dup(CHECKED_I2D_OF(type_1, i2d), CHECKED_D2I_OF(type_1, d2i), CHECKED_PTR_OF(type_1, x))))) {
    return (@import("std").meta.cast([*c]type_1, ASN1_dup(CHECKED_I2D_OF(type_1, i2d), CHECKED_D2I_OF(type_1, d2i), CHECKED_PTR_OF(type_1, x))));
}
pub inline fn M_ASN1_new_of(type_1: anytype) @TypeOf((@import("std").meta.cast([*c]type_1, ASN1_item_new(ASN1_ITEM_rptr(type_1))))) {
    return (@import("std").meta.cast([*c]type_1, ASN1_item_new(ASN1_ITEM_rptr(type_1))));
}
pub inline fn M_ASN1_free_of(x: anytype, type_1: anytype) @TypeOf(ASN1_item_free(CHECKED_PTR_OF(type_1, x), ASN1_ITEM_rptr(type_1))) {
    return ASN1_item_free(CHECKED_PTR_OF(type_1, x), ASN1_ITEM_rptr(type_1));
}
pub inline fn ASN1_d2i_fp_of(type_1: anytype, xnew: anytype, d2i: anytype, in: anytype, x: anytype) @TypeOf((@import("std").meta.cast([*c]type_1, ASN1_d2i_fp(CHECKED_NEW_OF(type_1, xnew), CHECKED_D2I_OF(type_1, d2i), in, CHECKED_PPTR_OF(type_1, x))))) {
    return (@import("std").meta.cast([*c]type_1, ASN1_d2i_fp(CHECKED_NEW_OF(type_1, xnew), CHECKED_D2I_OF(type_1, d2i), in, CHECKED_PPTR_OF(type_1, x))));
}
pub inline fn ASN1_i2d_fp_of(type_1: anytype, i2d: anytype, out: anytype, x: anytype) @TypeOf(ASN1_i2d_fp(CHECKED_I2D_OF(type_1, i2d), out, CHECKED_PTR_OF(type_1, x))) {
    return ASN1_i2d_fp(CHECKED_I2D_OF(type_1, i2d), out, CHECKED_PTR_OF(type_1, x));
}
pub inline fn ASN1_d2i_bio_of(type_1: anytype, xnew: anytype, d2i: anytype, in: anytype, x: anytype) @TypeOf((@import("std").meta.cast([*c]type_1, ASN1_d2i_bio(CHECKED_NEW_OF(type_1, xnew), CHECKED_D2I_OF(type_1, d2i), in, CHECKED_PPTR_OF(type_1, x))))) {
    return (@import("std").meta.cast([*c]type_1, ASN1_d2i_bio(CHECKED_NEW_OF(type_1, xnew), CHECKED_D2I_OF(type_1, d2i), in, CHECKED_PPTR_OF(type_1, x))));
}
pub inline fn ASN1_i2d_bio_of(type_1: anytype, i2d: anytype, out: anytype, x: anytype) @TypeOf(ASN1_i2d_bio(CHECKED_I2D_OF(type_1, i2d), out, CHECKED_PTR_OF(type_1, x))) {
    return ASN1_i2d_bio(CHECKED_I2D_OF(type_1, i2d), out, CHECKED_PTR_OF(type_1, x));
}
pub const ASN1_PCTX_FLAGS_SHOW_ABSENT = 0x001;
pub const ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 0x002;
pub const ASN1_PCTX_FLAGS_SHOW_SSOF = 0x004;
pub const ASN1_PCTX_FLAGS_SHOW_TYPE = 0x008;
pub const ASN1_PCTX_FLAGS_NO_ANY_TYPE = 0x010;
pub const ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 0x020;
pub const ASN1_PCTX_FLAGS_NO_FIELD_NAME = 0x040;
pub const ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 0x080;
pub const ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 0x100;
pub const OBJ_F_OBJ_ADD_OBJECT = 105;
pub const OBJ_F_OBJ_ADD_SIGID = 107;
pub const OBJ_F_OBJ_CREATE = 100;
pub const OBJ_F_OBJ_DUP = 101;
pub const OBJ_F_OBJ_NAME_NEW_INDEX = 106;
pub const OBJ_F_OBJ_NID2LN = 102;
pub const OBJ_F_OBJ_NID2OBJ = 103;
pub const OBJ_F_OBJ_NID2SN = 104;
pub const OBJ_F_OBJ_TXT2OBJ = 108;
pub const OBJ_R_OID_EXISTS = 102;
pub const OBJ_R_UNKNOWN_NID = 101;
pub const OBJ_NAME_TYPE_UNDEF = 0x00;
pub const OBJ_NAME_TYPE_MD_METH = 0x01;
pub const OBJ_NAME_TYPE_CIPHER_METH = 0x02;
pub const OBJ_NAME_TYPE_PKEY_METH = 0x03;
pub const OBJ_NAME_TYPE_COMP_METH = 0x04;
pub const OBJ_NAME_TYPE_NUM = 0x05;
pub const OBJ_NAME_ALIAS = 0x8000;
pub const OBJ_BSEARCH_VALUE_ON_NOMATCH = 0x01;
pub const OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 0x02;
pub inline fn OBJ_create_and_add_object(a: anytype, b: anytype, c: anytype) @TypeOf(OBJ_create(a, b, c)) {
    return OBJ_create(a, b, c);
}
pub const EVP_PK_RSA = 0x0001;
pub const EVP_PK_DSA = 0x0002;
pub const EVP_PK_DH = 0x0004;
pub const EVP_PK_EC = 0x0008;
pub const EVP_PKT_SIGN = 0x0010;
pub const EVP_PKT_ENC = 0x0020;
pub const EVP_PKT_EXCH = 0x0040;
pub const EVP_PKS_RSA = 0x0100;
pub const EVP_PKS_DSA = 0x0200;
pub const EVP_PKS_EC = 0x0400;
pub const EVP_PKEY_NONE = NID_undef;
pub const EVP_PKEY_RSA = NID_rsaEncryption;
pub const EVP_PKEY_RSA2 = NID_rsa;
pub const EVP_PKEY_RSA_PSS = NID_rsassaPss;
pub const EVP_PKEY_DSA = NID_dsa;
pub const EVP_PKEY_DSA1 = NID_dsa_2;
pub const EVP_PKEY_DSA2 = NID_dsaWithSHA;
pub const EVP_PKEY_DSA3 = NID_dsaWithSHA1;
pub const EVP_PKEY_DSA4 = NID_dsaWithSHA1_2;
pub const EVP_PKEY_DH = NID_dhKeyAgreement;
pub const EVP_PKEY_DHX = NID_dhpublicnumber;
pub const EVP_PKEY_EC = NID_X9_62_id_ecPublicKey;
pub const EVP_PKEY_SM2 = NID_sm2;
pub const EVP_PKEY_HMAC = NID_hmac;
pub const EVP_PKEY_CMAC = NID_cmac;
pub const EVP_PKEY_SCRYPT = NID_id_scrypt;
pub const EVP_PKEY_TLS1_PRF = NID_tls1_prf;
pub const EVP_PKEY_HKDF = NID_hkdf;
pub const EVP_PKEY_POLY1305 = NID_poly1305;
pub const EVP_PKEY_SIPHASH = NID_siphash;
pub const EVP_PKEY_X25519 = NID_X25519;
pub const EVP_PKEY_ED25519 = NID_ED25519;
pub const EVP_PKEY_X448 = NID_X448;
pub const EVP_PKEY_ED448 = NID_ED448;
pub const EVP_PKEY_MO_SIGN = 0x0001;
pub const EVP_PKEY_MO_VERIFY = 0x0002;
pub const EVP_PKEY_MO_ENCRYPT = 0x0004;
pub const EVP_PKEY_MO_DECRYPT = 0x0008;
pub const EVP_MD_FLAG_ONESHOT = 0x0001;
pub const EVP_MD_FLAG_XOF = 0x0002;
pub const EVP_MD_FLAG_DIGALGID_MASK = 0x0018;
pub const EVP_MD_FLAG_DIGALGID_NULL = 0x0000;
pub const EVP_MD_FLAG_DIGALGID_ABSENT = 0x0008;
pub const EVP_MD_FLAG_DIGALGID_CUSTOM = 0x0018;
pub const EVP_MD_FLAG_FIPS = 0x0400;
pub const EVP_MD_CTRL_DIGALGID = 0x1;
pub const EVP_MD_CTRL_MICALG = 0x2;
pub const EVP_MD_CTRL_XOF_LEN = 0x3;
pub const EVP_MD_CTRL_ALG_CTRL = 0x1000;
pub const EVP_MD_CTX_FLAG_ONESHOT = 0x0001;
pub const EVP_MD_CTX_FLAG_CLEANED = 0x0002;
pub const EVP_MD_CTX_FLAG_REUSE = 0x0004;
pub const EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 0x0008;
pub const EVP_MD_CTX_FLAG_PAD_MASK = 0xF0;
pub const EVP_MD_CTX_FLAG_PAD_PKCS1 = 0x00;
pub const EVP_MD_CTX_FLAG_PAD_X931 = 0x10;
pub const EVP_MD_CTX_FLAG_PAD_PSS = 0x20;
pub const EVP_MD_CTX_FLAG_NO_INIT = 0x0100;
pub const EVP_MD_CTX_FLAG_FINALISE = 0x0200;
pub const EVP_CIPH_STREAM_CIPHER = 0x0;
pub const EVP_CIPH_ECB_MODE = 0x1;
pub const EVP_CIPH_CBC_MODE = 0x2;
pub const EVP_CIPH_CFB_MODE = 0x3;
pub const EVP_CIPH_OFB_MODE = 0x4;
pub const EVP_CIPH_CTR_MODE = 0x5;
pub const EVP_CIPH_GCM_MODE = 0x6;
pub const EVP_CIPH_CCM_MODE = 0x7;
pub const EVP_CIPH_XTS_MODE = 0x10001;
pub const EVP_CIPH_WRAP_MODE = 0x10002;
pub const EVP_CIPH_OCB_MODE = 0x10003;
pub const EVP_CIPH_MODE = 0xF0007;
pub const EVP_CIPH_VARIABLE_LENGTH = 0x8;
pub const EVP_CIPH_CUSTOM_IV = 0x10;
pub const EVP_CIPH_ALWAYS_CALL_INIT = 0x20;
pub const EVP_CIPH_CTRL_INIT = 0x40;
pub const EVP_CIPH_CUSTOM_KEY_LENGTH = 0x80;
pub const EVP_CIPH_NO_PADDING = 0x100;
pub const EVP_CIPH_RAND_KEY = 0x200;
pub const EVP_CIPH_CUSTOM_COPY = 0x400;
pub const EVP_CIPH_CUSTOM_IV_LENGTH = 0x800;
pub const EVP_CIPH_FLAG_DEFAULT_ASN1 = 0x1000;
pub const EVP_CIPH_FLAG_LENGTH_BITS = 0x2000;
pub const EVP_CIPH_FLAG_FIPS = 0x4000;
pub const EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0x8000;
pub const EVP_CIPH_FLAG_CUSTOM_CIPHER = 0x100000;
pub const EVP_CIPH_FLAG_AEAD_CIPHER = 0x200000;
pub const EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 0x400000;
pub const EVP_CIPH_FLAG_PIPELINE = 0x800000;
pub const EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 0x1;
pub const EVP_CTRL_INIT = 0x0;
pub const EVP_CTRL_SET_KEY_LENGTH = 0x1;
pub const EVP_CTRL_GET_RC2_KEY_BITS = 0x2;
pub const EVP_CTRL_SET_RC2_KEY_BITS = 0x3;
pub const EVP_CTRL_GET_RC5_ROUNDS = 0x4;
pub const EVP_CTRL_SET_RC5_ROUNDS = 0x5;
pub const EVP_CTRL_RAND_KEY = 0x6;
pub const EVP_CTRL_PBE_PRF_NID = 0x7;
pub const EVP_CTRL_COPY = 0x8;
pub const EVP_CTRL_AEAD_SET_IVLEN = 0x9;
pub const EVP_CTRL_AEAD_GET_TAG = 0x10;
pub const EVP_CTRL_AEAD_SET_TAG = 0x11;
pub const EVP_CTRL_AEAD_SET_IV_FIXED = 0x12;
pub const EVP_CTRL_GCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN;
pub const EVP_CTRL_GCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG;
pub const EVP_CTRL_GCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG;
pub const EVP_CTRL_GCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED;
pub const EVP_CTRL_GCM_IV_GEN = 0x13;
pub const EVP_CTRL_CCM_SET_IVLEN = EVP_CTRL_AEAD_SET_IVLEN;
pub const EVP_CTRL_CCM_GET_TAG = EVP_CTRL_AEAD_GET_TAG;
pub const EVP_CTRL_CCM_SET_TAG = EVP_CTRL_AEAD_SET_TAG;
pub const EVP_CTRL_CCM_SET_IV_FIXED = EVP_CTRL_AEAD_SET_IV_FIXED;
pub const EVP_CTRL_CCM_SET_L = 0x14;
pub const EVP_CTRL_CCM_SET_MSGLEN = 0x15;
pub const EVP_CTRL_AEAD_TLS1_AAD = 0x16;
pub const EVP_CTRL_AEAD_SET_MAC_KEY = 0x17;
pub const EVP_CTRL_GCM_SET_IV_INV = 0x18;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 0x19;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 0x1a;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 0x1b;
pub const EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 0x1c;
pub const EVP_CTRL_SSL3_MASTER_SECRET = 0x1d;
pub const EVP_CTRL_SET_SBOX = 0x1e;
pub const EVP_CTRL_SBOX_USED = 0x1f;
pub const EVP_CTRL_KEY_MESH = 0x20;
pub const EVP_CTRL_BLOCK_PADDING_MODE = 0x21;
pub const EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 0x22;
pub const EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 0x23;
pub const EVP_CTRL_SET_PIPELINE_INPUT_LENS = 0x24;
pub const EVP_CTRL_GET_IVLEN = 0x25;
pub const EVP_PADDING_PKCS7 = 1;
pub const EVP_PADDING_ISO7816_4 = 2;
pub const EVP_PADDING_ANSI923 = 3;
pub const EVP_PADDING_ISO10126 = 4;
pub const EVP_PADDING_ZERO = 5;
pub const EVP_AEAD_TLS1_AAD_LEN = 13;
pub const EVP_GCM_TLS_FIXED_IV_LEN = 4;
pub const EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;
pub const EVP_GCM_TLS_TAG_LEN = 16;
pub const EVP_CCM_TLS_FIXED_IV_LEN = 4;
pub const EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;
pub const EVP_CCM_TLS_IV_LEN = 12;
pub const EVP_CCM_TLS_TAG_LEN = 16;
pub const EVP_CCM8_TLS_TAG_LEN = 8;
pub const EVP_CHACHAPOLY_TLS_TAG_LEN = 16;
pub inline fn EVP_PKEY_assign_RSA(pkey: anytype, rsa: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_RSA, (@import("std").meta.cast([*c]u8, rsa)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_RSA, (@import("std").meta.cast([*c]u8, rsa)));
}
pub inline fn EVP_PKEY_assign_DSA(pkey: anytype, dsa: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_DSA, (@import("std").meta.cast([*c]u8, dsa)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_DSA, (@import("std").meta.cast([*c]u8, dsa)));
}
pub inline fn EVP_PKEY_assign_DH(pkey: anytype, dh: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_DH, (@import("std").meta.cast([*c]u8, dh)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_DH, (@import("std").meta.cast([*c]u8, dh)));
}
pub inline fn EVP_PKEY_assign_EC_KEY(pkey: anytype, eckey: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_EC, (@import("std").meta.cast([*c]u8, eckey)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_EC, (@import("std").meta.cast([*c]u8, eckey)));
}
pub inline fn EVP_PKEY_assign_SIPHASH(pkey: anytype, shkey: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_SIPHASH, (@import("std").meta.cast([*c]u8, shkey)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_SIPHASH, (@import("std").meta.cast([*c]u8, shkey)));
}
pub inline fn EVP_PKEY_assign_POLY1305(pkey: anytype, polykey: anytype) @TypeOf(EVP_PKEY_assign(pkey, EVP_PKEY_POLY1305, (@import("std").meta.cast([*c]u8, polykey)))) {
    return EVP_PKEY_assign(pkey, EVP_PKEY_POLY1305, (@import("std").meta.cast([*c]u8, polykey)));
}
pub inline fn EVP_get_digestbynid(a: anytype) @TypeOf(EVP_get_digestbyname(OBJ_nid2sn(a))) {
    return EVP_get_digestbyname(OBJ_nid2sn(a));
}
pub inline fn EVP_get_digestbyobj(a: anytype) @TypeOf(EVP_get_digestbynid(OBJ_obj2nid(a))) {
    return EVP_get_digestbynid(OBJ_obj2nid(a));
}
pub inline fn EVP_get_cipherbynid(a: anytype) @TypeOf(EVP_get_cipherbyname(OBJ_nid2sn(a))) {
    return EVP_get_cipherbyname(OBJ_nid2sn(a));
}
pub inline fn EVP_get_cipherbyobj(a: anytype) @TypeOf(EVP_get_cipherbynid(OBJ_obj2nid(a))) {
    return EVP_get_cipherbynid(OBJ_obj2nid(a));
}
pub inline fn EVP_MD_nid(e: anytype) @TypeOf(EVP_MD_type(e)) {
    return EVP_MD_type(e);
}
pub inline fn EVP_MD_name(e: anytype) @TypeOf(OBJ_nid2sn(EVP_MD_nid(e))) {
    return OBJ_nid2sn(EVP_MD_nid(e));
}
pub inline fn EVP_MD_CTX_size(e: anytype) @TypeOf(EVP_MD_size(EVP_MD_CTX_md(e))) {
    return EVP_MD_size(EVP_MD_CTX_md(e));
}
pub inline fn EVP_MD_CTX_block_size(e: anytype) @TypeOf(EVP_MD_block_size(EVP_MD_CTX_md(e))) {
    return EVP_MD_block_size(EVP_MD_CTX_md(e));
}
pub inline fn EVP_MD_CTX_type(e: anytype) @TypeOf(EVP_MD_type(EVP_MD_CTX_md(e))) {
    return EVP_MD_type(EVP_MD_CTX_md(e));
}
pub inline fn EVP_CIPHER_name(e: anytype) @TypeOf(OBJ_nid2sn(EVP_CIPHER_nid(e))) {
    return OBJ_nid2sn(EVP_CIPHER_nid(e));
}
pub inline fn EVP_CIPHER_mode(e: anytype) @TypeOf(EVP_CIPHER_flags(e) & EVP_CIPH_MODE) {
    return EVP_CIPHER_flags(e) & EVP_CIPH_MODE;
}
pub inline fn EVP_CIPHER_CTX_type(c: anytype) @TypeOf(EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c))) {
    return EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c));
}
pub inline fn EVP_CIPHER_CTX_flags(c: anytype) @TypeOf(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(c))) {
    return EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(c));
}
pub inline fn EVP_CIPHER_CTX_mode(c: anytype) @TypeOf(EVP_CIPHER_mode(EVP_CIPHER_CTX_cipher(c))) {
    return EVP_CIPHER_mode(EVP_CIPHER_CTX_cipher(c));
}
pub inline fn EVP_ENCODE_LENGTH(l: anytype) @TypeOf(((((l + 2) / 3) * 4) + (((l / 48) + 1) * 2)) + 80) {
    return ((((l + 2) / 3) * 4) + (((l / 48) + 1) * 2)) + 80;
}
pub inline fn EVP_DECODE_LENGTH(l: anytype) @TypeOf((((l + 3) / 4) * 3) + 80) {
    return (((l + 3) / 4) * 3) + 80;
}
pub inline fn EVP_SignInit_ex(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestInit_ex(a, b, c)) {
    return EVP_DigestInit_ex(a, b, c);
}
pub inline fn EVP_SignInit(a: anytype, b: anytype) @TypeOf(EVP_DigestInit(a, b)) {
    return EVP_DigestInit(a, b);
}
pub inline fn EVP_SignUpdate(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestUpdate(a, b, c)) {
    return EVP_DigestUpdate(a, b, c);
}
pub inline fn EVP_VerifyInit_ex(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestInit_ex(a, b, c)) {
    return EVP_DigestInit_ex(a, b, c);
}
pub inline fn EVP_VerifyInit(a: anytype, b: anytype) @TypeOf(EVP_DigestInit(a, b)) {
    return EVP_DigestInit(a, b);
}
pub inline fn EVP_VerifyUpdate(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestUpdate(a, b, c)) {
    return EVP_DigestUpdate(a, b, c);
}
pub inline fn EVP_OpenUpdate(a: anytype, b: anytype, c: anytype, d: anytype, e: anytype) @TypeOf(EVP_DecryptUpdate(a, b, c, d, e)) {
    return EVP_DecryptUpdate(a, b, c, d, e);
}
pub inline fn EVP_SealUpdate(a: anytype, b: anytype, c: anytype, d: anytype, e: anytype) @TypeOf(EVP_EncryptUpdate(a, b, c, d, e)) {
    return EVP_EncryptUpdate(a, b, c, d, e);
}
pub inline fn EVP_DigestSignUpdate(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestUpdate(a, b, c)) {
    return EVP_DigestUpdate(a, b, c);
}
pub inline fn EVP_DigestVerifyUpdate(a: anytype, b: anytype, c: anytype) @TypeOf(EVP_DigestUpdate(a, b, c)) {
    return EVP_DigestUpdate(a, b, c);
}
pub inline fn BIO_set_md(b: anytype, md: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_MD, 0, (@import("std").meta.cast([*c]u8, md)))) {
    return BIO_ctrl(b, BIO_C_SET_MD, 0, (@import("std").meta.cast([*c]u8, md)));
}
pub inline fn BIO_get_md(b: anytype, mdp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_MD, 0, (@import("std").meta.cast([*c]u8, mdp)))) {
    return BIO_ctrl(b, BIO_C_GET_MD, 0, (@import("std").meta.cast([*c]u8, mdp)));
}
pub inline fn BIO_get_md_ctx(b: anytype, mdcp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_MD_CTX, 0, (@import("std").meta.cast([*c]u8, mdcp)))) {
    return BIO_ctrl(b, BIO_C_GET_MD_CTX, 0, (@import("std").meta.cast([*c]u8, mdcp)));
}
pub inline fn BIO_set_md_ctx(b: anytype, mdcp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_SET_MD_CTX, 0, (@import("std").meta.cast([*c]u8, mdcp)))) {
    return BIO_ctrl(b, BIO_C_SET_MD_CTX, 0, (@import("std").meta.cast([*c]u8, mdcp)));
}
pub inline fn BIO_get_cipher_status(b: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_CIPHER_STATUS, 0, NULL)) {
    return BIO_ctrl(b, BIO_C_GET_CIPHER_STATUS, 0, NULL);
}
pub inline fn BIO_get_cipher_ctx(b: anytype, c_pp: anytype) @TypeOf(BIO_ctrl(b, BIO_C_GET_CIPHER_CTX, 0, (@import("std").meta.cast([*c]u8, c_pp)))) {
    return BIO_ctrl(b, BIO_C_GET_CIPHER_CTX, 0, (@import("std").meta.cast([*c]u8, c_pp)));
}
pub inline fn EVP_add_cipher_alias(n: anytype, alias: anytype) @TypeOf(OBJ_NAME_add(alias, OBJ_NAME_TYPE_CIPHER_METH | OBJ_NAME_ALIAS, n)) {
    return OBJ_NAME_add(alias, OBJ_NAME_TYPE_CIPHER_METH | OBJ_NAME_ALIAS, n);
}
pub inline fn EVP_add_digest_alias(n: anytype, alias: anytype) @TypeOf(OBJ_NAME_add(alias, OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, n)) {
    return OBJ_NAME_add(alias, OBJ_NAME_TYPE_MD_METH | OBJ_NAME_ALIAS, n);
}
pub inline fn EVP_MD_CTX_init(ctx: anytype) @TypeOf(EVP_MD_CTX_reset(ctx)) {
    return EVP_MD_CTX_reset(ctx);
}
pub inline fn EVP_MD_CTX_destroy(ctx: anytype) @TypeOf(EVP_MD_CTX_free(ctx)) {
    return EVP_MD_CTX_free(ctx);
}
pub inline fn EVP_CIPHER_CTX_init(c: anytype) @TypeOf(EVP_CIPHER_CTX_reset(c)) {
    return EVP_CIPHER_CTX_reset(c);
}
pub inline fn EVP_CIPHER_CTX_cleanup(c: anytype) @TypeOf(EVP_CIPHER_CTX_reset(c)) {
    return EVP_CIPHER_CTX_reset(c);
}
pub const EVP_des_cfb = EVP_des_cfb64;
pub const EVP_des_ede_cfb = EVP_des_ede_cfb64;
pub const EVP_des_ede3_cfb = EVP_des_ede3_cfb64;
pub const EVP_rc2_cfb = EVP_rc2_cfb64;
pub const EVP_bf_cfb = EVP_bf_cfb64;
pub const EVP_cast5_cfb = EVP_cast5_cfb64;
pub const EVP_aes_128_cfb = EVP_aes_128_cfb128;
pub const EVP_aes_192_cfb = EVP_aes_192_cfb128;
pub const EVP_aes_256_cfb = EVP_aes_256_cfb128;
pub const EVP_aria_128_cfb = EVP_aria_128_cfb128;
pub const EVP_aria_192_cfb = EVP_aria_192_cfb128;
pub const EVP_aria_256_cfb = EVP_aria_256_cfb128;
pub const EVP_camellia_128_cfb = EVP_camellia_128_cfb128;
pub const EVP_camellia_192_cfb = EVP_camellia_192_cfb128;
pub const EVP_camellia_256_cfb = EVP_camellia_256_cfb128;
pub const EVP_seed_cfb = EVP_seed_cfb128;
pub const EVP_sm4_cfb = EVP_sm4_cfb128;
pub const EVP_PBE_TYPE_OUTER = 0x0;
pub const EVP_PBE_TYPE_PRF = 0x1;
pub const EVP_PBE_TYPE_KDF = 0x2;
pub const ASN1_PKEY_ALIAS = 0x1;
pub const ASN1_PKEY_DYNAMIC = 0x2;
pub const ASN1_PKEY_SIGPARAM_NULL = 0x4;
pub const ASN1_PKEY_CTRL_PKCS7_SIGN = 0x1;
pub const ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 0x2;
pub const ASN1_PKEY_CTRL_DEFAULT_MD_NID = 0x3;
pub const ASN1_PKEY_CTRL_CMS_SIGN = 0x5;
pub const ASN1_PKEY_CTRL_CMS_ENVELOPE = 0x7;
pub const ASN1_PKEY_CTRL_CMS_RI_TYPE = 0x8;
pub const ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 0x9;
pub const ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 0xa;
pub const EVP_PKEY_OP_UNDEFINED = 0;
pub const EVP_PKEY_OP_PARAMGEN = 1 << 1;
pub const EVP_PKEY_OP_KEYGEN = 1 << 2;
pub const EVP_PKEY_OP_SIGN = 1 << 3;
pub const EVP_PKEY_OP_VERIFY = 1 << 4;
pub const EVP_PKEY_OP_VERIFYRECOVER = 1 << 5;
pub const EVP_PKEY_OP_SIGNCTX = 1 << 6;
pub const EVP_PKEY_OP_VERIFYCTX = 1 << 7;
pub const EVP_PKEY_OP_ENCRYPT = 1 << 8;
pub const EVP_PKEY_OP_DECRYPT = 1 << 9;
pub const EVP_PKEY_OP_DERIVE = 1 << 10;
pub const EVP_PKEY_OP_TYPE_SIG = (((EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY) | EVP_PKEY_OP_VERIFYRECOVER) | EVP_PKEY_OP_SIGNCTX) | EVP_PKEY_OP_VERIFYCTX;
pub const EVP_PKEY_OP_TYPE_CRYPT = EVP_PKEY_OP_ENCRYPT | EVP_PKEY_OP_DECRYPT;
pub const EVP_PKEY_OP_TYPE_NOGEN = (EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT) | EVP_PKEY_OP_DERIVE;
pub const EVP_PKEY_OP_TYPE_GEN = EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN;
pub inline fn EVP_PKEY_CTX_set_signature_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, EVP_PKEY_CTRL_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, EVP_PKEY_CTRL_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_get_signature_md(ctx: anytype, pmd: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, EVP_PKEY_CTRL_GET_MD, 0, (@import("std").meta.cast(?*c_void, pmd)))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_TYPE_SIG, EVP_PKEY_CTRL_GET_MD, 0, (@import("std").meta.cast(?*c_void, pmd)));
}
pub inline fn EVP_PKEY_CTX_set_mac_key(ctx: anytype, key: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_SET_MAC_KEY, len, (@import("std").meta.cast(?*c_void, key)))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_SET_MAC_KEY, len, (@import("std").meta.cast(?*c_void, key)));
}
pub const EVP_PKEY_CTRL_MD = 1;
pub const EVP_PKEY_CTRL_PEER_KEY = 2;
pub const EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;
pub const EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;
pub const EVP_PKEY_CTRL_PKCS7_SIGN = 5;
pub const EVP_PKEY_CTRL_SET_MAC_KEY = 6;
pub const EVP_PKEY_CTRL_DIGESTINIT = 7;
pub const EVP_PKEY_CTRL_SET_IV = 8;
pub const EVP_PKEY_CTRL_CMS_ENCRYPT = 9;
pub const EVP_PKEY_CTRL_CMS_DECRYPT = 10;
pub const EVP_PKEY_CTRL_CMS_SIGN = 11;
pub const EVP_PKEY_CTRL_CIPHER = 12;
pub const EVP_PKEY_CTRL_GET_MD = 13;
pub const EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;
pub const EVP_PKEY_ALG_CTRL = 0x1000;
pub const EVP_PKEY_FLAG_AUTOARGLEN = 2;
pub const EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;
pub const EC_F_BN_TO_FELEM = 224;
pub const EC_F_D2I_ECPARAMETERS = 144;
pub const EC_F_D2I_ECPKPARAMETERS = 145;
pub const EC_F_D2I_ECPRIVATEKEY = 146;
pub const EC_F_DO_EC_KEY_PRINT = 221;
pub const EC_F_ECDH_CMS_DECRYPT = 238;
pub const EC_F_ECDH_CMS_SET_SHARED_INFO = 239;
pub const EC_F_ECDH_COMPUTE_KEY = 246;
pub const EC_F_ECDH_SIMPLE_COMPUTE_KEY = 257;
pub const EC_F_ECDSA_DO_SIGN_EX = 251;
pub const EC_F_ECDSA_DO_VERIFY = 252;
pub const EC_F_ECDSA_SIGN_EX = 254;
pub const EC_F_ECDSA_SIGN_SETUP = 248;
pub const EC_F_ECDSA_SIG_NEW = 265;
pub const EC_F_ECDSA_VERIFY = 253;
pub const EC_F_ECDSA_SIMPLE_SIGN_SETUP = 310;
pub const EC_F_ECDSA_SIMPLE_SIGN_SIG = 311;
pub const EC_F_ECDSA_SIMPLE_VERIFY_SIG = 312;
pub const EC_F_ECDSA_S390X_NISTP_SIGN_SIG = 313;
pub const EC_F_ECDSA_S390X_NISTP_VERIFY_SIG = 314;
pub const EC_F_ECD_ITEM_VERIFY = 270;
pub const EC_F_ECKEY_PARAM2TYPE = 223;
pub const EC_F_ECKEY_PARAM_DECODE = 212;
pub const EC_F_ECKEY_PRIV_DECODE = 213;
pub const EC_F_ECKEY_PRIV_ENCODE = 214;
pub const EC_F_ECKEY_PUB_DECODE = 215;
pub const EC_F_ECKEY_PUB_ENCODE = 216;
pub const EC_F_ECKEY_TYPE2PARAM = 220;
pub const EC_F_ECPARAMETERS_PRINT = 147;
pub const EC_F_ECPARAMETERS_PRINT_FP = 148;
pub const EC_F_ECPKPARAMETERS_PRINT = 149;
pub const EC_F_ECPKPARAMETERS_PRINT_FP = 150;
pub const EC_F_ECP_NISTZ256_GET_AFFINE = 240;
pub const EC_F_ECP_NISTZ256_INV_MOD_ORD = 275;
pub const EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 243;
pub const EC_F_ECP_NISTZ256_POINTS_MUL = 241;
pub const EC_F_ECP_NISTZ256_PRE_COMP_NEW = 244;
pub const EC_F_ECP_NISTZ256_WINDOWED_MUL = 242;
pub const EC_F_ECX_KEY_OP = 266;
pub const EC_F_ECX_PRIV_ENCODE = 267;
pub const EC_F_ECX_PUB_ENCODE = 268;
pub const EC_F_EC_ASN1_GROUP2CURVE = 153;
pub const EC_F_EC_ASN1_GROUP2FIELDID = 154;
pub const EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 208;
pub const EC_F_EC_GF2M_SIMPLE_FIELD_INV = 296;
pub const EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 159;
pub const EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 195;
pub const EC_F_EC_GF2M_SIMPLE_LADDER_POST = 285;
pub const EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 288;
pub const EC_F_EC_GF2M_SIMPLE_OCT2POINT = 160;
pub const EC_F_EC_GF2M_SIMPLE_POINT2OCT = 161;
pub const EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 289;
pub const EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 162;
pub const EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 163;
pub const EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 164;
pub const EC_F_EC_GFP_MONT_FIELD_DECODE = 133;
pub const EC_F_EC_GFP_MONT_FIELD_ENCODE = 134;
pub const EC_F_EC_GFP_MONT_FIELD_INV = 297;
pub const EC_F_EC_GFP_MONT_FIELD_MUL = 131;
pub const EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 209;
pub const EC_F_EC_GFP_MONT_FIELD_SQR = 132;
pub const EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 189;
pub const EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 225;
pub const EC_F_EC_GFP_NISTP224_POINTS_MUL = 228;
pub const EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 226;
pub const EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 230;
pub const EC_F_EC_GFP_NISTP256_POINTS_MUL = 231;
pub const EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 232;
pub const EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 233;
pub const EC_F_EC_GFP_NISTP521_POINTS_MUL = 234;
pub const EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 235;
pub const EC_F_EC_GFP_NIST_FIELD_MUL = 200;
pub const EC_F_EC_GFP_NIST_FIELD_SQR = 201;
pub const EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 202;
pub const EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 287;
pub const EC_F_EC_GFP_SIMPLE_FIELD_INV = 298;
pub const EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 165;
pub const EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 166;
pub const EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 102;
pub const EC_F_EC_GFP_SIMPLE_OCT2POINT = 103;
pub const EC_F_EC_GFP_SIMPLE_POINT2OCT = 104;
pub const EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 137;
pub const EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 167;
pub const EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 168;
pub const EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 169;
pub const EC_F_EC_GROUP_CHECK = 170;
pub const EC_F_EC_GROUP_CHECK_DISCRIMINANT = 171;
pub const EC_F_EC_GROUP_COPY = 106;
pub const EC_F_EC_GROUP_GET_CURVE = 291;
pub const EC_F_EC_GROUP_GET_CURVE_GF2M = 172;
pub const EC_F_EC_GROUP_GET_CURVE_GFP = 130;
pub const EC_F_EC_GROUP_GET_DEGREE = 173;
pub const EC_F_EC_GROUP_GET_ECPARAMETERS = 261;
pub const EC_F_EC_GROUP_GET_ECPKPARAMETERS = 262;
pub const EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 193;
pub const EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 194;
pub const EC_F_EC_GROUP_NEW = 108;
pub const EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 174;
pub const EC_F_EC_GROUP_NEW_FROM_DATA = 175;
pub const EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 263;
pub const EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 264;
pub const EC_F_EC_GROUP_SET_CURVE = 292;
pub const EC_F_EC_GROUP_SET_CURVE_GF2M = 176;
pub const EC_F_EC_GROUP_SET_CURVE_GFP = 109;
pub const EC_F_EC_GROUP_SET_GENERATOR = 111;
pub const EC_F_EC_GROUP_SET_SEED = 286;
pub const EC_F_EC_KEY_CHECK_KEY = 177;
pub const EC_F_EC_KEY_COPY = 178;
pub const EC_F_EC_KEY_GENERATE_KEY = 179;
pub const EC_F_EC_KEY_NEW = 182;
pub const EC_F_EC_KEY_NEW_METHOD = 245;
pub const EC_F_EC_KEY_OCT2PRIV = 255;
pub const EC_F_EC_KEY_PRINT = 180;
pub const EC_F_EC_KEY_PRINT_FP = 181;
pub const EC_F_EC_KEY_PRIV2BUF = 279;
pub const EC_F_EC_KEY_PRIV2OCT = 256;
pub const EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 229;
pub const EC_F_EC_KEY_SIMPLE_CHECK_KEY = 258;
pub const EC_F_EC_KEY_SIMPLE_OCT2PRIV = 259;
pub const EC_F_EC_KEY_SIMPLE_PRIV2OCT = 260;
pub const EC_F_EC_PKEY_CHECK = 273;
pub const EC_F_EC_PKEY_PARAM_CHECK = 274;
pub const EC_F_EC_POINTS_MAKE_AFFINE = 136;
pub const EC_F_EC_POINTS_MUL = 290;
pub const EC_F_EC_POINT_ADD = 112;
pub const EC_F_EC_POINT_BN2POINT = 280;
pub const EC_F_EC_POINT_CMP = 113;
pub const EC_F_EC_POINT_COPY = 114;
pub const EC_F_EC_POINT_DBL = 115;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES = 293;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 183;
pub const EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 116;
pub const EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 117;
pub const EC_F_EC_POINT_INVERT = 210;
pub const EC_F_EC_POINT_IS_AT_INFINITY = 118;
pub const EC_F_EC_POINT_IS_ON_CURVE = 119;
pub const EC_F_EC_POINT_MAKE_AFFINE = 120;
pub const EC_F_EC_POINT_NEW = 121;
pub const EC_F_EC_POINT_OCT2POINT = 122;
pub const EC_F_EC_POINT_POINT2BUF = 281;
pub const EC_F_EC_POINT_POINT2OCT = 123;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES = 294;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 185;
pub const EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 124;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 295;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 186;
pub const EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 125;
pub const EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 126;
pub const EC_F_EC_POINT_SET_TO_INFINITY = 127;
pub const EC_F_EC_PRE_COMP_NEW = 196;
pub const EC_F_EC_SCALAR_MUL_LADDER = 284;
pub const EC_F_EC_WNAF_MUL = 187;
pub const EC_F_EC_WNAF_PRECOMPUTE_MULT = 188;
pub const EC_F_I2D_ECPARAMETERS = 190;
pub const EC_F_I2D_ECPKPARAMETERS = 191;
pub const EC_F_I2D_ECPRIVATEKEY = 192;
pub const EC_F_I2O_ECPUBLICKEY = 151;
pub const EC_F_NISTP224_PRE_COMP_NEW = 227;
pub const EC_F_NISTP256_PRE_COMP_NEW = 236;
pub const EC_F_NISTP521_PRE_COMP_NEW = 237;
pub const EC_F_O2I_ECPUBLICKEY = 152;
pub const EC_F_OLD_EC_PRIV_DECODE = 222;
pub const EC_F_OSSL_ECDH_COMPUTE_KEY = 247;
pub const EC_F_OSSL_ECDSA_SIGN_SETUP = 300;
pub const EC_F_OSSL_ECDSA_SIGN_SIG = 249;
pub const EC_F_OSSL_ECDSA_VERIFY_SIG = 250;
pub const EC_F_PKEY_ECD_CTRL = 271;
pub const EC_F_PKEY_ECD_DIGESTSIGN = 272;
pub const EC_F_PKEY_ECD_DIGESTSIGN25519 = 276;
pub const EC_F_PKEY_ECD_DIGESTSIGN448 = 277;
pub const EC_F_PKEY_ECX_DERIVE = 269;
pub const EC_F_PKEY_EC_CTRL = 197;
pub const EC_F_PKEY_EC_CTRL_STR = 198;
pub const EC_F_PKEY_EC_DERIVE = 217;
pub const EC_F_PKEY_EC_INIT = 282;
pub const EC_F_PKEY_EC_KDF_DERIVE = 283;
pub const EC_F_PKEY_EC_KEYGEN = 199;
pub const EC_F_PKEY_EC_PARAMGEN = 219;
pub const EC_F_PKEY_EC_SIGN = 218;
pub const EC_F_S390X_PKEY_ECD_DIGESTSIGN25519 = 320;
pub const EC_F_S390X_PKEY_ECD_DIGESTSIGN448 = 321;
pub const EC_F_S390X_PKEY_ECD_KEYGEN25519 = 322;
pub const EC_F_S390X_PKEY_ECD_KEYGEN448 = 323;
pub const EC_F_S390X_PKEY_ECX_KEYGEN25519 = 324;
pub const EC_F_S390X_PKEY_ECX_KEYGEN448 = 325;
pub const EC_F_VALIDATE_ECX_DERIVE = 278;
pub const EC_R_ASN1_ERROR = 115;
pub const EC_R_BAD_SIGNATURE = 156;
pub const EC_R_BIGNUM_OUT_OF_RANGE = 144;
pub const EC_R_BUFFER_TOO_SMALL = 100;
pub const EC_R_CANNOT_INVERT = 165;
pub const EC_R_COORDINATES_OUT_OF_RANGE = 146;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA = 170;
pub const EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159;
pub const EC_R_D2I_ECPKPARAMETERS_FAILURE = 117;
pub const EC_R_DECODE_ERROR = 142;
pub const EC_R_DISCRIMINANT_IS_ZERO = 118;
pub const EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119;
pub const EC_R_FIELD_TOO_LARGE = 143;
pub const EC_R_GF2M_NOT_SUPPORTED = 147;
pub const EC_R_GROUP2PKPARAMETERS_FAILURE = 120;
pub const EC_R_I2D_ECPKPARAMETERS_FAILURE = 121;
pub const EC_R_INCOMPATIBLE_OBJECTS = 101;
pub const EC_R_INVALID_ARGUMENT = 112;
pub const EC_R_INVALID_COMPRESSED_POINT = 110;
pub const EC_R_INVALID_COMPRESSION_BIT = 109;
pub const EC_R_INVALID_CURVE = 141;
pub const EC_R_INVALID_DIGEST = 151;
pub const EC_R_INVALID_DIGEST_TYPE = 138;
pub const EC_R_INVALID_ENCODING = 102;
pub const EC_R_INVALID_FIELD = 103;
pub const EC_R_INVALID_FORM = 104;
pub const EC_R_INVALID_GROUP_ORDER = 122;
pub const EC_R_INVALID_KEY = 116;
pub const EC_R_INVALID_OUTPUT_LENGTH = 161;
pub const EC_R_INVALID_PEER_KEY = 133;
pub const EC_R_INVALID_PENTANOMIAL_BASIS = 132;
pub const EC_R_INVALID_PRIVATE_KEY = 123;
pub const EC_R_INVALID_TRINOMIAL_BASIS = 137;
pub const EC_R_KDF_PARAMETER_ERROR = 148;
pub const EC_R_KEYS_NOT_SET = 140;
pub const EC_R_LADDER_POST_FAILURE = 136;
pub const EC_R_LADDER_PRE_FAILURE = 153;
pub const EC_R_LADDER_STEP_FAILURE = 162;
pub const EC_R_MISSING_PARAMETERS = 124;
pub const EC_R_MISSING_PRIVATE_KEY = 125;
pub const EC_R_NEED_NEW_SETUP_VALUES = 157;
pub const EC_R_NOT_A_NIST_PRIME = 135;
pub const EC_R_NOT_IMPLEMENTED = 126;
pub const EC_R_NOT_INITIALIZED = 111;
pub const EC_R_NO_PARAMETERS_SET = 139;
pub const EC_R_NO_PRIVATE_VALUE = 154;
pub const EC_R_OPERATION_NOT_SUPPORTED = 152;
pub const EC_R_PASSED_NULL_PARAMETER = 134;
pub const EC_R_PEER_KEY_ERROR = 149;
pub const EC_R_PKPARAMETERS2GROUP_FAILURE = 127;
pub const EC_R_POINT_ARITHMETIC_FAILURE = 155;
pub const EC_R_POINT_AT_INFINITY = 106;
pub const EC_R_POINT_COORDINATES_BLIND_FAILURE = 163;
pub const EC_R_POINT_IS_NOT_ON_CURVE = 107;
pub const EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158;
pub const EC_R_SHARED_INFO_ERROR = 150;
pub const EC_R_SLOT_FULL = 108;
pub const EC_R_UNDEFINED_GENERATOR = 113;
pub const EC_R_UNDEFINED_ORDER = 128;
pub const EC_R_UNKNOWN_COFACTOR = 164;
pub const EC_R_UNKNOWN_GROUP = 129;
pub const EC_R_UNKNOWN_ORDER = 114;
pub const EC_R_UNSUPPORTED_FIELD = 131;
pub const EC_R_WRONG_CURVE_PARAMETERS = 145;
pub const EC_R_WRONG_ORDER = 130;
pub const OPENSSL_ECC_MAX_FIELD_BITS = 661;
pub const OPENSSL_EC_EXPLICIT_CURVE = 0x000;
pub const OPENSSL_EC_NAMED_CURVE = 0x001;
pub inline fn d2i_ECPKParameters_bio(bp: anytype, x: anytype) @TypeOf(ASN1_d2i_bio_of(EC_GROUP, NULL, d2i_ECPKParameters, bp, x)) {
    return ASN1_d2i_bio_of(EC_GROUP, NULL, d2i_ECPKParameters, bp, x);
}
pub inline fn i2d_ECPKParameters_bio(bp: anytype, x: anytype) @TypeOf(ASN1_i2d_bio_of_const(EC_GROUP, i2d_ECPKParameters, bp, x)) {
    return ASN1_i2d_bio_of_const(EC_GROUP, i2d_ECPKParameters, bp, x);
}
pub inline fn i2d_ECPKParameters_fp(fp: anytype, x: anytype) @TypeOf(ASN1_i2d_fp(i2d_ECPKParameters, fp, (@import("std").meta.cast([*c]u8, x)))) {
    return ASN1_i2d_fp(i2d_ECPKParameters, fp, (@import("std").meta.cast([*c]u8, x)));
}
pub const EC_PKEY_NO_PARAMETERS = 0x001;
pub const EC_PKEY_NO_PUBKEY = 0x002;
pub const EC_FLAG_NON_FIPS_ALLOW = 0x1;
pub const EC_FLAG_FIPS_CHECKED = 0x2;
pub const EC_FLAG_COFACTOR_ECDH = 0x1000;
pub inline fn EC_KEY_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_EC_KEY, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_EC_KEY, l, p, newf, dupf, freef);
}
pub inline fn ECParameters_dup(x: anytype) @TypeOf(ASN1_dup_of(EC_KEY, i2d_ECParameters, d2i_ECParameters, x)) {
    return ASN1_dup_of(EC_KEY, i2d_ECParameters, d2i_ECParameters, x);
}
pub inline fn EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx: anytype, nid: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID, nid, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID, nid, NULL);
}
pub inline fn EVP_PKEY_CTX_set_ec_param_enc(ctx: anytype, flag: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_EC_PARAM_ENC, flag, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_EC_PARAM_ENC, flag, NULL);
}
pub inline fn EVP_PKEY_CTX_set_ecdh_cofactor_mode(ctx: anytype, flag: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_ECDH_COFACTOR, flag, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_ECDH_COFACTOR, flag, NULL);
}
pub inline fn EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_ECDH_COFACTOR, -2, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_ECDH_COFACTOR, -2, NULL);
}
pub inline fn EVP_PKEY_CTX_set_ecdh_kdf_type(ctx: anytype, kdf: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_TYPE, kdf, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_TYPE, kdf, NULL);
}
pub inline fn EVP_PKEY_CTX_get_ecdh_kdf_type(ctx: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_TYPE, -2, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_TYPE, -2, NULL);
}
pub inline fn EVP_PKEY_CTX_set_ecdh_kdf_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_get_ecdh_kdf_md(ctx: anytype, pmd: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_MD, 0, (@import("std").meta.cast(?*c_void, pmd)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_MD, 0, (@import("std").meta.cast(?*c_void, pmd)));
}
pub inline fn EVP_PKEY_CTX_set_ecdh_kdf_outlen(ctx: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_OUTLEN, len, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_OUTLEN, len, NULL);
}
pub inline fn EVP_PKEY_CTX_get_ecdh_kdf_outlen(ctx: anytype, plen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN, 0, (@import("std").meta.cast(?*c_void, plen)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN, 0, (@import("std").meta.cast(?*c_void, plen)));
}
pub inline fn EVP_PKEY_CTX_set0_ecdh_kdf_ukm(ctx: anytype, p: anytype, plen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_UKM, plen, (@import("std").meta.cast(?*c_void, p)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_EC_KDF_UKM, plen, (@import("std").meta.cast(?*c_void, p)));
}
pub inline fn EVP_PKEY_CTX_get0_ecdh_kdf_ukm(ctx: anytype, p: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_UKM, 0, (@import("std").meta.cast(?*c_void, p)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_EC, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_EC_KDF_UKM, 0, (@import("std").meta.cast(?*c_void, p)));
}
pub inline fn EVP_PKEY_CTX_set1_id(ctx: anytype, id: anytype, id_len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_SET1_ID, (@import("std").meta.cast(c_int, blk: {
    _ = id_len;
    break :blk (@import("std").meta.cast(?*c_void, id));
})))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_SET1_ID, (@import("std").meta.cast(c_int, blk: {
        _ = id_len;
        break :blk (@import("std").meta.cast(?*c_void, id));
    })));
}
pub inline fn EVP_PKEY_CTX_get1_id(ctx: anytype, id: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_GET1_ID, 0, (@import("std").meta.cast(?*c_void, id)))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_GET1_ID, 0, (@import("std").meta.cast(?*c_void, id)));
}
pub inline fn EVP_PKEY_CTX_get1_id_len(ctx: anytype, id_len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_GET1_ID_LEN, 0, (@import("std").meta.cast(?*c_void, id_len)))) {
    return EVP_PKEY_CTX_ctrl(ctx, -1, -1, EVP_PKEY_CTRL_GET1_ID_LEN, 0, (@import("std").meta.cast(?*c_void, id_len)));
}
pub const EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = EVP_PKEY_ALG_CTRL + 1;
pub const EVP_PKEY_CTRL_EC_PARAM_ENC = EVP_PKEY_ALG_CTRL + 2;
pub const EVP_PKEY_CTRL_EC_ECDH_COFACTOR = EVP_PKEY_ALG_CTRL + 3;
pub const EVP_PKEY_CTRL_EC_KDF_TYPE = EVP_PKEY_ALG_CTRL + 4;
pub const EVP_PKEY_CTRL_EC_KDF_MD = EVP_PKEY_ALG_CTRL + 5;
pub const EVP_PKEY_CTRL_GET_EC_KDF_MD = EVP_PKEY_ALG_CTRL + 6;
pub const EVP_PKEY_CTRL_EC_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 7;
pub const EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 8;
pub const EVP_PKEY_CTRL_EC_KDF_UKM = EVP_PKEY_ALG_CTRL + 9;
pub const EVP_PKEY_CTRL_GET_EC_KDF_UKM = EVP_PKEY_ALG_CTRL + 10;
pub const EVP_PKEY_CTRL_SET1_ID = EVP_PKEY_ALG_CTRL + 11;
pub const EVP_PKEY_CTRL_GET1_ID = EVP_PKEY_ALG_CTRL + 12;
pub const EVP_PKEY_CTRL_GET1_ID_LEN = EVP_PKEY_ALG_CTRL + 13;
pub const EVP_PKEY_ECDH_KDF_NONE = 1;
pub const EVP_PKEY_ECDH_KDF_X9_63 = 2;
pub const EVP_PKEY_ECDH_KDF_X9_62 = EVP_PKEY_ECDH_KDF_X9_63;
pub const RSA_F_CHECK_PADDING_MD = 140;
pub const RSA_F_ENCODE_PKCS1 = 146;
pub const RSA_F_INT_RSA_VERIFY = 145;
pub const RSA_F_OLD_RSA_PRIV_DECODE = 147;
pub const RSA_F_PKEY_PSS_INIT = 165;
pub const RSA_F_PKEY_RSA_CTRL = 143;
pub const RSA_F_PKEY_RSA_CTRL_STR = 144;
pub const RSA_F_PKEY_RSA_SIGN = 142;
pub const RSA_F_PKEY_RSA_VERIFY = 149;
pub const RSA_F_PKEY_RSA_VERIFYRECOVER = 141;
pub const RSA_F_RSA_ALGOR_TO_MD = 156;
pub const RSA_F_RSA_BUILTIN_KEYGEN = 129;
pub const RSA_F_RSA_CHECK_KEY = 123;
pub const RSA_F_RSA_CHECK_KEY_EX = 160;
pub const RSA_F_RSA_CMS_DECRYPT = 159;
pub const RSA_F_RSA_CMS_VERIFY = 158;
pub const RSA_F_RSA_ITEM_VERIFY = 148;
pub const RSA_F_RSA_METH_DUP = 161;
pub const RSA_F_RSA_METH_NEW = 162;
pub const RSA_F_RSA_METH_SET1_NAME = 163;
pub const RSA_F_RSA_MGF1_TO_MD = 157;
pub const RSA_F_RSA_MULTIP_INFO_NEW = 166;
pub const RSA_F_RSA_NEW_METHOD = 106;
pub const RSA_F_RSA_NULL = 124;
pub const RSA_F_RSA_NULL_PRIVATE_DECRYPT = 132;
pub const RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 133;
pub const RSA_F_RSA_NULL_PUBLIC_DECRYPT = 134;
pub const RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 135;
pub const RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 101;
pub const RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 102;
pub const RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 103;
pub const RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 104;
pub const RSA_F_RSA_PADDING_ADD_NONE = 107;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 121;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 154;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 125;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 152;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 108;
pub const RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 109;
pub const RSA_F_RSA_PADDING_ADD_SSLV23 = 110;
pub const RSA_F_RSA_PADDING_ADD_X931 = 127;
pub const RSA_F_RSA_PADDING_CHECK_NONE = 111;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 122;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 153;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 112;
pub const RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 113;
pub const RSA_F_RSA_PADDING_CHECK_SSLV23 = 114;
pub const RSA_F_RSA_PADDING_CHECK_X931 = 128;
pub const RSA_F_RSA_PARAM_DECODE = 164;
pub const RSA_F_RSA_PRINT = 115;
pub const RSA_F_RSA_PRINT_FP = 116;
pub const RSA_F_RSA_PRIV_DECODE = 150;
pub const RSA_F_RSA_PRIV_ENCODE = 138;
pub const RSA_F_RSA_PSS_GET_PARAM = 151;
pub const RSA_F_RSA_PSS_TO_CTX = 155;
pub const RSA_F_RSA_PUB_DECODE = 139;
pub const RSA_F_RSA_SETUP_BLINDING = 136;
pub const RSA_F_RSA_SIGN = 117;
pub const RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 118;
pub const RSA_F_RSA_VERIFY = 119;
pub const RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 120;
pub const RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 126;
pub const RSA_F_SETUP_TBUF = 167;
pub const RSA_R_ALGORITHM_MISMATCH = 100;
pub const RSA_R_BAD_E_VALUE = 101;
pub const RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;
pub const RSA_R_BAD_PAD_BYTE_COUNT = 103;
pub const RSA_R_BAD_SIGNATURE = 104;
pub const RSA_R_BLOCK_TYPE_IS_NOT_01 = 106;
pub const RSA_R_BLOCK_TYPE_IS_NOT_02 = 107;
pub const RSA_R_DATA_GREATER_THAN_MOD_LEN = 108;
pub const RSA_R_DATA_TOO_LARGE = 109;
pub const RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 110;
pub const RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 132;
pub const RSA_R_DATA_TOO_SMALL = 111;
pub const RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 122;
pub const RSA_R_DIGEST_DOES_NOT_MATCH = 158;
pub const RSA_R_DIGEST_NOT_ALLOWED = 145;
pub const RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 112;
pub const RSA_R_DMP1_NOT_CONGRUENT_TO_D = 124;
pub const RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 125;
pub const RSA_R_D_E_NOT_CONGRUENT_TO_1 = 123;
pub const RSA_R_FIRST_OCTET_INVALID = 133;
pub const RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 144;
pub const RSA_R_INVALID_DIGEST = 157;
pub const RSA_R_INVALID_DIGEST_LENGTH = 143;
pub const RSA_R_INVALID_HEADER = 137;
pub const RSA_R_INVALID_LABEL = 160;
pub const RSA_R_INVALID_MESSAGE_LENGTH = 131;
pub const RSA_R_INVALID_MGF1_MD = 156;
pub const RSA_R_INVALID_MULTI_PRIME_KEY = 167;
pub const RSA_R_INVALID_OAEP_PARAMETERS = 161;
pub const RSA_R_INVALID_PADDING = 138;
pub const RSA_R_INVALID_PADDING_MODE = 141;
pub const RSA_R_INVALID_PSS_PARAMETERS = 149;
pub const RSA_R_INVALID_PSS_SALTLEN = 146;
pub const RSA_R_INVALID_SALT_LENGTH = 150;
pub const RSA_R_INVALID_TRAILER = 139;
pub const RSA_R_INVALID_X931_DIGEST = 142;
pub const RSA_R_IQMP_NOT_INVERSE_OF_Q = 126;
pub const RSA_R_KEY_PRIME_NUM_INVALID = 165;
pub const RSA_R_KEY_SIZE_TOO_SMALL = 120;
pub const RSA_R_LAST_OCTET_INVALID = 134;
pub const RSA_R_MISSING_PRIVATE_KEY = 179;
pub const RSA_R_MGF1_DIGEST_NOT_ALLOWED = 152;
pub const RSA_R_MODULUS_TOO_LARGE = 105;
pub const RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = 168;
pub const RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = 169;
pub const RSA_R_MP_R_NOT_PRIME = 170;
pub const RSA_R_NO_PUBLIC_EXPONENT = 140;
pub const RSA_R_NULL_BEFORE_BLOCK_MISSING = 113;
pub const RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = 172;
pub const RSA_R_N_DOES_NOT_EQUAL_P_Q = 127;
pub const RSA_R_OAEP_DECODING_ERROR = 121;
pub const RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 148;
pub const RSA_R_PADDING_CHECK_FAILED = 114;
pub const RSA_R_PKCS_DECODING_ERROR = 159;
pub const RSA_R_PSS_SALTLEN_TOO_SMALL = 164;
pub const RSA_R_P_NOT_PRIME = 128;
pub const RSA_R_Q_NOT_PRIME = 129;
pub const RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 130;
pub const RSA_R_SLEN_CHECK_FAILED = 136;
pub const RSA_R_SLEN_RECOVERY_FAILED = 135;
pub const RSA_R_SSLV3_ROLLBACK_ATTACK = 115;
pub const RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 116;
pub const RSA_R_UNKNOWN_ALGORITHM_TYPE = 117;
pub const RSA_R_UNKNOWN_DIGEST = 166;
pub const RSA_R_UNKNOWN_MASK_DIGEST = 151;
pub const RSA_R_UNKNOWN_PADDING_TYPE = 118;
pub const RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = 162;
pub const RSA_R_UNSUPPORTED_LABEL_SOURCE = 163;
pub const RSA_R_UNSUPPORTED_MASK_ALGORITHM = 153;
pub const RSA_R_UNSUPPORTED_MASK_PARAMETER = 154;
pub const RSA_R_UNSUPPORTED_SIGNATURE_TYPE = 155;
pub const RSA_R_VALUE_MISSING = 147;
pub const RSA_R_WRONG_SIGNATURE_LENGTH = 119;
pub const OPENSSL_RSA_MAX_MODULUS_BITS = 16384;
pub const OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 1024;
pub const OPENSSL_RSA_SMALL_MODULUS_BITS = 3072;
pub const OPENSSL_RSA_MAX_PUBEXP_BITS = 64;
pub const RSA_3 = @as(c_long, 0x3);
pub const RSA_F4 = @as(c_long, 0x10001);
pub const RSA_ASN1_VERSION_DEFAULT = 0;
pub const RSA_ASN1_VERSION_MULTI = 1;
pub const RSA_DEFAULT_PRIME_NUM = 2;
pub const RSA_METHOD_FLAG_NO_CHECK = 0x0001;
pub const RSA_FLAG_CACHE_PUBLIC = 0x0002;
pub const RSA_FLAG_CACHE_PRIVATE = 0x0004;
pub const RSA_FLAG_BLINDING = 0x0008;
pub const RSA_FLAG_THREAD_SAFE = 0x0010;
pub const RSA_FLAG_EXT_PKEY = 0x0020;
pub const RSA_FLAG_NO_BLINDING = 0x0080;
pub const RSA_FLAG_NO_CONSTTIME = 0x0000;
pub const RSA_FLAG_NO_EXP_CONSTTIME = RSA_FLAG_NO_CONSTTIME;
pub inline fn EVP_PKEY_CTX_set_rsa_padding(ctx: anytype, pad: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_RSA_PADDING, pad, NULL)) {
    return RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_RSA_PADDING, pad, NULL);
}
pub inline fn EVP_PKEY_CTX_get_rsa_padding(ctx: anytype, ppad: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_GET_RSA_PADDING, 0, ppad)) {
    return RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_GET_RSA_PADDING, 0, ppad);
}
pub inline fn EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx: anytype, len: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY, EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL)) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY, EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL);
}
pub const RSA_PSS_SALTLEN_DIGEST = -1;
pub const RSA_PSS_SALTLEN_AUTO = -2;
pub const RSA_PSS_SALTLEN_MAX = -3;
pub const RSA_PSS_SALTLEN_MAX_SIGN = -2;
pub inline fn EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL);
}
pub inline fn EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx: anytype, plen: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY, EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN, 0, plen)) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_SIGN | EVP_PKEY_OP_VERIFY, EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN, 0, plen);
}
pub inline fn EVP_PKEY_CTX_set_rsa_keygen_bits(ctx: anytype, bits: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL)) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL);
}
pub inline fn EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx: anytype, pubexp: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP, 0, pubexp)) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP, 0, pubexp);
}
pub inline fn EVP_PKEY_CTX_set_rsa_keygen_primes(ctx: anytype, primes: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES, primes, NULL)) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES, primes, NULL);
}
pub inline fn EVP_PKEY_CTX_set_rsa_mgf1_md(ctx: anytype, md: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_set_rsa_oaep_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_OAEP_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_OAEP_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_get_rsa_mgf1_md(ctx: anytype, pmd: anytype) @TypeOf(RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, pmd)))) {
    return RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_MGF1_MD, 0, (@import("std").meta.cast(?*c_void, pmd)));
}
pub inline fn EVP_PKEY_CTX_get_rsa_oaep_md(ctx: anytype, pmd: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_OAEP_MD, 0, (@import("std").meta.cast(?*c_void, pmd)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_OAEP_MD, 0, (@import("std").meta.cast(?*c_void, pmd)));
}
pub inline fn EVP_PKEY_CTX_set0_rsa_oaep_label(ctx: anytype, l: anytype, llen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_OAEP_LABEL, llen, (@import("std").meta.cast(?*c_void, l)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_RSA_OAEP_LABEL, llen, (@import("std").meta.cast(?*c_void, l)));
}
pub inline fn EVP_PKEY_CTX_get0_rsa_oaep_label(ctx: anytype, l: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL, 0, (@import("std").meta.cast(?*c_void, l)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL, 0, (@import("std").meta.cast(?*c_void, l)));
}
pub inline fn EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub const EVP_PKEY_CTRL_RSA_PADDING = EVP_PKEY_ALG_CTRL + 1;
pub const EVP_PKEY_CTRL_RSA_PSS_SALTLEN = EVP_PKEY_ALG_CTRL + 2;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_BITS = EVP_PKEY_ALG_CTRL + 3;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = EVP_PKEY_ALG_CTRL + 4;
pub const EVP_PKEY_CTRL_RSA_MGF1_MD = EVP_PKEY_ALG_CTRL + 5;
pub const EVP_PKEY_CTRL_GET_RSA_PADDING = EVP_PKEY_ALG_CTRL + 6;
pub const EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = EVP_PKEY_ALG_CTRL + 7;
pub const EVP_PKEY_CTRL_GET_RSA_MGF1_MD = EVP_PKEY_ALG_CTRL + 8;
pub const EVP_PKEY_CTRL_RSA_OAEP_MD = EVP_PKEY_ALG_CTRL + 9;
pub const EVP_PKEY_CTRL_RSA_OAEP_LABEL = EVP_PKEY_ALG_CTRL + 10;
pub const EVP_PKEY_CTRL_GET_RSA_OAEP_MD = EVP_PKEY_ALG_CTRL + 11;
pub const EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = EVP_PKEY_ALG_CTRL + 12;
pub const EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = EVP_PKEY_ALG_CTRL + 13;
pub const RSA_PKCS1_PADDING = 1;
pub const RSA_SSLV23_PADDING = 2;
pub const RSA_NO_PADDING = 3;
pub const RSA_PKCS1_OAEP_PADDING = 4;
pub const RSA_X931_PADDING = 5;
pub const RSA_PKCS1_PSS_PADDING = 6;
pub const RSA_PKCS1_PADDING_SIZE = 11;
pub inline fn RSA_set_app_data(s: anytype, arg: anytype) @TypeOf(RSA_set_ex_data(s, 0, arg)) {
    return RSA_set_ex_data(s, 0, arg);
}
pub inline fn RSA_get_app_data(s: anytype) @TypeOf(RSA_get_ex_data(s, 0)) {
    return RSA_get_ex_data(s, 0);
}
pub inline fn RSA_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, l, p, newf, dupf, freef);
}
pub const RSA_FLAG_FIPS_METHOD = 0x0400;
pub const RSA_FLAG_NON_FIPS_ALLOW = 0x0400;
pub const RSA_FLAG_CHECKED = 0x0800;
pub const DH_F_COMPUTE_KEY = 102;
pub const DH_F_DHPARAMS_PRINT_FP = 101;
pub const DH_F_DH_BUILTIN_GENPARAMS = 106;
pub const DH_F_DH_CHECK_EX = 121;
pub const DH_F_DH_CHECK_PARAMS_EX = 122;
pub const DH_F_DH_CHECK_PUB_KEY_EX = 123;
pub const DH_F_DH_CMS_DECRYPT = 114;
pub const DH_F_DH_CMS_SET_PEERKEY = 115;
pub const DH_F_DH_CMS_SET_SHARED_INFO = 116;
pub const DH_F_DH_METH_DUP = 117;
pub const DH_F_DH_METH_NEW = 118;
pub const DH_F_DH_METH_SET1_NAME = 119;
pub const DH_F_DH_NEW_BY_NID = 104;
pub const DH_F_DH_NEW_METHOD = 105;
pub const DH_F_DH_PARAM_DECODE = 107;
pub const DH_F_DH_PKEY_PUBLIC_CHECK = 124;
pub const DH_F_DH_PRIV_DECODE = 110;
pub const DH_F_DH_PRIV_ENCODE = 111;
pub const DH_F_DH_PUB_DECODE = 108;
pub const DH_F_DH_PUB_ENCODE = 109;
pub const DH_F_DO_DH_PRINT = 100;
pub const DH_F_GENERATE_KEY = 103;
pub const DH_F_PKEY_DH_CTRL_STR = 120;
pub const DH_F_PKEY_DH_DERIVE = 112;
pub const DH_F_PKEY_DH_INIT = 125;
pub const DH_F_PKEY_DH_KEYGEN = 113;
pub const DH_R_BAD_GENERATOR = 101;
pub const DH_R_BN_DECODE_ERROR = 109;
pub const DH_R_BN_ERROR = 106;
pub const DH_R_CHECK_INVALID_J_VALUE = 115;
pub const DH_R_CHECK_INVALID_Q_VALUE = 116;
pub const DH_R_CHECK_PUBKEY_INVALID = 122;
pub const DH_R_CHECK_PUBKEY_TOO_LARGE = 123;
pub const DH_R_CHECK_PUBKEY_TOO_SMALL = 124;
pub const DH_R_CHECK_P_NOT_PRIME = 117;
pub const DH_R_CHECK_P_NOT_SAFE_PRIME = 118;
pub const DH_R_CHECK_Q_NOT_PRIME = 119;
pub const DH_R_DECODE_ERROR = 104;
pub const DH_R_INVALID_PARAMETER_NAME = 110;
pub const DH_R_INVALID_PARAMETER_NID = 114;
pub const DH_R_INVALID_PUBKEY = 102;
pub const DH_R_KDF_PARAMETER_ERROR = 112;
pub const DH_R_KEYS_NOT_SET = 108;
pub const DH_R_MISSING_PUBKEY = 125;
pub const DH_R_MODULUS_TOO_LARGE = 103;
pub const DH_R_NOT_SUITABLE_GENERATOR = 120;
pub const DH_R_NO_PARAMETERS_SET = 107;
pub const DH_R_NO_PRIVATE_VALUE = 100;
pub const DH_R_PARAMETER_ENCODING_ERROR = 105;
pub const DH_R_PEER_KEY_ERROR = 111;
pub const DH_R_SHARED_INFO_ERROR = 113;
pub const DH_R_UNABLE_TO_CHECK_GENERATOR = 121;
pub const OPENSSL_DH_MAX_MODULUS_BITS = 10000;
pub const OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024;
pub const DH_FLAG_CACHE_MONT_P = 0x01;
pub const DH_FLAG_NO_EXP_CONSTTIME = 0x00;
pub const DH_FLAG_FIPS_METHOD = 0x0400;
pub const DH_FLAG_NON_FIPS_ALLOW = 0x0400;
pub const DH_GENERATOR_2 = 2;
pub const DH_GENERATOR_5 = 5;
pub const DH_CHECK_P_NOT_PRIME = 0x01;
pub const DH_CHECK_P_NOT_SAFE_PRIME = 0x02;
pub const DH_UNABLE_TO_CHECK_GENERATOR = 0x04;
pub const DH_NOT_SUITABLE_GENERATOR = 0x08;
pub const DH_CHECK_Q_NOT_PRIME = 0x10;
pub const DH_CHECK_INVALID_Q_VALUE = 0x20;
pub const DH_CHECK_INVALID_J_VALUE = 0x40;
pub const DH_CHECK_PUBKEY_TOO_SMALL = 0x01;
pub const DH_CHECK_PUBKEY_TOO_LARGE = 0x02;
pub const DH_CHECK_PUBKEY_INVALID = 0x04;
pub const DH_CHECK_P_NOT_STRONG_PRIME = DH_CHECK_P_NOT_SAFE_PRIME;
pub inline fn i2d_DHparams_fp(fp: anytype, x: anytype) @TypeOf(ASN1_i2d_fp(i2d_DHparams, fp, (@import("std").meta.cast([*c]u8, x)))) {
    return ASN1_i2d_fp(i2d_DHparams, fp, (@import("std").meta.cast([*c]u8, x)));
}
pub inline fn d2i_DHparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_d2i_bio_of(DH, DH_new, d2i_DHparams, bp, x)) {
    return ASN1_d2i_bio_of(DH, DH_new, d2i_DHparams, bp, x);
}
pub inline fn i2d_DHparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_i2d_bio_of_const(DH, i2d_DHparams, bp, x)) {
    return ASN1_i2d_bio_of_const(DH, i2d_DHparams, bp, x);
}
pub inline fn i2d_DHxparams_fp(fp: anytype, x: anytype) @TypeOf(ASN1_i2d_fp(i2d_DHxparams, fp, (@import("std").meta.cast([*c]u8, x)))) {
    return ASN1_i2d_fp(i2d_DHxparams, fp, (@import("std").meta.cast([*c]u8, x)));
}
pub inline fn d2i_DHxparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_d2i_bio_of(DH, DH_new, d2i_DHxparams, bp, x)) {
    return ASN1_d2i_bio_of(DH, DH_new, d2i_DHxparams, bp, x);
}
pub inline fn i2d_DHxparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_i2d_bio_of_const(DH, i2d_DHxparams, bp, x)) {
    return ASN1_i2d_bio_of_const(DH, i2d_DHxparams, bp, x);
}
pub inline fn DH_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, l, p, newf, dupf, freef);
}
pub inline fn EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN, len, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN, len, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_paramgen_subprime_len(ctx: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN, len, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN, len, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_paramgen_type(ctx: anytype, typ: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_TYPE, typ, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_TYPE, typ, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_paramgen_generator(ctx: anytype, gen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR, gen, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR, gen, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_rfc5114(ctx: anytype, gen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_RFC5114, gen, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_RFC5114, gen, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dhx_rfc5114(ctx: anytype, gen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_RFC5114, gen, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_RFC5114, gen, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_nid(ctx: anytype, nid: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_DH_NID, nid, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN | EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_DH_NID, nid, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_pad(ctx: anytype, pad: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_PAD, pad, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DH, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_PAD, pad, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dh_kdf_type(ctx: anytype, kdf: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_TYPE, kdf, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_TYPE, kdf, NULL);
}
pub inline fn EVP_PKEY_CTX_get_dh_kdf_type(ctx: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_TYPE, -2, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_TYPE, -2, NULL);
}
pub inline fn EVP_PKEY_CTX_set0_dh_kdf_oid(ctx: anytype, oid: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_OID, 0, (@import("std").meta.cast(?*c_void, oid)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_OID, 0, (@import("std").meta.cast(?*c_void, oid)));
}
pub inline fn EVP_PKEY_CTX_get0_dh_kdf_oid(ctx: anytype, poid: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_OID, 0, (@import("std").meta.cast(?*c_void, poid)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_OID, 0, (@import("std").meta.cast(?*c_void, poid)));
}
pub inline fn EVP_PKEY_CTX_set_dh_kdf_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub inline fn EVP_PKEY_CTX_get_dh_kdf_md(ctx: anytype, pmd: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_MD, 0, (@import("std").meta.cast(?*c_void, pmd)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_MD, 0, (@import("std").meta.cast(?*c_void, pmd)));
}
pub inline fn EVP_PKEY_CTX_set_dh_kdf_outlen(ctx: anytype, len: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_OUTLEN, len, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_OUTLEN, len, NULL);
}
pub inline fn EVP_PKEY_CTX_get_dh_kdf_outlen(ctx: anytype, plen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN, 0, (@import("std").meta.cast(?*c_void, plen)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN, 0, (@import("std").meta.cast(?*c_void, plen)));
}
pub inline fn EVP_PKEY_CTX_set0_dh_kdf_ukm(ctx: anytype, p: anytype, plen: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_UKM, plen, (@import("std").meta.cast(?*c_void, p)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_DH_KDF_UKM, plen, (@import("std").meta.cast(?*c_void, p)));
}
pub inline fn EVP_PKEY_CTX_get0_dh_kdf_ukm(ctx: anytype, p: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_UKM, 0, (@import("std").meta.cast(?*c_void, p)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DHX, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_GET_DH_KDF_UKM, 0, (@import("std").meta.cast(?*c_void, p)));
}
pub const EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = EVP_PKEY_ALG_CTRL + 1;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = EVP_PKEY_ALG_CTRL + 2;
pub const EVP_PKEY_CTRL_DH_RFC5114 = EVP_PKEY_ALG_CTRL + 3;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = EVP_PKEY_ALG_CTRL + 4;
pub const EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = EVP_PKEY_ALG_CTRL + 5;
pub const EVP_PKEY_CTRL_DH_KDF_TYPE = EVP_PKEY_ALG_CTRL + 6;
pub const EVP_PKEY_CTRL_DH_KDF_MD = EVP_PKEY_ALG_CTRL + 7;
pub const EVP_PKEY_CTRL_GET_DH_KDF_MD = EVP_PKEY_ALG_CTRL + 8;
pub const EVP_PKEY_CTRL_DH_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 9;
pub const EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = EVP_PKEY_ALG_CTRL + 10;
pub const EVP_PKEY_CTRL_DH_KDF_UKM = EVP_PKEY_ALG_CTRL + 11;
pub const EVP_PKEY_CTRL_GET_DH_KDF_UKM = EVP_PKEY_ALG_CTRL + 12;
pub const EVP_PKEY_CTRL_DH_KDF_OID = EVP_PKEY_ALG_CTRL + 13;
pub const EVP_PKEY_CTRL_GET_DH_KDF_OID = EVP_PKEY_ALG_CTRL + 14;
pub const EVP_PKEY_CTRL_DH_NID = EVP_PKEY_ALG_CTRL + 15;
pub const EVP_PKEY_CTRL_DH_PAD = EVP_PKEY_ALG_CTRL + 16;
pub const EVP_PKEY_DH_KDF_NONE = 1;
pub const EVP_PKEY_DH_KDF_X9_42 = 2;
pub const DSA_F_DSAPARAMS_PRINT = 100;
pub const DSA_F_DSAPARAMS_PRINT_FP = 101;
pub const DSA_F_DSA_BUILTIN_PARAMGEN = 125;
pub const DSA_F_DSA_BUILTIN_PARAMGEN2 = 126;
pub const DSA_F_DSA_DO_SIGN = 112;
pub const DSA_F_DSA_DO_VERIFY = 113;
pub const DSA_F_DSA_METH_DUP = 127;
pub const DSA_F_DSA_METH_NEW = 128;
pub const DSA_F_DSA_METH_SET1_NAME = 129;
pub const DSA_F_DSA_NEW_METHOD = 103;
pub const DSA_F_DSA_PARAM_DECODE = 119;
pub const DSA_F_DSA_PRINT_FP = 105;
pub const DSA_F_DSA_PRIV_DECODE = 115;
pub const DSA_F_DSA_PRIV_ENCODE = 116;
pub const DSA_F_DSA_PUB_DECODE = 117;
pub const DSA_F_DSA_PUB_ENCODE = 118;
pub const DSA_F_DSA_SIGN = 106;
pub const DSA_F_DSA_SIGN_SETUP = 107;
pub const DSA_F_DSA_SIG_NEW = 102;
pub const DSA_F_OLD_DSA_PRIV_DECODE = 122;
pub const DSA_F_PKEY_DSA_CTRL = 120;
pub const DSA_F_PKEY_DSA_CTRL_STR = 104;
pub const DSA_F_PKEY_DSA_KEYGEN = 121;
pub const DSA_R_BAD_Q_VALUE = 102;
pub const DSA_R_BN_DECODE_ERROR = 108;
pub const DSA_R_BN_ERROR = 109;
pub const DSA_R_DECODE_ERROR = 104;
pub const DSA_R_INVALID_DIGEST_TYPE = 106;
pub const DSA_R_INVALID_PARAMETERS = 112;
pub const DSA_R_MISSING_PARAMETERS = 101;
pub const DSA_R_MISSING_PRIVATE_KEY = 111;
pub const DSA_R_MODULUS_TOO_LARGE = 103;
pub const DSA_R_NO_PARAMETERS_SET = 107;
pub const DSA_R_PARAMETER_ENCODING_ERROR = 105;
pub const DSA_R_Q_NOT_PRIME = 113;
pub const DSA_R_SEED_LEN_SMALL = 110;
pub const OPENSSL_DSA_MAX_MODULUS_BITS = 10000;
pub const OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024;
pub const DSA_FLAG_CACHE_MONT_P = 0x01;
pub const DSA_FLAG_NO_EXP_CONSTTIME = 0x00;
pub const DSA_FLAG_FIPS_METHOD = 0x0400;
pub const DSA_FLAG_NON_FIPS_ALLOW = 0x0400;
pub const DSA_FLAG_FIPS_CHECKED = 0x0800;
pub inline fn i2d_DSAparams_fp(fp: anytype, x: anytype) @TypeOf(ASN1_i2d_fp(i2d_DSAparams, fp, (@import("std").meta.cast([*c]u8, x)))) {
    return ASN1_i2d_fp(i2d_DSAparams, fp, (@import("std").meta.cast([*c]u8, x)));
}
pub inline fn d2i_DSAparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAparams, bp, x)) {
    return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAparams, bp, x);
}
pub inline fn i2d_DSAparams_bio(bp: anytype, x: anytype) @TypeOf(ASN1_i2d_bio_of_const(DSA, i2d_DSAparams, bp, x)) {
    return ASN1_i2d_bio_of_const(DSA, i2d_DSAparams, bp, x);
}
pub inline fn DSA_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DSA, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DSA, l, p, newf, dupf, freef);
}
pub const DSS_prime_checks = 64;
pub inline fn DSA_is_prime(n: anytype, callback: anytype, cb_arg: anytype) @TypeOf(BN_is_prime(n, DSS_prime_checks, callback, NULL, cb_arg)) {
    return BN_is_prime(n, DSS_prime_checks, callback, NULL, cb_arg);
}
pub inline fn EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx: anytype, nbits: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_BITS, nbits, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_BITS, nbits, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dsa_paramgen_q_bits(ctx: anytype, qbits: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS, qbits, NULL)) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS, qbits, NULL);
}
pub inline fn EVP_PKEY_CTX_set_dsa_paramgen_md(ctx: anytype, md: anytype) @TypeOf(EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_MD, 0, (@import("std").meta.cast(?*c_void, md)))) {
    return EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DSA_PARAMGEN_MD, 0, (@import("std").meta.cast(?*c_void, md)));
}
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = EVP_PKEY_ALG_CTRL + 1;
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = EVP_PKEY_ALG_CTRL + 2;
pub const EVP_PKEY_CTRL_DSA_PARAMGEN_MD = EVP_PKEY_ALG_CTRL + 3;
pub const SHA_LONG = c_uint;
pub const SHA_LBLOCK = 16;
pub const SHA_CBLOCK = SHA_LBLOCK * 4;
pub const SHA_LAST_BLOCK = SHA_CBLOCK - 8;
pub const SHA_DIGEST_LENGTH = 20;
pub const SHA256_CBLOCK = SHA_LBLOCK * 4;
pub const SHA224_DIGEST_LENGTH = 28;
pub const SHA256_DIGEST_LENGTH = 32;
pub const SHA384_DIGEST_LENGTH = 48;
pub const SHA512_DIGEST_LENGTH = 64;
pub const SHA512_CBLOCK = SHA_LBLOCK * 8;
pub const SHA_LONG64 = c_ulonglong;
pub const X509_F_ADD_CERT_DIR = 100;
pub const X509_F_BUILD_CHAIN = 106;
pub const X509_F_BY_FILE_CTRL = 101;
pub const X509_F_CHECK_NAME_CONSTRAINTS = 149;
pub const X509_F_CHECK_POLICY = 145;
pub const X509_F_DANE_I2D = 107;
pub const X509_F_DIR_CTRL = 102;
pub const X509_F_GET_CERT_BY_SUBJECT = 103;
pub const X509_F_I2D_X509_AUX = 151;
pub const X509_F_LOOKUP_CERTS_SK = 152;
pub const X509_F_NETSCAPE_SPKI_B64_DECODE = 129;
pub const X509_F_NETSCAPE_SPKI_B64_ENCODE = 130;
pub const X509_F_NEW_DIR = 153;
pub const X509_F_X509AT_ADD1_ATTR = 135;
pub const X509_F_X509V3_ADD_EXT = 104;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 136;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 137;
pub const X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 140;
pub const X509_F_X509_ATTRIBUTE_GET0_DATA = 139;
pub const X509_F_X509_ATTRIBUTE_SET1_DATA = 138;
pub const X509_F_X509_CHECK_PRIVATE_KEY = 128;
pub const X509_F_X509_CRL_DIFF = 105;
pub const X509_F_X509_CRL_METHOD_NEW = 154;
pub const X509_F_X509_CRL_PRINT_FP = 147;
pub const X509_F_X509_EXTENSION_CREATE_BY_NID = 108;
pub const X509_F_X509_EXTENSION_CREATE_BY_OBJ = 109;
pub const X509_F_X509_GET_PUBKEY_PARAMETERS = 110;
pub const X509_F_X509_LOAD_CERT_CRL_FILE = 132;
pub const X509_F_X509_LOAD_CERT_FILE = 111;
pub const X509_F_X509_LOAD_CRL_FILE = 112;
pub const X509_F_X509_LOOKUP_METH_NEW = 160;
pub const X509_F_X509_LOOKUP_NEW = 155;
pub const X509_F_X509_NAME_ADD_ENTRY = 113;
pub const X509_F_X509_NAME_CANON = 156;
pub const X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 114;
pub const X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 131;
pub const X509_F_X509_NAME_ENTRY_SET_OBJECT = 115;
pub const X509_F_X509_NAME_ONELINE = 116;
pub const X509_F_X509_NAME_PRINT = 117;
pub const X509_F_X509_OBJECT_NEW = 150;
pub const X509_F_X509_PRINT_EX_FP = 118;
pub const X509_F_X509_PUBKEY_DECODE = 148;
pub const X509_F_X509_PUBKEY_GET0 = 119;
pub const X509_F_X509_PUBKEY_SET = 120;
pub const X509_F_X509_REQ_CHECK_PRIVATE_KEY = 144;
pub const X509_F_X509_REQ_PRINT_EX = 121;
pub const X509_F_X509_REQ_PRINT_FP = 122;
pub const X509_F_X509_REQ_TO_X509 = 123;
pub const X509_F_X509_STORE_ADD_CERT = 124;
pub const X509_F_X509_STORE_ADD_CRL = 125;
pub const X509_F_X509_STORE_ADD_LOOKUP = 157;
pub const X509_F_X509_STORE_CTX_GET1_ISSUER = 146;
pub const X509_F_X509_STORE_CTX_INIT = 143;
pub const X509_F_X509_STORE_CTX_NEW = 142;
pub const X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 134;
pub const X509_F_X509_STORE_NEW = 158;
pub const X509_F_X509_TO_X509_REQ = 126;
pub const X509_F_X509_TRUST_ADD = 133;
pub const X509_F_X509_TRUST_SET = 141;
pub const X509_F_X509_VERIFY_CERT = 127;
pub const X509_F_X509_VERIFY_PARAM_NEW = 159;
pub const X509_R_AKID_MISMATCH = 110;
pub const X509_R_BAD_SELECTOR = 133;
pub const X509_R_BAD_X509_FILETYPE = 100;
pub const X509_R_BASE64_DECODE_ERROR = 118;
pub const X509_R_CANT_CHECK_DH_KEY = 114;
pub const X509_R_CERT_ALREADY_IN_HASH_TABLE = 101;
pub const X509_R_CRL_ALREADY_DELTA = 127;
pub const X509_R_CRL_VERIFY_FAILURE = 131;
pub const X509_R_IDP_MISMATCH = 128;
pub const X509_R_INVALID_ATTRIBUTES = 138;
pub const X509_R_INVALID_DIRECTORY = 113;
pub const X509_R_INVALID_FIELD_NAME = 119;
pub const X509_R_INVALID_TRUST = 123;
pub const X509_R_ISSUER_MISMATCH = 129;
pub const X509_R_KEY_TYPE_MISMATCH = 115;
pub const X509_R_KEY_VALUES_MISMATCH = 116;
pub const X509_R_LOADING_CERT_DIR = 103;
pub const X509_R_LOADING_DEFAULTS = 104;
pub const X509_R_METHOD_NOT_SUPPORTED = 124;
pub const X509_R_NAME_TOO_LONG = 134;
pub const X509_R_NEWER_CRL_NOT_NEWER = 132;
pub const X509_R_NO_CERTIFICATE_FOUND = 135;
pub const X509_R_NO_CERTIFICATE_OR_CRL_FOUND = 136;
pub const X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105;
pub const X509_R_NO_CRL_FOUND = 137;
pub const X509_R_NO_CRL_NUMBER = 130;
pub const X509_R_PUBLIC_KEY_DECODE_ERROR = 125;
pub const X509_R_PUBLIC_KEY_ENCODE_ERROR = 126;
pub const X509_R_SHOULD_RETRY = 106;
pub const X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107;
pub const X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108;
pub const X509_R_UNKNOWN_KEY_TYPE = 117;
pub const X509_R_UNKNOWN_NID = 109;
pub const X509_R_UNKNOWN_PURPOSE_ID = 121;
pub const X509_R_UNKNOWN_TRUST_ID = 120;
pub const X509_R_UNSUPPORTED_ALGORITHM = 111;
pub const X509_R_WRONG_LOOKUP_TYPE = 112;
pub const X509_R_WRONG_TYPE = 122;
pub const X509_SIG_INFO_VALID = 0x1;
pub const X509_SIG_INFO_TLS = 0x2;
pub const X509_FILETYPE_PEM = 1;
pub const X509_FILETYPE_ASN1 = 2;
pub const X509_FILETYPE_DEFAULT = 3;
pub const X509v3_KU_DIGITAL_SIGNATURE = 0x0080;
pub const X509v3_KU_NON_REPUDIATION = 0x0040;
pub const X509v3_KU_KEY_ENCIPHERMENT = 0x0020;
pub const X509v3_KU_DATA_ENCIPHERMENT = 0x0010;
pub const X509v3_KU_KEY_AGREEMENT = 0x0008;
pub const X509v3_KU_KEY_CERT_SIGN = 0x0004;
pub const X509v3_KU_CRL_SIGN = 0x0002;
pub const X509v3_KU_ENCIPHER_ONLY = 0x0001;
pub const X509v3_KU_DECIPHER_ONLY = 0x8000;
pub const X509v3_KU_UNDEF = 0xffff;
pub const X509_EX_V_NETSCAPE_HACK = 0x8000;
pub const X509_EX_V_INIT = 0x0001;
pub const X509_TRUST_DEFAULT = 0;
pub const X509_TRUST_COMPAT = 1;
pub const X509_TRUST_SSL_CLIENT = 2;
pub const X509_TRUST_SSL_SERVER = 3;
pub const X509_TRUST_EMAIL = 4;
pub const X509_TRUST_OBJECT_SIGN = 5;
pub const X509_TRUST_OCSP_SIGN = 6;
pub const X509_TRUST_OCSP_REQUEST = 7;
pub const X509_TRUST_TSA = 8;
pub const X509_TRUST_MIN = 1;
pub const X509_TRUST_MAX = 8;
pub const X509_TRUST_DYNAMIC = @as(c_uint, 1) << 0;
pub const X509_TRUST_DYNAMIC_NAME = @as(c_uint, 1) << 1;
pub const X509_TRUST_NO_SS_COMPAT = @as(c_uint, 1) << 2;
pub const X509_TRUST_DO_SS_COMPAT = @as(c_uint, 1) << 3;
pub const X509_TRUST_OK_ANY_EKU = @as(c_uint, 1) << 4;
pub const X509_TRUST_TRUSTED = 1;
pub const X509_TRUST_REJECTED = 2;
pub const X509_TRUST_UNTRUSTED = 3;
pub const X509_FLAG_COMPAT = 0;
pub const X509_FLAG_NO_HEADER = @as(c_long, 1);
pub const X509_FLAG_NO_VERSION = @as(c_long, 1) << 1;
pub const X509_FLAG_NO_SERIAL = @as(c_long, 1) << 2;
pub const X509_FLAG_NO_SIGNAME = @as(c_long, 1) << 3;
pub const X509_FLAG_NO_ISSUER = @as(c_long, 1) << 4;
pub const X509_FLAG_NO_VALIDITY = @as(c_long, 1) << 5;
pub const X509_FLAG_NO_SUBJECT = @as(c_long, 1) << 6;
pub const X509_FLAG_NO_PUBKEY = @as(c_long, 1) << 7;
pub const X509_FLAG_NO_EXTENSIONS = @as(c_long, 1) << 8;
pub const X509_FLAG_NO_SIGDUMP = @as(c_long, 1) << 9;
pub const X509_FLAG_NO_AUX = @as(c_long, 1) << 10;
pub const X509_FLAG_NO_ATTRIBUTES = @as(c_long, 1) << 11;
pub const X509_FLAG_NO_IDS = @as(c_long, 1) << 12;
pub const XN_FLAG_SEP_MASK = 0xf << 16;
pub const XN_FLAG_COMPAT = 0;
pub const XN_FLAG_SEP_COMMA_PLUS = 1 << 16;
pub const XN_FLAG_SEP_CPLUS_SPC = 2 << 16;
pub const XN_FLAG_SEP_SPLUS_SPC = 3 << 16;
pub const XN_FLAG_SEP_MULTILINE = 4 << 16;
pub const XN_FLAG_DN_REV = 1 << 20;
pub const XN_FLAG_FN_MASK = 0x3 << 21;
pub const XN_FLAG_FN_SN = 0;
pub const XN_FLAG_FN_LN = 1 << 21;
pub const XN_FLAG_FN_OID = 2 << 21;
pub const XN_FLAG_FN_NONE = 3 << 21;
pub const XN_FLAG_SPC_EQ = 1 << 23;
pub const XN_FLAG_DUMP_UNKNOWN_FIELDS = 1 << 24;
pub const XN_FLAG_FN_ALIGN = 1 << 25;
pub const XN_FLAG_RFC2253 = (((ASN1_STRFLGS_RFC2253 | XN_FLAG_SEP_COMMA_PLUS) | XN_FLAG_DN_REV) | XN_FLAG_FN_SN) | XN_FLAG_DUMP_UNKNOWN_FIELDS;
pub const XN_FLAG_ONELINE = (((ASN1_STRFLGS_RFC2253 | ASN1_STRFLGS_ESC_QUOTE) | XN_FLAG_SEP_CPLUS_SPC) | XN_FLAG_SPC_EQ) | XN_FLAG_FN_SN;
pub const XN_FLAG_MULTILINE = ((((ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB) | XN_FLAG_SEP_MULTILINE) | XN_FLAG_SPC_EQ) | XN_FLAG_FN_LN) | XN_FLAG_FN_ALIGN;
pub const LH_LOAD_MULT = 256;
pub const _LHASH = OPENSSL_LHASH;
pub const LHASH_NODE = OPENSSL_LH_NODE;
pub const lh_error = OPENSSL_LH_error;
pub const lh_new = OPENSSL_LH_new;
pub const lh_free = OPENSSL_LH_free;
pub const lh_insert = OPENSSL_LH_insert;
pub const lh_delete = OPENSSL_LH_delete;
pub const lh_retrieve = OPENSSL_LH_retrieve;
pub const lh_doall = OPENSSL_LH_doall;
pub const lh_doall_arg = OPENSSL_LH_doall_arg;
pub const lh_strhash = OPENSSL_LH_strhash;
pub const lh_num_items = OPENSSL_LH_num_items;
pub const lh_stats = OPENSSL_LH_stats;
pub const lh_node_stats = OPENSSL_LH_node_stats;
pub const lh_node_usage_stats = OPENSSL_LH_node_usage_stats;
pub const lh_stats_bio = OPENSSL_LH_stats_bio;
pub const lh_node_stats_bio = OPENSSL_LH_node_stats_bio;
pub const lh_node_usage_stats_bio = OPENSSL_LH_node_usage_stats_bio;
pub inline fn IMPLEMENT_LHASH_DOALL_ARG(type_1: anytype, argtype: anytype) @TypeOf(int_implement_lhash_doall(type_1, argtype, type_1)) {
    return int_implement_lhash_doall(type_1, argtype, type_1);
}
pub const X509_LU_RETRY = -1;
pub const X509_LU_FAIL = 0;
pub inline fn X509_STORE_CTX_set_app_data(ctx: anytype, data: anytype) @TypeOf(X509_STORE_CTX_set_ex_data(ctx, 0, data)) {
    return X509_STORE_CTX_set_ex_data(ctx, 0, data);
}
pub inline fn X509_STORE_CTX_get_app_data(ctx: anytype) @TypeOf(X509_STORE_CTX_get_ex_data(ctx, 0)) {
    return X509_STORE_CTX_get_ex_data(ctx, 0);
}
pub const X509_L_FILE_LOAD = 1;
pub const X509_L_ADD_DIR = 2;
pub inline fn X509_LOOKUP_load_file(x: anytype, name: anytype, type_1: anytype) @TypeOf(X509_LOOKUP_ctrl(x, X509_L_FILE_LOAD, name, (@import("std").meta.cast(c_long, type_1)), NULL)) {
    return X509_LOOKUP_ctrl(x, X509_L_FILE_LOAD, name, (@import("std").meta.cast(c_long, type_1)), NULL);
}
pub inline fn X509_LOOKUP_add_dir(x: anytype, name: anytype, type_1: anytype) @TypeOf(X509_LOOKUP_ctrl(x, X509_L_ADD_DIR, name, (@import("std").meta.cast(c_long, type_1)), NULL)) {
    return X509_LOOKUP_ctrl(x, X509_L_ADD_DIR, name, (@import("std").meta.cast(c_long, type_1)), NULL);
}
pub const X509_V_OK = 0;
pub const X509_V_ERR_UNSPECIFIED = 1;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2;
pub const X509_V_ERR_UNABLE_TO_GET_CRL = 3;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4;
pub const X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5;
pub const X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6;
pub const X509_V_ERR_CERT_SIGNATURE_FAILURE = 7;
pub const X509_V_ERR_CRL_SIGNATURE_FAILURE = 8;
pub const X509_V_ERR_CERT_NOT_YET_VALID = 9;
pub const X509_V_ERR_CERT_HAS_EXPIRED = 10;
pub const X509_V_ERR_CRL_NOT_YET_VALID = 11;
pub const X509_V_ERR_CRL_HAS_EXPIRED = 12;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13;
pub const X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14;
pub const X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15;
pub const X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16;
pub const X509_V_ERR_OUT_OF_MEM = 17;
pub const X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18;
pub const X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19;
pub const X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20;
pub const X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21;
pub const X509_V_ERR_CERT_CHAIN_TOO_LONG = 22;
pub const X509_V_ERR_CERT_REVOKED = 23;
pub const X509_V_ERR_INVALID_CA = 24;
pub const X509_V_ERR_PATH_LENGTH_EXCEEDED = 25;
pub const X509_V_ERR_INVALID_PURPOSE = 26;
pub const X509_V_ERR_CERT_UNTRUSTED = 27;
pub const X509_V_ERR_CERT_REJECTED = 28;
pub const X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29;
pub const X509_V_ERR_AKID_SKID_MISMATCH = 30;
pub const X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31;
pub const X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32;
pub const X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33;
pub const X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34;
pub const X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35;
pub const X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36;
pub const X509_V_ERR_INVALID_NON_CA = 37;
pub const X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38;
pub const X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39;
pub const X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40;
pub const X509_V_ERR_INVALID_EXTENSION = 41;
pub const X509_V_ERR_INVALID_POLICY_EXTENSION = 42;
pub const X509_V_ERR_NO_EXPLICIT_POLICY = 43;
pub const X509_V_ERR_DIFFERENT_CRL_SCOPE = 44;
pub const X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45;
pub const X509_V_ERR_UNNESTED_RESOURCE = 46;
pub const X509_V_ERR_PERMITTED_VIOLATION = 47;
pub const X509_V_ERR_EXCLUDED_VIOLATION = 48;
pub const X509_V_ERR_SUBTREE_MINMAX = 49;
pub const X509_V_ERR_APPLICATION_VERIFICATION = 50;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51;
pub const X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52;
pub const X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53;
pub const X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54;
pub const X509_V_ERR_PATH_LOOP = 55;
pub const X509_V_ERR_SUITE_B_INVALID_VERSION = 56;
pub const X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57;
pub const X509_V_ERR_SUITE_B_INVALID_CURVE = 58;
pub const X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59;
pub const X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60;
pub const X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61;
pub const X509_V_ERR_HOSTNAME_MISMATCH = 62;
pub const X509_V_ERR_EMAIL_MISMATCH = 63;
pub const X509_V_ERR_IP_ADDRESS_MISMATCH = 64;
pub const X509_V_ERR_DANE_NO_MATCH = 65;
pub const X509_V_ERR_EE_KEY_TOO_SMALL = 66;
pub const X509_V_ERR_CA_KEY_TOO_SMALL = 67;
pub const X509_V_ERR_CA_MD_TOO_WEAK = 68;
pub const X509_V_ERR_INVALID_CALL = 69;
pub const X509_V_ERR_STORE_LOOKUP = 70;
pub const X509_V_ERR_NO_VALID_SCTS = 71;
pub const X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = 72;
pub const X509_V_ERR_OCSP_VERIFY_NEEDED = 73;
pub const X509_V_ERR_OCSP_VERIFY_FAILED = 74;
pub const X509_V_ERR_OCSP_CERT_UNKNOWN = 75;
pub const X509_V_FLAG_CB_ISSUER_CHECK = 0x0;
pub const X509_V_FLAG_USE_CHECK_TIME = 0x2;
pub const X509_V_FLAG_CRL_CHECK = 0x4;
pub const X509_V_FLAG_CRL_CHECK_ALL = 0x8;
pub const X509_V_FLAG_IGNORE_CRITICAL = 0x10;
pub const X509_V_FLAG_X509_STRICT = 0x20;
pub const X509_V_FLAG_ALLOW_PROXY_CERTS = 0x40;
pub const X509_V_FLAG_POLICY_CHECK = 0x80;
pub const X509_V_FLAG_EXPLICIT_POLICY = 0x100;
pub const X509_V_FLAG_INHIBIT_ANY = 0x200;
pub const X509_V_FLAG_INHIBIT_MAP = 0x400;
pub const X509_V_FLAG_NOTIFY_POLICY = 0x800;
pub const X509_V_FLAG_EXTENDED_CRL_SUPPORT = 0x1000;
pub const X509_V_FLAG_USE_DELTAS = 0x2000;
pub const X509_V_FLAG_CHECK_SS_SIGNATURE = 0x4000;
pub const X509_V_FLAG_TRUSTED_FIRST = 0x8000;
pub const X509_V_FLAG_SUITEB_128_LOS_ONLY = 0x10000;
pub const X509_V_FLAG_SUITEB_192_LOS = 0x20000;
pub const X509_V_FLAG_SUITEB_128_LOS = 0x30000;
pub const X509_V_FLAG_PARTIAL_CHAIN = 0x80000;
pub const X509_V_FLAG_NO_ALT_CHAINS = 0x100000;
pub const X509_V_FLAG_NO_CHECK_TIME = 0x200000;
pub const X509_VP_FLAG_DEFAULT = 0x1;
pub const X509_VP_FLAG_OVERWRITE = 0x2;
pub const X509_VP_FLAG_RESET_FLAGS = 0x4;
pub const X509_VP_FLAG_LOCKED = 0x8;
pub const X509_VP_FLAG_ONCE = 0x10;
pub const X509_V_FLAG_POLICY_MASK = ((X509_V_FLAG_POLICY_CHECK | X509_V_FLAG_EXPLICIT_POLICY) | X509_V_FLAG_INHIBIT_ANY) | X509_V_FLAG_INHIBIT_MAP;
pub inline fn X509_STORE_set_verify_func(ctx: anytype, func: anytype) @TypeOf(X509_STORE_set_verify(ctx, func)) {
    return X509_STORE_set_verify(ctx, func);
}
pub inline fn X509_STORE_set_verify_cb_func(ctx: anytype, func: anytype) @TypeOf(X509_STORE_set_verify_cb(ctx, func)) {
    return X509_STORE_set_verify_cb(ctx, func);
}
pub inline fn X509_STORE_set_lookup_crls_cb(ctx: anytype, func: anytype) @TypeOf(X509_STORE_set_lookup_crls(ctx, func)) {
    return X509_STORE_set_lookup_crls(ctx, func);
}
pub inline fn X509_STORE_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE, l, p, newf, dupf, freef);
}
pub const X509_STORE_CTX_get_chain = X509_STORE_CTX_get0_chain;
pub const X509_STORE_CTX_set_chain = X509_STORE_CTX_set0_untrusted;
pub const X509_STORE_CTX_trusted_stack = X509_STORE_CTX_set0_trusted_stack;
pub const X509_STORE_get_by_subject = X509_STORE_CTX_get_by_subject;
pub const X509_STORE_get1_certs = X509_STORE_CTX_get1_certs;
pub const X509_STORE_get1_crls = X509_STORE_CTX_get1_crls;
pub const X509_STORE_get1_cert = X509_STORE_CTX_get1_certs;
pub const X509_STORE_get1_crl = X509_STORE_CTX_get1_crls;
pub inline fn X509_STORE_CTX_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE_CTX, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE_CTX, l, p, newf, dupf, freef);
}
pub const DANE_FLAG_NO_DANE_EE_NAMECHECKS = @as(c_long, 1) << 0;
pub const X509_PCY_TREE_FAILURE = -2;
pub const X509_PCY_TREE_INVALID = -1;
pub const X509_PCY_TREE_INTERNAL = 0;
pub const X509_PCY_TREE_VALID = 1;
pub const X509_PCY_TREE_EMPTY = 2;
pub const X509_PCY_TREE_EXPLICIT = 4;
pub const PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 136;
pub const PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 135;
pub const PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 118;
pub const PKCS7_F_PKCS7_ADD_CERTIFICATE = 100;
pub const PKCS7_F_PKCS7_ADD_CRL = 101;
pub const PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 102;
pub const PKCS7_F_PKCS7_ADD_SIGNATURE = 131;
pub const PKCS7_F_PKCS7_ADD_SIGNER = 103;
pub const PKCS7_F_PKCS7_BIO_ADD_DIGEST = 125;
pub const PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 138;
pub const PKCS7_F_PKCS7_CTRL = 104;
pub const PKCS7_F_PKCS7_DATADECODE = 112;
pub const PKCS7_F_PKCS7_DATAFINAL = 128;
pub const PKCS7_F_PKCS7_DATAINIT = 105;
pub const PKCS7_F_PKCS7_DATAVERIFY = 107;
pub const PKCS7_F_PKCS7_DECRYPT = 114;
pub const PKCS7_F_PKCS7_DECRYPT_RINFO = 133;
pub const PKCS7_F_PKCS7_ENCODE_RINFO = 132;
pub const PKCS7_F_PKCS7_ENCRYPT = 115;
pub const PKCS7_F_PKCS7_FINAL = 134;
pub const PKCS7_F_PKCS7_FIND_DIGEST = 127;
pub const PKCS7_F_PKCS7_GET0_SIGNERS = 124;
pub const PKCS7_F_PKCS7_RECIP_INFO_SET = 130;
pub const PKCS7_F_PKCS7_SET_CIPHER = 108;
pub const PKCS7_F_PKCS7_SET_CONTENT = 109;
pub const PKCS7_F_PKCS7_SET_DIGEST = 126;
pub const PKCS7_F_PKCS7_SET_TYPE = 110;
pub const PKCS7_F_PKCS7_SIGN = 116;
pub const PKCS7_F_PKCS7_SIGNATUREVERIFY = 113;
pub const PKCS7_F_PKCS7_SIGNER_INFO_SET = 129;
pub const PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 139;
pub const PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 137;
pub const PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 119;
pub const PKCS7_F_PKCS7_VERIFY = 117;
pub const PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117;
pub const PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144;
pub const PKCS7_R_CIPHER_NOT_INITIALIZED = 116;
pub const PKCS7_R_CONTENT_AND_DATA_PRESENT = 118;
pub const PKCS7_R_CTRL_ERROR = 152;
pub const PKCS7_R_DECRYPT_ERROR = 119;
pub const PKCS7_R_DIGEST_FAILURE = 101;
pub const PKCS7_R_ENCRYPTION_CTRL_FAILURE = 149;
pub const PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 150;
pub const PKCS7_R_ERROR_ADDING_RECIPIENT = 120;
pub const PKCS7_R_ERROR_SETTING_CIPHER = 121;
pub const PKCS7_R_INVALID_NULL_POINTER = 143;
pub const PKCS7_R_INVALID_SIGNED_DATA_TYPE = 155;
pub const PKCS7_R_NO_CONTENT = 122;
pub const PKCS7_R_NO_DEFAULT_DIGEST = 151;
pub const PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = 154;
pub const PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115;
pub const PKCS7_R_NO_SIGNATURES_ON_DATA = 123;
pub const PKCS7_R_NO_SIGNERS = 142;
pub const PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104;
pub const PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124;
pub const PKCS7_R_PKCS7_ADD_SIGNER_ERROR = 153;
pub const PKCS7_R_PKCS7_DATASIGN = 145;
pub const PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127;
pub const PKCS7_R_SIGNATURE_FAILURE = 105;
pub const PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128;
pub const PKCS7_R_SIGNING_CTRL_FAILURE = 147;
pub const PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 148;
pub const PKCS7_R_SMIME_TEXT_ERROR = 129;
pub const PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106;
pub const PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107;
pub const PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108;
pub const PKCS7_R_UNKNOWN_DIGEST_TYPE = 109;
pub const PKCS7_R_UNKNOWN_OPERATION = 110;
pub const PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111;
pub const PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112;
pub const PKCS7_R_WRONG_CONTENT_TYPE = 113;
pub const PKCS7_R_WRONG_PKCS7_TYPE = 114;
pub const PKCS7_S_HEADER = 0;
pub const PKCS7_S_BODY = 1;
pub const PKCS7_S_TAIL = 2;
pub const PKCS7_OP_SET_DETACHED_SIGNATURE = 1;
pub const PKCS7_OP_GET_DETACHED_SIGNATURE = 2;
pub inline fn PKCS7_get_signed_attributes(si: anytype) @TypeOf(si.*.auth_attr) {
    return si.*.auth_attr;
}
pub inline fn PKCS7_get_attributes(si: anytype) @TypeOf(si.*.unauth_attr) {
    return si.*.unauth_attr;
}
pub inline fn PKCS7_type_is_signed(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_signed) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_signed;
}
pub inline fn PKCS7_type_is_encrypted(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_encrypted) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_encrypted;
}
pub inline fn PKCS7_type_is_enveloped(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_enveloped) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_enveloped;
}
pub inline fn PKCS7_type_is_signedAndEnveloped(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_signedAndEnveloped) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_signedAndEnveloped;
}
pub inline fn PKCS7_type_is_data(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_data) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_data;
}
pub inline fn PKCS7_type_is_digest(a: anytype) @TypeOf(OBJ_obj2nid(a.*.type) == NID_pkcs7_digest) {
    return OBJ_obj2nid(a.*.type) == NID_pkcs7_digest;
}
pub inline fn PKCS7_set_detached(p: anytype, v: anytype) @TypeOf(PKCS7_ctrl(p, PKCS7_OP_SET_DETACHED_SIGNATURE, v, NULL)) {
    return PKCS7_ctrl(p, PKCS7_OP_SET_DETACHED_SIGNATURE, v, NULL);
}
pub inline fn PKCS7_get_detached(p: anytype) @TypeOf(PKCS7_ctrl(p, PKCS7_OP_GET_DETACHED_SIGNATURE, 0, NULL)) {
    return PKCS7_ctrl(p, PKCS7_OP_GET_DETACHED_SIGNATURE, 0, NULL);
}
pub inline fn PKCS7_is_detached(p7: anytype) @TypeOf((PKCS7_type_is_signed(p7) != 0) and (PKCS7_get_detached(p7) != 0)) {
    return (PKCS7_type_is_signed(p7) != 0) and (PKCS7_get_detached(p7) != 0);
}
pub const PKCS7_TEXT = 0x1;
pub const PKCS7_NOCERTS = 0x2;
pub const PKCS7_NOSIGS = 0x4;
pub const PKCS7_NOCHAIN = 0x8;
pub const PKCS7_NOINTERN = 0x10;
pub const PKCS7_NOVERIFY = 0x20;
pub const PKCS7_DETACHED = 0x40;
pub const PKCS7_BINARY = 0x80;
pub const PKCS7_NOATTR = 0x100;
pub const PKCS7_NOSMIMECAP = 0x200;
pub const PKCS7_NOOLDMIMETYPE = 0x400;
pub const PKCS7_CRLFEOL = 0x800;
pub const PKCS7_STREAM = 0x1000;
pub const PKCS7_NOCRL = 0x2000;
pub const PKCS7_PARTIAL = 0x4000;
pub const PKCS7_REUSE_DIGEST = 0x8000;
pub const PKCS7_NO_DUAL_CONTENT = 0x10000;
pub const SMIME_TEXT = PKCS7_TEXT;
pub const SMIME_NOCERTS = PKCS7_NOCERTS;
pub const SMIME_NOSIGS = PKCS7_NOSIGS;
pub const SMIME_NOCHAIN = PKCS7_NOCHAIN;
pub const SMIME_NOINTERN = PKCS7_NOINTERN;
pub const SMIME_NOVERIFY = PKCS7_NOVERIFY;
pub const SMIME_DETACHED = PKCS7_DETACHED;
pub const SMIME_BINARY = PKCS7_BINARY;
pub const SMIME_NOATTR = PKCS7_NOATTR;
pub const SMIME_ASCIICRLF = 0x80000;
pub const X509_EXT_PACK_UNKNOWN = 1;
pub const X509_EXT_PACK_STRING = 2;
pub inline fn X509_extract_key(x: anytype) @TypeOf(X509_get_pubkey(x)) {
    return X509_get_pubkey(x);
}
pub inline fn X509_REQ_extract_key(a: anytype) @TypeOf(X509_REQ_get_pubkey(a)) {
    return X509_REQ_get_pubkey(a);
}
pub inline fn X509_name_cmp(a: anytype, b: anytype) @TypeOf(X509_NAME_cmp(a, b)) {
    return X509_NAME_cmp(a, b);
}
pub inline fn X509_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef);
}
pub const X509_get_notBefore = X509_getm_notBefore;
pub const X509_get_notAfter = X509_getm_notAfter;
pub const X509_set_notBefore = X509_set1_notBefore;
pub const X509_set_notAfter = X509_set1_notAfter;
pub const X509_CRL_set_lastUpdate = X509_CRL_set1_lastUpdate;
pub const X509_CRL_set_nextUpdate = X509_CRL_set1_nextUpdate;
pub const PEM_F_B2I_DSS = 127;
pub const PEM_F_B2I_PVK_BIO = 128;
pub const PEM_F_B2I_RSA = 129;
pub const PEM_F_CHECK_BITLEN_DSA = 130;
pub const PEM_F_CHECK_BITLEN_RSA = 131;
pub const PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 120;
pub const PEM_F_D2I_PKCS8PRIVATEKEY_FP = 121;
pub const PEM_F_DO_B2I = 132;
pub const PEM_F_DO_B2I_BIO = 133;
pub const PEM_F_DO_BLOB_HEADER = 134;
pub const PEM_F_DO_I2B = 146;
pub const PEM_F_DO_PK8PKEY = 126;
pub const PEM_F_DO_PK8PKEY_FP = 125;
pub const PEM_F_DO_PVK_BODY = 135;
pub const PEM_F_DO_PVK_HEADER = 136;
pub const PEM_F_GET_HEADER_AND_DATA = 143;
pub const PEM_F_GET_NAME = 144;
pub const PEM_F_I2B_PVK = 137;
pub const PEM_F_I2B_PVK_BIO = 138;
pub const PEM_F_LOAD_IV = 101;
pub const PEM_F_PEM_ASN1_READ = 102;
pub const PEM_F_PEM_ASN1_READ_BIO = 103;
pub const PEM_F_PEM_ASN1_WRITE = 104;
pub const PEM_F_PEM_ASN1_WRITE_BIO = 105;
pub const PEM_F_PEM_DEF_CALLBACK = 100;
pub const PEM_F_PEM_DO_HEADER = 106;
pub const PEM_F_PEM_GET_EVP_CIPHER_INFO = 107;
pub const PEM_F_PEM_READ = 108;
pub const PEM_F_PEM_READ_BIO = 109;
pub const PEM_F_PEM_READ_BIO_DHPARAMS = 141;
pub const PEM_F_PEM_READ_BIO_EX = 145;
pub const PEM_F_PEM_READ_BIO_PARAMETERS = 140;
pub const PEM_F_PEM_READ_BIO_PRIVATEKEY = 123;
pub const PEM_F_PEM_READ_DHPARAMS = 142;
pub const PEM_F_PEM_READ_PRIVATEKEY = 124;
pub const PEM_F_PEM_SIGNFINAL = 112;
pub const PEM_F_PEM_WRITE = 113;
pub const PEM_F_PEM_WRITE_BIO = 114;
pub const PEM_F_PEM_WRITE_PRIVATEKEY = 139;
pub const PEM_F_PEM_X509_INFO_READ = 115;
pub const PEM_F_PEM_X509_INFO_READ_BIO = 116;
pub const PEM_F_PEM_X509_INFO_WRITE_BIO = 117;
pub const PEM_R_BAD_BASE64_DECODE = 100;
pub const PEM_R_BAD_DECRYPT = 101;
pub const PEM_R_BAD_END_LINE = 102;
pub const PEM_R_BAD_IV_CHARS = 103;
pub const PEM_R_BAD_MAGIC_NUMBER = 116;
pub const PEM_R_BAD_PASSWORD_READ = 104;
pub const PEM_R_BAD_VERSION_NUMBER = 117;
pub const PEM_R_BIO_WRITE_FAILURE = 118;
pub const PEM_R_CIPHER_IS_NULL = 127;
pub const PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115;
pub const PEM_R_EXPECTING_PRIVATE_KEY_BLOB = 119;
pub const PEM_R_EXPECTING_PUBLIC_KEY_BLOB = 120;
pub const PEM_R_HEADER_TOO_LONG = 128;
pub const PEM_R_INCONSISTENT_HEADER = 121;
pub const PEM_R_KEYBLOB_HEADER_PARSE_ERROR = 122;
pub const PEM_R_KEYBLOB_TOO_SHORT = 123;
pub const PEM_R_MISSING_DEK_IV = 129;
pub const PEM_R_NOT_DEK_INFO = 105;
pub const PEM_R_NOT_ENCRYPTED = 106;
pub const PEM_R_NOT_PROC_TYPE = 107;
pub const PEM_R_NO_START_LINE = 108;
pub const PEM_R_PROBLEMS_GETTING_PASSWORD = 109;
pub const PEM_R_PVK_DATA_TOO_SHORT = 124;
pub const PEM_R_PVK_TOO_SHORT = 125;
pub const PEM_R_READ_KEY = 111;
pub const PEM_R_SHORT_HEADER = 112;
pub const PEM_R_UNEXPECTED_DEK_IV = 130;
pub const PEM_R_UNSUPPORTED_CIPHER = 113;
pub const PEM_R_UNSUPPORTED_ENCRYPTION = 114;
pub const PEM_R_UNSUPPORTED_KEY_COMPONENTS = 126;
pub const PEM_BUFSIZE = 1024;
pub const PEM_STRING_X509_OLD = "X509 CERTIFICATE";
pub const PEM_STRING_X509 = "CERTIFICATE";
pub const PEM_STRING_X509_TRUSTED = "TRUSTED CERTIFICATE";
pub const PEM_STRING_X509_REQ_OLD = "NEW CERTIFICATE REQUEST";
pub const PEM_STRING_X509_REQ = "CERTIFICATE REQUEST";
pub const PEM_STRING_X509_CRL = "X509 CRL";
pub const PEM_STRING_EVP_PKEY = "ANY PRIVATE KEY";
pub const PEM_STRING_PUBLIC = "PUBLIC KEY";
pub const PEM_STRING_RSA = "RSA PRIVATE KEY";
pub const PEM_STRING_RSA_PUBLIC = "RSA PUBLIC KEY";
pub const PEM_STRING_DSA = "DSA PRIVATE KEY";
pub const PEM_STRING_DSA_PUBLIC = "DSA PUBLIC KEY";
pub const PEM_STRING_PKCS7 = "PKCS7";
pub const PEM_STRING_PKCS7_SIGNED = "PKCS #7 SIGNED DATA";
pub const PEM_STRING_PKCS8 = "ENCRYPTED PRIVATE KEY";
pub const PEM_STRING_PKCS8INF = "PRIVATE KEY";
pub const PEM_STRING_DHPARAMS = "DH PARAMETERS";
pub const PEM_STRING_DHXPARAMS = "X9.42 DH PARAMETERS";
pub const PEM_STRING_SSL_SESSION = "SSL SESSION PARAMETERS";
pub const PEM_STRING_DSAPARAMS = "DSA PARAMETERS";
pub const PEM_STRING_ECDSA_PUBLIC = "ECDSA PUBLIC KEY";
pub const PEM_STRING_ECPARAMETERS = "EC PARAMETERS";
pub const PEM_STRING_ECPRIVATEKEY = "EC PRIVATE KEY";
pub const PEM_STRING_PARAMETERS = "PARAMETERS";
pub const PEM_STRING_CMS = "CMS";
pub const PEM_TYPE_ENCRYPTED = 10;
pub const PEM_TYPE_MIC_ONLY = 20;
pub const PEM_TYPE_MIC_CLEAR = 30;
pub const PEM_TYPE_CLEAR = 40;
pub const PEM_FLAG_SECURE = 0x1;
pub const PEM_FLAG_EAY_COMPATIBLE = 0x2;
pub const PEM_FLAG_ONLY_B64 = 0x4;
pub const HMAC_MAX_MD_CBLOCK = 128;
pub const OSSL_ASYNC_FD = c_int;
pub const OSSL_BAD_ASYNC_FD = -1;
pub const ASYNC_F_ASYNC_CTX_NEW = 100;
pub const ASYNC_F_ASYNC_INIT_THREAD = 101;
pub const ASYNC_F_ASYNC_JOB_NEW = 102;
pub const ASYNC_F_ASYNC_PAUSE_JOB = 103;
pub const ASYNC_F_ASYNC_START_FUNC = 104;
pub const ASYNC_F_ASYNC_START_JOB = 105;
pub const ASYNC_F_ASYNC_WAIT_CTX_SET_WAIT_FD = 106;
pub const ASYNC_R_FAILED_TO_SET_POOL = 101;
pub const ASYNC_R_FAILED_TO_SWAP_CONTEXT = 102;
pub const ASYNC_R_INIT_FAILED = 105;
pub const ASYNC_R_INVALID_POOL_SIZE = 103;
pub const ASYNC_ERR = 0;
pub const ASYNC_NO_JOBS = 1;
pub const ASYNC_PAUSE = 2;
pub const ASYNC_FINISH = 3;
pub const CT_F_CTLOG_NEW = 117;
pub const CT_F_CTLOG_NEW_FROM_BASE64 = 118;
pub const CT_F_CTLOG_NEW_FROM_CONF = 119;
pub const CT_F_CTLOG_STORE_LOAD_CTX_NEW = 122;
pub const CT_F_CTLOG_STORE_LOAD_FILE = 123;
pub const CT_F_CTLOG_STORE_LOAD_LOG = 130;
pub const CT_F_CTLOG_STORE_NEW = 131;
pub const CT_F_CT_BASE64_DECODE = 124;
pub const CT_F_CT_POLICY_EVAL_CTX_NEW = 133;
pub const CT_F_CT_V1_LOG_ID_FROM_PKEY = 125;
pub const CT_F_I2O_SCT = 107;
pub const CT_F_I2O_SCT_LIST = 108;
pub const CT_F_I2O_SCT_SIGNATURE = 109;
pub const CT_F_O2I_SCT = 110;
pub const CT_F_O2I_SCT_LIST = 111;
pub const CT_F_O2I_SCT_SIGNATURE = 112;
pub const CT_F_SCT_CTX_NEW = 126;
pub const CT_F_SCT_CTX_VERIFY = 128;
pub const CT_F_SCT_NEW = 100;
pub const CT_F_SCT_NEW_FROM_BASE64 = 127;
pub const CT_F_SCT_SET0_LOG_ID = 101;
pub const CT_F_SCT_SET1_EXTENSIONS = 114;
pub const CT_F_SCT_SET1_LOG_ID = 115;
pub const CT_F_SCT_SET1_SIGNATURE = 116;
pub const CT_F_SCT_SET_LOG_ENTRY_TYPE = 102;
pub const CT_F_SCT_SET_SIGNATURE_NID = 103;
pub const CT_F_SCT_SET_VERSION = 104;
pub const CT_R_BASE64_DECODE_ERROR = 108;
pub const CT_R_INVALID_LOG_ID_LENGTH = 100;
pub const CT_R_LOG_CONF_INVALID = 109;
pub const CT_R_LOG_CONF_INVALID_KEY = 110;
pub const CT_R_LOG_CONF_MISSING_DESCRIPTION = 111;
pub const CT_R_LOG_CONF_MISSING_KEY = 112;
pub const CT_R_LOG_KEY_INVALID = 113;
pub const CT_R_SCT_FUTURE_TIMESTAMP = 116;
pub const CT_R_SCT_INVALID = 104;
pub const CT_R_SCT_INVALID_SIGNATURE = 107;
pub const CT_R_SCT_LIST_INVALID = 105;
pub const CT_R_SCT_LOG_ID_MISMATCH = 114;
pub const CT_R_SCT_NOT_SET = 106;
pub const CT_R_SCT_UNSUPPORTED_VERSION = 115;
pub const CT_R_UNRECOGNIZED_SIGNATURE_NID = 101;
pub const CT_R_UNSUPPORTED_ENTRY_TYPE = 102;
pub const CT_R_UNSUPPORTED_VERSION = 103;
pub const SCT_MIN_RSA_BITS = 2048;
pub const CT_V1_HASHLEN = SHA256_DIGEST_LENGTH;
pub const SSL_F_ADD_CLIENT_KEY_SHARE_EXT = 438;
pub const SSL_F_ADD_KEY_SHARE = 512;
pub const SSL_F_BYTES_TO_CIPHER_LIST = 519;
pub const SSL_F_CHECK_SUITEB_CIPHER_LIST = 331;
pub const SSL_F_CIPHERSUITE_CB = 622;
pub const SSL_F_CONSTRUCT_CA_NAMES = 552;
pub const SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS = 553;
pub const SSL_F_CONSTRUCT_STATEFUL_TICKET = 636;
pub const SSL_F_CONSTRUCT_STATELESS_TICKET = 637;
pub const SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH = 539;
pub const SSL_F_CREATE_TICKET_PREQUEL = 638;
pub const SSL_F_CT_MOVE_SCTS = 345;
pub const SSL_F_CT_STRICT = 349;
pub const SSL_F_CUSTOM_EXT_ADD = 554;
pub const SSL_F_CUSTOM_EXT_PARSE = 555;
pub const SSL_F_D2I_SSL_SESSION = 103;
pub const SSL_F_DANE_CTX_ENABLE = 347;
pub const SSL_F_DANE_MTYPE_SET = 393;
pub const SSL_F_DANE_TLSA_ADD = 394;
pub const SSL_F_DERIVE_SECRET_KEY_AND_IV = 514;
pub const SSL_F_DO_DTLS1_WRITE = 245;
pub const SSL_F_DO_SSL3_WRITE = 104;
pub const SSL_F_DTLS1_BUFFER_RECORD = 247;
pub const SSL_F_DTLS1_CHECK_TIMEOUT_NUM = 318;
pub const SSL_F_DTLS1_HEARTBEAT = 305;
pub const SSL_F_DTLS1_HM_FRAGMENT_NEW = 623;
pub const SSL_F_DTLS1_PREPROCESS_FRAGMENT = 288;
pub const SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS = 424;
pub const SSL_F_DTLS1_PROCESS_RECORD = 257;
pub const SSL_F_DTLS1_READ_BYTES = 258;
pub const SSL_F_DTLS1_READ_FAILED = 339;
pub const SSL_F_DTLS1_RETRANSMIT_MESSAGE = 390;
pub const SSL_F_DTLS1_WRITE_APP_DATA_BYTES = 268;
pub const SSL_F_DTLS1_WRITE_BYTES = 545;
pub const SSL_F_DTLSV1_LISTEN = 350;
pub const SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 371;
pub const SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST = 385;
pub const SSL_F_DTLS_GET_REASSEMBLED_MESSAGE = 370;
pub const SSL_F_DTLS_PROCESS_HELLO_VERIFY = 386;
pub const SSL_F_DTLS_RECORD_LAYER_NEW = 635;
pub const SSL_F_DTLS_WAIT_FOR_DRY = 592;
pub const SSL_F_EARLY_DATA_COUNT_OK = 532;
pub const SSL_F_FINAL_EARLY_DATA = 556;
pub const SSL_F_FINAL_EC_PT_FORMATS = 485;
pub const SSL_F_FINAL_EMS = 486;
pub const SSL_F_FINAL_KEY_SHARE = 503;
pub const SSL_F_FINAL_MAXFRAGMENTLEN = 557;
pub const SSL_F_FINAL_RENEGOTIATE = 483;
pub const SSL_F_FINAL_SERVER_NAME = 558;
pub const SSL_F_FINAL_SIG_ALGS = 497;
pub const SSL_F_GET_CERT_VERIFY_TBS_DATA = 588;
pub const SSL_F_NSS_KEYLOG_INT = 500;
pub const SSL_F_OPENSSL_INIT_SSL = 342;
pub const SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION = 436;
pub const SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION = 598;
pub const SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE = 430;
pub const SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE = 593;
pub const SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE = 594;
pub const SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION = 417;
pub const SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION = 599;
pub const SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION = 437;
pub const SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION = 600;
pub const SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE = 431;
pub const SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE = 601;
pub const SSL_F_OSSL_STATEM_SERVER_POST_WORK = 602;
pub const SSL_F_OSSL_STATEM_SERVER_PRE_WORK = 640;
pub const SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE = 603;
pub const SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION = 418;
pub const SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION = 604;
pub const SSL_F_PARSE_CA_NAMES = 541;
pub const SSL_F_PITEM_NEW = 624;
pub const SSL_F_PQUEUE_NEW = 625;
pub const SSL_F_PROCESS_KEY_SHARE_EXT = 439;
pub const SSL_F_READ_STATE_MACHINE = 352;
pub const SSL_F_SET_CLIENT_CIPHERSUITE = 540;
pub const SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET = 595;
pub const SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET = 589;
pub const SSL_F_SRP_VERIFY_SERVER_PARAM = 596;
pub const SSL_F_SSL3_CHANGE_CIPHER_STATE = 129;
pub const SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = 130;
pub const SSL_F_SSL3_CTRL = 213;
pub const SSL_F_SSL3_CTX_CTRL = 133;
pub const SSL_F_SSL3_DIGEST_CACHED_RECORDS = 293;
pub const SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = 292;
pub const SSL_F_SSL3_ENC = 608;
pub const SSL_F_SSL3_FINAL_FINISH_MAC = 285;
pub const SSL_F_SSL3_FINISH_MAC = 587;
pub const SSL_F_SSL3_GENERATE_KEY_BLOCK = 238;
pub const SSL_F_SSL3_GENERATE_MASTER_SECRET = 388;
pub const SSL_F_SSL3_GET_RECORD = 143;
pub const SSL_F_SSL3_INIT_FINISHED_MAC = 397;
pub const SSL_F_SSL3_OUTPUT_CERT_CHAIN = 147;
pub const SSL_F_SSL3_READ_BYTES = 148;
pub const SSL_F_SSL3_READ_N = 149;
pub const SSL_F_SSL3_SETUP_KEY_BLOCK = 157;
pub const SSL_F_SSL3_SETUP_READ_BUFFER = 156;
pub const SSL_F_SSL3_SETUP_WRITE_BUFFER = 291;
pub const SSL_F_SSL3_WRITE_BYTES = 158;
pub const SSL_F_SSL3_WRITE_PENDING = 159;
pub const SSL_F_SSL_ADD_CERT_CHAIN = 316;
pub const SSL_F_SSL_ADD_CERT_TO_BUF = 319;
pub const SSL_F_SSL_ADD_CERT_TO_WPACKET = 493;
pub const SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = 298;
pub const SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = 277;
pub const SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT = 307;
pub const SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = 215;
pub const SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = 216;
pub const SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = 299;
pub const SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = 278;
pub const SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT = 308;
pub const SSL_F_SSL_BAD_METHOD = 160;
pub const SSL_F_SSL_BUILD_CERT_CHAIN = 332;
pub const SSL_F_SSL_BYTES_TO_CIPHER_LIST = 161;
pub const SSL_F_SSL_CACHE_CIPHERLIST = 520;
pub const SSL_F_SSL_CERT_ADD0_CHAIN_CERT = 346;
pub const SSL_F_SSL_CERT_DUP = 221;
pub const SSL_F_SSL_CERT_NEW = 162;
pub const SSL_F_SSL_CERT_SET0_CHAIN = 340;
pub const SSL_F_SSL_CHECK_PRIVATE_KEY = 163;
pub const SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = 280;
pub const SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO = 606;
pub const SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG = 279;
pub const SSL_F_SSL_CHOOSE_CLIENT_VERSION = 607;
pub const SSL_F_SSL_CIPHER_DESCRIPTION = 626;
pub const SSL_F_SSL_CIPHER_LIST_TO_BYTES = 425;
pub const SSL_F_SSL_CIPHER_PROCESS_RULESTR = 230;
pub const SSL_F_SSL_CIPHER_STRENGTH_SORT = 231;
pub const SSL_F_SSL_CLEAR = 164;
pub const SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT = 627;
pub const SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = 165;
pub const SSL_F_SSL_CONF_CMD = 334;
pub const SSL_F_SSL_CREATE_CIPHER_LIST = 166;
pub const SSL_F_SSL_CTRL = 232;
pub const SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = 168;
pub const SSL_F_SSL_CTX_ENABLE_CT = 398;
pub const SSL_F_SSL_CTX_MAKE_PROFILES = 309;
pub const SSL_F_SSL_CTX_NEW = 169;
pub const SSL_F_SSL_CTX_SET_ALPN_PROTOS = 343;
pub const SSL_F_SSL_CTX_SET_CIPHER_LIST = 269;
pub const SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = 290;
pub const SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK = 396;
pub const SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = 219;
pub const SSL_F_SSL_CTX_SET_SSL_VERSION = 170;
pub const SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 551;
pub const SSL_F_SSL_CTX_USE_CERTIFICATE = 171;
pub const SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = 172;
pub const SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = 173;
pub const SSL_F_SSL_CTX_USE_PRIVATEKEY = 174;
pub const SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = 175;
pub const SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = 176;
pub const SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT = 272;
pub const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = 177;
pub const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = 178;
pub const SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = 179;
pub const SSL_F_SSL_CTX_USE_SERVERINFO = 336;
pub const SSL_F_SSL_CTX_USE_SERVERINFO_EX = 543;
pub const SSL_F_SSL_CTX_USE_SERVERINFO_FILE = 337;
pub const SSL_F_SSL_DANE_DUP = 403;
pub const SSL_F_SSL_DANE_ENABLE = 395;
pub const SSL_F_SSL_DERIVE = 590;
pub const SSL_F_SSL_DO_CONFIG = 391;
pub const SSL_F_SSL_DO_HANDSHAKE = 180;
pub const SSL_F_SSL_DUP_CA_LIST = 408;
pub const SSL_F_SSL_ENABLE_CT = 402;
pub const SSL_F_SSL_GENERATE_PKEY_GROUP = 559;
pub const SSL_F_SSL_GENERATE_SESSION_ID = 547;
pub const SSL_F_SSL_GET_NEW_SESSION = 181;
pub const SSL_F_SSL_GET_PREV_SESSION = 217;
pub const SSL_F_SSL_GET_SERVER_CERT_INDEX = 322;
pub const SSL_F_SSL_GET_SIGN_PKEY = 183;
pub const SSL_F_SSL_HANDSHAKE_HASH = 560;
pub const SSL_F_SSL_INIT_WBIO_BUFFER = 184;
pub const SSL_F_SSL_KEY_UPDATE = 515;
pub const SSL_F_SSL_LOAD_CLIENT_CA_FILE = 185;
pub const SSL_F_SSL_LOG_MASTER_SECRET = 498;
pub const SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE = 499;
pub const SSL_F_SSL_MODULE_INIT = 392;
pub const SSL_F_SSL_NEW = 186;
pub const SSL_F_SSL_NEXT_PROTO_VALIDATE = 565;
pub const SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = 300;
pub const SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = 302;
pub const SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT = 310;
pub const SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = 301;
pub const SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = 303;
pub const SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT = 311;
pub const SSL_F_SSL_PEEK = 270;
pub const SSL_F_SSL_PEEK_EX = 432;
pub const SSL_F_SSL_PEEK_INTERNAL = 522;
pub const SSL_F_SSL_READ = 223;
pub const SSL_F_SSL_READ_EARLY_DATA = 529;
pub const SSL_F_SSL_READ_EX = 434;
pub const SSL_F_SSL_READ_INTERNAL = 523;
pub const SSL_F_SSL_RENEGOTIATE = 516;
pub const SSL_F_SSL_RENEGOTIATE_ABBREVIATED = 546;
pub const SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT = 320;
pub const SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT = 321;
pub const SSL_F_SSL_SESSION_DUP = 348;
pub const SSL_F_SSL_SESSION_NEW = 189;
pub const SSL_F_SSL_SESSION_PRINT_FP = 190;
pub const SSL_F_SSL_SESSION_SET1_ID = 423;
pub const SSL_F_SSL_SESSION_SET1_ID_CONTEXT = 312;
pub const SSL_F_SSL_SET_ALPN_PROTOS = 344;
pub const SSL_F_SSL_SET_CERT = 191;
pub const SSL_F_SSL_SET_CERT_AND_KEY = 621;
pub const SSL_F_SSL_SET_CIPHER_LIST = 271;
pub const SSL_F_SSL_SET_CT_VALIDATION_CALLBACK = 399;
pub const SSL_F_SSL_SET_FD = 192;
pub const SSL_F_SSL_SET_PKEY = 193;
pub const SSL_F_SSL_SET_RFD = 194;
pub const SSL_F_SSL_SET_SESSION = 195;
pub const SSL_F_SSL_SET_SESSION_ID_CONTEXT = 218;
pub const SSL_F_SSL_SET_SESSION_TICKET_EXT = 294;
pub const SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 550;
pub const SSL_F_SSL_SET_WFD = 196;
pub const SSL_F_SSL_SHUTDOWN = 224;
pub const SSL_F_SSL_SRP_CTX_INIT = 313;
pub const SSL_F_SSL_START_ASYNC_JOB = 389;
pub const SSL_F_SSL_UNDEFINED_FUNCTION = 197;
pub const SSL_F_SSL_UNDEFINED_VOID_FUNCTION = 244;
pub const SSL_F_SSL_USE_CERTIFICATE = 198;
pub const SSL_F_SSL_USE_CERTIFICATE_ASN1 = 199;
pub const SSL_F_SSL_USE_CERTIFICATE_FILE = 200;
pub const SSL_F_SSL_USE_PRIVATEKEY = 201;
pub const SSL_F_SSL_USE_PRIVATEKEY_ASN1 = 202;
pub const SSL_F_SSL_USE_PRIVATEKEY_FILE = 203;
pub const SSL_F_SSL_USE_PSK_IDENTITY_HINT = 273;
pub const SSL_F_SSL_USE_RSAPRIVATEKEY = 204;
pub const SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = 205;
pub const SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = 206;
pub const SSL_F_SSL_VALIDATE_CT = 400;
pub const SSL_F_SSL_VERIFY_CERT_CHAIN = 207;
pub const SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE = 616;
pub const SSL_F_SSL_WRITE = 208;
pub const SSL_F_SSL_WRITE_EARLY_DATA = 526;
pub const SSL_F_SSL_WRITE_EARLY_FINISH = 527;
pub const SSL_F_SSL_WRITE_EX = 433;
pub const SSL_F_SSL_WRITE_INTERNAL = 524;
pub const SSL_F_STATE_MACHINE = 353;
pub const SSL_F_TLS12_CHECK_PEER_SIGALG = 333;
pub const SSL_F_TLS12_COPY_SIGALGS = 533;
pub const SSL_F_TLS13_CHANGE_CIPHER_STATE = 440;
pub const SSL_F_TLS13_ENC = 609;
pub const SSL_F_TLS13_FINAL_FINISH_MAC = 605;
pub const SSL_F_TLS13_GENERATE_SECRET = 591;
pub const SSL_F_TLS13_HKDF_EXPAND = 561;
pub const SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA = 617;
pub const SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA = 618;
pub const SSL_F_TLS13_SETUP_KEY_BLOCK = 441;
pub const SSL_F_TLS1_CHANGE_CIPHER_STATE = 209;
pub const SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS = 341;
pub const SSL_F_TLS1_ENC = 401;
pub const SSL_F_TLS1_EXPORT_KEYING_MATERIAL = 314;
pub const SSL_F_TLS1_GET_CURVELIST = 338;
pub const SSL_F_TLS1_PRF = 284;
pub const SSL_F_TLS1_SAVE_U16 = 628;
pub const SSL_F_TLS1_SETUP_KEY_BLOCK = 211;
pub const SSL_F_TLS1_SET_GROUPS = 629;
pub const SSL_F_TLS1_SET_RAW_SIGALGS = 630;
pub const SSL_F_TLS1_SET_SERVER_SIGALGS = 335;
pub const SSL_F_TLS1_SET_SHARED_SIGALGS = 631;
pub const SSL_F_TLS1_SET_SIGALGS = 632;
pub const SSL_F_TLS_CHOOSE_SIGALG = 513;
pub const SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK = 354;
pub const SSL_F_TLS_COLLECT_EXTENSIONS = 435;
pub const SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES = 542;
pub const SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST = 372;
pub const SSL_F_TLS_CONSTRUCT_CERT_STATUS = 429;
pub const SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY = 494;
pub const SSL_F_TLS_CONSTRUCT_CERT_VERIFY = 496;
pub const SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 427;
pub const SSL_F_TLS_CONSTRUCT_CKE_DHE = 404;
pub const SSL_F_TLS_CONSTRUCT_CKE_ECDHE = 405;
pub const SSL_F_TLS_CONSTRUCT_CKE_GOST = 406;
pub const SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE = 407;
pub const SSL_F_TLS_CONSTRUCT_CKE_RSA = 409;
pub const SSL_F_TLS_CONSTRUCT_CKE_SRP = 410;
pub const SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE = 484;
pub const SSL_F_TLS_CONSTRUCT_CLIENT_HELLO = 487;
pub const SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE = 488;
pub const SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY = 489;
pub const SSL_F_TLS_CONSTRUCT_CTOS_ALPN = 466;
pub const SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE = 355;
pub const SSL_F_TLS_CONSTRUCT_CTOS_COOKIE = 535;
pub const SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA = 530;
pub const SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS = 467;
pub const SSL_F_TLS_CONSTRUCT_CTOS_EMS = 468;
pub const SSL_F_TLS_CONSTRUCT_CTOS_ETM = 469;
pub const SSL_F_TLS_CONSTRUCT_CTOS_HELLO = 356;
pub const SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE = 357;
pub const SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE = 470;
pub const SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN = 549;
pub const SSL_F_TLS_CONSTRUCT_CTOS_NPN = 471;
pub const SSL_F_TLS_CONSTRUCT_CTOS_PADDING = 472;
pub const SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH = 619;
pub const SSL_F_TLS_CONSTRUCT_CTOS_PSK = 501;
pub const SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES = 509;
pub const SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE = 473;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SCT = 474;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME = 475;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET = 476;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS = 477;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SRP = 478;
pub const SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST = 479;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS = 480;
pub const SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS = 481;
pub const SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP = 482;
pub const SSL_F_TLS_CONSTRUCT_CTOS_VERIFY = 358;
pub const SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS = 443;
pub const SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA = 536;
pub const SSL_F_TLS_CONSTRUCT_EXTENSIONS = 447;
pub const SSL_F_TLS_CONSTRUCT_FINISHED = 359;
pub const SSL_F_TLS_CONSTRUCT_HELLO_REQUEST = 373;
pub const SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST = 510;
pub const SSL_F_TLS_CONSTRUCT_KEY_UPDATE = 517;
pub const SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET = 428;
pub const SSL_F_TLS_CONSTRUCT_NEXT_PROTO = 426;
pub const SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE = 490;
pub const SSL_F_TLS_CONSTRUCT_SERVER_HELLO = 491;
pub const SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE = 492;
pub const SSL_F_TLS_CONSTRUCT_STOC_ALPN = 451;
pub const SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE = 374;
pub const SSL_F_TLS_CONSTRUCT_STOC_COOKIE = 613;
pub const SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG = 452;
pub const SSL_F_TLS_CONSTRUCT_STOC_DONE = 375;
pub const SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA = 531;
pub const SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO = 525;
pub const SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS = 453;
pub const SSL_F_TLS_CONSTRUCT_STOC_EMS = 454;
pub const SSL_F_TLS_CONSTRUCT_STOC_ETM = 455;
pub const SSL_F_TLS_CONSTRUCT_STOC_HELLO = 376;
pub const SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE = 377;
pub const SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE = 456;
pub const SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN = 548;
pub const SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG = 457;
pub const SSL_F_TLS_CONSTRUCT_STOC_PSK = 504;
pub const SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE = 458;
pub const SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME = 459;
pub const SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET = 460;
pub const SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST = 461;
pub const SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS = 544;
pub const SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS = 611;
pub const SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP = 462;
pub const SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO = 521;
pub const SSL_F_TLS_FINISH_HANDSHAKE = 597;
pub const SSL_F_TLS_GET_MESSAGE_BODY = 351;
pub const SSL_F_TLS_GET_MESSAGE_HEADER = 387;
pub const SSL_F_TLS_HANDLE_ALPN = 562;
pub const SSL_F_TLS_HANDLE_STATUS_REQUEST = 563;
pub const SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES = 566;
pub const SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT = 449;
pub const SSL_F_TLS_PARSE_CTOS_ALPN = 567;
pub const SSL_F_TLS_PARSE_CTOS_COOKIE = 614;
pub const SSL_F_TLS_PARSE_CTOS_EARLY_DATA = 568;
pub const SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS = 569;
pub const SSL_F_TLS_PARSE_CTOS_EMS = 570;
pub const SSL_F_TLS_PARSE_CTOS_KEY_SHARE = 463;
pub const SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN = 571;
pub const SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH = 620;
pub const SSL_F_TLS_PARSE_CTOS_PSK = 505;
pub const SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES = 572;
pub const SSL_F_TLS_PARSE_CTOS_RENEGOTIATE = 464;
pub const SSL_F_TLS_PARSE_CTOS_SERVER_NAME = 573;
pub const SSL_F_TLS_PARSE_CTOS_SESSION_TICKET = 574;
pub const SSL_F_TLS_PARSE_CTOS_SIG_ALGS = 575;
pub const SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT = 615;
pub const SSL_F_TLS_PARSE_CTOS_SRP = 576;
pub const SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST = 577;
pub const SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS = 578;
pub const SSL_F_TLS_PARSE_CTOS_USE_SRTP = 465;
pub const SSL_F_TLS_PARSE_STOC_ALPN = 579;
pub const SSL_F_TLS_PARSE_STOC_COOKIE = 534;
pub const SSL_F_TLS_PARSE_STOC_EARLY_DATA = 538;
pub const SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO = 528;
pub const SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS = 580;
pub const SSL_F_TLS_PARSE_STOC_KEY_SHARE = 445;
pub const SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN = 581;
pub const SSL_F_TLS_PARSE_STOC_NPN = 582;
pub const SSL_F_TLS_PARSE_STOC_PSK = 502;
pub const SSL_F_TLS_PARSE_STOC_RENEGOTIATE = 448;
pub const SSL_F_TLS_PARSE_STOC_SCT = 564;
pub const SSL_F_TLS_PARSE_STOC_SERVER_NAME = 583;
pub const SSL_F_TLS_PARSE_STOC_SESSION_TICKET = 584;
pub const SSL_F_TLS_PARSE_STOC_STATUS_REQUEST = 585;
pub const SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS = 612;
pub const SSL_F_TLS_PARSE_STOC_USE_SRTP = 446;
pub const SSL_F_TLS_POST_PROCESS_CLIENT_HELLO = 378;
pub const SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE = 384;
pub const SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE = 360;
pub const SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST = 610;
pub const SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST = 361;
pub const SSL_F_TLS_PROCESS_CERT_STATUS = 362;
pub const SSL_F_TLS_PROCESS_CERT_STATUS_BODY = 495;
pub const SSL_F_TLS_PROCESS_CERT_VERIFY = 379;
pub const SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC = 363;
pub const SSL_F_TLS_PROCESS_CKE_DHE = 411;
pub const SSL_F_TLS_PROCESS_CKE_ECDHE = 412;
pub const SSL_F_TLS_PROCESS_CKE_GOST = 413;
pub const SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE = 414;
pub const SSL_F_TLS_PROCESS_CKE_RSA = 415;
pub const SSL_F_TLS_PROCESS_CKE_SRP = 416;
pub const SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE = 380;
pub const SSL_F_TLS_PROCESS_CLIENT_HELLO = 381;
pub const SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE = 382;
pub const SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS = 444;
pub const SSL_F_TLS_PROCESS_END_OF_EARLY_DATA = 537;
pub const SSL_F_TLS_PROCESS_FINISHED = 364;
pub const SSL_F_TLS_PROCESS_HELLO_REQ = 507;
pub const SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST = 511;
pub const SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT = 442;
pub const SSL_F_TLS_PROCESS_KEY_EXCHANGE = 365;
pub const SSL_F_TLS_PROCESS_KEY_UPDATE = 518;
pub const SSL_F_TLS_PROCESS_NEW_SESSION_TICKET = 366;
pub const SSL_F_TLS_PROCESS_NEXT_PROTO = 383;
pub const SSL_F_TLS_PROCESS_SERVER_CERTIFICATE = 367;
pub const SSL_F_TLS_PROCESS_SERVER_DONE = 368;
pub const SSL_F_TLS_PROCESS_SERVER_HELLO = 369;
pub const SSL_F_TLS_PROCESS_SKE_DHE = 419;
pub const SSL_F_TLS_PROCESS_SKE_ECDHE = 420;
pub const SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE = 421;
pub const SSL_F_TLS_PROCESS_SKE_SRP = 422;
pub const SSL_F_TLS_PSK_DO_BINDER = 506;
pub const SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT = 450;
pub const SSL_F_TLS_SETUP_HANDSHAKE = 508;
pub const SSL_F_USE_CERTIFICATE_CHAIN_FILE = 220;
pub const SSL_F_WPACKET_INTERN_INIT_LEN = 633;
pub const SSL_F_WPACKET_START_SUB_PACKET_LEN__ = 634;
pub const SSL_F_WRITE_STATE_MACHINE = 586;
pub const SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY = 291;
pub const SSL_R_APP_DATA_IN_HANDSHAKE = 100;
pub const SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = 272;
pub const SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE = 143;
pub const SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE = 158;
pub const SSL_R_BAD_CHANGE_CIPHER_SPEC = 103;
pub const SSL_R_BAD_CIPHER = 186;
pub const SSL_R_BAD_DATA = 390;
pub const SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = 106;
pub const SSL_R_BAD_DECOMPRESSION = 107;
pub const SSL_R_BAD_DH_VALUE = 102;
pub const SSL_R_BAD_DIGEST_LENGTH = 111;
pub const SSL_R_BAD_EARLY_DATA = 233;
pub const SSL_R_BAD_ECC_CERT = 304;
pub const SSL_R_BAD_ECPOINT = 306;
pub const SSL_R_BAD_EXTENSION = 110;
pub const SSL_R_BAD_HANDSHAKE_LENGTH = 332;
pub const SSL_R_BAD_HANDSHAKE_STATE = 236;
pub const SSL_R_BAD_HELLO_REQUEST = 105;
pub const SSL_R_BAD_HRR_VERSION = 263;
pub const SSL_R_BAD_KEY_SHARE = 108;
pub const SSL_R_BAD_KEY_UPDATE = 122;
pub const SSL_R_BAD_LEGACY_VERSION = 292;
pub const SSL_R_BAD_LENGTH = 271;
pub const SSL_R_BAD_PACKET = 240;
pub const SSL_R_BAD_PACKET_LENGTH = 115;
pub const SSL_R_BAD_PROTOCOL_VERSION_NUMBER = 116;
pub const SSL_R_BAD_PSK = 219;
pub const SSL_R_BAD_PSK_IDENTITY = 114;
pub const SSL_R_BAD_RECORD_TYPE = 443;
pub const SSL_R_BAD_RSA_ENCRYPT = 119;
pub const SSL_R_BAD_SIGNATURE = 123;
pub const SSL_R_BAD_SRP_A_LENGTH = 347;
pub const SSL_R_BAD_SRP_PARAMETERS = 371;
pub const SSL_R_BAD_SRTP_MKI_VALUE = 352;
pub const SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST = 353;
pub const SSL_R_BAD_SSL_FILETYPE = 124;
pub const SSL_R_BAD_VALUE = 384;
pub const SSL_R_BAD_WRITE_RETRY = 127;
pub const SSL_R_BINDER_DOES_NOT_VERIFY = 253;
pub const SSL_R_BIO_NOT_SET = 128;
pub const SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = 129;
pub const SSL_R_BN_LIB = 130;
pub const SSL_R_CALLBACK_FAILED = 234;
pub const SSL_R_CANNOT_CHANGE_CIPHER = 109;
pub const SSL_R_CA_DN_LENGTH_MISMATCH = 131;
pub const SSL_R_CA_KEY_TOO_SMALL = 397;
pub const SSL_R_CA_MD_TOO_WEAK = 398;
pub const SSL_R_CCS_RECEIVED_EARLY = 133;
pub const SSL_R_CERTIFICATE_VERIFY_FAILED = 134;
pub const SSL_R_CERT_CB_ERROR = 377;
pub const SSL_R_CERT_LENGTH_MISMATCH = 135;
pub const SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED = 218;
pub const SSL_R_CIPHER_CODE_WRONG_LENGTH = 137;
pub const SSL_R_CIPHER_OR_HASH_UNAVAILABLE = 138;
pub const SSL_R_CLIENTHELLO_TLSEXT = 226;
pub const SSL_R_COMPRESSED_LENGTH_TOO_LONG = 140;
pub const SSL_R_COMPRESSION_DISABLED = 343;
pub const SSL_R_COMPRESSION_FAILURE = 141;
pub const SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = 307;
pub const SSL_R_COMPRESSION_LIBRARY_ERROR = 142;
pub const SSL_R_CONNECTION_TYPE_NOT_SET = 144;
pub const SSL_R_CONTEXT_NOT_DANE_ENABLED = 167;
pub const SSL_R_COOKIE_GEN_CALLBACK_FAILURE = 400;
pub const SSL_R_COOKIE_MISMATCH = 308;
pub const SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED = 206;
pub const SSL_R_DANE_ALREADY_ENABLED = 172;
pub const SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL = 173;
pub const SSL_R_DANE_NOT_ENABLED = 175;
pub const SSL_R_DANE_TLSA_BAD_CERTIFICATE = 180;
pub const SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE = 184;
pub const SSL_R_DANE_TLSA_BAD_DATA_LENGTH = 189;
pub const SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH = 192;
pub const SSL_R_DANE_TLSA_BAD_MATCHING_TYPE = 200;
pub const SSL_R_DANE_TLSA_BAD_PUBLIC_KEY = 201;
pub const SSL_R_DANE_TLSA_BAD_SELECTOR = 202;
pub const SSL_R_DANE_TLSA_NULL_DATA = 203;
pub const SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = 145;
pub const SSL_R_DATA_LENGTH_TOO_LONG = 146;
pub const SSL_R_DECRYPTION_FAILED = 147;
pub const SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = 281;
pub const SSL_R_DH_KEY_TOO_SMALL = 394;
pub const SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = 148;
pub const SSL_R_DIGEST_CHECK_FAILED = 149;
pub const SSL_R_DTLS_MESSAGE_TOO_BIG = 334;
pub const SSL_R_DUPLICATE_COMPRESSION_ID = 309;
pub const SSL_R_ECC_CERT_NOT_FOR_SIGNING = 318;
pub const SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE = 374;
pub const SSL_R_EE_KEY_TOO_SMALL = 399;
pub const SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST = 354;
pub const SSL_R_ENCRYPTED_LENGTH_TOO_LONG = 150;
pub const SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = 151;
pub const SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN = 204;
pub const SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE = 194;
pub const SSL_R_EXCESSIVE_MESSAGE_SIZE = 152;
pub const SSL_R_EXTENSION_NOT_RECEIVED = 279;
pub const SSL_R_EXTRA_DATA_IN_MESSAGE = 153;
pub const SSL_R_EXT_LENGTH_MISMATCH = 163;
pub const SSL_R_FAILED_TO_INIT_ASYNC = 405;
pub const SSL_R_FRAGMENTED_CLIENT_HELLO = 401;
pub const SSL_R_GOT_A_FIN_BEFORE_A_CCS = 154;
pub const SSL_R_HTTPS_PROXY_REQUEST = 155;
pub const SSL_R_HTTP_REQUEST = 156;
pub const SSL_R_ILLEGAL_POINT_COMPRESSION = 162;
pub const SSL_R_ILLEGAL_SUITEB_DIGEST = 380;
pub const SSL_R_INAPPROPRIATE_FALLBACK = 373;
pub const SSL_R_INCONSISTENT_COMPRESSION = 340;
pub const SSL_R_INCONSISTENT_EARLY_DATA_ALPN = 222;
pub const SSL_R_INCONSISTENT_EARLY_DATA_SNI = 231;
pub const SSL_R_INCONSISTENT_EXTMS = 104;
pub const SSL_R_INSUFFICIENT_SECURITY = 241;
pub const SSL_R_INVALID_ALERT = 205;
pub const SSL_R_INVALID_CCS_MESSAGE = 260;
pub const SSL_R_INVALID_CERTIFICATE_OR_ALG = 238;
pub const SSL_R_INVALID_COMMAND = 280;
pub const SSL_R_INVALID_COMPRESSION_ALGORITHM = 341;
pub const SSL_R_INVALID_CONFIG = 283;
pub const SSL_R_INVALID_CONFIGURATION_NAME = 113;
pub const SSL_R_INVALID_CONTEXT = 282;
pub const SSL_R_INVALID_CT_VALIDATION_TYPE = 212;
pub const SSL_R_INVALID_KEY_UPDATE_TYPE = 120;
pub const SSL_R_INVALID_MAX_EARLY_DATA = 174;
pub const SSL_R_INVALID_NULL_CMD_NAME = 385;
pub const SSL_R_INVALID_SEQUENCE_NUMBER = 402;
pub const SSL_R_INVALID_SERVERINFO_DATA = 388;
pub const SSL_R_INVALID_SESSION_ID = 999;
pub const SSL_R_INVALID_SRP_USERNAME = 357;
pub const SSL_R_INVALID_STATUS_RESPONSE = 328;
pub const SSL_R_INVALID_TICKET_KEYS_LENGTH = 325;
pub const SSL_R_LENGTH_MISMATCH = 159;
pub const SSL_R_LENGTH_TOO_LONG = 404;
pub const SSL_R_LENGTH_TOO_SHORT = 160;
pub const SSL_R_LIBRARY_BUG = 274;
pub const SSL_R_LIBRARY_HAS_NO_CIPHERS = 161;
pub const SSL_R_MISSING_DSA_SIGNING_CERT = 165;
pub const SSL_R_MISSING_ECDSA_SIGNING_CERT = 381;
pub const SSL_R_MISSING_FATAL = 256;
pub const SSL_R_MISSING_PARAMETERS = 290;
pub const SSL_R_MISSING_RSA_CERTIFICATE = 168;
pub const SSL_R_MISSING_RSA_ENCRYPTING_CERT = 169;
pub const SSL_R_MISSING_RSA_SIGNING_CERT = 170;
pub const SSL_R_MISSING_SIGALGS_EXTENSION = 112;
pub const SSL_R_MISSING_SIGNING_CERT = 221;
pub const SSL_R_MISSING_SRP_PARAM = 358;
pub const SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION = 209;
pub const SSL_R_MISSING_TMP_DH_KEY = 171;
pub const SSL_R_MISSING_TMP_ECDH_KEY = 311;
pub const SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA = 293;
pub const SSL_R_NOT_ON_RECORD_BOUNDARY = 182;
pub const SSL_R_NOT_REPLACING_CERTIFICATE = 289;
pub const SSL_R_NOT_SERVER = 284;
pub const SSL_R_NO_APPLICATION_PROTOCOL = 235;
pub const SSL_R_NO_CERTIFICATES_RETURNED = 176;
pub const SSL_R_NO_CERTIFICATE_ASSIGNED = 177;
pub const SSL_R_NO_CERTIFICATE_SET = 179;
pub const SSL_R_NO_CHANGE_FOLLOWING_HRR = 214;
pub const SSL_R_NO_CIPHERS_AVAILABLE = 181;
pub const SSL_R_NO_CIPHERS_SPECIFIED = 183;
pub const SSL_R_NO_CIPHER_MATCH = 185;
pub const SSL_R_NO_CLIENT_CERT_METHOD = 331;
pub const SSL_R_NO_COMPRESSION_SPECIFIED = 187;
pub const SSL_R_NO_COOKIE_CALLBACK_SET = 287;
pub const SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER = 330;
pub const SSL_R_NO_METHOD_SPECIFIED = 188;
pub const SSL_R_NO_PEM_EXTENSIONS = 389;
pub const SSL_R_NO_PRIVATE_KEY_ASSIGNED = 190;
pub const SSL_R_NO_PROTOCOLS_AVAILABLE = 191;
pub const SSL_R_NO_RENEGOTIATION = 339;
pub const SSL_R_NO_REQUIRED_DIGEST = 324;
pub const SSL_R_NO_SHARED_CIPHER = 193;
pub const SSL_R_NO_SHARED_GROUPS = 410;
pub const SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS = 376;
pub const SSL_R_NO_SRTP_PROFILES = 359;
pub const SSL_R_NO_SUITABLE_KEY_SHARE = 101;
pub const SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM = 118;
pub const SSL_R_NO_VALID_SCTS = 216;
pub const SSL_R_NO_VERIFY_COOKIE_CALLBACK = 403;
pub const SSL_R_NULL_SSL_CTX = 195;
pub const SSL_R_NULL_SSL_METHOD_PASSED = 196;
pub const SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = 197;
pub const SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED = 344;
pub const SSL_R_OVERFLOW_ERROR = 237;
pub const SSL_R_PACKET_LENGTH_TOO_LONG = 198;
pub const SSL_R_PARSE_TLSEXT = 227;
pub const SSL_R_PATH_TOO_LONG = 270;
pub const SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = 199;
pub const SSL_R_PEM_NAME_BAD_PREFIX = 391;
pub const SSL_R_PEM_NAME_TOO_SHORT = 392;
pub const SSL_R_PIPELINE_FAILURE = 406;
pub const SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR = 278;
pub const SSL_R_PRIVATE_KEY_MISMATCH = 288;
pub const SSL_R_PROTOCOL_IS_SHUTDOWN = 207;
pub const SSL_R_PSK_IDENTITY_NOT_FOUND = 223;
pub const SSL_R_PSK_NO_CLIENT_CB = 224;
pub const SSL_R_PSK_NO_SERVER_CB = 225;
pub const SSL_R_READ_BIO_NOT_SET = 211;
pub const SSL_R_READ_TIMEOUT_EXPIRED = 312;
pub const SSL_R_RECORD_LENGTH_MISMATCH = 213;
pub const SSL_R_RECORD_TOO_SMALL = 298;
pub const SSL_R_RENEGOTIATE_EXT_TOO_LONG = 335;
pub const SSL_R_RENEGOTIATION_ENCODING_ERR = 336;
pub const SSL_R_RENEGOTIATION_MISMATCH = 337;
pub const SSL_R_REQUEST_PENDING = 285;
pub const SSL_R_REQUEST_SENT = 286;
pub const SSL_R_REQUIRED_CIPHER_MISSING = 215;
pub const SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING = 342;
pub const SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = 345;
pub const SSL_R_SCT_VERIFICATION_FAILED = 208;
pub const SSL_R_SERVERHELLO_TLSEXT = 275;
pub const SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = 277;
pub const SSL_R_SHUTDOWN_WHILE_IN_INIT = 407;
pub const SSL_R_SIGNATURE_ALGORITHMS_ERROR = 360;
pub const SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = 220;
pub const SSL_R_SRP_A_CALC = 361;
pub const SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES = 362;
pub const SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG = 363;
pub const SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE = 364;
pub const SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH = 232;
pub const SSL_R_SSL3_EXT_INVALID_SERVERNAME = 319;
pub const SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = 320;
pub const SSL_R_SSL3_SESSION_ID_TOO_LONG = 300;
pub const SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = 1042;
pub const SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = 1020;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = 1045;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = 1044;
pub const SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = 1046;
pub const SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = 1030;
pub const SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = 1040;
pub const SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = 1047;
pub const SSL_R_SSLV3_ALERT_NO_CERTIFICATE = 1041;
pub const SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = 1010;
pub const SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = 1043;
pub const SSL_R_SSL_COMMAND_SECTION_EMPTY = 117;
pub const SSL_R_SSL_COMMAND_SECTION_NOT_FOUND = 125;
pub const SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = 228;
pub const SSL_R_SSL_HANDSHAKE_FAILURE = 229;
pub const SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = 230;
pub const SSL_R_SSL_NEGATIVE_LENGTH = 372;
pub const SSL_R_SSL_SECTION_EMPTY = 126;
pub const SSL_R_SSL_SECTION_NOT_FOUND = 136;
pub const SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = 301;
pub const SSL_R_SSL_SESSION_ID_CONFLICT = 302;
pub const SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = 273;
pub const SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = 303;
pub const SSL_R_SSL_SESSION_ID_TOO_LONG = 408;
pub const SSL_R_SSL_SESSION_VERSION_MISMATCH = 210;
pub const SSL_R_STILL_IN_INIT = 121;
pub const SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED = 1116;
pub const SSL_R_TLSV13_ALERT_MISSING_EXTENSION = 1109;
pub const SSL_R_TLSV1_ALERT_ACCESS_DENIED = 1049;
pub const SSL_R_TLSV1_ALERT_DECODE_ERROR = 1050;
pub const SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = 1021;
pub const SSL_R_TLSV1_ALERT_DECRYPT_ERROR = 1051;
pub const SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = 1060;
pub const SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK = 1086;
pub const SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = 1071;
pub const SSL_R_TLSV1_ALERT_INTERNAL_ERROR = 1080;
pub const SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = 1100;
pub const SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = 1070;
pub const SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = 1022;
pub const SSL_R_TLSV1_ALERT_UNKNOWN_CA = 1048;
pub const SSL_R_TLSV1_ALERT_USER_CANCELLED = 1090;
pub const SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE = 1114;
pub const SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE = 1113;
pub const SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE = 1111;
pub const SSL_R_TLSV1_UNRECOGNIZED_NAME = 1112;
pub const SSL_R_TLSV1_UNSUPPORTED_EXTENSION = 1110;
pub const SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT = 365;
pub const SSL_R_TLS_HEARTBEAT_PENDING = 366;
pub const SSL_R_TLS_ILLEGAL_EXPORTER_LABEL = 367;
pub const SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = 157;
pub const SSL_R_TOO_MANY_KEY_UPDATES = 132;
pub const SSL_R_TOO_MANY_WARN_ALERTS = 409;
pub const SSL_R_TOO_MUCH_EARLY_DATA = 164;
pub const SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = 314;
pub const SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = 239;
pub const SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = 242;
pub const SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = 243;
pub const SSL_R_UNEXPECTED_CCS_MESSAGE = 262;
pub const SSL_R_UNEXPECTED_END_OF_EARLY_DATA = 178;
pub const SSL_R_UNEXPECTED_MESSAGE = 244;
pub const SSL_R_UNEXPECTED_RECORD = 245;
pub const SSL_R_UNINITIALIZED = 276;
pub const SSL_R_UNKNOWN_ALERT_TYPE = 246;
pub const SSL_R_UNKNOWN_CERTIFICATE_TYPE = 247;
pub const SSL_R_UNKNOWN_CIPHER_RETURNED = 248;
pub const SSL_R_UNKNOWN_CIPHER_TYPE = 249;
pub const SSL_R_UNKNOWN_CMD_NAME = 386;
pub const SSL_R_UNKNOWN_COMMAND = 139;
pub const SSL_R_UNKNOWN_DIGEST = 368;
pub const SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = 250;
pub const SSL_R_UNKNOWN_PKEY_TYPE = 251;
pub const SSL_R_UNKNOWN_PROTOCOL = 252;
pub const SSL_R_UNKNOWN_SSL_VERSION = 254;
pub const SSL_R_UNKNOWN_STATE = 255;
pub const SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = 338;
pub const SSL_R_UNSOLICITED_EXTENSION = 217;
pub const SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 257;
pub const SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = 315;
pub const SSL_R_UNSUPPORTED_PROTOCOL = 258;
pub const SSL_R_UNSUPPORTED_SSL_VERSION = 259;
pub const SSL_R_UNSUPPORTED_STATUS_TYPE = 329;
pub const SSL_R_USE_SRTP_NOT_NEGOTIATED = 369;
pub const SSL_R_VERSION_TOO_HIGH = 166;
pub const SSL_R_VERSION_TOO_LOW = 396;
pub const SSL_R_WRONG_CERTIFICATE_TYPE = 383;
pub const SSL_R_WRONG_CIPHER_RETURNED = 261;
pub const SSL_R_WRONG_CURVE = 378;
pub const SSL_R_WRONG_SIGNATURE_LENGTH = 264;
pub const SSL_R_WRONG_SIGNATURE_SIZE = 265;
pub const SSL_R_WRONG_SIGNATURE_TYPE = 370;
pub const SSL_R_WRONG_SSL_VERSION = 266;
pub const SSL_R_WRONG_VERSION_NUMBER = 267;
pub const SSL_R_X509_LIB = 268;
pub const SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = 269;
pub const SSL_SESSION_ASN1_VERSION = 0x0001;
pub const SSL_MAX_SSL_SESSION_ID_LENGTH = 32;
pub const SSL_MAX_SID_CTX_LENGTH = 32;
pub const SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = 512 / 8;
pub const SSL_MAX_KEY_ARG_LENGTH = 8;
pub const SSL_MAX_MASTER_KEY_LENGTH = 48;
pub const SSL_MAX_PIPELINES = 32;
pub const SSL_TXT_LOW = "LOW";
pub const SSL_TXT_MEDIUM = "MEDIUM";
pub const SSL_TXT_HIGH = "HIGH";
pub const SSL_TXT_FIPS = "FIPS";
pub const SSL_TXT_aNULL = "aNULL";
pub const SSL_TXT_eNULL = "eNULL";
pub const SSL_TXT_NULL = "NULL";
pub const SSL_TXT_kRSA = "kRSA";
pub const SSL_TXT_kDHr = "kDHr";
pub const SSL_TXT_kDHd = "kDHd";
pub const SSL_TXT_kDH = "kDH";
pub const SSL_TXT_kEDH = "kEDH";
pub const SSL_TXT_kDHE = "kDHE";
pub const SSL_TXT_kECDHr = "kECDHr";
pub const SSL_TXT_kECDHe = "kECDHe";
pub const SSL_TXT_kECDH = "kECDH";
pub const SSL_TXT_kEECDH = "kEECDH";
pub const SSL_TXT_kECDHE = "kECDHE";
pub const SSL_TXT_kPSK = "kPSK";
pub const SSL_TXT_kRSAPSK = "kRSAPSK";
pub const SSL_TXT_kECDHEPSK = "kECDHEPSK";
pub const SSL_TXT_kDHEPSK = "kDHEPSK";
pub const SSL_TXT_kGOST = "kGOST";
pub const SSL_TXT_kSRP = "kSRP";
pub const SSL_TXT_aRSA = "aRSA";
pub const SSL_TXT_aDSS = "aDSS";
pub const SSL_TXT_aDH = "aDH";
pub const SSL_TXT_aECDH = "aECDH";
pub const SSL_TXT_aECDSA = "aECDSA";
pub const SSL_TXT_aPSK = "aPSK";
pub const SSL_TXT_aGOST94 = "aGOST94";
pub const SSL_TXT_aGOST01 = "aGOST01";
pub const SSL_TXT_aGOST12 = "aGOST12";
pub const SSL_TXT_aGOST = "aGOST";
pub const SSL_TXT_aSRP = "aSRP";
pub const SSL_TXT_DSS = "DSS";
pub const SSL_TXT_DH = "DH";
pub const SSL_TXT_DHE = "DHE";
pub const SSL_TXT_EDH = "EDH";
pub const SSL_TXT_ADH = "ADH";
pub const SSL_TXT_RSA = "RSA";
pub const SSL_TXT_ECDH = "ECDH";
pub const SSL_TXT_EECDH = "EECDH";
pub const SSL_TXT_ECDHE = "ECDHE";
pub const SSL_TXT_AECDH = "AECDH";
pub const SSL_TXT_ECDSA = "ECDSA";
pub const SSL_TXT_PSK = "PSK";
pub const SSL_TXT_SRP = "SRP";
pub const SSL_TXT_DES = "DES";
pub const SSL_TXT_3DES = "3DES";
pub const SSL_TXT_RC4 = "RC4";
pub const SSL_TXT_RC2 = "RC2";
pub const SSL_TXT_IDEA = "IDEA";
pub const SSL_TXT_SEED = "SEED";
pub const SSL_TXT_AES128 = "AES128";
pub const SSL_TXT_AES256 = "AES256";
pub const SSL_TXT_AES = "AES";
pub const SSL_TXT_AES_GCM = "AESGCM";
pub const SSL_TXT_AES_CCM = "AESCCM";
pub const SSL_TXT_AES_CCM_8 = "AESCCM8";
pub const SSL_TXT_CAMELLIA128 = "CAMELLIA128";
pub const SSL_TXT_CAMELLIA256 = "CAMELLIA256";
pub const SSL_TXT_CAMELLIA = "CAMELLIA";
pub const SSL_TXT_CHACHA20 = "CHACHA20";
pub const SSL_TXT_GOST = "GOST89";
pub const SSL_TXT_ARIA = "ARIA";
pub const SSL_TXT_ARIA_GCM = "ARIAGCM";
pub const SSL_TXT_ARIA128 = "ARIA128";
pub const SSL_TXT_ARIA256 = "ARIA256";
pub const SSL_TXT_MD5 = "MD5";
pub const SSL_TXT_SHA1 = "SHA1";
pub const SSL_TXT_SHA = "SHA";
pub const SSL_TXT_GOST94 = "GOST94";
pub const SSL_TXT_GOST89MAC = "GOST89MAC";
pub const SSL_TXT_GOST12 = "GOST12";
pub const SSL_TXT_GOST89MAC12 = "GOST89MAC12";
pub const SSL_TXT_SHA256 = "SHA256";
pub const SSL_TXT_SHA384 = "SHA384";
pub const SSL_TXT_SSLV3 = "SSLv3";
pub const SSL_TXT_TLSV1 = "TLSv1";
pub const SSL_TXT_TLSV1_1 = "TLSv1.1";
pub const SSL_TXT_TLSV1_2 = "TLSv1.2";
pub const SSL_TXT_ALL = "ALL";
pub const SSL_TXT_CMPALL = "COMPLEMENTOFALL";
pub const SSL_TXT_CMPDEF = "COMPLEMENTOFDEFAULT";
pub const SSL_DEFAULT_CIPHER_LIST = "ALL:!COMPLEMENTOFDEFAULT:!eNULL";
pub const TLS_DEFAULT_CIPHERSUITES = "TLS_AES_256_GCM_SHA384:" ++ "TLS_CHACHA20_POLY1305_SHA256:" ++ "TLS_AES_128_GCM_SHA256";
pub const SSL_SENT_SHUTDOWN = 1;
pub const SSL_RECEIVED_SHUTDOWN = 2;
pub const SSL_FILETYPE_ASN1 = X509_FILETYPE_ASN1;
pub const SSL_FILETYPE_PEM = X509_FILETYPE_PEM;
pub const SSL_EXT_TLS_ONLY = 0x0001;
pub const SSL_EXT_DTLS_ONLY = 0x0002;
pub const SSL_EXT_TLS_IMPLEMENTATION_ONLY = 0x0004;
pub const SSL_EXT_SSL3_ALLOWED = 0x0008;
pub const SSL_EXT_TLS1_2_AND_BELOW_ONLY = 0x0010;
pub const SSL_EXT_TLS1_3_ONLY = 0x0020;
pub const SSL_EXT_IGNORE_ON_RESUMPTION = 0x0040;
pub const SSL_EXT_CLIENT_HELLO = 0x0080;
pub const SSL_EXT_TLS1_2_SERVER_HELLO = 0x0100;
pub const SSL_EXT_TLS1_3_SERVER_HELLO = 0x0200;
pub const SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS = 0x0400;
pub const SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST = 0x0800;
pub const SSL_EXT_TLS1_3_CERTIFICATE = 0x1000;
pub const SSL_EXT_TLS1_3_NEW_SESSION_TICKET = 0x2000;
pub const SSL_EXT_TLS1_3_CERTIFICATE_REQUEST = 0x4000;
pub const SSL_OP_LEGACY_SERVER_CONNECT = @as(c_uint, 0x00000004);
pub const SSL_OP_TLSEXT_PADDING = @as(c_uint, 0x00000010);
pub const SSL_OP_SAFARI_ECDHE_ECDSA_BUG = @as(c_uint, 0x00000040);
pub const SSL_OP_ALLOW_NO_DHE_KEX = @as(c_uint, 0x00000400);
pub const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = @as(c_uint, 0x00000800);
pub const SSL_OP_NO_QUERY_MTU = @as(c_uint, 0x00001000);
pub const SSL_OP_COOKIE_EXCHANGE = @as(c_uint, 0x00002000);
pub const SSL_OP_NO_TICKET = @as(c_uint, 0x00004000);
pub const SSL_OP_CISCO_ANYCONNECT = @as(c_uint, 0x00008000);
pub const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = @as(c_uint, 0x00010000);
pub const SSL_OP_NO_COMPRESSION = @as(c_uint, 0x00020000);
pub const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = @as(c_uint, 0x00040000);
pub const SSL_OP_NO_ENCRYPT_THEN_MAC = @as(c_uint, 0x00080000);
pub const SSL_OP_ENABLE_MIDDLEBOX_COMPAT = @as(c_uint, 0x00100000);
pub const SSL_OP_PRIORITIZE_CHACHA = @as(c_uint, 0x00200000);
pub const SSL_OP_CIPHER_SERVER_PREFERENCE = @as(c_uint, 0x00400000);
pub const SSL_OP_TLS_ROLLBACK_BUG = @as(c_uint, 0x00800000);
pub const SSL_OP_NO_ANTI_REPLAY = @as(c_uint, 0x01000000);
pub const SSL_OP_NO_SSLv3 = @as(c_uint, 0x02000000);
pub const SSL_OP_NO_TLSv1 = @as(c_uint, 0x04000000);
pub const SSL_OP_NO_TLSv1_2 = @as(c_uint, 0x08000000);
pub const SSL_OP_NO_TLSv1_1 = @as(c_uint, 0x10000000);
pub const SSL_OP_NO_TLSv1_3 = @as(c_uint, 0x20000000);
pub const SSL_OP_NO_DTLSv1 = @as(c_uint, 0x04000000);
pub const SSL_OP_NO_DTLSv1_2 = @as(c_uint, 0x08000000);
pub const SSL_OP_NO_SSL_MASK = (((SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1) | SSL_OP_NO_TLSv1_1) | SSL_OP_NO_TLSv1_2) | SSL_OP_NO_TLSv1_3;
pub const SSL_OP_NO_DTLS_MASK = SSL_OP_NO_DTLSv1 | SSL_OP_NO_DTLSv1_2;
pub const SSL_OP_NO_RENEGOTIATION = @as(c_uint, 0x40000000);
pub const SSL_OP_CRYPTOPRO_TLSEXT_BUG = @as(c_uint, 0x80000000);
pub const SSL_OP_ALL = (((SSL_OP_CRYPTOPRO_TLSEXT_BUG | SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS) | SSL_OP_LEGACY_SERVER_CONNECT) | SSL_OP_TLSEXT_PADDING) | SSL_OP_SAFARI_ECDHE_ECDSA_BUG;
pub const SSL_OP_MICROSOFT_SESS_ID_BUG = 0x0;
pub const SSL_OP_NETSCAPE_CHALLENGE_BUG = 0x0;
pub const SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 0x0;
pub const SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = 0x0;
pub const SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = 0x0;
pub const SSL_OP_MSIE_SSLV2_RSA_PADDING = 0x0;
pub const SSL_OP_SSLEAY_080_CLIENT_DH_BUG = 0x0;
pub const SSL_OP_TLS_D5_BUG = 0x0;
pub const SSL_OP_TLS_BLOCK_PADDING_BUG = 0x0;
pub const SSL_OP_SINGLE_ECDH_USE = 0x0;
pub const SSL_OP_SINGLE_DH_USE = 0x0;
pub const SSL_OP_EPHEMERAL_RSA = 0x0;
pub const SSL_OP_NO_SSLv2 = 0x0;
pub const SSL_OP_PKCS1_CHECK_1 = 0x0;
pub const SSL_OP_PKCS1_CHECK_2 = 0x0;
pub const SSL_OP_NETSCAPE_CA_DN_BUG = 0x0;
pub const SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 0x0;
pub const SSL_MODE_ENABLE_PARTIAL_WRITE = @as(c_uint, 0x00000001);
pub const SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = @as(c_uint, 0x00000002);
pub const SSL_MODE_AUTO_RETRY = @as(c_uint, 0x00000004);
pub const SSL_MODE_NO_AUTO_CHAIN = @as(c_uint, 0x00000008);
pub const SSL_MODE_RELEASE_BUFFERS = @as(c_uint, 0x00000010);
pub const SSL_MODE_SEND_CLIENTHELLO_TIME = @as(c_uint, 0x00000020);
pub const SSL_MODE_SEND_SERVERHELLO_TIME = @as(c_uint, 0x00000040);
pub const SSL_MODE_SEND_FALLBACK_SCSV = @as(c_uint, 0x00000080);
pub const SSL_MODE_ASYNC = @as(c_uint, 0x00000100);
pub const SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG = @as(c_uint, 0x00000400);
pub const SSL_CERT_FLAG_TLS_STRICT = @as(c_uint, 0x00000001);
pub const SSL_CERT_FLAG_SUITEB_128_LOS_ONLY = 0x10000;
pub const SSL_CERT_FLAG_SUITEB_192_LOS = 0x20000;
pub const SSL_CERT_FLAG_SUITEB_128_LOS = 0x30000;
pub const SSL_CERT_FLAG_BROKEN_PROTOCOL = 0x10000000;
pub const SSL_BUILD_CHAIN_FLAG_UNTRUSTED = 0x1;
pub const SSL_BUILD_CHAIN_FLAG_NO_ROOT = 0x2;
pub const SSL_BUILD_CHAIN_FLAG_CHECK = 0x4;
pub const SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR = 0x8;
pub const SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR = 0x10;
pub const CERT_PKEY_VALID = 0x1;
pub const CERT_PKEY_SIGN = 0x2;
pub const CERT_PKEY_EE_SIGNATURE = 0x10;
pub const CERT_PKEY_CA_SIGNATURE = 0x20;
pub const CERT_PKEY_EE_PARAM = 0x40;
pub const CERT_PKEY_CA_PARAM = 0x80;
pub const CERT_PKEY_EXPLICIT_SIGN = 0x100;
pub const CERT_PKEY_ISSUER_NAME = 0x200;
pub const CERT_PKEY_CERT_TYPE = 0x400;
pub const CERT_PKEY_SUITEB = 0x800;
pub const SSL_CONF_FLAG_CMDLINE = 0x1;
pub const SSL_CONF_FLAG_FILE = 0x2;
pub const SSL_CONF_FLAG_CLIENT = 0x4;
pub const SSL_CONF_FLAG_SERVER = 0x8;
pub const SSL_CONF_FLAG_SHOW_ERRORS = 0x10;
pub const SSL_CONF_FLAG_CERTIFICATE = 0x20;
pub const SSL_CONF_FLAG_REQUIRE_PRIVATE = 0x40;
pub const SSL_CONF_TYPE_UNKNOWN = 0x0;
pub const SSL_CONF_TYPE_STRING = 0x1;
pub const SSL_CONF_TYPE_FILE = 0x2;
pub const SSL_CONF_TYPE_DIR = 0x3;
pub const SSL_CONF_TYPE_NONE = 0x4;
pub const SSL_COOKIE_LENGTH = 4096;
pub inline fn SSL_CTX_set_mode(ctx: anytype, op: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_MODE, op, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_MODE, op, NULL);
}
pub inline fn SSL_CTX_clear_mode(ctx: anytype, op: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_MODE, op, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_MODE, op, NULL);
}
pub inline fn SSL_CTX_get_mode(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_MODE, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_MODE, 0, NULL);
}
pub inline fn SSL_clear_mode(ssl: anytype, op: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_CLEAR_MODE, op, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_CLEAR_MODE, op, NULL);
}
pub inline fn SSL_set_mode(ssl: anytype, op: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_MODE, op, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_MODE, op, NULL);
}
pub inline fn SSL_get_mode(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_MODE, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_MODE, 0, NULL);
}
pub inline fn SSL_set_mtu(ssl: anytype, mtu: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_MTU, mtu, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_MTU, mtu, NULL);
}
pub inline fn DTLS_set_link_mtu(ssl: anytype, mtu: anytype) @TypeOf(SSL_ctrl(ssl, DTLS_CTRL_SET_LINK_MTU, mtu, NULL)) {
    return SSL_ctrl(ssl, DTLS_CTRL_SET_LINK_MTU, mtu, NULL);
}
pub inline fn DTLS_get_link_min_mtu(ssl: anytype) @TypeOf(SSL_ctrl(ssl, DTLS_CTRL_GET_LINK_MIN_MTU, 0, NULL)) {
    return SSL_ctrl(ssl, DTLS_CTRL_GET_LINK_MIN_MTU, 0, NULL);
}
pub inline fn SSL_get_secure_renegotiation_support(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_RI_SUPPORT, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_RI_SUPPORT, 0, NULL);
}
pub inline fn SSL_CTX_set_cert_flags(ctx: anytype, op: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CERT_FLAGS, op, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CERT_FLAGS, op, NULL);
}
pub inline fn SSL_set_cert_flags(s: anytype, op: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CERT_FLAGS, op, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_CERT_FLAGS, op, NULL);
}
pub inline fn SSL_CTX_clear_cert_flags(ctx: anytype, op: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_CERT_FLAGS, op, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_CERT_FLAGS, op, NULL);
}
pub inline fn SSL_clear_cert_flags(s: anytype, op: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CLEAR_CERT_FLAGS, op, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_CLEAR_CERT_FLAGS, op, NULL);
}
pub inline fn SSL_CTX_set_msg_callback_arg(ctx: anytype, arg: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, arg)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, arg);
}
pub inline fn SSL_set_msg_callback_arg(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, arg);
}
pub inline fn SSL_get_extms_support(s: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_EXTMS_SUPPORT, 0, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_GET_EXTMS_SUPPORT, 0, NULL);
}
pub const SSL_MAX_CERT_LIST_DEFAULT = 1024 * 100;
pub const SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = 1024 * 20;
pub const SSL_SESS_CACHE_OFF = 0x0000;
pub const SSL_SESS_CACHE_CLIENT = 0x0001;
pub const SSL_SESS_CACHE_SERVER = 0x0002;
pub const SSL_SESS_CACHE_BOTH = SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_SERVER;
pub const SSL_SESS_CACHE_NO_AUTO_CLEAR = 0x0080;
pub const SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = 0x0100;
pub const SSL_SESS_CACHE_NO_INTERNAL_STORE = 0x0200;
pub const SSL_SESS_CACHE_NO_INTERNAL = SSL_SESS_CACHE_NO_INTERNAL_LOOKUP | SSL_SESS_CACHE_NO_INTERNAL_STORE;
pub inline fn SSL_CTX_sess_number(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_NUMBER, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_NUMBER, 0, NULL);
}
pub inline fn SSL_CTX_sess_connect(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT, 0, NULL);
}
pub inline fn SSL_CTX_sess_connect_good(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT_GOOD, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT_GOOD, 0, NULL);
}
pub inline fn SSL_CTX_sess_connect_renegotiate(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT_RENEGOTIATE, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CONNECT_RENEGOTIATE, 0, NULL);
}
pub inline fn SSL_CTX_sess_accept(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT, 0, NULL);
}
pub inline fn SSL_CTX_sess_accept_renegotiate(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT_RENEGOTIATE, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT_RENEGOTIATE, 0, NULL);
}
pub inline fn SSL_CTX_sess_accept_good(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT_GOOD, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_ACCEPT_GOOD, 0, NULL);
}
pub inline fn SSL_CTX_sess_hits(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_HIT, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_HIT, 0, NULL);
}
pub inline fn SSL_CTX_sess_cb_hits(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CB_HIT, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CB_HIT, 0, NULL);
}
pub inline fn SSL_CTX_sess_misses(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_MISSES, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_MISSES, 0, NULL);
}
pub inline fn SSL_CTX_sess_timeouts(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_TIMEOUTS, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_TIMEOUTS, 0, NULL);
}
pub inline fn SSL_CTX_sess_cache_full(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CACHE_FULL, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SESS_CACHE_FULL, 0, NULL);
}
pub const SSL_CTX_set_npn_advertised_cb = SSL_CTX_set_next_protos_advertised_cb;
pub const SSL_CTX_set_npn_select_cb = SSL_CTX_set_next_proto_select_cb;
pub const SSL_get0_npn_negotiated = SSL_get0_next_proto_negotiated;
pub const OPENSSL_NPN_UNSUPPORTED = 0;
pub const OPENSSL_NPN_NEGOTIATED = 1;
pub const OPENSSL_NPN_NO_OVERLAP = 2;
pub const PSK_MAX_IDENTITY_LEN = 128;
pub const PSK_MAX_PSK_LEN = 256;
pub const SSL_NOTHING = 1;
pub const SSL_WRITING = 2;
pub const SSL_READING = 3;
pub const SSL_X509_LOOKUP = 4;
pub const SSL_ASYNC_PAUSED = 5;
pub const SSL_ASYNC_NO_JOBS = 6;
pub const SSL_CLIENT_HELLO_CB = 7;
pub inline fn SSL_want_nothing(s: anytype) @TypeOf(SSL_want(s) == SSL_NOTHING) {
    return SSL_want(s) == SSL_NOTHING;
}
pub inline fn SSL_want_read(s: anytype) @TypeOf(SSL_want(s) == SSL_READING) {
    return SSL_want(s) == SSL_READING;
}
pub inline fn SSL_want_write(s: anytype) @TypeOf(SSL_want(s) == SSL_WRITING) {
    return SSL_want(s) == SSL_WRITING;
}
pub inline fn SSL_want_x509_lookup(s: anytype) @TypeOf(SSL_want(s) == SSL_X509_LOOKUP) {
    return SSL_want(s) == SSL_X509_LOOKUP;
}
pub inline fn SSL_want_async(s: anytype) @TypeOf(SSL_want(s) == SSL_ASYNC_PAUSED) {
    return SSL_want(s) == SSL_ASYNC_PAUSED;
}
pub inline fn SSL_want_async_job(s: anytype) @TypeOf(SSL_want(s) == SSL_ASYNC_NO_JOBS) {
    return SSL_want(s) == SSL_ASYNC_NO_JOBS;
}
pub inline fn SSL_want_client_hello_cb(s: anytype) @TypeOf(SSL_want(s) == SSL_CLIENT_HELLO_CB) {
    return SSL_want(s) == SSL_CLIENT_HELLO_CB;
}
pub const SSL_MAC_FLAG_READ_MAC_STREAM = 1;
pub const SSL_MAC_FLAG_WRITE_MAC_STREAM = 2;
pub const SSL2_VERSION = 0x0002;
pub const SSL2_MT_CLIENT_HELLO = 1;
pub const SSL3_CK_SCSV = 0x030000FF;
pub const SSL3_CK_FALLBACK_SCSV = 0x03005600;
pub const SSL3_CK_RSA_NULL_MD5 = 0x03000001;
pub const SSL3_CK_RSA_NULL_SHA = 0x03000002;
pub const SSL3_CK_RSA_RC4_40_MD5 = 0x03000003;
pub const SSL3_CK_RSA_RC4_128_MD5 = 0x03000004;
pub const SSL3_CK_RSA_RC4_128_SHA = 0x03000005;
pub const SSL3_CK_RSA_RC2_40_MD5 = 0x03000006;
pub const SSL3_CK_RSA_IDEA_128_SHA = 0x03000007;
pub const SSL3_CK_RSA_DES_40_CBC_SHA = 0x03000008;
pub const SSL3_CK_RSA_DES_64_CBC_SHA = 0x03000009;
pub const SSL3_CK_RSA_DES_192_CBC3_SHA = 0x0300000A;
pub const SSL3_CK_DH_DSS_DES_40_CBC_SHA = 0x0300000B;
pub const SSL3_CK_DH_DSS_DES_64_CBC_SHA = 0x0300000C;
pub const SSL3_CK_DH_DSS_DES_192_CBC3_SHA = 0x0300000D;
pub const SSL3_CK_DH_RSA_DES_40_CBC_SHA = 0x0300000E;
pub const SSL3_CK_DH_RSA_DES_64_CBC_SHA = 0x0300000F;
pub const SSL3_CK_DH_RSA_DES_192_CBC3_SHA = 0x03000010;
pub const SSL3_CK_DHE_DSS_DES_40_CBC_SHA = 0x03000011;
pub const SSL3_CK_EDH_DSS_DES_40_CBC_SHA = SSL3_CK_DHE_DSS_DES_40_CBC_SHA;
pub const SSL3_CK_DHE_DSS_DES_64_CBC_SHA = 0x03000012;
pub const SSL3_CK_EDH_DSS_DES_64_CBC_SHA = SSL3_CK_DHE_DSS_DES_64_CBC_SHA;
pub const SSL3_CK_DHE_DSS_DES_192_CBC3_SHA = 0x03000013;
pub const SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = SSL3_CK_DHE_DSS_DES_192_CBC3_SHA;
pub const SSL3_CK_DHE_RSA_DES_40_CBC_SHA = 0x03000014;
pub const SSL3_CK_EDH_RSA_DES_40_CBC_SHA = SSL3_CK_DHE_RSA_DES_40_CBC_SHA;
pub const SSL3_CK_DHE_RSA_DES_64_CBC_SHA = 0x03000015;
pub const SSL3_CK_EDH_RSA_DES_64_CBC_SHA = SSL3_CK_DHE_RSA_DES_64_CBC_SHA;
pub const SSL3_CK_DHE_RSA_DES_192_CBC3_SHA = 0x03000016;
pub const SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = SSL3_CK_DHE_RSA_DES_192_CBC3_SHA;
pub const SSL3_CK_ADH_RC4_40_MD5 = 0x03000017;
pub const SSL3_CK_ADH_RC4_128_MD5 = 0x03000018;
pub const SSL3_CK_ADH_DES_40_CBC_SHA = 0x03000019;
pub const SSL3_CK_ADH_DES_64_CBC_SHA = 0x0300001A;
pub const SSL3_CK_ADH_DES_192_CBC_SHA = 0x0300001B;
pub const SSL3_RFC_RSA_NULL_MD5 = "TLS_RSA_WITH_NULL_MD5";
pub const SSL3_RFC_RSA_NULL_SHA = "TLS_RSA_WITH_NULL_SHA";
pub const SSL3_RFC_RSA_DES_192_CBC3_SHA = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
pub const SSL3_RFC_DHE_DSS_DES_192_CBC3_SHA = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
pub const SSL3_RFC_DHE_RSA_DES_192_CBC3_SHA = "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA";
pub const SSL3_RFC_ADH_DES_192_CBC_SHA = "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA";
pub const SSL3_RFC_RSA_IDEA_128_SHA = "TLS_RSA_WITH_IDEA_CBC_SHA";
pub const SSL3_RFC_RSA_RC4_128_MD5 = "TLS_RSA_WITH_RC4_128_MD5";
pub const SSL3_RFC_RSA_RC4_128_SHA = "TLS_RSA_WITH_RC4_128_SHA";
pub const SSL3_RFC_ADH_RC4_128_MD5 = "TLS_DH_anon_WITH_RC4_128_MD5";
pub const SSL3_TXT_RSA_NULL_MD5 = "NULL-MD5";
pub const SSL3_TXT_RSA_NULL_SHA = "NULL-SHA";
pub const SSL3_TXT_RSA_RC4_40_MD5 = "EXP-RC4-MD5";
pub const SSL3_TXT_RSA_RC4_128_MD5 = "RC4-MD5";
pub const SSL3_TXT_RSA_RC4_128_SHA = "RC4-SHA";
pub const SSL3_TXT_RSA_RC2_40_MD5 = "EXP-RC2-CBC-MD5";
pub const SSL3_TXT_RSA_IDEA_128_SHA = "IDEA-CBC-SHA";
pub const SSL3_TXT_RSA_DES_40_CBC_SHA = "EXP-DES-CBC-SHA";
pub const SSL3_TXT_RSA_DES_64_CBC_SHA = "DES-CBC-SHA";
pub const SSL3_TXT_RSA_DES_192_CBC3_SHA = "DES-CBC3-SHA";
pub const SSL3_TXT_DH_DSS_DES_40_CBC_SHA = "EXP-DH-DSS-DES-CBC-SHA";
pub const SSL3_TXT_DH_DSS_DES_64_CBC_SHA = "DH-DSS-DES-CBC-SHA";
pub const SSL3_TXT_DH_DSS_DES_192_CBC3_SHA = "DH-DSS-DES-CBC3-SHA";
pub const SSL3_TXT_DH_RSA_DES_40_CBC_SHA = "EXP-DH-RSA-DES-CBC-SHA";
pub const SSL3_TXT_DH_RSA_DES_64_CBC_SHA = "DH-RSA-DES-CBC-SHA";
pub const SSL3_TXT_DH_RSA_DES_192_CBC3_SHA = "DH-RSA-DES-CBC3-SHA";
pub const SSL3_TXT_DHE_DSS_DES_40_CBC_SHA = "EXP-DHE-DSS-DES-CBC-SHA";
pub const SSL3_TXT_DHE_DSS_DES_64_CBC_SHA = "DHE-DSS-DES-CBC-SHA";
pub const SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA = "DHE-DSS-DES-CBC3-SHA";
pub const SSL3_TXT_DHE_RSA_DES_40_CBC_SHA = "EXP-DHE-RSA-DES-CBC-SHA";
pub const SSL3_TXT_DHE_RSA_DES_64_CBC_SHA = "DHE-RSA-DES-CBC-SHA";
pub const SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA = "DHE-RSA-DES-CBC3-SHA";
pub const SSL3_TXT_EDH_DSS_DES_40_CBC_SHA = "EXP-EDH-DSS-DES-CBC-SHA";
pub const SSL3_TXT_EDH_DSS_DES_64_CBC_SHA = "EDH-DSS-DES-CBC-SHA";
pub const SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA = "EDH-DSS-DES-CBC3-SHA";
pub const SSL3_TXT_EDH_RSA_DES_40_CBC_SHA = "EXP-EDH-RSA-DES-CBC-SHA";
pub const SSL3_TXT_EDH_RSA_DES_64_CBC_SHA = "EDH-RSA-DES-CBC-SHA";
pub const SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA = "EDH-RSA-DES-CBC3-SHA";
pub const SSL3_TXT_ADH_RC4_40_MD5 = "EXP-ADH-RC4-MD5";
pub const SSL3_TXT_ADH_RC4_128_MD5 = "ADH-RC4-MD5";
pub const SSL3_TXT_ADH_DES_40_CBC_SHA = "EXP-ADH-DES-CBC-SHA";
pub const SSL3_TXT_ADH_DES_64_CBC_SHA = "ADH-DES-CBC-SHA";
pub const SSL3_TXT_ADH_DES_192_CBC_SHA = "ADH-DES-CBC3-SHA";
pub const SSL3_SSL_SESSION_ID_LENGTH = 32;
pub const SSL3_MAX_SSL_SESSION_ID_LENGTH = 32;
pub const SSL3_MASTER_SECRET_SIZE = 48;
pub const SSL3_RANDOM_SIZE = 32;
pub const SSL3_SESSION_ID_SIZE = 32;
pub const SSL3_RT_HEADER_LENGTH = 5;
pub const SSL3_HM_HEADER_LENGTH = 4;
pub const SSL3_ALIGN_PAYLOAD = 8;
pub const SSL3_RT_MAX_MD_SIZE = 64;
pub const SSL_RT_MAX_CIPHER_BLOCK_SIZE = 16;
pub const SSL3_RT_MAX_EXTRA = 16384;
pub const SSL3_RT_MAX_PLAIN_LENGTH = 16384;
pub const SSL3_RT_MAX_COMPRESSED_OVERHEAD = 1024;
pub const SSL3_RT_MAX_ENCRYPTED_OVERHEAD = 256 + SSL3_RT_MAX_MD_SIZE;
pub const SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD = 256;
pub const SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD = SSL_RT_MAX_CIPHER_BLOCK_SIZE + SSL3_RT_MAX_MD_SIZE;
pub const SSL3_RT_MAX_COMPRESSED_LENGTH = SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_COMPRESSED_OVERHEAD;
pub const SSL3_RT_MAX_ENCRYPTED_LENGTH = SSL3_RT_MAX_ENCRYPTED_OVERHEAD + SSL3_RT_MAX_COMPRESSED_LENGTH;
pub const SSL3_RT_MAX_TLS13_ENCRYPTED_LENGTH = SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD;
pub const SSL3_RT_MAX_PACKET_SIZE = SSL3_RT_MAX_ENCRYPTED_LENGTH + SSL3_RT_HEADER_LENGTH;
pub const SSL3_MD_CLIENT_FINISHED_CONST = "\x43\x4c\x4e\x54";
pub const SSL3_MD_SERVER_FINISHED_CONST = "\x53\x52\x56\x52";
pub const SSL3_VERSION = 0x0300;
pub const SSL3_VERSION_MAJOR = 0x03;
pub const SSL3_VERSION_MINOR = 0x00;
pub const SSL3_RT_CHANGE_CIPHER_SPEC = 20;
pub const SSL3_RT_ALERT = 21;
pub const SSL3_RT_HANDSHAKE = 22;
pub const SSL3_RT_APPLICATION_DATA = 23;
pub const DTLS1_RT_HEARTBEAT = 24;
pub const TLS1_RT_CRYPTO = 0x1000;
pub const TLS1_RT_CRYPTO_PREMASTER = TLS1_RT_CRYPTO | 0x1;
pub const TLS1_RT_CRYPTO_CLIENT_RANDOM = TLS1_RT_CRYPTO | 0x2;
pub const TLS1_RT_CRYPTO_SERVER_RANDOM = TLS1_RT_CRYPTO | 0x3;
pub const TLS1_RT_CRYPTO_MASTER = TLS1_RT_CRYPTO | 0x4;
pub const TLS1_RT_CRYPTO_READ = 0x0000;
pub const TLS1_RT_CRYPTO_WRITE = 0x0100;
pub const TLS1_RT_CRYPTO_MAC = TLS1_RT_CRYPTO | 0x5;
pub const TLS1_RT_CRYPTO_KEY = TLS1_RT_CRYPTO | 0x6;
pub const TLS1_RT_CRYPTO_IV = TLS1_RT_CRYPTO | 0x7;
pub const TLS1_RT_CRYPTO_FIXED_IV = TLS1_RT_CRYPTO | 0x8;
pub const SSL3_RT_HEADER = 0x100;
pub const SSL3_RT_INNER_CONTENT_TYPE = 0x101;
pub const SSL3_AL_WARNING = 1;
pub const SSL3_AL_FATAL = 2;
pub const SSL3_AD_CLOSE_NOTIFY = 0;
pub const SSL3_AD_UNEXPECTED_MESSAGE = 10;
pub const SSL3_AD_BAD_RECORD_MAC = 20;
pub const SSL3_AD_DECOMPRESSION_FAILURE = 30;
pub const SSL3_AD_HANDSHAKE_FAILURE = 40;
pub const SSL3_AD_NO_CERTIFICATE = 41;
pub const SSL3_AD_BAD_CERTIFICATE = 42;
pub const SSL3_AD_UNSUPPORTED_CERTIFICATE = 43;
pub const SSL3_AD_CERTIFICATE_REVOKED = 44;
pub const SSL3_AD_CERTIFICATE_EXPIRED = 45;
pub const SSL3_AD_CERTIFICATE_UNKNOWN = 46;
pub const SSL3_AD_ILLEGAL_PARAMETER = 47;
pub const TLS1_HB_REQUEST = 1;
pub const TLS1_HB_RESPONSE = 2;
pub const SSL3_CT_RSA_SIGN = 1;
pub const SSL3_CT_DSS_SIGN = 2;
pub const SSL3_CT_RSA_FIXED_DH = 3;
pub const SSL3_CT_DSS_FIXED_DH = 4;
pub const SSL3_CT_RSA_EPHEMERAL_DH = 5;
pub const SSL3_CT_DSS_EPHEMERAL_DH = 6;
pub const SSL3_CT_FORTEZZA_DMS = 20;
pub const SSL3_CT_NUMBER = 10;
pub const SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = 0x0001;
pub const TLS1_FLAGS_TLS_PADDING_BUG = 0x0;
pub const TLS1_FLAGS_SKIP_CERT_VERIFY = 0x0010;
pub const TLS1_FLAGS_ENCRYPT_THEN_MAC_READ = 0x0100;
pub const TLS1_FLAGS_ENCRYPT_THEN_MAC = TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;
pub const TLS1_FLAGS_RECEIVED_EXTMS = 0x0200;
pub const TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE = 0x0400;
pub const TLS1_FLAGS_STATELESS = 0x0800;
pub const SSL3_MT_HELLO_REQUEST = 0;
pub const SSL3_MT_CLIENT_HELLO = 1;
pub const SSL3_MT_SERVER_HELLO = 2;
pub const SSL3_MT_NEWSESSION_TICKET = 4;
pub const SSL3_MT_END_OF_EARLY_DATA = 5;
pub const SSL3_MT_ENCRYPTED_EXTENSIONS = 8;
pub const SSL3_MT_CERTIFICATE = 11;
pub const SSL3_MT_SERVER_KEY_EXCHANGE = 12;
pub const SSL3_MT_CERTIFICATE_REQUEST = 13;
pub const SSL3_MT_SERVER_DONE = 14;
pub const SSL3_MT_CERTIFICATE_VERIFY = 15;
pub const SSL3_MT_CLIENT_KEY_EXCHANGE = 16;
pub const SSL3_MT_FINISHED = 20;
pub const SSL3_MT_CERTIFICATE_URL = 21;
pub const SSL3_MT_CERTIFICATE_STATUS = 22;
pub const SSL3_MT_SUPPLEMENTAL_DATA = 23;
pub const SSL3_MT_KEY_UPDATE = 24;
pub const SSL3_MT_NEXT_PROTO = 67;
pub const SSL3_MT_MESSAGE_HASH = 254;
pub const DTLS1_MT_HELLO_VERIFY_REQUEST = 3;
pub const SSL3_MT_CHANGE_CIPHER_SPEC = 0x0101;
pub const SSL3_MT_CCS = 1;
pub const SSL3_CC_READ = 0x001;
pub const SSL3_CC_WRITE = 0x002;
pub const SSL3_CC_CLIENT = 0x010;
pub const SSL3_CC_SERVER = 0x020;
pub const SSL3_CC_EARLY = 0x040;
pub const SSL3_CC_HANDSHAKE = 0x080;
pub const SSL3_CC_APPLICATION = 0x100;
pub const SSL3_CHANGE_CIPHER_CLIENT_WRITE = SSL3_CC_CLIENT | SSL3_CC_WRITE;
pub const SSL3_CHANGE_CIPHER_SERVER_READ = SSL3_CC_SERVER | SSL3_CC_READ;
pub const SSL3_CHANGE_CIPHER_CLIENT_READ = SSL3_CC_CLIENT | SSL3_CC_READ;
pub const SSL3_CHANGE_CIPHER_SERVER_WRITE = SSL3_CC_SERVER | SSL3_CC_WRITE;
pub const OPENSSL_TLS_SECURITY_LEVEL = 1;
pub const TLS1_VERSION = 0x0301;
pub const TLS1_1_VERSION = 0x0302;
pub const TLS1_2_VERSION = 0x0303;
pub const TLS1_3_VERSION = 0x0304;
pub const TLS_MAX_VERSION = TLS1_3_VERSION;
pub const TLS_ANY_VERSION = 0x10000;
pub const TLS1_VERSION_MAJOR = 0x03;
pub const TLS1_VERSION_MINOR = 0x01;
pub const TLS1_1_VERSION_MAJOR = 0x03;
pub const TLS1_1_VERSION_MINOR = 0x02;
pub const TLS1_2_VERSION_MAJOR = 0x03;
pub const TLS1_2_VERSION_MINOR = 0x03;
pub inline fn TLS1_get_version(s: anytype) @TypeOf(if ((SSL_version(s) >> 8) == TLS1_VERSION_MAJOR) SSL_version(s) else 0) {
    return if ((SSL_version(s) >> 8) == TLS1_VERSION_MAJOR) SSL_version(s) else 0;
}
pub inline fn TLS1_get_client_version(s: anytype) @TypeOf(if ((SSL_client_version(s) >> 8) == TLS1_VERSION_MAJOR) SSL_client_version(s) else 0) {
    return if ((SSL_client_version(s) >> 8) == TLS1_VERSION_MAJOR) SSL_client_version(s) else 0;
}
pub const TLS1_AD_DECRYPTION_FAILED = 21;
pub const TLS1_AD_RECORD_OVERFLOW = 22;
pub const TLS1_AD_UNKNOWN_CA = 48;
pub const TLS1_AD_ACCESS_DENIED = 49;
pub const TLS1_AD_DECODE_ERROR = 50;
pub const TLS1_AD_DECRYPT_ERROR = 51;
pub const TLS1_AD_EXPORT_RESTRICTION = 60;
pub const TLS1_AD_PROTOCOL_VERSION = 70;
pub const TLS1_AD_INSUFFICIENT_SECURITY = 71;
pub const TLS1_AD_INTERNAL_ERROR = 80;
pub const TLS1_AD_INAPPROPRIATE_FALLBACK = 86;
pub const TLS1_AD_USER_CANCELLED = 90;
pub const TLS1_AD_NO_RENEGOTIATION = 100;
pub const TLS13_AD_MISSING_EXTENSION = 109;
pub const TLS13_AD_CERTIFICATE_REQUIRED = 116;
pub const TLS1_AD_UNSUPPORTED_EXTENSION = 110;
pub const TLS1_AD_CERTIFICATE_UNOBTAINABLE = 111;
pub const TLS1_AD_UNRECOGNIZED_NAME = 112;
pub const TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113;
pub const TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 114;
pub const TLS1_AD_UNKNOWN_PSK_IDENTITY = 115;
pub const TLS1_AD_NO_APPLICATION_PROTOCOL = 120;
pub const TLSEXT_TYPE_server_name = 0;
pub const TLSEXT_TYPE_max_fragment_length = 1;
pub const TLSEXT_TYPE_client_certificate_url = 2;
pub const TLSEXT_TYPE_trusted_ca_keys = 3;
pub const TLSEXT_TYPE_truncated_hmac = 4;
pub const TLSEXT_TYPE_status_request = 5;
pub const TLSEXT_TYPE_user_mapping = 6;
pub const TLSEXT_TYPE_client_authz = 7;
pub const TLSEXT_TYPE_server_authz = 8;
pub const TLSEXT_TYPE_cert_type = 9;
pub const TLSEXT_TYPE_supported_groups = 10;
pub const TLSEXT_TYPE_elliptic_curves = TLSEXT_TYPE_supported_groups;
pub const TLSEXT_TYPE_ec_point_formats = 11;
pub const TLSEXT_TYPE_srp = 12;
pub const TLSEXT_TYPE_signature_algorithms = 13;
pub const TLSEXT_TYPE_use_srtp = 14;
pub const TLSEXT_TYPE_heartbeat = 15;
pub const TLSEXT_TYPE_application_layer_protocol_negotiation = 16;
pub const TLSEXT_TYPE_signed_certificate_timestamp = 18;
pub const TLSEXT_TYPE_padding = 21;
pub const TLSEXT_TYPE_encrypt_then_mac = 22;
pub const TLSEXT_TYPE_extended_master_secret = 23;
pub const TLSEXT_TYPE_session_ticket = 35;
pub const TLSEXT_TYPE_psk = 41;
pub const TLSEXT_TYPE_early_data = 42;
pub const TLSEXT_TYPE_supported_versions = 43;
pub const TLSEXT_TYPE_cookie = 44;
pub const TLSEXT_TYPE_psk_kex_modes = 45;
pub const TLSEXT_TYPE_certificate_authorities = 47;
pub const TLSEXT_TYPE_post_handshake_auth = 49;
pub const TLSEXT_TYPE_signature_algorithms_cert = 50;
pub const TLSEXT_TYPE_key_share = 51;
pub const TLSEXT_TYPE_renegotiate = 0xff01;
pub const TLSEXT_TYPE_next_proto_neg = 13172;
pub const TLSEXT_NAMETYPE_host_name = 0;
pub const TLSEXT_STATUSTYPE_ocsp = 1;
pub const TLSEXT_ECPOINTFORMAT_first = 0;
pub const TLSEXT_ECPOINTFORMAT_uncompressed = 0;
pub const TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime = 1;
pub const TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2 = 2;
pub const TLSEXT_ECPOINTFORMAT_last = 2;
pub const TLSEXT_signature_anonymous = 0;
pub const TLSEXT_signature_rsa = 1;
pub const TLSEXT_signature_dsa = 2;
pub const TLSEXT_signature_ecdsa = 3;
pub const TLSEXT_signature_gostr34102001 = 237;
pub const TLSEXT_signature_gostr34102012_256 = 238;
pub const TLSEXT_signature_gostr34102012_512 = 239;
pub const TLSEXT_signature_num = 7;
pub const TLSEXT_hash_none = 0;
pub const TLSEXT_hash_md5 = 1;
pub const TLSEXT_hash_sha1 = 2;
pub const TLSEXT_hash_sha224 = 3;
pub const TLSEXT_hash_sha256 = 4;
pub const TLSEXT_hash_sha384 = 5;
pub const TLSEXT_hash_sha512 = 6;
pub const TLSEXT_hash_gostr3411 = 237;
pub const TLSEXT_hash_gostr34112012_256 = 238;
pub const TLSEXT_hash_gostr34112012_512 = 239;
pub const TLSEXT_hash_num = 10;
pub const TLSEXT_nid_unknown = 0x1000000;
pub const TLSEXT_curve_P_256 = 23;
pub const TLSEXT_curve_P_384 = 24;
pub const TLSEXT_max_fragment_length_DISABLED = 0;
pub const TLSEXT_max_fragment_length_512 = 1;
pub const TLSEXT_max_fragment_length_1024 = 2;
pub const TLSEXT_max_fragment_length_2048 = 3;
pub const TLSEXT_max_fragment_length_4096 = 4;
pub const TLSEXT_MAXLEN_host_name = 255;
pub inline fn SSL_set_tlsext_host_name(s: anytype, name: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_TLSEXT_HOSTNAME, TLSEXT_NAMETYPE_host_name, (@import("std").meta.cast(?*c_void, name)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_TLSEXT_HOSTNAME, TLSEXT_NAMETYPE_host_name, (@import("std").meta.cast(?*c_void, name)));
}
pub inline fn SSL_set_tlsext_debug_arg(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_DEBUG_ARG, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_DEBUG_ARG, 0, arg);
}
pub inline fn SSL_get_tlsext_status_type(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE, 0, NULL);
}
pub inline fn SSL_set_tlsext_status_type(ssl: anytype, type_1: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE, type_1, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE, type_1, NULL);
}
pub inline fn SSL_get_tlsext_status_exts(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS, 0, arg);
}
pub inline fn SSL_set_tlsext_status_exts(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS, 0, arg);
}
pub inline fn SSL_get_tlsext_status_ids(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS, 0, arg);
}
pub inline fn SSL_set_tlsext_status_ids(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS, 0, arg);
}
pub inline fn SSL_get_tlsext_status_ocsp_resp(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP, 0, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP, 0, arg);
}
pub inline fn SSL_set_tlsext_status_ocsp_resp(ssl: anytype, arg: anytype, arglen: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP, arglen, arg)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP, arglen, arg);
}
pub const SSL_TLSEXT_ERR_OK = 0;
pub const SSL_TLSEXT_ERR_ALERT_WARNING = 1;
pub const SSL_TLSEXT_ERR_ALERT_FATAL = 2;
pub const SSL_TLSEXT_ERR_NOACK = 3;
pub inline fn SSL_CTX_set_tlsext_servername_arg(ctx: anytype, arg: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG, 0, arg)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG, 0, arg);
}
pub inline fn SSL_CTX_get_tlsext_ticket_keys(ctx: anytype, keys: anytype, keylen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_TLSEXT_TICKET_KEYS, keylen, keys)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_TLSEXT_TICKET_KEYS, keylen, keys);
}
pub inline fn SSL_CTX_set_tlsext_ticket_keys(ctx: anytype, keys: anytype, keylen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TLSEXT_TICKET_KEYS, keylen, keys)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TLSEXT_TICKET_KEYS, keylen, keys);
}
pub inline fn SSL_CTX_get_tlsext_status_cb(ssl: anytype, cb: anytype) @TypeOf(SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB, 0, (@import("std").meta.cast(?*c_void, cb)))) {
    return SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB, 0, (@import("std").meta.cast(?*c_void, cb)));
}
pub inline fn SSL_CTX_get_tlsext_status_arg(ssl: anytype, arg: anytype) @TypeOf(SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG, 0, arg)) {
    return SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG, 0, arg);
}
pub inline fn SSL_CTX_set_tlsext_status_arg(ssl: anytype, arg: anytype) @TypeOf(SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG, 0, arg)) {
    return SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG, 0, arg);
}
pub inline fn SSL_CTX_set_tlsext_status_type(ssl: anytype, type_1: anytype) @TypeOf(SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE, type_1, NULL)) {
    return SSL_CTX_ctrl(ssl, SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE, type_1, NULL);
}
pub inline fn SSL_CTX_get_tlsext_status_type(ssl: anytype) @TypeOf(SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE, 0, NULL)) {
    return SSL_CTX_ctrl(ssl, SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE, 0, NULL);
}
pub const TLS1_CK_PSK_WITH_RC4_128_SHA = 0x0300008A;
pub const TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008B;
pub const TLS1_CK_PSK_WITH_AES_128_CBC_SHA = 0x0300008C;
pub const TLS1_CK_PSK_WITH_AES_256_CBC_SHA = 0x0300008D;
pub const TLS1_CK_DHE_PSK_WITH_RC4_128_SHA = 0x0300008E;
pub const TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008F;
pub const TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA = 0x03000090;
pub const TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA = 0x03000091;
pub const TLS1_CK_RSA_PSK_WITH_RC4_128_SHA = 0x03000092;
pub const TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 0x03000093;
pub const TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA = 0x03000094;
pub const TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA = 0x03000095;
pub const TLS1_CK_PSK_WITH_AES_128_GCM_SHA256 = 0x030000A8;
pub const TLS1_CK_PSK_WITH_AES_256_GCM_SHA384 = 0x030000A9;
pub const TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256 = 0x030000AA;
pub const TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384 = 0x030000AB;
pub const TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256 = 0x030000AC;
pub const TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384 = 0x030000AD;
pub const TLS1_CK_PSK_WITH_AES_128_CBC_SHA256 = 0x030000AE;
pub const TLS1_CK_PSK_WITH_AES_256_CBC_SHA384 = 0x030000AF;
pub const TLS1_CK_PSK_WITH_NULL_SHA256 = 0x030000B0;
pub const TLS1_CK_PSK_WITH_NULL_SHA384 = 0x030000B1;
pub const TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256 = 0x030000B2;
pub const TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384 = 0x030000B3;
pub const TLS1_CK_DHE_PSK_WITH_NULL_SHA256 = 0x030000B4;
pub const TLS1_CK_DHE_PSK_WITH_NULL_SHA384 = 0x030000B5;
pub const TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256 = 0x030000B6;
pub const TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384 = 0x030000B7;
pub const TLS1_CK_RSA_PSK_WITH_NULL_SHA256 = 0x030000B8;
pub const TLS1_CK_RSA_PSK_WITH_NULL_SHA384 = 0x030000B9;
pub const TLS1_CK_PSK_WITH_NULL_SHA = 0x0300002C;
pub const TLS1_CK_DHE_PSK_WITH_NULL_SHA = 0x0300002D;
pub const TLS1_CK_RSA_PSK_WITH_NULL_SHA = 0x0300002E;
pub const TLS1_CK_RSA_WITH_AES_128_SHA = 0x0300002F;
pub const TLS1_CK_DH_DSS_WITH_AES_128_SHA = 0x03000030;
pub const TLS1_CK_DH_RSA_WITH_AES_128_SHA = 0x03000031;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_SHA = 0x03000032;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_SHA = 0x03000033;
pub const TLS1_CK_ADH_WITH_AES_128_SHA = 0x03000034;
pub const TLS1_CK_RSA_WITH_AES_256_SHA = 0x03000035;
pub const TLS1_CK_DH_DSS_WITH_AES_256_SHA = 0x03000036;
pub const TLS1_CK_DH_RSA_WITH_AES_256_SHA = 0x03000037;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_SHA = 0x03000038;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_SHA = 0x03000039;
pub const TLS1_CK_ADH_WITH_AES_256_SHA = 0x0300003A;
pub const TLS1_CK_RSA_WITH_NULL_SHA256 = 0x0300003B;
pub const TLS1_CK_RSA_WITH_AES_128_SHA256 = 0x0300003C;
pub const TLS1_CK_RSA_WITH_AES_256_SHA256 = 0x0300003D;
pub const TLS1_CK_DH_DSS_WITH_AES_128_SHA256 = 0x0300003E;
pub const TLS1_CK_DH_RSA_WITH_AES_128_SHA256 = 0x0300003F;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 = 0x03000040;
pub const TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000041;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000042;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000043;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000044;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000045;
pub const TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = 0x03000046;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 = 0x03000067;
pub const TLS1_CK_DH_DSS_WITH_AES_256_SHA256 = 0x03000068;
pub const TLS1_CK_DH_RSA_WITH_AES_256_SHA256 = 0x03000069;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 = 0x0300006A;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 = 0x0300006B;
pub const TLS1_CK_ADH_WITH_AES_128_SHA256 = 0x0300006C;
pub const TLS1_CK_ADH_WITH_AES_256_SHA256 = 0x0300006D;
pub const TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000084;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000085;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000086;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000087;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000088;
pub const TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = 0x03000089;
pub const TLS1_CK_RSA_WITH_SEED_SHA = 0x03000096;
pub const TLS1_CK_DH_DSS_WITH_SEED_SHA = 0x03000097;
pub const TLS1_CK_DH_RSA_WITH_SEED_SHA = 0x03000098;
pub const TLS1_CK_DHE_DSS_WITH_SEED_SHA = 0x03000099;
pub const TLS1_CK_DHE_RSA_WITH_SEED_SHA = 0x0300009A;
pub const TLS1_CK_ADH_WITH_SEED_SHA = 0x0300009B;
pub const TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009C;
pub const TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009D;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009E;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009F;
pub const TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 = 0x030000A0;
pub const TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 = 0x030000A1;
pub const TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x030000A2;
pub const TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x030000A3;
pub const TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 = 0x030000A4;
pub const TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 = 0x030000A5;
pub const TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 = 0x030000A6;
pub const TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 = 0x030000A7;
pub const TLS1_CK_RSA_WITH_AES_128_CCM = 0x0300C09C;
pub const TLS1_CK_RSA_WITH_AES_256_CCM = 0x0300C09D;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_CCM = 0x0300C09E;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_CCM = 0x0300C09F;
pub const TLS1_CK_RSA_WITH_AES_128_CCM_8 = 0x0300C0A0;
pub const TLS1_CK_RSA_WITH_AES_256_CCM_8 = 0x0300C0A1;
pub const TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8 = 0x0300C0A2;
pub const TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8 = 0x0300C0A3;
pub const TLS1_CK_PSK_WITH_AES_128_CCM = 0x0300C0A4;
pub const TLS1_CK_PSK_WITH_AES_256_CCM = 0x0300C0A5;
pub const TLS1_CK_DHE_PSK_WITH_AES_128_CCM = 0x0300C0A6;
pub const TLS1_CK_DHE_PSK_WITH_AES_256_CCM = 0x0300C0A7;
pub const TLS1_CK_PSK_WITH_AES_128_CCM_8 = 0x0300C0A8;
pub const TLS1_CK_PSK_WITH_AES_256_CCM_8 = 0x0300C0A9;
pub const TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8 = 0x0300C0AA;
pub const TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8 = 0x0300C0AB;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM = 0x0300C0AC;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM = 0x0300C0AD;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0x0300C0AE;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 0x0300C0AF;
pub const TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BA;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BB;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BC;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BD;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BE;
pub const TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BF;
pub const TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C0;
pub const TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C1;
pub const TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C2;
pub const TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C3;
pub const TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C4;
pub const TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C5;
pub const TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = 0x0300C001;
pub const TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = 0x0300C002;
pub const TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300C003;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0x0300C004;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0x0300C005;
pub const TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = 0x0300C006;
pub const TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = 0x0300C007;
pub const TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300C008;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0x0300C009;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0x0300C00A;
pub const TLS1_CK_ECDH_RSA_WITH_NULL_SHA = 0x0300C00B;
pub const TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = 0x0300C00C;
pub const TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = 0x0300C00D;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = 0x0300C00E;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = 0x0300C00F;
pub const TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = 0x0300C010;
pub const TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = 0x0300C011;
pub const TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 0x0300C012;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0x0300C013;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0x0300C014;
pub const TLS1_CK_ECDH_anon_WITH_NULL_SHA = 0x0300C015;
pub const TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = 0x0300C016;
pub const TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = 0x0300C017;
pub const TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = 0x0300C018;
pub const TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = 0x0300C019;
pub const TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 0x0300C01A;
pub const TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 0x0300C01B;
pub const TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 0x0300C01C;
pub const TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA = 0x0300C01D;
pub const TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 0x0300C01E;
pub const TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 0x0300C01F;
pub const TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA = 0x0300C020;
pub const TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 0x0300C021;
pub const TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 0x0300C022;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256 = 0x0300C023;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384 = 0x0300C024;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256 = 0x0300C025;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384 = 0x0300C026;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256 = 0x0300C027;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384 = 0x0300C028;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256 = 0x0300C029;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384 = 0x0300C02A;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300C02B;
pub const TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300C02C;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300C02D;
pub const TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300C02E;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300C02F;
pub const TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300C030;
pub const TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 0x0300C031;
pub const TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 0x0300C032;
pub const TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA = 0x0300C033;
pub const TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300C034;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA = 0x0300C035;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA = 0x0300C036;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 0x0300C037;
pub const TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 0x0300C038;
pub const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA = 0x0300C039;
pub const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256 = 0x0300C03A;
pub const TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384 = 0x0300C03B;
pub const TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C072;
pub const TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C073;
pub const TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C074;
pub const TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C075;
pub const TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C076;
pub const TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C077;
pub const TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C078;
pub const TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C079;
pub const TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C094;
pub const TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C095;
pub const TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C096;
pub const TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C097;
pub const TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C098;
pub const TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C099;
pub const TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C09A;
pub const TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C09B;
pub const TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300CCA8;
pub const TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 0x0300CCA9;
pub const TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300CCAA;
pub const TLS1_CK_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAB;
pub const TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAC;
pub const TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAD;
pub const TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAE;
pub const TLS1_3_CK_AES_128_GCM_SHA256 = 0x03001301;
pub const TLS1_3_CK_AES_256_GCM_SHA384 = 0x03001302;
pub const TLS1_3_CK_CHACHA20_POLY1305_SHA256 = 0x03001303;
pub const TLS1_3_CK_AES_128_CCM_SHA256 = 0x03001304;
pub const TLS1_3_CK_AES_128_CCM_8_SHA256 = 0x03001305;
pub const TLS1_CK_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C050;
pub const TLS1_CK_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C051;
pub const TLS1_CK_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C052;
pub const TLS1_CK_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C053;
pub const TLS1_CK_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C054;
pub const TLS1_CK_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C055;
pub const TLS1_CK_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 0x0300C056;
pub const TLS1_CK_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 0x0300C057;
pub const TLS1_CK_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 0x0300C058;
pub const TLS1_CK_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 0x0300C059;
pub const TLS1_CK_DH_anon_WITH_ARIA_128_GCM_SHA256 = 0x0300C05A;
pub const TLS1_CK_DH_anon_WITH_ARIA_256_GCM_SHA384 = 0x0300C05B;
pub const TLS1_CK_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C05C;
pub const TLS1_CK_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C05D;
pub const TLS1_CK_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C05E;
pub const TLS1_CK_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C05F;
pub const TLS1_CK_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C060;
pub const TLS1_CK_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C061;
pub const TLS1_CK_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 0x0300C062;
pub const TLS1_CK_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 0x0300C063;
pub const TLS1_CK_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300C06A;
pub const TLS1_CK_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300C06B;
pub const TLS1_CK_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300C06C;
pub const TLS1_CK_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300C06D;
pub const TLS1_CK_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 0x0300C06E;
pub const TLS1_CK_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 0x0300C06F;
pub const TLS1_RFC_RSA_WITH_AES_128_SHA = "TLS_RSA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_DHE_DSS_WITH_AES_128_SHA = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_AES_128_SHA = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_ADH_WITH_AES_128_SHA = "TLS_DH_anon_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_RSA_WITH_AES_256_SHA = "TLS_RSA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_DHE_DSS_WITH_AES_256_SHA = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_AES_256_SHA = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_ADH_WITH_AES_256_SHA = "TLS_DH_anon_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_RSA_WITH_NULL_SHA256 = "TLS_RSA_WITH_NULL_SHA256";
pub const TLS1_RFC_RSA_WITH_AES_128_SHA256 = "TLS_RSA_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_RSA_WITH_AES_256_SHA256 = "TLS_RSA_WITH_AES_256_CBC_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_AES_128_SHA256 = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_AES_128_SHA256 = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_AES_256_SHA256 = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_AES_256_SHA256 = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256";
pub const TLS1_RFC_ADH_WITH_AES_128_SHA256 = "TLS_DH_anon_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_ADH_WITH_AES_256_SHA256 = "TLS_DH_anon_WITH_AES_256_CBC_SHA256";
pub const TLS1_RFC_RSA_WITH_AES_128_GCM_SHA256 = "TLS_RSA_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_RSA_WITH_AES_256_GCM_SHA384 = "TLS_RSA_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_DHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_DHE_DSS_WITH_AES_128_GCM_SHA256 = "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_AES_256_GCM_SHA384 = "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_ADH_WITH_AES_128_GCM_SHA256 = "TLS_DH_anon_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_ADH_WITH_AES_256_GCM_SHA384 = "TLS_DH_anon_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_RSA_WITH_AES_128_CCM = "TLS_RSA_WITH_AES_128_CCM";
pub const TLS1_RFC_RSA_WITH_AES_256_CCM = "TLS_RSA_WITH_AES_256_CCM";
pub const TLS1_RFC_DHE_RSA_WITH_AES_128_CCM = "TLS_DHE_RSA_WITH_AES_128_CCM";
pub const TLS1_RFC_DHE_RSA_WITH_AES_256_CCM = "TLS_DHE_RSA_WITH_AES_256_CCM";
pub const TLS1_RFC_RSA_WITH_AES_128_CCM_8 = "TLS_RSA_WITH_AES_128_CCM_8";
pub const TLS1_RFC_RSA_WITH_AES_256_CCM_8 = "TLS_RSA_WITH_AES_256_CCM_8";
pub const TLS1_RFC_DHE_RSA_WITH_AES_128_CCM_8 = "TLS_DHE_RSA_WITH_AES_128_CCM_8";
pub const TLS1_RFC_DHE_RSA_WITH_AES_256_CCM_8 = "TLS_DHE_RSA_WITH_AES_256_CCM_8";
pub const TLS1_RFC_PSK_WITH_AES_128_CCM = "TLS_PSK_WITH_AES_128_CCM";
pub const TLS1_RFC_PSK_WITH_AES_256_CCM = "TLS_PSK_WITH_AES_256_CCM";
pub const TLS1_RFC_DHE_PSK_WITH_AES_128_CCM = "TLS_DHE_PSK_WITH_AES_128_CCM";
pub const TLS1_RFC_DHE_PSK_WITH_AES_256_CCM = "TLS_DHE_PSK_WITH_AES_256_CCM";
pub const TLS1_RFC_PSK_WITH_AES_128_CCM_8 = "TLS_PSK_WITH_AES_128_CCM_8";
pub const TLS1_RFC_PSK_WITH_AES_256_CCM_8 = "TLS_PSK_WITH_AES_256_CCM_8";
pub const TLS1_RFC_DHE_PSK_WITH_AES_128_CCM_8 = "TLS_PSK_DHE_WITH_AES_128_CCM_8";
pub const TLS1_RFC_DHE_PSK_WITH_AES_256_CCM_8 = "TLS_PSK_DHE_WITH_AES_256_CCM_8";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM = "TLS_ECDHE_ECDSA_WITH_AES_128_CCM";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM = "TLS_ECDHE_ECDSA_WITH_AES_256_CCM";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CCM_8 = "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CCM_8 = "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8";
pub const TLS1_3_RFC_AES_128_GCM_SHA256 = "TLS_AES_128_GCM_SHA256";
pub const TLS1_3_RFC_AES_256_GCM_SHA384 = "TLS_AES_256_GCM_SHA384";
pub const TLS1_3_RFC_CHACHA20_POLY1305_SHA256 = "TLS_CHACHA20_POLY1305_SHA256";
pub const TLS1_3_RFC_AES_128_CCM_SHA256 = "TLS_AES_128_CCM_SHA256";
pub const TLS1_3_RFC_AES_128_CCM_8_SHA256 = "TLS_AES_128_CCM_8_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_NULL_SHA = "TLS_ECDHE_ECDSA_WITH_NULL_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_ECDHE_RSA_WITH_NULL_SHA = "TLS_ECDHE_RSA_WITH_NULL_SHA";
pub const TLS1_RFC_ECDHE_RSA_WITH_DES_192_CBC3_SHA = "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_128_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_256_CBC_SHA = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_ECDH_anon_WITH_NULL_SHA = "TLS_ECDH_anon_WITH_NULL_SHA";
pub const TLS1_RFC_ECDH_anon_WITH_DES_192_CBC3_SHA = "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_ECDH_anon_WITH_AES_128_CBC_SHA = "TLS_ECDH_anon_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_ECDH_anon_WITH_AES_256_CBC_SHA = "TLS_ECDH_anon_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_128_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_256_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_PSK_WITH_NULL_SHA = "TLS_PSK_WITH_NULL_SHA";
pub const TLS1_RFC_DHE_PSK_WITH_NULL_SHA = "TLS_DHE_PSK_WITH_NULL_SHA";
pub const TLS1_RFC_RSA_PSK_WITH_NULL_SHA = "TLS_RSA_PSK_WITH_NULL_SHA";
pub const TLS1_RFC_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_PSK_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_PSK_WITH_AES_128_CBC_SHA = "TLS_PSK_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_PSK_WITH_AES_256_CBC_SHA = "TLS_PSK_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_DHE_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA = "TLS_DHE_PSK_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA = "TLS_DHE_PSK_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_RSA_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA = "TLS_RSA_PSK_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA = "TLS_RSA_PSK_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_PSK_WITH_AES_128_GCM_SHA256 = "TLS_PSK_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_PSK_WITH_AES_256_GCM_SHA384 = "TLS_PSK_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_DHE_PSK_WITH_AES_128_GCM_SHA256 = "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_AES_256_GCM_SHA384 = "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_RSA_PSK_WITH_AES_128_GCM_SHA256 = "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_AES_256_GCM_SHA384 = "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384";
pub const TLS1_RFC_PSK_WITH_AES_128_CBC_SHA256 = "TLS_PSK_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_PSK_WITH_AES_256_CBC_SHA384 = "TLS_PSK_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_PSK_WITH_NULL_SHA256 = "TLS_PSK_WITH_NULL_SHA256";
pub const TLS1_RFC_PSK_WITH_NULL_SHA384 = "TLS_PSK_WITH_NULL_SHA384";
pub const TLS1_RFC_DHE_PSK_WITH_AES_128_CBC_SHA256 = "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_AES_256_CBC_SHA384 = "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_DHE_PSK_WITH_NULL_SHA256 = "TLS_DHE_PSK_WITH_NULL_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_NULL_SHA384 = "TLS_DHE_PSK_WITH_NULL_SHA384";
pub const TLS1_RFC_RSA_PSK_WITH_AES_128_CBC_SHA256 = "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_AES_256_CBC_SHA384 = "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_RSA_PSK_WITH_NULL_SHA256 = "TLS_RSA_PSK_WITH_NULL_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_NULL_SHA384 = "TLS_RSA_PSK_WITH_NULL_SHA384";
pub const TLS1_RFC_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA = "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA = "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384";
pub const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA = "TLS_ECDHE_PSK_WITH_NULL_SHA";
pub const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA256 = "TLS_ECDHE_PSK_WITH_NULL_SHA256";
pub const TLS1_RFC_ECDHE_PSK_WITH_NULL_SHA384 = "TLS_ECDHE_PSK_WITH_NULL_SHA384";
pub const TLS1_RFC_SRP_SHA_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_CHACHA20_POLY1305 = "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_ECDHE_RSA_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_PSK_WITH_CHACHA20_POLY1305 = "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_ECDHE_PSK_WITH_CHACHA20_POLY1305 = "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_CHACHA20_POLY1305 = "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_CHACHA20_POLY1305 = "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256";
pub const TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256";
pub const TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA256 = "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256";
pub const TLS1_RFC_RSA_WITH_CAMELLIA_256_CBC_SHA = "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA";
pub const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA";
pub const TLS1_RFC_ADH_WITH_CAMELLIA_256_CBC_SHA = "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA";
pub const TLS1_RFC_RSA_WITH_CAMELLIA_128_CBC_SHA = "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA";
pub const TLS1_RFC_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA";
pub const TLS1_RFC_ADH_WITH_CAMELLIA_128_CBC_SHA = "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
pub const TLS1_RFC_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
pub const TLS1_RFC_RSA_WITH_SEED_SHA = "TLS_RSA_WITH_SEED_CBC_SHA";
pub const TLS1_RFC_DHE_DSS_WITH_SEED_SHA = "TLS_DHE_DSS_WITH_SEED_CBC_SHA";
pub const TLS1_RFC_DHE_RSA_WITH_SEED_SHA = "TLS_DHE_RSA_WITH_SEED_CBC_SHA";
pub const TLS1_RFC_ADH_WITH_SEED_SHA = "TLS_DH_anon_WITH_SEED_CBC_SHA";
pub const TLS1_RFC_ECDHE_PSK_WITH_RC4_128_SHA = "TLS_ECDHE_PSK_WITH_RC4_128_SHA";
pub const TLS1_RFC_ECDH_anon_WITH_RC4_128_SHA = "TLS_ECDH_anon_WITH_RC4_128_SHA";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_RC4_128_SHA = "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA";
pub const TLS1_RFC_ECDHE_RSA_WITH_RC4_128_SHA = "TLS_ECDHE_RSA_WITH_RC4_128_SHA";
pub const TLS1_RFC_PSK_WITH_RC4_128_SHA = "TLS_PSK_WITH_RC4_128_SHA";
pub const TLS1_RFC_RSA_PSK_WITH_RC4_128_SHA = "TLS_RSA_PSK_WITH_RC4_128_SHA";
pub const TLS1_RFC_DHE_PSK_WITH_RC4_128_SHA = "TLS_DHE_PSK_WITH_RC4_128_SHA";
pub const TLS1_RFC_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_RSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_RSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DH_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DH_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DH_DSS_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DH_DSS_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DH_anon_WITH_ARIA_128_GCM_SHA256 = "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DH_anon_WITH_ARIA_256_GCM_SHA384 = "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_PSK_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_PSK_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_RFC_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256";
pub const TLS1_RFC_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384";
pub const TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA = "DHE-DSS-RC4-SHA";
pub const TLS1_TXT_PSK_WITH_NULL_SHA = "PSK-NULL-SHA";
pub const TLS1_TXT_DHE_PSK_WITH_NULL_SHA = "DHE-PSK-NULL-SHA";
pub const TLS1_TXT_RSA_PSK_WITH_NULL_SHA = "RSA-PSK-NULL-SHA";
pub const TLS1_TXT_RSA_WITH_AES_128_SHA = "AES128-SHA";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_SHA = "DH-DSS-AES128-SHA";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_SHA = "DH-RSA-AES128-SHA";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA = "DHE-DSS-AES128-SHA";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA = "DHE-RSA-AES128-SHA";
pub const TLS1_TXT_ADH_WITH_AES_128_SHA = "ADH-AES128-SHA";
pub const TLS1_TXT_RSA_WITH_AES_256_SHA = "AES256-SHA";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_SHA = "DH-DSS-AES256-SHA";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_SHA = "DH-RSA-AES256-SHA";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA = "DHE-DSS-AES256-SHA";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA = "DHE-RSA-AES256-SHA";
pub const TLS1_TXT_ADH_WITH_AES_256_SHA = "ADH-AES256-SHA";
pub const TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA = "ECDH-ECDSA-NULL-SHA";
pub const TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA = "ECDH-ECDSA-RC4-SHA";
pub const TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = "ECDH-ECDSA-DES-CBC3-SHA";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "ECDH-ECDSA-AES128-SHA";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "ECDH-ECDSA-AES256-SHA";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA = "ECDHE-ECDSA-NULL-SHA";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA = "ECDHE-ECDSA-RC4-SHA";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = "ECDHE-ECDSA-DES-CBC3-SHA";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "ECDHE-ECDSA-AES128-SHA";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "ECDHE-ECDSA-AES256-SHA";
pub const TLS1_TXT_ECDH_RSA_WITH_NULL_SHA = "ECDH-RSA-NULL-SHA";
pub const TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA = "ECDH-RSA-RC4-SHA";
pub const TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA = "ECDH-RSA-DES-CBC3-SHA";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA = "ECDH-RSA-AES128-SHA";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA = "ECDH-RSA-AES256-SHA";
pub const TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA = "ECDHE-RSA-NULL-SHA";
pub const TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA = "ECDHE-RSA-RC4-SHA";
pub const TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA = "ECDHE-RSA-DES-CBC3-SHA";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA = "ECDHE-RSA-AES128-SHA";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA = "ECDHE-RSA-AES256-SHA";
pub const TLS1_TXT_ECDH_anon_WITH_NULL_SHA = "AECDH-NULL-SHA";
pub const TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA = "AECDH-RC4-SHA";
pub const TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA = "AECDH-DES-CBC3-SHA";
pub const TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA = "AECDH-AES128-SHA";
pub const TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA = "AECDH-AES256-SHA";
pub const TLS1_TXT_PSK_WITH_RC4_128_SHA = "PSK-RC4-SHA";
pub const TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA = "PSK-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_PSK_WITH_AES_128_CBC_SHA = "PSK-AES128-CBC-SHA";
pub const TLS1_TXT_PSK_WITH_AES_256_CBC_SHA = "PSK-AES256-CBC-SHA";
pub const TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA = "DHE-PSK-RC4-SHA";
pub const TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA = "DHE-PSK-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA = "DHE-PSK-AES128-CBC-SHA";
pub const TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA = "DHE-PSK-AES256-CBC-SHA";
pub const TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA = "RSA-PSK-RC4-SHA";
pub const TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA = "RSA-PSK-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA = "RSA-PSK-AES128-CBC-SHA";
pub const TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA = "RSA-PSK-AES256-CBC-SHA";
pub const TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256 = "PSK-AES128-GCM-SHA256";
pub const TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384 = "PSK-AES256-GCM-SHA384";
pub const TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256 = "DHE-PSK-AES128-GCM-SHA256";
pub const TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384 = "DHE-PSK-AES256-GCM-SHA384";
pub const TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256 = "RSA-PSK-AES128-GCM-SHA256";
pub const TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384 = "RSA-PSK-AES256-GCM-SHA384";
pub const TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256 = "PSK-AES128-CBC-SHA256";
pub const TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384 = "PSK-AES256-CBC-SHA384";
pub const TLS1_TXT_PSK_WITH_NULL_SHA256 = "PSK-NULL-SHA256";
pub const TLS1_TXT_PSK_WITH_NULL_SHA384 = "PSK-NULL-SHA384";
pub const TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256 = "DHE-PSK-AES128-CBC-SHA256";
pub const TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384 = "DHE-PSK-AES256-CBC-SHA384";
pub const TLS1_TXT_DHE_PSK_WITH_NULL_SHA256 = "DHE-PSK-NULL-SHA256";
pub const TLS1_TXT_DHE_PSK_WITH_NULL_SHA384 = "DHE-PSK-NULL-SHA384";
pub const TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256 = "RSA-PSK-AES128-CBC-SHA256";
pub const TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384 = "RSA-PSK-AES256-CBC-SHA384";
pub const TLS1_TXT_RSA_PSK_WITH_NULL_SHA256 = "RSA-PSK-NULL-SHA256";
pub const TLS1_TXT_RSA_PSK_WITH_NULL_SHA384 = "RSA-PSK-NULL-SHA384";
pub const TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA = "SRP-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = "SRP-RSA-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = "SRP-DSS-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA = "SRP-AES-128-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = "SRP-RSA-AES-128-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = "SRP-DSS-AES-128-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA = "SRP-AES-256-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = "SRP-RSA-AES-256-CBC-SHA";
pub const TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = "SRP-DSS-AES-256-CBC-SHA";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA = "CAMELLIA128-SHA";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = "DH-DSS-CAMELLIA128-SHA";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = "DH-RSA-CAMELLIA128-SHA";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = "DHE-DSS-CAMELLIA128-SHA";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = "DHE-RSA-CAMELLIA128-SHA";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA = "ADH-CAMELLIA128-SHA";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA = "CAMELLIA256-SHA";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = "DH-DSS-CAMELLIA256-SHA";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = "DH-RSA-CAMELLIA256-SHA";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = "DHE-DSS-CAMELLIA256-SHA";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = "DHE-RSA-CAMELLIA256-SHA";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA = "ADH-CAMELLIA256-SHA";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "CAMELLIA128-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DH-DSS-CAMELLIA128-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DH-RSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-DSS-CAMELLIA128-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-RSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256 = "ADH-CAMELLIA128-SHA256";
pub const TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "CAMELLIA256-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DH-DSS-CAMELLIA256-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DH-RSA-CAMELLIA256-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-DSS-CAMELLIA256-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-RSA-CAMELLIA256-SHA256";
pub const TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256 = "ADH-CAMELLIA256-SHA256";
pub const TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "PSK-CAMELLIA128-SHA256";
pub const TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "PSK-CAMELLIA256-SHA384";
pub const TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-PSK-CAMELLIA128-SHA256";
pub const TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "DHE-PSK-CAMELLIA256-SHA384";
pub const TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "RSA-PSK-CAMELLIA128-SHA256";
pub const TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "RSA-PSK-CAMELLIA256-SHA384";
pub const TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-PSK-CAMELLIA128-SHA256";
pub const TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-PSK-CAMELLIA256-SHA384";
pub const TLS1_TXT_RSA_WITH_SEED_SHA = "SEED-SHA";
pub const TLS1_TXT_DH_DSS_WITH_SEED_SHA = "DH-DSS-SEED-SHA";
pub const TLS1_TXT_DH_RSA_WITH_SEED_SHA = "DH-RSA-SEED-SHA";
pub const TLS1_TXT_DHE_DSS_WITH_SEED_SHA = "DHE-DSS-SEED-SHA";
pub const TLS1_TXT_DHE_RSA_WITH_SEED_SHA = "DHE-RSA-SEED-SHA";
pub const TLS1_TXT_ADH_WITH_SEED_SHA = "ADH-SEED-SHA";
pub const TLS1_TXT_RSA_WITH_NULL_SHA256 = "NULL-SHA256";
pub const TLS1_TXT_RSA_WITH_AES_128_SHA256 = "AES128-SHA256";
pub const TLS1_TXT_RSA_WITH_AES_256_SHA256 = "AES256-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_SHA256 = "DH-DSS-AES128-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_SHA256 = "DH-RSA-AES128-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256 = "DHE-DSS-AES128-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256 = "DHE-RSA-AES128-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_SHA256 = "DH-DSS-AES256-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_SHA256 = "DH-RSA-AES256-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256 = "DHE-DSS-AES256-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256 = "DHE-RSA-AES256-SHA256";
pub const TLS1_TXT_ADH_WITH_AES_128_SHA256 = "ADH-AES128-SHA256";
pub const TLS1_TXT_ADH_WITH_AES_256_SHA256 = "ADH-AES256-SHA256";
pub const TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256 = "AES128-GCM-SHA256";
pub const TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384 = "AES256-GCM-SHA384";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256 = "DHE-RSA-AES128-GCM-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384 = "DHE-RSA-AES256-GCM-SHA384";
pub const TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256 = "DH-RSA-AES128-GCM-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384 = "DH-RSA-AES256-GCM-SHA384";
pub const TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256 = "DHE-DSS-AES128-GCM-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384 = "DHE-DSS-AES256-GCM-SHA384";
pub const TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256 = "DH-DSS-AES128-GCM-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384 = "DH-DSS-AES256-GCM-SHA384";
pub const TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256 = "ADH-AES128-GCM-SHA256";
pub const TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384 = "ADH-AES256-GCM-SHA384";
pub const TLS1_TXT_RSA_WITH_AES_128_CCM = "AES128-CCM";
pub const TLS1_TXT_RSA_WITH_AES_256_CCM = "AES256-CCM";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_CCM = "DHE-RSA-AES128-CCM";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_CCM = "DHE-RSA-AES256-CCM";
pub const TLS1_TXT_RSA_WITH_AES_128_CCM_8 = "AES128-CCM8";
pub const TLS1_TXT_RSA_WITH_AES_256_CCM_8 = "AES256-CCM8";
pub const TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8 = "DHE-RSA-AES128-CCM8";
pub const TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8 = "DHE-RSA-AES256-CCM8";
pub const TLS1_TXT_PSK_WITH_AES_128_CCM = "PSK-AES128-CCM";
pub const TLS1_TXT_PSK_WITH_AES_256_CCM = "PSK-AES256-CCM";
pub const TLS1_TXT_DHE_PSK_WITH_AES_128_CCM = "DHE-PSK-AES128-CCM";
pub const TLS1_TXT_DHE_PSK_WITH_AES_256_CCM = "DHE-PSK-AES256-CCM";
pub const TLS1_TXT_PSK_WITH_AES_128_CCM_8 = "PSK-AES128-CCM8";
pub const TLS1_TXT_PSK_WITH_AES_256_CCM_8 = "PSK-AES256-CCM8";
pub const TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8 = "DHE-PSK-AES128-CCM8";
pub const TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8 = "DHE-PSK-AES256-CCM8";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM = "ECDHE-ECDSA-AES128-CCM";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM = "ECDHE-ECDSA-AES256-CCM";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8 = "ECDHE-ECDSA-AES128-CCM8";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8 = "ECDHE-ECDSA-AES256-CCM8";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256 = "ECDHE-ECDSA-AES128-SHA256";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384 = "ECDHE-ECDSA-AES256-SHA384";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256 = "ECDH-ECDSA-AES128-SHA256";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384 = "ECDH-ECDSA-AES256-SHA384";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256 = "ECDHE-RSA-AES128-SHA256";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384 = "ECDHE-RSA-AES256-SHA384";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256 = "ECDH-RSA-AES128-SHA256";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384 = "ECDH-RSA-AES256-SHA384";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDHE-ECDSA-AES128-GCM-SHA256";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDHE-ECDSA-AES256-GCM-SHA384";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDH-ECDSA-AES128-GCM-SHA256";
pub const TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDH-ECDSA-AES256-GCM-SHA384";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "ECDHE-RSA-AES128-GCM-SHA256";
pub const TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "ECDHE-RSA-AES256-GCM-SHA384";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "ECDH-RSA-AES128-GCM-SHA256";
pub const TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "ECDH-RSA-AES256-GCM-SHA384";
pub const TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA = "ECDHE-PSK-RC4-SHA";
pub const TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = "ECDHE-PSK-3DES-EDE-CBC-SHA";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA = "ECDHE-PSK-AES128-CBC-SHA";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA = "ECDHE-PSK-AES256-CBC-SHA";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = "ECDHE-PSK-AES128-CBC-SHA256";
pub const TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = "ECDHE-PSK-AES256-CBC-SHA384";
pub const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA = "ECDHE-PSK-NULL-SHA";
pub const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256 = "ECDHE-PSK-NULL-SHA256";
pub const TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384 = "ECDHE-PSK-NULL-SHA384";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-ECDSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-ECDSA-CAMELLIA256-SHA384";
pub const TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-ECDSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-ECDSA-CAMELLIA256-SHA384";
pub const TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-RSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-RSA-CAMELLIA256-SHA384";
pub const TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-RSA-CAMELLIA128-SHA256";
pub const TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-RSA-CAMELLIA256-SHA384";
pub const TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305 = "ECDHE-RSA-CHACHA20-POLY1305";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = "ECDHE-ECDSA-CHACHA20-POLY1305";
pub const TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305 = "DHE-RSA-CHACHA20-POLY1305";
pub const TLS1_TXT_PSK_WITH_CHACHA20_POLY1305 = "PSK-CHACHA20-POLY1305";
pub const TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305 = "ECDHE-PSK-CHACHA20-POLY1305";
pub const TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305 = "DHE-PSK-CHACHA20-POLY1305";
pub const TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305 = "RSA-PSK-CHACHA20-POLY1305";
pub const TLS1_TXT_RSA_WITH_ARIA_128_GCM_SHA256 = "ARIA128-GCM-SHA256";
pub const TLS1_TXT_RSA_WITH_ARIA_256_GCM_SHA384 = "ARIA256-GCM-SHA384";
pub const TLS1_TXT_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = "DHE-RSA-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = "DHE-RSA-ARIA256-GCM-SHA384";
pub const TLS1_TXT_DH_RSA_WITH_ARIA_128_GCM_SHA256 = "DH-RSA-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DH_RSA_WITH_ARIA_256_GCM_SHA384 = "DH-RSA-ARIA256-GCM-SHA384";
pub const TLS1_TXT_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = "DHE-DSS-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = "DHE-DSS-ARIA256-GCM-SHA384";
pub const TLS1_TXT_DH_DSS_WITH_ARIA_128_GCM_SHA256 = "DH-DSS-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DH_DSS_WITH_ARIA_256_GCM_SHA384 = "DH-DSS-ARIA256-GCM-SHA384";
pub const TLS1_TXT_DH_anon_WITH_ARIA_128_GCM_SHA256 = "ADH-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DH_anon_WITH_ARIA_256_GCM_SHA384 = "ADH-ARIA256-GCM-SHA384";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = "ECDHE-ECDSA-ARIA128-GCM-SHA256";
pub const TLS1_TXT_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = "ECDHE-ECDSA-ARIA256-GCM-SHA384";
pub const TLS1_TXT_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = "ECDH-ECDSA-ARIA128-GCM-SHA256";
pub const TLS1_TXT_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = "ECDH-ECDSA-ARIA256-GCM-SHA384";
pub const TLS1_TXT_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = "ECDHE-ARIA128-GCM-SHA256";
pub const TLS1_TXT_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = "ECDHE-ARIA256-GCM-SHA384";
pub const TLS1_TXT_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = "ECDH-ARIA128-GCM-SHA256";
pub const TLS1_TXT_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = "ECDH-ARIA256-GCM-SHA384";
pub const TLS1_TXT_PSK_WITH_ARIA_128_GCM_SHA256 = "PSK-ARIA128-GCM-SHA256";
pub const TLS1_TXT_PSK_WITH_ARIA_256_GCM_SHA384 = "PSK-ARIA256-GCM-SHA384";
pub const TLS1_TXT_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = "DHE-PSK-ARIA128-GCM-SHA256";
pub const TLS1_TXT_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = "DHE-PSK-ARIA256-GCM-SHA384";
pub const TLS1_TXT_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = "RSA-PSK-ARIA128-GCM-SHA256";
pub const TLS1_TXT_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = "RSA-PSK-ARIA256-GCM-SHA384";
pub const TLS_CT_RSA_SIGN = 1;
pub const TLS_CT_DSS_SIGN = 2;
pub const TLS_CT_RSA_FIXED_DH = 3;
pub const TLS_CT_DSS_FIXED_DH = 4;
pub const TLS_CT_ECDSA_SIGN = 64;
pub const TLS_CT_RSA_FIXED_ECDH = 65;
pub const TLS_CT_ECDSA_FIXED_ECDH = 66;
pub const TLS_CT_GOST01_SIGN = 22;
pub const TLS_CT_GOST12_SIGN = 238;
pub const TLS_CT_GOST12_512_SIGN = 239;
pub const TLS_CT_NUMBER = 10;
pub const TLS1_FINISH_MAC_LENGTH = 12;
pub const TLS_MD_MAX_CONST_SIZE = 22;
pub const TLS_MD_CLIENT_FINISH_CONST = "client finished";
pub const TLS_MD_CLIENT_FINISH_CONST_SIZE = 15;
pub const TLS_MD_SERVER_FINISH_CONST = "server finished";
pub const TLS_MD_SERVER_FINISH_CONST_SIZE = 15;
pub const TLS_MD_KEY_EXPANSION_CONST = "key expansion";
pub const TLS_MD_KEY_EXPANSION_CONST_SIZE = 13;
pub const TLS_MD_CLIENT_WRITE_KEY_CONST = "client write key";
pub const TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = 16;
pub const TLS_MD_SERVER_WRITE_KEY_CONST = "server write key";
pub const TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = 16;
pub const TLS_MD_IV_BLOCK_CONST = "IV block";
pub const TLS_MD_IV_BLOCK_CONST_SIZE = 8;
pub const TLS_MD_MASTER_SECRET_CONST = "master secret";
pub const TLS_MD_MASTER_SECRET_CONST_SIZE = 13;
pub const TLS_MD_EXTENDED_MASTER_SECRET_CONST = "extended master secret";
pub const TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE = 22;
pub const DTLS1_VERSION = 0xFEFF;
pub const DTLS1_2_VERSION = 0xFEFD;
pub const DTLS_MIN_VERSION = DTLS1_VERSION;
pub const DTLS_MAX_VERSION = DTLS1_2_VERSION;
pub const DTLS1_VERSION_MAJOR = 0xFE;
pub const DTLS1_BAD_VER = 0x0100;
pub const DTLS_ANY_VERSION = 0x1FFFF;
pub const DTLS1_COOKIE_LENGTH = 256;
pub const DTLS1_RT_HEADER_LENGTH = 13;
pub const DTLS1_HM_HEADER_LENGTH = 12;
pub const DTLS1_HM_BAD_FRAGMENT = -2;
pub const DTLS1_HM_FRAGMENT_RETRY = -3;
pub const DTLS1_CCS_HEADER_LENGTH = 1;
pub const DTLS1_AL_HEADER_LENGTH = 2;
pub const DTLS1_TMO_READ_COUNT = 2;
pub const DTLS1_TMO_WRITE_COUNT = 2;
pub const DTLS1_TMO_ALERT_COUNT = 12;
pub const SRTP_AES128_CM_SHA1_80 = 0x0001;
pub const SRTP_AES128_CM_SHA1_32 = 0x0002;
pub const SRTP_AES128_F8_SHA1_80 = 0x0003;
pub const SRTP_AES128_F8_SHA1_32 = 0x0004;
pub const SRTP_NULL_SHA1_80 = 0x0005;
pub const SRTP_NULL_SHA1_32 = 0x0006;
pub const SRTP_AEAD_AES_128_GCM = 0x0007;
pub const SRTP_AEAD_AES_256_GCM = 0x0008;
pub inline fn SSL_set_app_data(s: anytype, arg: anytype) @TypeOf(SSL_set_ex_data(s, 0, (@import("std").meta.cast([*c]u8, arg)))) {
    return SSL_set_ex_data(s, 0, (@import("std").meta.cast([*c]u8, arg)));
}
pub inline fn SSL_get_app_data(s: anytype) @TypeOf(SSL_get_ex_data(s, 0)) {
    return SSL_get_ex_data(s, 0);
}
pub inline fn SSL_SESSION_set_app_data(s: anytype, a: anytype) @TypeOf(SSL_SESSION_set_ex_data(s, 0, (@import("std").meta.cast([*c]u8, a)))) {
    return SSL_SESSION_set_ex_data(s, 0, (@import("std").meta.cast([*c]u8, a)));
}
pub inline fn SSL_SESSION_get_app_data(s: anytype) @TypeOf(SSL_SESSION_get_ex_data(s, 0)) {
    return SSL_SESSION_get_ex_data(s, 0);
}
pub inline fn SSL_CTX_get_app_data(ctx: anytype) @TypeOf(SSL_CTX_get_ex_data(ctx, 0)) {
    return SSL_CTX_get_ex_data(ctx, 0);
}
pub inline fn SSL_CTX_set_app_data(ctx: anytype, arg: anytype) @TypeOf(SSL_CTX_set_ex_data(ctx, 0, (@import("std").meta.cast([*c]u8, arg)))) {
    return SSL_CTX_set_ex_data(ctx, 0, (@import("std").meta.cast([*c]u8, arg)));
}
pub const SSL_KEY_UPDATE_NONE = -1;
pub const SSL_KEY_UPDATE_NOT_REQUESTED = 0;
pub const SSL_KEY_UPDATE_REQUESTED = 1;
pub const SSL_ST_CONNECT = 0x1000;
pub const SSL_ST_ACCEPT = 0x2000;
pub const SSL_ST_MASK = 0x0FFF;
pub const SSL_CB_LOOP = 0x01;
pub const SSL_CB_EXIT = 0x02;
pub const SSL_CB_READ = 0x04;
pub const SSL_CB_WRITE = 0x08;
pub const SSL_CB_ALERT = 0x4000;
pub const SSL_CB_READ_ALERT = SSL_CB_ALERT | SSL_CB_READ;
pub const SSL_CB_WRITE_ALERT = SSL_CB_ALERT | SSL_CB_WRITE;
pub const SSL_CB_ACCEPT_LOOP = SSL_ST_ACCEPT | SSL_CB_LOOP;
pub const SSL_CB_ACCEPT_EXIT = SSL_ST_ACCEPT | SSL_CB_EXIT;
pub const SSL_CB_CONNECT_LOOP = SSL_ST_CONNECT | SSL_CB_LOOP;
pub const SSL_CB_CONNECT_EXIT = SSL_ST_CONNECT | SSL_CB_EXIT;
pub const SSL_CB_HANDSHAKE_START = 0x10;
pub const SSL_CB_HANDSHAKE_DONE = 0x20;
pub inline fn SSL_in_connect_init(a: anytype) @TypeOf((SSL_in_init(a) != 0) and !(SSL_is_server(a) != 0)) {
    return (SSL_in_init(a) != 0) and !(SSL_is_server(a) != 0);
}
pub inline fn SSL_in_accept_init(a: anytype) @TypeOf((SSL_in_init(a) != 0) and (SSL_is_server(a) != 0)) {
    return (SSL_in_init(a) != 0) and (SSL_is_server(a) != 0);
}
pub const SSL_ST_READ_HEADER = 0xF0;
pub const SSL_ST_READ_BODY = 0xF1;
pub const SSL_ST_READ_DONE = 0xF2;
pub const SSL_VERIFY_NONE = 0x00;
pub const SSL_VERIFY_PEER = 0x01;
pub const SSL_VERIFY_FAIL_IF_NO_PEER_CERT = 0x02;
pub const SSL_VERIFY_CLIENT_ONCE = 0x04;
pub const SSL_VERIFY_POST_HANDSHAKE = 0x08;
pub inline fn SSL_get_cipher(s: anytype) @TypeOf(SSL_CIPHER_get_name(SSL_get_current_cipher(s))) {
    return SSL_CIPHER_get_name(SSL_get_current_cipher(s));
}
pub inline fn SSL_get_cipher_bits(s: anytype, np: anytype) @TypeOf(SSL_CIPHER_get_bits(SSL_get_current_cipher(s), np)) {
    return SSL_CIPHER_get_bits(SSL_get_current_cipher(s), np);
}
pub inline fn SSL_get_cipher_version(s: anytype) @TypeOf(SSL_CIPHER_get_version(SSL_get_current_cipher(s))) {
    return SSL_CIPHER_get_version(SSL_get_current_cipher(s));
}
pub inline fn SSL_get_cipher_name(s: anytype) @TypeOf(SSL_CIPHER_get_name(SSL_get_current_cipher(s))) {
    return SSL_CIPHER_get_name(SSL_get_current_cipher(s));
}
pub inline fn SSL_get_time(a: anytype) @TypeOf(SSL_SESSION_get_time(a)) {
    return SSL_SESSION_get_time(a);
}
pub inline fn SSL_set_time(a: anytype, b: anytype) @TypeOf(SSL_SESSION_set_time(a, b)) {
    return SSL_SESSION_set_time(a, b);
}
pub inline fn SSL_get_timeout(a: anytype) @TypeOf(SSL_SESSION_get_timeout(a)) {
    return SSL_SESSION_get_timeout(a);
}
pub inline fn SSL_set_timeout(a: anytype, b: anytype) @TypeOf(SSL_SESSION_set_timeout(a, b)) {
    return SSL_SESSION_set_timeout(a, b);
}
pub inline fn d2i_SSL_SESSION_bio(bp: anytype, s_id: anytype) @TypeOf(ASN1_d2i_bio_of(SSL_SESSION, SSL_SESSION_new, d2i_SSL_SESSION, bp, s_id)) {
    return ASN1_d2i_bio_of(SSL_SESSION, SSL_SESSION_new, d2i_SSL_SESSION, bp, s_id);
}
pub inline fn i2d_SSL_SESSION_bio(bp: anytype, s_id: anytype) @TypeOf(ASN1_i2d_bio_of(SSL_SESSION, i2d_SSL_SESSION, bp, s_id)) {
    return ASN1_i2d_bio_of(SSL_SESSION, i2d_SSL_SESSION, bp, s_id);
}
pub const SSL_AD_REASON_OFFSET = 1000;
pub const SSL_AD_CLOSE_NOTIFY = SSL3_AD_CLOSE_NOTIFY;
pub const SSL_AD_UNEXPECTED_MESSAGE = SSL3_AD_UNEXPECTED_MESSAGE;
pub const SSL_AD_BAD_RECORD_MAC = SSL3_AD_BAD_RECORD_MAC;
pub const SSL_AD_DECRYPTION_FAILED = TLS1_AD_DECRYPTION_FAILED;
pub const SSL_AD_RECORD_OVERFLOW = TLS1_AD_RECORD_OVERFLOW;
pub const SSL_AD_DECOMPRESSION_FAILURE = SSL3_AD_DECOMPRESSION_FAILURE;
pub const SSL_AD_HANDSHAKE_FAILURE = SSL3_AD_HANDSHAKE_FAILURE;
pub const SSL_AD_NO_CERTIFICATE = SSL3_AD_NO_CERTIFICATE;
pub const SSL_AD_BAD_CERTIFICATE = SSL3_AD_BAD_CERTIFICATE;
pub const SSL_AD_UNSUPPORTED_CERTIFICATE = SSL3_AD_UNSUPPORTED_CERTIFICATE;
pub const SSL_AD_CERTIFICATE_REVOKED = SSL3_AD_CERTIFICATE_REVOKED;
pub const SSL_AD_CERTIFICATE_EXPIRED = SSL3_AD_CERTIFICATE_EXPIRED;
pub const SSL_AD_CERTIFICATE_UNKNOWN = SSL3_AD_CERTIFICATE_UNKNOWN;
pub const SSL_AD_ILLEGAL_PARAMETER = SSL3_AD_ILLEGAL_PARAMETER;
pub const SSL_AD_UNKNOWN_CA = TLS1_AD_UNKNOWN_CA;
pub const SSL_AD_ACCESS_DENIED = TLS1_AD_ACCESS_DENIED;
pub const SSL_AD_DECODE_ERROR = TLS1_AD_DECODE_ERROR;
pub const SSL_AD_DECRYPT_ERROR = TLS1_AD_DECRYPT_ERROR;
pub const SSL_AD_EXPORT_RESTRICTION = TLS1_AD_EXPORT_RESTRICTION;
pub const SSL_AD_PROTOCOL_VERSION = TLS1_AD_PROTOCOL_VERSION;
pub const SSL_AD_INSUFFICIENT_SECURITY = TLS1_AD_INSUFFICIENT_SECURITY;
pub const SSL_AD_INTERNAL_ERROR = TLS1_AD_INTERNAL_ERROR;
pub const SSL_AD_USER_CANCELLED = TLS1_AD_USER_CANCELLED;
pub const SSL_AD_NO_RENEGOTIATION = TLS1_AD_NO_RENEGOTIATION;
pub const SSL_AD_MISSING_EXTENSION = TLS13_AD_MISSING_EXTENSION;
pub const SSL_AD_CERTIFICATE_REQUIRED = TLS13_AD_CERTIFICATE_REQUIRED;
pub const SSL_AD_UNSUPPORTED_EXTENSION = TLS1_AD_UNSUPPORTED_EXTENSION;
pub const SSL_AD_CERTIFICATE_UNOBTAINABLE = TLS1_AD_CERTIFICATE_UNOBTAINABLE;
pub const SSL_AD_UNRECOGNIZED_NAME = TLS1_AD_UNRECOGNIZED_NAME;
pub const SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE;
pub const SSL_AD_BAD_CERTIFICATE_HASH_VALUE = TLS1_AD_BAD_CERTIFICATE_HASH_VALUE;
pub const SSL_AD_UNKNOWN_PSK_IDENTITY = TLS1_AD_UNKNOWN_PSK_IDENTITY;
pub const SSL_AD_INAPPROPRIATE_FALLBACK = TLS1_AD_INAPPROPRIATE_FALLBACK;
pub const SSL_AD_NO_APPLICATION_PROTOCOL = TLS1_AD_NO_APPLICATION_PROTOCOL;
pub const SSL_ERROR_NONE = 0;
pub const SSL_ERROR_SSL = 1;
pub const SSL_ERROR_WANT_READ = 2;
pub const SSL_ERROR_WANT_WRITE = 3;
pub const SSL_ERROR_WANT_X509_LOOKUP = 4;
pub const SSL_ERROR_SYSCALL = 5;
pub const SSL_ERROR_ZERO_RETURN = 6;
pub const SSL_ERROR_WANT_CONNECT = 7;
pub const SSL_ERROR_WANT_ACCEPT = 8;
pub const SSL_ERROR_WANT_ASYNC = 9;
pub const SSL_ERROR_WANT_ASYNC_JOB = 10;
pub const SSL_ERROR_WANT_CLIENT_HELLO_CB = 11;
pub const SSL_CTRL_SET_TMP_DH = 3;
pub const SSL_CTRL_SET_TMP_ECDH = 4;
pub const SSL_CTRL_SET_TMP_DH_CB = 6;
pub const SSL_CTRL_GET_CLIENT_CERT_REQUEST = 9;
pub const SSL_CTRL_GET_NUM_RENEGOTIATIONS = 10;
pub const SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = 11;
pub const SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = 12;
pub const SSL_CTRL_GET_FLAGS = 13;
pub const SSL_CTRL_EXTRA_CHAIN_CERT = 14;
pub const SSL_CTRL_SET_MSG_CALLBACK = 15;
pub const SSL_CTRL_SET_MSG_CALLBACK_ARG = 16;
pub const SSL_CTRL_SET_MTU = 17;
pub const SSL_CTRL_SESS_NUMBER = 20;
pub const SSL_CTRL_SESS_CONNECT = 21;
pub const SSL_CTRL_SESS_CONNECT_GOOD = 22;
pub const SSL_CTRL_SESS_CONNECT_RENEGOTIATE = 23;
pub const SSL_CTRL_SESS_ACCEPT = 24;
pub const SSL_CTRL_SESS_ACCEPT_GOOD = 25;
pub const SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = 26;
pub const SSL_CTRL_SESS_HIT = 27;
pub const SSL_CTRL_SESS_CB_HIT = 28;
pub const SSL_CTRL_SESS_MISSES = 29;
pub const SSL_CTRL_SESS_TIMEOUTS = 30;
pub const SSL_CTRL_SESS_CACHE_FULL = 31;
pub const SSL_CTRL_MODE = 33;
pub const SSL_CTRL_GET_READ_AHEAD = 40;
pub const SSL_CTRL_SET_READ_AHEAD = 41;
pub const SSL_CTRL_SET_SESS_CACHE_SIZE = 42;
pub const SSL_CTRL_GET_SESS_CACHE_SIZE = 43;
pub const SSL_CTRL_SET_SESS_CACHE_MODE = 44;
pub const SSL_CTRL_GET_SESS_CACHE_MODE = 45;
pub const SSL_CTRL_GET_MAX_CERT_LIST = 50;
pub const SSL_CTRL_SET_MAX_CERT_LIST = 51;
pub const SSL_CTRL_SET_MAX_SEND_FRAGMENT = 52;
pub const SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = 53;
pub const SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = 54;
pub const SSL_CTRL_SET_TLSEXT_HOSTNAME = 55;
pub const SSL_CTRL_SET_TLSEXT_DEBUG_CB = 56;
pub const SSL_CTRL_SET_TLSEXT_DEBUG_ARG = 57;
pub const SSL_CTRL_GET_TLSEXT_TICKET_KEYS = 58;
pub const SSL_CTRL_SET_TLSEXT_TICKET_KEYS = 59;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = 63;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = 64;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = 65;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = 66;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = 67;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = 68;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = 69;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = 70;
pub const SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = 71;
pub const SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = 72;
pub const SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB = 75;
pub const SSL_CTRL_SET_SRP_VERIFY_PARAM_CB = 76;
pub const SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB = 77;
pub const SSL_CTRL_SET_SRP_ARG = 78;
pub const SSL_CTRL_SET_TLS_EXT_SRP_USERNAME = 79;
pub const SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH = 80;
pub const SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD = 81;
pub const DTLS_CTRL_GET_TIMEOUT = 73;
pub const DTLS_CTRL_HANDLE_TIMEOUT = 74;
pub const SSL_CTRL_GET_RI_SUPPORT = 76;
pub const SSL_CTRL_CLEAR_MODE = 78;
pub const SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB = 79;
pub const SSL_CTRL_GET_EXTRA_CHAIN_CERTS = 82;
pub const SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS = 83;
pub const SSL_CTRL_CHAIN = 88;
pub const SSL_CTRL_CHAIN_CERT = 89;
pub const SSL_CTRL_GET_GROUPS = 90;
pub const SSL_CTRL_SET_GROUPS = 91;
pub const SSL_CTRL_SET_GROUPS_LIST = 92;
pub const SSL_CTRL_GET_SHARED_GROUP = 93;
pub const SSL_CTRL_SET_SIGALGS = 97;
pub const SSL_CTRL_SET_SIGALGS_LIST = 98;
pub const SSL_CTRL_CERT_FLAGS = 99;
pub const SSL_CTRL_CLEAR_CERT_FLAGS = 100;
pub const SSL_CTRL_SET_CLIENT_SIGALGS = 101;
pub const SSL_CTRL_SET_CLIENT_SIGALGS_LIST = 102;
pub const SSL_CTRL_GET_CLIENT_CERT_TYPES = 103;
pub const SSL_CTRL_SET_CLIENT_CERT_TYPES = 104;
pub const SSL_CTRL_BUILD_CERT_CHAIN = 105;
pub const SSL_CTRL_SET_VERIFY_CERT_STORE = 106;
pub const SSL_CTRL_SET_CHAIN_CERT_STORE = 107;
pub const SSL_CTRL_GET_PEER_SIGNATURE_NID = 108;
pub const SSL_CTRL_GET_PEER_TMP_KEY = 109;
pub const SSL_CTRL_GET_RAW_CIPHERLIST = 110;
pub const SSL_CTRL_GET_EC_POINT_FORMATS = 111;
pub const SSL_CTRL_GET_CHAIN_CERTS = 115;
pub const SSL_CTRL_SELECT_CURRENT_CERT = 116;
pub const SSL_CTRL_SET_CURRENT_CERT = 117;
pub const SSL_CTRL_SET_DH_AUTO = 118;
pub const DTLS_CTRL_SET_LINK_MTU = 120;
pub const DTLS_CTRL_GET_LINK_MIN_MTU = 121;
pub const SSL_CTRL_GET_EXTMS_SUPPORT = 122;
pub const SSL_CTRL_SET_MIN_PROTO_VERSION = 123;
pub const SSL_CTRL_SET_MAX_PROTO_VERSION = 124;
pub const SSL_CTRL_SET_SPLIT_SEND_FRAGMENT = 125;
pub const SSL_CTRL_SET_MAX_PIPELINES = 126;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE = 127;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB = 128;
pub const SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG = 129;
pub const SSL_CTRL_GET_MIN_PROTO_VERSION = 130;
pub const SSL_CTRL_GET_MAX_PROTO_VERSION = 131;
pub const SSL_CTRL_GET_SIGNATURE_NID = 132;
pub const SSL_CTRL_GET_TMP_KEY = 133;
pub const SSL_CERT_SET_FIRST = 1;
pub const SSL_CERT_SET_NEXT = 2;
pub const SSL_CERT_SET_SERVER = 3;
pub inline fn DTLSv1_get_timeout(ssl: anytype, arg: anytype) @TypeOf(SSL_ctrl(ssl, DTLS_CTRL_GET_TIMEOUT, 0, (@import("std").meta.cast(?*c_void, arg)))) {
    return SSL_ctrl(ssl, DTLS_CTRL_GET_TIMEOUT, 0, (@import("std").meta.cast(?*c_void, arg)));
}
pub inline fn DTLSv1_handle_timeout(ssl: anytype) @TypeOf(SSL_ctrl(ssl, DTLS_CTRL_HANDLE_TIMEOUT, 0, NULL)) {
    return SSL_ctrl(ssl, DTLS_CTRL_HANDLE_TIMEOUT, 0, NULL);
}
pub inline fn SSL_num_renegotiations(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_NUM_RENEGOTIATIONS, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_NUM_RENEGOTIATIONS, 0, NULL);
}
pub inline fn SSL_clear_num_renegotiations(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS, 0, NULL);
}
pub inline fn SSL_total_renegotiations(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_TOTAL_RENEGOTIATIONS, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_TOTAL_RENEGOTIATIONS, 0, NULL);
}
pub inline fn SSL_CTX_set_tmp_dh(ctx: anytype, dh: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_DH, 0, (@import("std").meta.cast([*c]u8, dh)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_DH, 0, (@import("std").meta.cast([*c]u8, dh)));
}
pub inline fn SSL_CTX_set_tmp_ecdh(ctx: anytype, ecdh: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_ECDH, 0, (@import("std").meta.cast([*c]u8, ecdh)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_TMP_ECDH, 0, (@import("std").meta.cast([*c]u8, ecdh)));
}
pub inline fn SSL_CTX_set_dh_auto(ctx: anytype, onoff: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_DH_AUTO, onoff, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_DH_AUTO, onoff, NULL);
}
pub inline fn SSL_set_dh_auto(s: anytype, onoff: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_DH_AUTO, onoff, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_SET_DH_AUTO, onoff, NULL);
}
pub inline fn SSL_set_tmp_dh(ssl: anytype, dh: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TMP_DH, 0, (@import("std").meta.cast([*c]u8, dh)))) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TMP_DH, 0, (@import("std").meta.cast([*c]u8, dh)));
}
pub inline fn SSL_set_tmp_ecdh(ssl: anytype, ecdh: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_TMP_ECDH, 0, (@import("std").meta.cast([*c]u8, ecdh)))) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_TMP_ECDH, 0, (@import("std").meta.cast([*c]u8, ecdh)));
}
pub inline fn SSL_CTX_add_extra_chain_cert(ctx: anytype, x509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_EXTRA_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_EXTRA_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_CTX_get_extra_chain_certs(ctx: anytype, px509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_EXTRA_CHAIN_CERTS, 0, px509)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_EXTRA_CHAIN_CERTS, 0, px509);
}
pub inline fn SSL_CTX_get_extra_chain_certs_only(ctx: anytype, px509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_EXTRA_CHAIN_CERTS, 1, px509)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_EXTRA_CHAIN_CERTS, 1, px509);
}
pub inline fn SSL_CTX_clear_extra_chain_certs(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS, 0, NULL);
}
pub inline fn SSL_CTX_set0_chain(ctx: anytype, sk: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN, 0, (@import("std").meta.cast([*c]u8, sk)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN, 0, (@import("std").meta.cast([*c]u8, sk)));
}
pub inline fn SSL_CTX_set1_chain(ctx: anytype, sk: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN, 1, (@import("std").meta.cast([*c]u8, sk)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN, 1, (@import("std").meta.cast([*c]u8, sk)));
}
pub inline fn SSL_CTX_add0_chain_cert(ctx: anytype, x509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_CTX_add1_chain_cert(ctx: anytype, x509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN_CERT, 1, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_CHAIN_CERT, 1, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_CTX_get0_chain_certs(ctx: anytype, px509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_CHAIN_CERTS, 0, px509)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_CHAIN_CERTS, 0, px509);
}
pub inline fn SSL_CTX_clear_chain_certs(ctx: anytype) @TypeOf(SSL_CTX_set0_chain(ctx, NULL)) {
    return SSL_CTX_set0_chain(ctx, NULL);
}
pub inline fn SSL_CTX_build_cert_chain(ctx: anytype, flags: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL);
}
pub inline fn SSL_CTX_select_current_cert(ctx: anytype, x509: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SELECT_CURRENT_CERT, 0, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SELECT_CURRENT_CERT, 0, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_CTX_set_current_cert(ctx: anytype, op: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CURRENT_CERT, op, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CURRENT_CERT, op, NULL);
}
pub inline fn SSL_CTX_set0_verify_cert_store(ctx: anytype, st: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_VERIFY_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_VERIFY_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_CTX_set1_verify_cert_store(ctx: anytype, st: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_VERIFY_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_VERIFY_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_CTX_set0_chain_cert_store(ctx: anytype, st: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CHAIN_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CHAIN_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_CTX_set1_chain_cert_store(ctx: anytype, st: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CHAIN_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CHAIN_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_set0_chain(s: anytype, sk: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CHAIN, 0, (@import("std").meta.cast([*c]u8, sk)))) {
    return SSL_ctrl(s, SSL_CTRL_CHAIN, 0, (@import("std").meta.cast([*c]u8, sk)));
}
pub inline fn SSL_set1_chain(s: anytype, sk: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CHAIN, 1, (@import("std").meta.cast([*c]u8, sk)))) {
    return SSL_ctrl(s, SSL_CTRL_CHAIN, 1, (@import("std").meta.cast([*c]u8, sk)));
}
pub inline fn SSL_add0_chain_cert(s: anytype, x509: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_ctrl(s, SSL_CTRL_CHAIN_CERT, 0, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_add1_chain_cert(s: anytype, x509: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_CHAIN_CERT, 1, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_ctrl(s, SSL_CTRL_CHAIN_CERT, 1, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_get0_chain_certs(s: anytype, px509: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_CHAIN_CERTS, 0, px509)) {
    return SSL_ctrl(s, SSL_CTRL_GET_CHAIN_CERTS, 0, px509);
}
pub inline fn SSL_clear_chain_certs(s: anytype) @TypeOf(SSL_set0_chain(s, NULL)) {
    return SSL_set0_chain(s, NULL);
}
pub inline fn SSL_build_cert_chain(s: anytype, flags: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL);
}
pub inline fn SSL_select_current_cert(s: anytype, x509: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SELECT_CURRENT_CERT, 0, (@import("std").meta.cast([*c]u8, x509)))) {
    return SSL_ctrl(s, SSL_CTRL_SELECT_CURRENT_CERT, 0, (@import("std").meta.cast([*c]u8, x509)));
}
pub inline fn SSL_set_current_cert(s: anytype, op: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CURRENT_CERT, op, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_SET_CURRENT_CERT, op, NULL);
}
pub inline fn SSL_set0_verify_cert_store(s: anytype, st: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_VERIFY_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_VERIFY_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_set1_verify_cert_store(s: anytype, st: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_VERIFY_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_VERIFY_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_set0_chain_cert_store(s: anytype, st: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CHAIN_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_CHAIN_CERT_STORE, 0, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_set1_chain_cert_store(s: anytype, st: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CHAIN_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_CHAIN_CERT_STORE, 1, (@import("std").meta.cast([*c]u8, st)));
}
pub inline fn SSL_get1_groups(s: anytype, glist: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_GROUPS, 0, (@import("std").meta.cast([*c]c_int, glist)))) {
    return SSL_ctrl(s, SSL_CTRL_GET_GROUPS, 0, (@import("std").meta.cast([*c]c_int, glist)));
}
pub inline fn SSL_CTX_set1_groups(ctx: anytype, glist: anytype, glistlen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_GROUPS, glistlen, (@import("std").meta.cast([*c]u8, glist)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_GROUPS, glistlen, (@import("std").meta.cast([*c]u8, glist)));
}
pub inline fn SSL_CTX_set1_groups_list(ctx: anytype, s: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_GROUPS_LIST, 0, (@import("std").meta.cast([*c]u8, s)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_GROUPS_LIST, 0, (@import("std").meta.cast([*c]u8, s)));
}
pub inline fn SSL_set1_groups(s: anytype, glist: anytype, glistlen: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_GROUPS, glistlen, (@import("std").meta.cast([*c]u8, glist)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_GROUPS, glistlen, (@import("std").meta.cast([*c]u8, glist)));
}
pub inline fn SSL_set1_groups_list(s: anytype, str: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_GROUPS_LIST, 0, (@import("std").meta.cast([*c]u8, str)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_GROUPS_LIST, 0, (@import("std").meta.cast([*c]u8, str)));
}
pub inline fn SSL_get_shared_group(s: anytype, n: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_SHARED_GROUP, n, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_GET_SHARED_GROUP, n, NULL);
}
pub inline fn SSL_CTX_set1_sigalgs(ctx: anytype, slist: anytype, slistlen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)));
}
pub inline fn SSL_CTX_set1_sigalgs_list(ctx: anytype, s: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, s)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, s)));
}
pub inline fn SSL_set1_sigalgs(s: anytype, slist: anytype, slistlen: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)));
}
pub inline fn SSL_set1_sigalgs_list(s: anytype, str: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, str)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, str)));
}
pub inline fn SSL_CTX_set1_client_sigalgs(ctx: anytype, slist: anytype, slistlen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)));
}
pub inline fn SSL_CTX_set1_client_sigalgs_list(ctx: anytype, s: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, s)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, s)));
}
pub inline fn SSL_set1_client_sigalgs(s: anytype, slist: anytype, slistlen: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CLIENT_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_CLIENT_SIGALGS, slistlen, (@import("std").meta.cast([*c]c_int, slist)));
}
pub inline fn SSL_set1_client_sigalgs_list(s: anytype, str: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CLIENT_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, str)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_CLIENT_SIGALGS_LIST, 0, (@import("std").meta.cast([*c]u8, str)));
}
pub inline fn SSL_get0_certificate_types(s: anytype, clist: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_CLIENT_CERT_TYPES, 0, (@import("std").meta.cast([*c]u8, clist)))) {
    return SSL_ctrl(s, SSL_CTRL_GET_CLIENT_CERT_TYPES, 0, (@import("std").meta.cast([*c]u8, clist)));
}
pub inline fn SSL_CTX_set1_client_certificate_types(ctx: anytype, clist: anytype, clistlen: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_CERT_TYPES, clistlen, (@import("std").meta.cast([*c]u8, clist)))) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_CLIENT_CERT_TYPES, clistlen, (@import("std").meta.cast([*c]u8, clist)));
}
pub inline fn SSL_set1_client_certificate_types(s: anytype, clist: anytype, clistlen: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_CLIENT_CERT_TYPES, clistlen, (@import("std").meta.cast([*c]u8, clist)))) {
    return SSL_ctrl(s, SSL_CTRL_SET_CLIENT_CERT_TYPES, clistlen, (@import("std").meta.cast([*c]u8, clist)));
}
pub inline fn SSL_get_signature_nid(s: anytype, pn: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_SIGNATURE_NID, 0, pn)) {
    return SSL_ctrl(s, SSL_CTRL_GET_SIGNATURE_NID, 0, pn);
}
pub inline fn SSL_get_peer_signature_nid(s: anytype, pn: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_PEER_SIGNATURE_NID, 0, pn)) {
    return SSL_ctrl(s, SSL_CTRL_GET_PEER_SIGNATURE_NID, 0, pn);
}
pub inline fn SSL_get_peer_tmp_key(s: anytype, pk: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_PEER_TMP_KEY, 0, pk)) {
    return SSL_ctrl(s, SSL_CTRL_GET_PEER_TMP_KEY, 0, pk);
}
pub inline fn SSL_get_tmp_key(s: anytype, pk: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_TMP_KEY, 0, pk)) {
    return SSL_ctrl(s, SSL_CTRL_GET_TMP_KEY, 0, pk);
}
pub inline fn SSL_get0_raw_cipherlist(s: anytype, plst: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_RAW_CIPHERLIST, 0, plst)) {
    return SSL_ctrl(s, SSL_CTRL_GET_RAW_CIPHERLIST, 0, plst);
}
pub inline fn SSL_get0_ec_point_formats(s: anytype, plst: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_EC_POINT_FORMATS, 0, plst)) {
    return SSL_ctrl(s, SSL_CTRL_GET_EC_POINT_FORMATS, 0, plst);
}
pub inline fn SSL_CTX_set_min_proto_version(ctx: anytype, version: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL);
}
pub inline fn SSL_CTX_set_max_proto_version(ctx: anytype, version: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL);
}
pub inline fn SSL_CTX_get_min_proto_version(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL);
}
pub inline fn SSL_CTX_get_max_proto_version(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL);
}
pub inline fn SSL_set_min_proto_version(s: anytype, version: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL);
}
pub inline fn SSL_set_max_proto_version(s: anytype, version: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL);
}
pub inline fn SSL_get_min_proto_version(s: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL);
}
pub inline fn SSL_get_max_proto_version(s: anytype) @TypeOf(SSL_ctrl(s, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)) {
    return SSL_ctrl(s, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL);
}
pub const SSL_CTRL_GET_SERVER_TMP_KEY = SSL_CTRL_GET_PEER_TMP_KEY;
pub inline fn SSL_get_server_tmp_key(s: anytype, pk: anytype) @TypeOf(SSL_get_peer_tmp_key(s, pk)) {
    return SSL_get_peer_tmp_key(s, pk);
}
pub const SSL_CTRL_GET_CURVES = SSL_CTRL_GET_GROUPS;
pub const SSL_CTRL_SET_CURVES = SSL_CTRL_SET_GROUPS;
pub const SSL_CTRL_SET_CURVES_LIST = SSL_CTRL_SET_GROUPS_LIST;
pub const SSL_CTRL_GET_SHARED_CURVE = SSL_CTRL_GET_SHARED_GROUP;
pub const SSL_get1_curves = SSL_get1_groups;
pub const SSL_CTX_set1_curves = SSL_CTX_set1_groups;
pub const SSL_CTX_set1_curves_list = SSL_CTX_set1_groups_list;
pub const SSL_set1_curves = SSL_set1_groups;
pub const SSL_set1_curves_list = SSL_set1_groups_list;
pub const SSL_get_shared_curve = SSL_get_shared_group;
pub inline fn SSL_CTX_need_tmp_RSA(ctx: anytype) @TypeOf(0) {
    return 0;
}
pub inline fn SSL_CTX_set_tmp_rsa(ctx: anytype, rsa: anytype) @TypeOf(1) {
    return 1;
}
pub inline fn SSL_need_tmp_RSA(ssl: anytype) @TypeOf(0) {
    return 0;
}
pub inline fn SSL_set_tmp_rsa(ssl: anytype, rsa: anytype) @TypeOf(1) {
    return 1;
}
pub inline fn SSL_CTX_set_ecdh_auto(dummy: anytype, onoff: anytype) @TypeOf(onoff != 0) {
    return onoff != 0;
}
pub inline fn SSL_set_ecdh_auto(dummy: anytype, onoff: anytype) @TypeOf(onoff != 0) {
    return onoff != 0;
}
pub const SSL_SERVERINFOV1 = 1;
pub const SSL_SERVERINFOV2 = 2;
pub const SSL_CLIENT_HELLO_SUCCESS = 1;
pub const SSL_CLIENT_HELLO_ERROR = 0;
pub const SSL_CLIENT_HELLO_RETRY = -1;
pub const SSL_READ_EARLY_DATA_ERROR = 0;
pub const SSL_READ_EARLY_DATA_SUCCESS = 1;
pub const SSL_READ_EARLY_DATA_FINISH = 2;
pub const SSL_EARLY_DATA_NOT_SENT = 0;
pub const SSL_EARLY_DATA_REJECTED = 1;
pub const SSL_EARLY_DATA_ACCEPTED = 2;
pub const SSLv23_method = TLS_method;
pub const SSLv23_server_method = TLS_server_method;
pub const SSLv23_client_method = TLS_client_method;
pub const SSL_get0_session = SSL_get_session;
pub inline fn SSL_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef);
}
pub inline fn SSL_SESSION_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef);
}
pub inline fn SSL_CTX_get_ex_new_index(l: anytype, p: anytype, newf: anytype, dupf: anytype, freef: anytype) @TypeOf(CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef)) {
    return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef);
}
pub inline fn SSL_CTX_sess_set_cache_size(ctx: anytype, t: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SESS_CACHE_SIZE, t, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SESS_CACHE_SIZE, t, NULL);
}
pub inline fn SSL_CTX_sess_get_cache_size(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_SESS_CACHE_SIZE, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_SESS_CACHE_SIZE, 0, NULL);
}
pub inline fn SSL_CTX_set_session_cache_mode(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SESS_CACHE_MODE, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SESS_CACHE_MODE, m, NULL);
}
pub inline fn SSL_CTX_get_session_cache_mode(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_SESS_CACHE_MODE, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_SESS_CACHE_MODE, 0, NULL);
}
pub inline fn SSL_CTX_get_default_read_ahead(ctx: anytype) @TypeOf(SSL_CTX_get_read_ahead(ctx)) {
    return SSL_CTX_get_read_ahead(ctx);
}
pub inline fn SSL_CTX_set_default_read_ahead(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_set_read_ahead(ctx, m)) {
    return SSL_CTX_set_read_ahead(ctx, m);
}
pub inline fn SSL_CTX_get_read_ahead(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_READ_AHEAD, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_READ_AHEAD, 0, NULL);
}
pub inline fn SSL_CTX_set_read_ahead(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_READ_AHEAD, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_READ_AHEAD, m, NULL);
}
pub inline fn SSL_CTX_get_max_cert_list(ctx: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_CERT_LIST, 0, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_CERT_LIST, 0, NULL);
}
pub inline fn SSL_CTX_set_max_cert_list(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_CERT_LIST, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_CERT_LIST, m, NULL);
}
pub inline fn SSL_get_max_cert_list(ssl: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_GET_MAX_CERT_LIST, 0, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_GET_MAX_CERT_LIST, 0, NULL);
}
pub inline fn SSL_set_max_cert_list(ssl: anytype, m: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_MAX_CERT_LIST, m, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_MAX_CERT_LIST, m, NULL);
}
pub inline fn SSL_CTX_set_max_send_fragment(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_SEND_FRAGMENT, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_SEND_FRAGMENT, m, NULL);
}
pub inline fn SSL_set_max_send_fragment(ssl: anytype, m: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_MAX_SEND_FRAGMENT, m, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_MAX_SEND_FRAGMENT, m, NULL);
}
pub inline fn SSL_CTX_set_split_send_fragment(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SPLIT_SEND_FRAGMENT, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_SPLIT_SEND_FRAGMENT, m, NULL);
}
pub inline fn SSL_set_split_send_fragment(ssl: anytype, m: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_SPLIT_SEND_FRAGMENT, m, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_SPLIT_SEND_FRAGMENT, m, NULL);
}
pub inline fn SSL_CTX_set_max_pipelines(ctx: anytype, m: anytype) @TypeOf(SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PIPELINES, m, NULL)) {
    return SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PIPELINES, m, NULL);
}
pub inline fn SSL_set_max_pipelines(ssl: anytype, m: anytype) @TypeOf(SSL_ctrl(ssl, SSL_CTRL_SET_MAX_PIPELINES, m, NULL)) {
    return SSL_ctrl(ssl, SSL_CTRL_SET_MAX_PIPELINES, m, NULL);
}
pub inline fn SSL_cache_hit(s: anytype) @TypeOf(SSL_session_reused(s)) {
    return SSL_session_reused(s);
}
pub inline fn SSL_disable_ct(s: anytype) @TypeOf((@import("std").meta.cast(c_void, SSL_set_validation_callback(s, NULL, NULL)))) {
    return (@import("std").meta.cast(c_void, SSL_set_validation_callback(s, NULL, NULL)));
}
pub inline fn SSL_CTX_disable_ct(ctx: anytype) @TypeOf((@import("std").meta.cast(c_void, SSL_CTX_set_validation_callback(ctx, NULL, NULL)))) {
    return (@import("std").meta.cast(c_void, SSL_CTX_set_validation_callback(ctx, NULL, NULL)));
}
pub const SSL_SECOP_OTHER_TYPE = 0xffff0000;
pub const SSL_SECOP_OTHER_NONE = 0;
pub const SSL_SECOP_OTHER_CIPHER = 1 << 16;
pub const SSL_SECOP_OTHER_CURVE = 2 << 16;
pub const SSL_SECOP_OTHER_DH = 3 << 16;
pub const SSL_SECOP_OTHER_PKEY = 4 << 16;
pub const SSL_SECOP_OTHER_SIGALG = 5 << 16;
pub const SSL_SECOP_OTHER_CERT = 6 << 16;
pub const SSL_SECOP_PEER = 0x1000;
pub const SSL_SECOP_CIPHER_SUPPORTED = 1 | SSL_SECOP_OTHER_CIPHER;
pub const SSL_SECOP_CIPHER_SHARED = 2 | SSL_SECOP_OTHER_CIPHER;
pub const SSL_SECOP_CIPHER_CHECK = 3 | SSL_SECOP_OTHER_CIPHER;
pub const SSL_SECOP_CURVE_SUPPORTED = 4 | SSL_SECOP_OTHER_CURVE;
pub const SSL_SECOP_CURVE_SHARED = 5 | SSL_SECOP_OTHER_CURVE;
pub const SSL_SECOP_CURVE_CHECK = 6 | SSL_SECOP_OTHER_CURVE;
pub const SSL_SECOP_TMP_DH = 7 | SSL_SECOP_OTHER_PKEY;
pub const SSL_SECOP_VERSION = 9 | SSL_SECOP_OTHER_NONE;
pub const SSL_SECOP_TICKET = 10 | SSL_SECOP_OTHER_NONE;
pub const SSL_SECOP_SIGALG_SUPPORTED = 11 | SSL_SECOP_OTHER_SIGALG;
pub const SSL_SECOP_SIGALG_SHARED = 12 | SSL_SECOP_OTHER_SIGALG;
pub const SSL_SECOP_SIGALG_CHECK = 13 | SSL_SECOP_OTHER_SIGALG;
pub const SSL_SECOP_SIGALG_MASK = 14 | SSL_SECOP_OTHER_SIGALG;
pub const SSL_SECOP_COMPRESSION = 15 | SSL_SECOP_OTHER_NONE;
pub const SSL_SECOP_EE_KEY = 16 | SSL_SECOP_OTHER_CERT;
pub const SSL_SECOP_CA_KEY = 17 | SSL_SECOP_OTHER_CERT;
pub const SSL_SECOP_CA_MD = 18 | SSL_SECOP_OTHER_CERT;
pub const SSL_SECOP_PEER_EE_KEY = SSL_SECOP_EE_KEY | SSL_SECOP_PEER;
pub const SSL_SECOP_PEER_CA_KEY = SSL_SECOP_CA_KEY | SSL_SECOP_PEER;
pub const SSL_SECOP_PEER_CA_MD = SSL_SECOP_CA_MD | SSL_SECOP_PEER;
pub const OPENSSL_INIT_NO_LOAD_SSL_STRINGS = @as(c_long, 0x00100000);
pub const OPENSSL_INIT_LOAD_SSL_STRINGS = @as(c_long, 0x00200000);
pub const OPENSSL_INIT_SSL_DEFAULT = OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS;
pub const SSL_TICKET_FATAL_ERR_MALLOC = 0;
pub const SSL_TICKET_FATAL_ERR_OTHER = 1;
pub const SSL_TICKET_NONE = 2;
pub const SSL_TICKET_EMPTY = 3;
pub const SSL_TICKET_NO_DECRYPT = 4;
pub const SSL_TICKET_SUCCESS = 5;
pub const SSL_TICKET_SUCCESS_RENEW = 6;
pub const SSL_TICKET_RETURN_ABORT = 0;
pub const SSL_TICKET_RETURN_IGNORE = 1;
pub const SSL_TICKET_RETURN_IGNORE_RENEW = 2;
pub const SSL_TICKET_RETURN_USE = 3;
pub const SSL_TICKET_RETURN_USE_RENEW = 4;
pub inline fn ERR_PUT_error(a: anytype, b: anytype, c: anytype, d: anytype, e: anytype) @TypeOf(ERR_put_error(a, b, c, d, e)) {
    return ERR_put_error(a, b, c, d, e);
}
pub const _ERRNO_H = 1;
pub const _BITS_ERRNO_H = 1;
pub const EPERM = 1;
pub const ENOENT = 2;
pub const ESRCH = 3;
pub const EINTR = 4;
pub const EIO = 5;
pub const ENXIO = 6;
pub const E2BIG = 7;
pub const ENOEXEC = 8;
pub const EBADF = 9;
pub const ECHILD = 10;
pub const EAGAIN = 11;
pub const ENOMEM = 12;
pub const EACCES = 13;
pub const EFAULT = 14;
pub const ENOTBLK = 15;
pub const EBUSY = 16;
pub const EEXIST = 17;
pub const EXDEV = 18;
pub const ENODEV = 19;
pub const ENOTDIR = 20;
pub const EISDIR = 21;
pub const EINVAL = 22;
pub const ENFILE = 23;
pub const EMFILE = 24;
pub const ENOTTY = 25;
pub const ETXTBSY = 26;
pub const EFBIG = 27;
pub const ENOSPC = 28;
pub const ESPIPE = 29;
pub const EROFS = 30;
pub const EMLINK = 31;
pub const EPIPE = 32;
pub const EDOM = 33;
pub const ERANGE = 34;
pub const EDEADLK = 35;
pub const ENAMETOOLONG = 36;
pub const ENOLCK = 37;
pub const ENOSYS = 38;
pub const ENOTEMPTY = 39;
pub const ELOOP = 40;
pub const EWOULDBLOCK = EAGAIN;
pub const ENOMSG = 42;
pub const EIDRM = 43;
pub const ECHRNG = 44;
pub const EL2NSYNC = 45;
pub const EL3HLT = 46;
pub const EL3RST = 47;
pub const ELNRNG = 48;
pub const EUNATCH = 49;
pub const ENOCSI = 50;
pub const EL2HLT = 51;
pub const EBADE = 52;
pub const EBADR = 53;
pub const EXFULL = 54;
pub const ENOANO = 55;
pub const EBADRQC = 56;
pub const EBADSLT = 57;
pub const EDEADLOCK = EDEADLK;
pub const EBFONT = 59;
pub const ENOSTR = 60;
pub const ENODATA = 61;
pub const ETIME = 62;
pub const ENOSR = 63;
pub const ENONET = 64;
pub const ENOPKG = 65;
pub const EREMOTE = 66;
pub const ENOLINK = 67;
pub const EADV = 68;
pub const ESRMNT = 69;
pub const ECOMM = 70;
pub const EPROTO = 71;
pub const EMULTIHOP = 72;
pub const EDOTDOT = 73;
pub const EBADMSG = 74;
pub const EOVERFLOW = 75;
pub const ENOTUNIQ = 76;
pub const EBADFD = 77;
pub const EREMCHG = 78;
pub const ELIBACC = 79;
pub const ELIBBAD = 80;
pub const ELIBSCN = 81;
pub const ELIBMAX = 82;
pub const ELIBEXEC = 83;
pub const EILSEQ = 84;
pub const ERESTART = 85;
pub const ESTRPIPE = 86;
pub const EUSERS = 87;
pub const ENOTSOCK = 88;
pub const EDESTADDRREQ = 89;
pub const EMSGSIZE = 90;
pub const EPROTOTYPE = 91;
pub const ENOPROTOOPT = 92;
pub const EPROTONOSUPPORT = 93;
pub const ESOCKTNOSUPPORT = 94;
pub const EOPNOTSUPP = 95;
pub const EPFNOSUPPORT = 96;
pub const EAFNOSUPPORT = 97;
pub const EADDRINUSE = 98;
pub const EADDRNOTAVAIL = 99;
pub const ENETDOWN = 100;
pub const ENETUNREACH = 101;
pub const ENETRESET = 102;
pub const ECONNABORTED = 103;
pub const ECONNRESET = 104;
pub const ENOBUFS = 105;
pub const EISCONN = 106;
pub const ENOTCONN = 107;
pub const ESHUTDOWN = 108;
pub const ETOOMANYREFS = 109;
pub const ETIMEDOUT = 110;
pub const ECONNREFUSED = 111;
pub const EHOSTDOWN = 112;
pub const EHOSTUNREACH = 113;
pub const EALREADY = 114;
pub const EINPROGRESS = 115;
pub const ESTALE = 116;
pub const EUCLEAN = 117;
pub const ENOTNAM = 118;
pub const ENAVAIL = 119;
pub const EISNAM = 120;
pub const EREMOTEIO = 121;
pub const EDQUOT = 122;
pub const ENOMEDIUM = 123;
pub const EMEDIUMTYPE = 124;
pub const ECANCELED = 125;
pub const ENOKEY = 126;
pub const EKEYEXPIRED = 127;
pub const EKEYREVOKED = 128;
pub const EKEYREJECTED = 129;
pub const EOWNERDEAD = 130;
pub const ENOTRECOVERABLE = 131;
pub const ERFKILL = 132;
pub const EHWPOISON = 133;
pub const ENOTSUP = EOPNOTSUPP;
pub const ERR_TXT_MALLOCED = 0x01;
pub const ERR_TXT_STRING = 0x02;
pub const ERR_FLAG_MARK = 0x01;
pub const ERR_FLAG_CLEAR = 0x02;
pub const ERR_NUM_ERRORS = 16;
pub const ERR_LIB_NONE = 1;
pub const ERR_LIB_SYS = 2;
pub const ERR_LIB_BN = 3;
pub const ERR_LIB_RSA = 4;
pub const ERR_LIB_DH = 5;
pub const ERR_LIB_EVP = 6;
pub const ERR_LIB_BUF = 7;
pub const ERR_LIB_OBJ = 8;
pub const ERR_LIB_PEM = 9;
pub const ERR_LIB_DSA = 10;
pub const ERR_LIB_X509 = 11;
pub const ERR_LIB_ASN1 = 13;
pub const ERR_LIB_CONF = 14;
pub const ERR_LIB_CRYPTO = 15;
pub const ERR_LIB_EC = 16;
pub const ERR_LIB_SSL = 20;
pub const ERR_LIB_BIO = 32;
pub const ERR_LIB_PKCS7 = 33;
pub const ERR_LIB_X509V3 = 34;
pub const ERR_LIB_PKCS12 = 35;
pub const ERR_LIB_RAND = 36;
pub const ERR_LIB_DSO = 37;
pub const ERR_LIB_ENGINE = 38;
pub const ERR_LIB_OCSP = 39;
pub const ERR_LIB_UI = 40;
pub const ERR_LIB_COMP = 41;
pub const ERR_LIB_ECDSA = 42;
pub const ERR_LIB_ECDH = 43;
pub const ERR_LIB_OSSL_STORE = 44;
pub const ERR_LIB_FIPS = 45;
pub const ERR_LIB_CMS = 46;
pub const ERR_LIB_TS = 47;
pub const ERR_LIB_HMAC = 48;
pub const ERR_LIB_CT = 50;
pub const ERR_LIB_ASYNC = 51;
pub const ERR_LIB_KDF = 52;
pub const ERR_LIB_SM2 = 53;
pub const ERR_LIB_USER = 128;
pub inline fn SYSerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_SYS, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_SYS, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn BNerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_BN, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_BN, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn RSAerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_RSA, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_RSA, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn DHerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_DH, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_DH, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn EVPerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_EVP, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_EVP, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn BUFerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_BUF, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_BUF, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OBJerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_OBJ, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_OBJ, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn PEMerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_PEM, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_PEM, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn DSAerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_DSA, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_DSA, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn X509err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_X509, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_X509, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ASN1err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_ASN1, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_ASN1, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn CONFerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_CONF, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_CONF, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn CRYPTOerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_CRYPTO, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_CRYPTO, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ECerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_EC, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_EC, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn SSLerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_SSL, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_SSL, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn BIOerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_BIO, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_BIO, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn PKCS7err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_PKCS7, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_PKCS7, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn X509V3err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_X509V3, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_X509V3, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn PKCS12err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_PKCS12, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_PKCS12, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn RANDerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_RAND, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_RAND, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn DSOerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_DSO, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_DSO, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ENGINEerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_ENGINE, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_ENGINE, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OCSPerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_OCSP, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_OCSP, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn UIerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_UI, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_UI, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn COMPerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_COMP, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_COMP, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ECDSAerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_ECDSA, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_ECDSA, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ECDHerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_ECDH, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_ECDH, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn OSSL_STOREerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_OSSL_STORE, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_OSSL_STORE, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn FIPSerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_FIPS, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_FIPS, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn CMSerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_CMS, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_CMS, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn TSerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_TS, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_TS, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn HMACerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_HMAC, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_HMAC, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn CTerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_CT, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_CT, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ASYNCerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_ASYNC, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_ASYNC, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn KDFerr(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_KDF, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_KDF, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn SM2err(f: anytype, r: anytype) @TypeOf(ERR_PUT_error(ERR_LIB_SM2, f, r, OPENSSL_FILE, OPENSSL_LINE)) {
    return ERR_PUT_error(ERR_LIB_SM2, f, r, OPENSSL_FILE, OPENSSL_LINE);
}
pub inline fn ERR_PACK(l: anytype, f: anytype, r: anytype) @TypeOf(((((@import("std").meta.cast(c_uint, l)) & 0x0FF) << @as(c_long, 24)) | (((@import("std").meta.cast(c_uint, f)) & 0xFFF) << @as(c_long, 12))) | ((@import("std").meta.cast(c_uint, r)) & 0xFFF)) {
    return ((((@import("std").meta.cast(c_uint, l)) & 0x0FF) << @as(c_long, 24)) | (((@import("std").meta.cast(c_uint, f)) & 0xFFF) << @as(c_long, 12))) | ((@import("std").meta.cast(c_uint, r)) & 0xFFF);
}
pub inline fn ERR_GET_LIB(l: anytype) @TypeOf((@import("std").meta.cast(c_int, (l >> @as(c_long, 24)) & @as(c_long, 0x0FF)))) {
    return (@import("std").meta.cast(c_int, (l >> @as(c_long, 24)) & @as(c_long, 0x0FF)));
}
pub inline fn ERR_GET_FUNC(l: anytype) @TypeOf((@import("std").meta.cast(c_int, (l >> @as(c_long, 12)) & @as(c_long, 0xFFF)))) {
    return (@import("std").meta.cast(c_int, (l >> @as(c_long, 12)) & @as(c_long, 0xFFF)));
}
pub inline fn ERR_GET_REASON(l: anytype) @TypeOf((@import("std").meta.cast(c_int, l & @as(c_long, 0xFFF)))) {
    return (@import("std").meta.cast(c_int, l & @as(c_long, 0xFFF)));
}
pub inline fn ERR_FATAL_ERROR(l: anytype) @TypeOf((@import("std").meta.cast(c_int, l & ERR_R_FATAL))) {
    return (@import("std").meta.cast(c_int, l & ERR_R_FATAL));
}
pub const SYS_F_FOPEN = 1;
pub const SYS_F_CONNECT = 2;
pub const SYS_F_GETSERVBYNAME = 3;
pub const SYS_F_SOCKET = 4;
pub const SYS_F_IOCTLSOCKET = 5;
pub const SYS_F_BIND = 6;
pub const SYS_F_LISTEN = 7;
pub const SYS_F_ACCEPT = 8;
pub const SYS_F_WSASTARTUP = 9;
pub const SYS_F_OPENDIR = 10;
pub const SYS_F_FREAD = 11;
pub const SYS_F_GETADDRINFO = 12;
pub const SYS_F_GETNAMEINFO = 13;
pub const SYS_F_SETSOCKOPT = 14;
pub const SYS_F_GETSOCKOPT = 15;
pub const SYS_F_GETSOCKNAME = 16;
pub const SYS_F_GETHOSTBYNAME = 17;
pub const SYS_F_FFLUSH = 18;
pub const SYS_F_OPEN = 19;
pub const SYS_F_CLOSE = 20;
pub const SYS_F_IOCTL = 21;
pub const SYS_F_STAT = 22;
pub const SYS_F_FCNTL = 23;
pub const SYS_F_FSTAT = 24;
pub const ERR_R_SYS_LIB = ERR_LIB_SYS;
pub const ERR_R_BN_LIB = ERR_LIB_BN;
pub const ERR_R_RSA_LIB = ERR_LIB_RSA;
pub const ERR_R_DH_LIB = ERR_LIB_DH;
pub const ERR_R_EVP_LIB = ERR_LIB_EVP;
pub const ERR_R_BUF_LIB = ERR_LIB_BUF;
pub const ERR_R_OBJ_LIB = ERR_LIB_OBJ;
pub const ERR_R_PEM_LIB = ERR_LIB_PEM;
pub const ERR_R_DSA_LIB = ERR_LIB_DSA;
pub const ERR_R_X509_LIB = ERR_LIB_X509;
pub const ERR_R_ASN1_LIB = ERR_LIB_ASN1;
pub const ERR_R_EC_LIB = ERR_LIB_EC;
pub const ERR_R_BIO_LIB = ERR_LIB_BIO;
pub const ERR_R_PKCS7_LIB = ERR_LIB_PKCS7;
pub const ERR_R_X509V3_LIB = ERR_LIB_X509V3;
pub const ERR_R_ENGINE_LIB = ERR_LIB_ENGINE;
pub const ERR_R_UI_LIB = ERR_LIB_UI;
pub const ERR_R_ECDSA_LIB = ERR_LIB_ECDSA;
pub const ERR_R_OSSL_STORE_LIB = ERR_LIB_OSSL_STORE;
pub const ERR_R_NESTED_ASN1_ERROR = 58;
pub const ERR_R_MISSING_ASN1_EOS = 63;
pub const ERR_R_FATAL = 64;
pub const ERR_R_MALLOC_FAILURE = 1 | ERR_R_FATAL;
pub const ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 2 | ERR_R_FATAL;
pub const ERR_R_PASSED_NULL_PARAMETER = 3 | ERR_R_FATAL;
pub const ERR_R_INTERNAL_ERROR = 4 | ERR_R_FATAL;
pub const ERR_R_DISABLED = 5 | ERR_R_FATAL;
pub const ERR_R_INIT_FAIL = 6 | ERR_R_FATAL;
pub const ERR_R_PASSED_INVALID_ARGUMENT = 7;
pub const ERR_R_OPERATION_FAIL = 8 | ERR_R_FATAL;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const random_data = struct_random_data;
pub const drand48_data = struct_drand48_data;
pub const tm = struct_tm;
pub const itimerspec = struct_itimerspec;
pub const sigevent = struct_sigevent;
pub const __locale_data = struct___locale_data;
pub const __locale_struct = struct___locale_struct;
pub const _G_fpos_t = struct__G_fpos_t;
pub const _G_fpos64_t = struct__G_fpos64_t;
pub const _IO_marker = struct__IO_marker;
pub const _IO_codecvt = struct__IO_codecvt;
pub const _IO_wide_data = struct__IO_wide_data;
pub const _IO_FILE = struct__IO_FILE;
pub const __va_list_tag = struct___va_list_tag;
pub const stack_st = struct_stack_st;
pub const stack_st_OPENSSL_STRING = struct_stack_st_OPENSSL_STRING;
pub const stack_st_OPENSSL_CSTRING = struct_stack_st_OPENSSL_CSTRING;
pub const stack_st_OPENSSL_BLOCK = struct_stack_st_OPENSSL_BLOCK;
pub const asn1_string_st = struct_asn1_string_st;
pub const asn1_object_st = struct_asn1_object_st;
pub const ASN1_ITEM_st = struct_ASN1_ITEM_st;
pub const asn1_pctx_st = struct_asn1_pctx_st;
pub const asn1_sctx_st = struct_asn1_sctx_st;
pub const dane_st = struct_dane_st;
pub const bio_st = struct_bio_st;
pub const bignum_st = struct_bignum_st;
pub const bignum_ctx = struct_bignum_ctx;
pub const bn_blinding_st = struct_bn_blinding_st;
pub const bn_mont_ctx_st = struct_bn_mont_ctx_st;
pub const bn_recp_ctx_st = struct_bn_recp_ctx_st;
pub const bn_gencb_st = struct_bn_gencb_st;
pub const buf_mem_st = struct_buf_mem_st;
pub const evp_cipher_st = struct_evp_cipher_st;
pub const evp_cipher_ctx_st = struct_evp_cipher_ctx_st;
pub const evp_md_st = struct_evp_md_st;
pub const evp_md_ctx_st = struct_evp_md_ctx_st;
pub const evp_pkey_st = struct_evp_pkey_st;
pub const evp_pkey_asn1_method_st = struct_evp_pkey_asn1_method_st;
pub const evp_pkey_method_st = struct_evp_pkey_method_st;
pub const evp_pkey_ctx_st = struct_evp_pkey_ctx_st;
pub const evp_Encode_Ctx_st = struct_evp_Encode_Ctx_st;
pub const hmac_ctx_st = struct_hmac_ctx_st;
pub const dh_st = struct_dh_st;
pub const dh_method = struct_dh_method;
pub const dsa_st = struct_dsa_st;
pub const dsa_method = struct_dsa_method;
pub const rsa_st = struct_rsa_st;
pub const rsa_meth_st = struct_rsa_meth_st;
pub const rsa_pss_params_st = struct_rsa_pss_params_st;
pub const ec_key_st = struct_ec_key_st;
pub const ec_key_method_st = struct_ec_key_method_st;
pub const rand_meth_st = struct_rand_meth_st;
pub const rand_drbg_st = struct_rand_drbg_st;
pub const ssl_dane_st = struct_ssl_dane_st;
pub const x509_st = struct_x509_st;
pub const X509_algor_st = struct_X509_algor_st;
pub const X509_crl_st = struct_X509_crl_st;
pub const x509_crl_method_st = struct_x509_crl_method_st;
pub const x509_revoked_st = struct_x509_revoked_st;
pub const X509_name_st = struct_X509_name_st;
pub const X509_pubkey_st = struct_X509_pubkey_st;
pub const x509_store_st = struct_x509_store_st;
pub const x509_store_ctx_st = struct_x509_store_ctx_st;
pub const x509_object_st = struct_x509_object_st;
pub const x509_lookup_st = struct_x509_lookup_st;
pub const x509_lookup_method_st = struct_x509_lookup_method_st;
pub const X509_VERIFY_PARAM_st = struct_X509_VERIFY_PARAM_st;
pub const x509_sig_info_st = struct_x509_sig_info_st;
pub const pkcs8_priv_key_info_st = struct_pkcs8_priv_key_info_st;
pub const v3_ext_ctx = struct_v3_ext_ctx;
pub const conf_st = struct_conf_st;
pub const ossl_init_settings_st = struct_ossl_init_settings_st;
pub const ui_st = struct_ui_st;
pub const ui_method_st = struct_ui_method_st;
pub const engine_st = struct_engine_st;
pub const ssl_st = struct_ssl_st;
pub const ssl_ctx_st = struct_ssl_ctx_st;
pub const comp_ctx_st = struct_comp_ctx_st;
pub const comp_method_st = struct_comp_method_st;
pub const X509_POLICY_NODE_st = struct_X509_POLICY_NODE_st;
pub const X509_POLICY_LEVEL_st = struct_X509_POLICY_LEVEL_st;
pub const X509_POLICY_TREE_st = struct_X509_POLICY_TREE_st;
pub const X509_POLICY_CACHE_st = struct_X509_POLICY_CACHE_st;
pub const AUTHORITY_KEYID_st = struct_AUTHORITY_KEYID_st;
pub const DIST_POINT_st = struct_DIST_POINT_st;
pub const ISSUING_DIST_POINT_st = struct_ISSUING_DIST_POINT_st;
pub const NAME_CONSTRAINTS_st = struct_NAME_CONSTRAINTS_st;
pub const stack_st_void = struct_stack_st_void;
pub const crypto_ex_data_st = struct_crypto_ex_data_st;
pub const ocsp_req_ctx_st = struct_ocsp_req_ctx_st;
pub const ocsp_response_st = struct_ocsp_response_st;
pub const ocsp_responder_id_st = struct_ocsp_responder_id_st;
pub const sct_st = struct_sct_st;
pub const sct_ctx_st = struct_sct_ctx_st;
pub const ctlog_st = struct_ctlog_st;
pub const ctlog_store_st = struct_ctlog_store_st;
pub const ct_policy_eval_ctx_st = struct_ct_policy_eval_ctx_st;
pub const ossl_store_info_st = struct_ossl_store_info_st;
pub const ossl_store_search_st = struct_ossl_store_search_st;
pub const crypto_threadid_st = struct_crypto_threadid_st;
pub const sched_param = struct_sched_param;
pub const _pthread_cleanup_buffer = struct__pthread_cleanup_buffer;
pub const __pthread_cleanup_frame = struct___pthread_cleanup_frame;
pub const __jmp_buf_tag = struct___jmp_buf_tag;
pub const bio_addr_st = union_bio_addr_st;
pub const bio_addrinfo_st = struct_bio_addrinfo_st;
pub const bio_method_st = struct_bio_method_st;
pub const stack_st_BIO = struct_stack_st_BIO;
pub const BIO_hostserv_priorities = enum_BIO_hostserv_priorities;
pub const BIO_lookup_type = enum_BIO_lookup_type;
pub const hostent = struct_hostent;
pub const BIO_sock_info_u = union_BIO_sock_info_u;
pub const BIO_sock_info_type = enum_BIO_sock_info_type;
pub const stack_st_X509_ALGOR = struct_stack_st_X509_ALGOR;
pub const ASN1_ENCODING_st = struct_ASN1_ENCODING_st;
pub const asn1_string_table_st = struct_asn1_string_table_st;
pub const stack_st_ASN1_STRING_TABLE = struct_stack_st_ASN1_STRING_TABLE;
pub const ASN1_TEMPLATE_st = struct_ASN1_TEMPLATE_st;
pub const ASN1_TLC_st = struct_ASN1_TLC_st;
pub const ASN1_VALUE_st = struct_ASN1_VALUE_st;
pub const stack_st_ASN1_INTEGER = struct_stack_st_ASN1_INTEGER;
pub const stack_st_ASN1_GENERALSTRING = struct_stack_st_ASN1_GENERALSTRING;
pub const stack_st_ASN1_UTF8STRING = struct_stack_st_ASN1_UTF8STRING;
pub const asn1_type_st = struct_asn1_type_st;
pub const stack_st_ASN1_TYPE = struct_stack_st_ASN1_TYPE;
pub const BIT_STRING_BITNAME_st = struct_BIT_STRING_BITNAME_st;
pub const stack_st_ASN1_OBJECT = struct_stack_st_ASN1_OBJECT;
pub const obj_name_st = struct_obj_name_st;
pub const evp_cipher_info_st = struct_evp_cipher_info_st;
pub const ec_method_st = struct_ec_method_st;
pub const ec_group_st = struct_ec_group_st;
pub const ec_point_st = struct_ec_point_st;
pub const ecpk_parameters_st = struct_ecpk_parameters_st;
pub const ec_parameters_st = struct_ec_parameters_st;
pub const ECDSA_SIG_st = struct_ECDSA_SIG_st;
pub const rsa_oaep_params_st = struct_rsa_oaep_params_st;
pub const DSA_SIG_st = struct_DSA_SIG_st;
pub const SHAstate_st = struct_SHAstate_st;
pub const SHA256state_st = struct_SHA256state_st;
pub const SHA512state_st = struct_SHA512state_st;
pub const X509_val_st = struct_X509_val_st;
pub const X509_sig_st = struct_X509_sig_st;
pub const X509_name_entry_st = struct_X509_name_entry_st;
pub const stack_st_X509_NAME_ENTRY = struct_stack_st_X509_NAME_ENTRY;
pub const stack_st_X509_NAME = struct_stack_st_X509_NAME;
pub const X509_extension_st = struct_X509_extension_st;
pub const stack_st_X509_EXTENSION = struct_stack_st_X509_EXTENSION;
pub const x509_attributes_st = struct_x509_attributes_st;
pub const stack_st_X509_ATTRIBUTE = struct_stack_st_X509_ATTRIBUTE;
pub const X509_req_info_st = struct_X509_req_info_st;
pub const X509_req_st = struct_X509_req_st;
pub const x509_cert_aux_st = struct_x509_cert_aux_st;
pub const x509_cinf_st = struct_x509_cinf_st;
pub const stack_st_X509 = struct_stack_st_X509;
pub const x509_trust_st = struct_x509_trust_st;
pub const stack_st_X509_TRUST = struct_stack_st_X509_TRUST;
pub const stack_st_X509_REVOKED = struct_stack_st_X509_REVOKED;
pub const X509_crl_info_st = struct_X509_crl_info_st;
pub const stack_st_X509_CRL = struct_stack_st_X509_CRL;
pub const private_key_st = struct_private_key_st;
pub const X509_info_st = struct_X509_info_st;
pub const stack_st_X509_INFO = struct_stack_st_X509_INFO;
pub const Netscape_spkac_st = struct_Netscape_spkac_st;
pub const Netscape_spki_st = struct_Netscape_spki_st;
pub const Netscape_certificate_sequence = struct_Netscape_certificate_sequence;
pub const PBEPARAM_st = struct_PBEPARAM_st;
pub const PBE2PARAM_st = struct_PBE2PARAM_st;
pub const PBKDF2PARAM_st = struct_PBKDF2PARAM_st;
pub const SCRYPT_PARAMS_st = struct_SCRYPT_PARAMS_st;
pub const lhash_node_st = struct_lhash_node_st;
pub const lhash_st = struct_lhash_st;
pub const lh_OPENSSL_STRING_dummy = union_lh_OPENSSL_STRING_dummy;
pub const lhash_st_OPENSSL_STRING = struct_lhash_st_OPENSSL_STRING;
pub const lh_OPENSSL_CSTRING_dummy = union_lh_OPENSSL_CSTRING_dummy;
pub const lhash_st_OPENSSL_CSTRING = struct_lhash_st_OPENSSL_CSTRING;
pub const stack_st_X509_LOOKUP = struct_stack_st_X509_LOOKUP;
pub const stack_st_X509_OBJECT = struct_stack_st_X509_OBJECT;
pub const stack_st_X509_VERIFY_PARAM = struct_stack_st_X509_VERIFY_PARAM;
pub const stack_st_X509_POLICY_NODE = struct_stack_st_X509_POLICY_NODE;
pub const stack_st_POLICYQUALINFO = struct_stack_st_POLICYQUALINFO;
pub const pkcs7_issuer_and_serial_st = struct_pkcs7_issuer_and_serial_st;
pub const pkcs7_signer_info_st = struct_pkcs7_signer_info_st;
pub const stack_st_PKCS7_SIGNER_INFO = struct_stack_st_PKCS7_SIGNER_INFO;
pub const pkcs7_recip_info_st = struct_pkcs7_recip_info_st;
pub const stack_st_PKCS7_RECIP_INFO = struct_stack_st_PKCS7_RECIP_INFO;
pub const pkcs7_st = struct_pkcs7_st;
pub const pkcs7_signed_st = struct_pkcs7_signed_st;
pub const pkcs7_enc_content_st = struct_pkcs7_enc_content_st;
pub const pkcs7_enveloped_st = struct_pkcs7_enveloped_st;
pub const pkcs7_signedandenveloped_st = struct_pkcs7_signedandenveloped_st;
pub const pkcs7_digest_st = struct_pkcs7_digest_st;
pub const pkcs7_encrypted_st = struct_pkcs7_encrypted_st;
pub const stack_st_PKCS7 = struct_stack_st_PKCS7;
pub const async_job_st = struct_async_job_st;
pub const async_wait_ctx_st = struct_async_wait_ctx_st;
pub const stack_st_SCT = struct_stack_st_SCT;
pub const stack_st_CTLOG = struct_stack_st_CTLOG;
pub const tls_session_ticket_ext_st = struct_tls_session_ticket_ext_st;
pub const ssl_method_st = struct_ssl_method_st;
pub const ssl_cipher_st = struct_ssl_cipher_st;
pub const ssl_session_st = struct_ssl_session_st;
pub const tls_sigalgs_st = struct_tls_sigalgs_st;
pub const ssl_conf_ctx_st = struct_ssl_conf_ctx_st;
pub const ssl_comp_st = struct_ssl_comp_st;
pub const stack_st_SSL_CIPHER = struct_stack_st_SSL_CIPHER;
pub const stack_st_SSL_COMP = struct_stack_st_SSL_COMP;
pub const srtp_protection_profile_st = struct_srtp_protection_profile_st;
pub const stack_st_SRTP_PROTECTION_PROFILE = struct_stack_st_SRTP_PROTECTION_PROFILE;
pub const lhash_st_SSL_SESSION = struct_lhash_st_SSL_SESSION;
pub const openssl_ssl_test_functions = struct_openssl_ssl_test_functions;
pub const err_state_st = struct_err_state_st;
pub const ERR_string_data_st = struct_ERR_string_data_st;
pub const lh_ERR_STRING_DATA_dummy = union_lh_ERR_STRING_DATA_dummy;
pub const lhash_st_ERR_STRING_DATA = struct_lhash_st_ERR_STRING_DATA;
